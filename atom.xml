<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TinyChen&#39;s Blog</title>
  
  <subtitle>A mechanic, writer and coder</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tiny777.com/"/>
  <updated>2018-11-09T02:45:43.447Z</updated>
  <id>http://www.tiny777.com/</id>
  
  <author>
    <name>TinyChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu18.04与Win10时间不一致</title>
    <link href="http://www.tiny777.com/2018/11/09/181109UbuntuChangeTime/"/>
    <id>http://www.tiny777.com/2018/11/09/181109UbuntuChangeTime/</id>
    <published>2018-11-08T16:00:00.000Z</published>
    <updated>2018-11-09T02:45:43.447Z</updated>
    
    <content type="html"><![CDATA[<p>最近在安装Ubuntu18.04和win10双系统的时候发现两个系统的时间总是相差八个小时，即win10的时间要比Ubuntu早八个小时，这里介绍一个在Ubuntu下的解决方案。<br><a id="more"></a></p><h1 id="为什么时间会不一致"><a href="#为什么时间会不一致" class="headerlink" title="为什么时间会不一致"></a>为什么时间会不一致</h1><p>在我们电脑的BIOS中，有着一个记录的时间，windows系统会将BIOS中的时间视为本地时间，即你windows中设置为中国地区，那么这个BIOS的时间对于windows来说就是中国时间。</p><p>在Ubuntu中，会将BIOS中的时间视为UTC时间，即Universal Time Coordinated(协调世界时)，而中国这边的时间是UTC+8，即正好相差八个小时。</p><blockquote><p>协调世界时是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。中国大陆采用ISO 8601-1988的《数据元和交换格式信息交换日期和时间表示法》（GB/T 7408-1994）称之为国际协调时间，代替原来的GB/T 7408-1994；中国台湾采用CNS 7648的《资料元及交换格式–资讯交换–日期及时间的表示法》，称之为世界统一时间。</p><p>中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。</p></blockquote><h1 id="如何修改"><a href="#如何修改" class="headerlink" title="如何修改"></a>如何修改</h1><p>此处仅介绍在Ubuntu下的解决方案，因为个人感觉这个方法更简单快捷。</p><p>首先我们把硬件时间（BIOS时间）将默认的UTC改为CST，然后重启，使得两个系统的时间保持一致。</p><pre><code>sudo timedatectl set-local-rtc 1#上述代码中的1改为0即可将硬件时间修改为默认的UTC时间sudo reboot#重启系统使改动生效</code></pre><p>接着我们更新一下系统时间<br>    sudo apt-get install ntpdate</p><pre><code>#这里的操作是安装ntpdate工具sudo ntpdate time.windows.com#使用ntpdate工具从time.windows.com上面同步时间</code></pre><p>最后我们将时间更新到硬件上，以保证重启后改动不会被还原<br>    sudo hwclock –localtime –systohc</p><pre><code>#这里的代码意思是使用hwclock命令将本地时间localtime从sysclock同步到hwclock</code></pre><p><strong>到这里双系统的时间就都正常了。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在安装Ubuntu18.04和win10双系统的时候发现两个系统的时间总是相差八个小时，即win10的时间要比Ubuntu早八个小时，这里介绍一个在Ubuntu下的解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Ubuntu" scheme="http://www.tiny777.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习笔记01——简介与安装</title>
    <link href="http://www.tiny777.com/2018/09/15/180915MySQL01/"/>
    <id>http://www.tiny777.com/2018/09/15/180915MySQL01/</id>
    <published>2018-09-14T16:00:00.000Z</published>
    <updated>2018-09-15T09:05:21.290Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 是最流行的关系型数据库管理系统，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><a id="more"></a><blockquote><p>本文部分参考自菜鸟教程（<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a>)</p></blockquote><h1 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h1><p><strong>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</strong></p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>我们也可以将数据存储在文件中，<strong>但是在文件中读写数据速度相对较慢。</strong></p><p>所以，现在我们使用<strong>关系型数据库管理系统（RDBMS）</strong>来存储和管理的大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><p><strong>RDBMS即关系数据库管理系统(Relational Database Management System)</strong>的特点：</p><ol><li>数据以表格的形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据域</li><li>许多的行和列组成一张表单</li><li>若干的表单组成database</li></ol><h1 id="RDBMS-术语"><a href="#RDBMS-术语" class="headerlink" title="RDBMS 术语"></a>RDBMS 术语</h1><p>在我们开始学习MySQL 数据库前，让我们先了解下RDBMS的一些术语：</p><ul><li><p><strong>数据库：</strong> 数据库是一些关联表的集合。</p></li><li><p><strong>数据表：</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</p></li><li><p><strong>列：</strong> 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</p></li><li><p><strong>行：</strong>一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</p></li><li><p><strong>冗余：</strong> 存储两倍数据，冗余降低了性能，但提高了数据的安全性。</p></li><li><p><strong>主键：</strong>主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</p></li><li><p><strong>外键：</strong>外键用于关联两个表。</p></li><li><p><strong>复合键：</strong>复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</p></li><li><p><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</p></li><li><p><strong>参照完整性：</strong>参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</p></li></ul><h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><ul><li><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，<strong>目前属于 Oracle 公司。</strong></p></li><li><p><strong>MySQL 是一种关联数据库管理系统，</strong>关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p></li><li><p>MySQL 是<strong>开源</strong>的，所以你不需要支付额外的费用。</p></li><li><p>MySQL 使用标准的SQL数据语言形式。</p></li><li><p>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等。</p></li><li><p>MySQL 对PHP有很好的支持。</p></li><li><p><strong>MySQL 支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持4GB，64位系统支持最大的表文件为8TB。</strong></p></li><li><p>MySQL 是可以定制的，<strong>采用了GPL协议</strong>，你可以修改源码来开发自己的 MySQL 系统。</p></li></ul><h1 id="安装MySQL（Windows）"><a href="#安装MySQL（Windows）" class="headerlink" title="安装MySQL（Windows）"></a>安装MySQL（Windows）</h1><h2 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h2><p>MySQL的官方下载地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>我们选择 MySQL Community Server ，然后下方的操作系统选择windows， 接着下载第一个zip压缩包。<img src="http://p95to5vmm.bkt.clouddn.com/MySQL01.png" alt=""></p><p>在随后弹出的页面中，无需登录，点击下方的No thanks，直接下载。<br><img src="http://p95to5vmm.bkt.clouddn.com/MySQL02.png" alt=""></p><p>下载完成后，解压到目录中。我这里选择的解压目录是D盘的MySQL文件夹。</p><p>解压后得到    <strong>D:\MySQL\mysql-8.0.12-winx64</strong> 。</p><h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>在上面我们解压的目录中，新建一个名为 my.ini 的配置文件，下入下列代码，其中两个目录根据自己的实际情况进行修改。</p><pre><code>[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录basedir=D:\\MySQL\\mysql-8.0.12-winx64# 设置mysql数据库的数据的存放目录datadir=D:\\MySQL\\MySQLData# 允许最大连接数max_connections=20# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统max_connect_errors=10# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8</code></pre><p><strong>需要注意的是，设置了mysql数据库的数据的存放目录之后，不需要手动新建该文件夹，否则后续安装可能会出现报错。</strong></p><p>另外，关于目录的路径设置，<a href="https://dev.mysql.com/doc/refman/8.0/en/windows-create-option-file.html" target="_blank" rel="noopener">官方的说明文档中表示：</a></p><blockquote><p>Microsoft Windows path names are specified in option files using (forward) slashes rather than backslashes. If you do use backslashes, double them:</p></blockquote><p><strong>也就是说，请使用双反斜杠\    或者    正斜杠（除法符号）/</strong></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>我们打开<strong>以管理员身份打开cmd</strong>（powershell也可以），使用cd命令切换目录：</p><pre><code>cd D:\MySQL\mysql-8.0.12-winx64\bin</code></pre><p>接着初始化数据库</p><pre><code>mysqld --initialize-insecure --user=mysql</code></pre><p>然后安装</p><pre><code>mysqld --install</code></pre><p>接着启动</p><pre><code>net start mysql</code></pre><p>然后修改密码，出现输入密码时回车便能进入mysql配置页面<br>    mysql -u root -p </p><pre><code>alter user &apos;root&apos;@&apos;localhost&apos;IDENTIFIED BY &apos;YourNewPassword&apos;;</code></pre><p><strong>注意引号里面的替换为自己的密码，需要满足大小写字母+数字+特殊符号的要求。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/MySQL05.png" alt=""></p><h1 id="MySQL服务的启动、停止与卸载"><a href="#MySQL服务的启动、停止与卸载" class="headerlink" title="MySQL服务的启动、停止与卸载"></a>MySQL服务的启动、停止与卸载</h1><p><strong>在 Windows 命令提示符下运行:</strong></p><ul><li><p>启动: net start MySQL</p></li><li><p>停止: net stop MySQL</p></li><li><p>卸载: sc delete MySQL</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 是最流行的关系型数据库管理系统，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://www.tiny777.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="数据库" scheme="http://www.tiny777.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://www.tiny777.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3B+打造多媒体中心</title>
    <link href="http://www.tiny777.com/2018/09/10/180910RaspiMultiMediaCentre/"/>
    <id>http://www.tiny777.com/2018/09/10/180910RaspiMultiMediaCentre/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2018-09-10T09:20:29.317Z</updated>
    
    <content type="html"><![CDATA[<p>小七比较喜欢在宿舍和室友一起看电影或听音乐，且对画质和音质要求较高，一般都是观看1080P的蓝光REMUX电影（约30G一部）和听无损音质的音乐（30M一首），且观看设备较多（电视盒子、电脑、手机），再加上平时需要下载电影且自己有写博客的习惯，博客和一些其他的重要资料也需要备份，因此决定使用树莓派3B+、一块移动硬盘和一个路由器搭建一个宿舍多媒体中心来满足这些需求。</p><a id="more"></a><h1 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h1><h2 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h2><p><strong>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</strong></p><p>换言之，使用Samba可以在局域网内实现文件的共享操作，有些放在移动硬盘里面的文件需要用的时候就不用再插移动硬盘，在网上邻居处拷贝即可。</p><h2 id="miniDLNA"><a href="#miniDLNA" class="headerlink" title="miniDLNA"></a>miniDLNA</h2><p><strong>DLNA的全称是DIGITAL LIVING NETWORK ALLIANCE(数字生活网络联盟)，DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。</strong></p><p>所以，其选择的各种技术和协议都是当前所应用很广泛的技术和协议。miniDLNA可以实现音乐视频图片的局域网跨设备共享，且目前大多数智能手机、平板和电视均支持DLNA协议，在树莓派上安装miniDLNA服务后即可让处在同一局域网下的设备能轻松访问到树莓派上的影音资源。</p><h2 id="下载机"><a href="#下载机" class="headerlink" title="下载机"></a>下载机</h2><p><strong>Transmission全称TransmissionBittorrent，由C开发而成（Mac OS上用的是Objective-C），硬件资源消耗极少，界面极度精简。</strong>支持包括Linux、BSD、Solaris、Mac OS X等多种操作系统，以及Networked Media Tank、WD MyBook、ReadyNAS、D-Link DNS-323 &amp; CH3SNAS、Synology等多种设备。支持GTK+、命令行、Web等多种界面。</p><p><strong>Aria2支持Http、FTP、磁力链接和BT下载，可以和Transimission互补。</strong></p><h2 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h2><p>数据备份是一个好习惯，但是总是会有遗忘或者是疏漏的情况出现，因此我们可以利用树莓派来实现自动备份。<strong>首先可以创建powershell命令实现备份功能，再另存为bat脚本文件，最后利用windows自带的定时任务功能和linux的定时执行命令操作来实现文件自动备份到树莓派上的操作。</strong></p><h2 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h2><p>作为长时间运行的多媒体中心，树莓派的运行状态不能忽视，因此我们可以<strong>使用LCD1602显示屏</strong>连接树莓派，显示一些必要的信息来监控它的运行状态。<strong>（CPU，GPU, RAM, IP, TIME）</strong></p><h1 id="安装操作"><a href="#安装操作" class="headerlink" title="安装操作"></a>安装操作</h1><h2 id="Samba-1"><a href="#Samba-1" class="headerlink" title="Samba"></a>Samba</h2><h3 id="安装ntfs-3g"><a href="#安装ntfs-3g" class="headerlink" title="安装ntfs-3g"></a>安装ntfs-3g</h3><p>树莓派接上移动硬盘后，会自动挂载到/media目录下，但是由于我的硬盘是ntfs格式，在树莓系统下只能读不能写，因此我需要安装ntfs-3g服务实现对移动硬盘的写操作，然后再设置开机自动挂载移动硬盘。</p><pre><code>sudo apt-get install ntfs-3g#安装ntfs -3g服务sudo mkdir /home/pi/share#创建用于挂载移动硬盘的目录</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image001.png" alt=""></p><pre><code>sudo umont /dev/sda1#有些系统会自动挂载，因此先使用umont命令取消挂载移动硬盘#后面的/dev/sda1是硬盘在此系统中对应的编号，可以使用 df -h命令查看，或者直接使用硬盘名代替sudo mount -t ntfs-3g /dev/sda1 /home/pi/share#使用ntfs -3g挂载硬盘到指定目录sudo chmod 777 /home/pi/share#使用chmod命令赋予目录读写权限sudo chmod 777 /home/pi#目录的上级目录也需要赋予读写权限</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image002.png" alt=""></p><pre><code>sudo vim /etc/fstab#编辑/etc/fstab文件实现开机自动挂载硬盘#在文件的最后一行加入下列代码/dev/sda1   /home/pi/share  ntfsdefaults0   0#第一列是挂载的硬盘设备名或者uuid#第二列是挂载的目录#第三列是硬盘的文件系统类型#第四列是文件系统的参数，defaults表示同时具有rw, suid, dev, exec, auto, nouser, async等默认参数的设置#第五列是能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1，0表示不备份#第六列是是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。0表示不要检验</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image003.png" alt=""></p><h3 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h3><pre><code>sudo apt-get update#首先更新一下系统源sudo apt-get install samba samba-common-bin#安装samba-common版本#samba-common：这个套件则主要提供了 SAMBA 的主要设定档(smb.conf) 、 smb.conf 语法检验的测试程序 ( testparm )等等；</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image004.png" alt=""></p><pre><code>sudo vim /etc/samba/smb.conf#编辑配置文件，在文件中加入下列内容</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image005.png" alt=""></p><pre><code>security = share#开放security权限等级为share#share---不需要提供用户名和密码。#user----需要提供用户名和密码，而且身份验证由 samba server 负责。#server--需要提供用户名和密码，可指定其他机器(winNT/2000/XP)或另一台 samba server作身份验证。#domain--需要提供用户名和密码，指定winNT/2000/XP域服务器作身份验证。[share] #share为开启共享后的文件夹名comment = samba share   #comment为备注，帮助理解这个共享文件夹path = /home/pi/share   #path为共享的文件目录路径valid user = pi root   #vaild users-----设定只有此名单内的用户才能访问共享资源(拒绝优先)(用户名/@组名)，这里设置为pi和root两个public = yes#public----------是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用)browseable = yes#browseable------是yes/否no在浏览资源中显示共享目录，若为否则必须指定共享路径才能存取writable = yes  #writable--------是yes/否no不以只读方式共享当与read only发生冲突时，无视read only</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image006.png" alt=""></p><pre><code>sudo smbpasswd -a pi#新建一个名为pi的用户，然后会提示输入两次密码#smbpasswd命令的一些用法如下#-a：向smbpasswd文件中添加用户；#-c：指定samba的配置文件；#-x：从smbpasswd文件中删除用户；#-d：在smbpasswd文件中禁用指定的用户；#-e：在smbpasswd文件中激活指定的用户；#-n：将指定的用户的密码置空。#设置完用户名和密码后输入下列命令激活用户sudo smbpasswd -e pi</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image007.png" alt=""></p><pre><code>#然后重启samba服务即可生效sudo /etc/init.d/samba restart</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image008.png" alt=""></p><pre><code>#最后还是要设置开机启动sudo vim /etc/rc.local#在下面添加如下代码sudo /etc/init.d/samba restart</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image009.png" alt=""></p><h3 id="添加网络映射"><a href="#添加网络映射" class="headerlink" title="添加网络映射"></a>添加网络映射</h3><p>添加网络映射主要是方便访问，可以将共享的samba文件夹添加到我的电脑中。首先右键我的电脑，点击添加网络映射/Add a network location<img src="http://p95to5vmm.bkt.clouddn.com/image010.png" alt=""></p><p>输入共享的文件夹路径，然后命名，最后即可完成。<img src="http://p95to5vmm.bkt.clouddn.com/image011.png" alt=""><img src="http://p95to5vmm.bkt.clouddn.com/image012.png" alt=""><img src="http://p95to5vmm.bkt.clouddn.com/image013.png" alt=""></p><h2 id="miniDLNA-1"><a href="#miniDLNA-1" class="headerlink" title="miniDLNA"></a>miniDLNA</h2><h3 id="安装miniDLNA"><a href="#安装miniDLNA" class="headerlink" title="安装miniDLNA"></a>安装miniDLNA</h3><pre><code>sudo apt-get update#先更新一下安装源sudo apt-get install minidlna#安装minidlna</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image014.png" alt=""></p><pre><code>#安装完后编辑配置文件sudo vim /etc/minidlna.confmedia_dir=A,/home/pi/share/Music#A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件 media_dir=P,/home/pi/share/Picture  #P表示图片文件  media_dir=V,/home/pi/share/Video#V表示视频文件db_dir=/home/pi/share/dlnadb#配置minidlna的数库数据的存放目录 log_dir=/home/pi/share/dlnalog  #配置日志目录 </code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image015.png" alt=""></p><pre><code>#然后建立对应的文件夹并给予对应的权限sudo mkdir /home/pi/share/Musicsudo mkdir /home/pi/share/Picturesudo mkdir /home/pi/share/Videosudo mkdir /home/pi/share/dlnadbsudo mkdir /home/pi/share/dlnalogsudo chmod 777 /home/pi/share/Musicsudo chmod 777 /home/pi/share/Picturesudo chmod 777 /home/pi/share/Videosudo chmod 777 /home/pi/share/dlnadbsudo chmod 777 /home/pi/share/dlnalog#使用下列命令重启dlna服务sudo /etc/init.d/minidlna restart#再使用下列命令查看dlna状态sudo /etc/init.d/minidlna status</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image016.png" alt=""></p><pre><code>#最后修改开机启动文件sudo vim /etc/rc.local#在后面加入以下代码sudo /etc/init.d/minidlna restart</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image017.png" alt=""></p><h3 id="添加DLNA设备"><a href="#添加DLNA设备" class="headerlink" title="添加DLNA设备"></a>添加DLNA设备</h3><p>点击我的电脑左上方的流媒体<br><img src="http://p95to5vmm.bkt.clouddn.com/image018.png" alt=""></p><p>系统会自动搜索到局域网中的支持DLNA的设备，点击添加，等待添加完成。<br><img src="http://p95to5vmm.bkt.clouddn.com/image019.png" alt=""></p><p>打开支持DLNA或者是流媒体播放的软件，就能看到树莓派中的流媒体文件。<br><img src="http://p95to5vmm.bkt.clouddn.com/image020.png" alt=""></p><h2 id="下载机-1"><a href="#下载机-1" class="headerlink" title="下载机"></a>下载机</h2><h3 id="安装transmission"><a href="#安装transmission" class="headerlink" title="安装transmission"></a>安装transmission</h3><pre><code>sudo apt-get update#先更新一下安装源sudo apt-get install transmission-daemon#然后安装transmission</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image021.png" alt=""></p><pre><code>#创建目录用于存放下载文件sudo mkdir /home/pi/share/Downloads/Incomplete  #存放未下载完成的文件sudo mkdir /home/pi/share/Downloads/complete#存放下载完成的文件#更改文件所属组别sudo chgrp debian-transmission /home/pi/share/Downloads/Incompletesudo chgrp debian-transmission /home/pi/share/Downloads/complete#赋予文件夹权限sudo chmod 777 /home/pi/share/Downloads/Incomplete sudo chmod 777 /home/pi/share/Downloads/complete </code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image022.png" alt=""></p><pre><code>#修改配置文件sudo vim /etc/transmission-daemon/settings.json#找到以下项进行修改#已完成的下载目录&quot;download-dir&quot;: &quot;/home/pi/share/Downloads/complete&quot;,#未完成的下载目录&quot;incomplete-dir&quot;: &quot;/home/pi/share/Downloads/Incomplete&quot;,#允许Web访问的白名单地址,这里要根据自己的路由器实际IP地址进行修改&quot;rpc-whitelist&quot;: &quot;192.168.8.*&quot;,#登录的用户名“rpc-username”: “yourname”,#登录的密码“rpc-password”: “yoursecretcode”,#最后依次执行下面的两条命令完成重启服务sudo service transmission-daemon reloadsudo service transmission-daemon restart</code></pre><p>最后我们访问树莓派的IP再加上9091端口就能登录到下载界面。<img src="http://p95to5vmm.bkt.clouddn.com/image023.png" alt=""><img src="http://p95to5vmm.bkt.clouddn.com/image024.png" alt=""><img src="http://p95to5vmm.bkt.clouddn.com/image025.png" alt=""></p><h3 id="安装Aria2"><a href="#安装Aria2" class="headerlink" title="安装Aria2"></a>安装Aria2</h3><h4 id="安装Aria2-1"><a href="#安装Aria2-1" class="headerlink" title="安装Aria2"></a>安装Aria2</h4><pre><code>sudo apt-get update#更新一下安装源sudo apt-get install aria2#安装aria2</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image026.png" alt=""></p><pre><code>#在/etc目录下创建aria2目录用来存放配置文件：sudo mkdir /etc/aria2#创建空白的aria2.session文件：sudo touch /etc/aria2/aria2.session#创建配置文件sudo vim /etc/aria2/aria2.conf</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image027.png" alt=""></p><pre><code>#在该文件中输入以下内容：dir=/home/pi/share/Downloads#设置文件下载的存放目录 disable-ipv6=true #打开rpc的目的是为了给web管理端用 enable-rpc=true rpc-allow-origin-all=true rpc-listen-all=true #rpc-listen-port=6800 continue=true input-file=/etc/aria2/aria2.session save-session=/etc/aria2/aria2.session max-concurrent-downloads=3#设置最大同时下载的任务数</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image028.png" alt=""></p><pre><code>#启动aria2sudo aria2c --conf-path=/etc/aria2/aria2.conf#如果没有提示任何错误信息，那就按ctrl+c停止上面的语句，转为后台运行：sudo aria2c --conf-path=/etc/aria2/aria2.conf －D#同时其此句写到开机启动中，编辑/etc/rc.localsudo vim /etc/rc.local#在文件的最后面添加这一行sudo aria2c --conf-path=/etc/aria2/aria2.conf －D</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image029.png" alt=""></p><h4 id="安装appache"><a href="#安装appache" class="headerlink" title="安装appache"></a>安装appache</h4><pre><code>#安装appachsudo apt-get install apache2#修改/var/www/html的权限chmod 777 /var/www/html</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image030.png" alt=""><br><img src="http://p95to5vmm.bkt.clouddn.com/image031.png" alt=""></p><h4 id="安装yaaw"><a href="#安装yaaw" class="headerlink" title="安装yaaw"></a>安装yaaw</h4><p>从<a href="https://github.com/binux/yaaw下载yaaw，点击右下角的Download" target="_blank" rel="noopener">https://github.com/binux/yaaw下载yaaw，点击右下角的Download</a> Zip, 下载后将解压后的文件夹内容拷贝到/var/www/html文件夹下。这时在浏览器内输入树莓派的IP，如果出现以下页面，则表示已经正常工作了。</p><p><strong>点击左上方的add就可以进行下载。</strong><br><img src="http://p95to5vmm.bkt.clouddn.com/image032.png" alt=""></p><h2 id="自动备份-1"><a href="#自动备份-1" class="headerlink" title="自动备份"></a>自动备份</h2><h3 id="创建自动执行文件"><a href="#创建自动执行文件" class="headerlink" title="创建自动执行文件"></a>创建自动执行文件</h3><p>使用记事本新建一个文件，里面输入下列代码，然后保存并更改文件名后缀为bat执行文件。</p><pre><code>@echo offecho Backuping D:\MyBlog\source\_posts---------&gt;192.168.8.106\share\Backupxcopy &quot;D:\MyBlog\source\_posts&quot; &quot;\\RASPBERRYPI\share\Backup&quot; /e/I/d/h/r/yexit</code></pre><p>其中xcopy指令后两个路径分别为需要备份的文件夹路径和用于存放备份的文件夹路径，其余参数说明如下：</p><p><strong>/e：拷贝所有子目录，包括空子目录；</strong></p><p><strong>/I： 如果目标文件或目录不存在且拷贝的文件数多于一，则假设目标为目录；</strong></p><p><strong>/d：只拷贝文件日期与在目标文件后的文件（即修改过的源文件）</strong></p><p><strong>/h：同时拷贝隐藏文件和系统文件</strong></p><p><strong>/r：拷贝并覆盖只读文件</strong></p><p><strong>/y： 复制文件审核设置（不显示已有文件覆盖确认）</strong></p><p>以上参数可以根据需要添加，推荐都加上最好。</p><h3 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h3><p><strong>然后我们打开”控制面板”—“计划任务”添加计划任务，计划任务里的执行目标为该批处理文件，设定在什么时候执行则由个人决定。</strong></p><p>执行效果示例如下：</p><p><img src="http://p95to5vmm.bkt.clouddn.com/image033.png" alt=""></p><h2 id="状态监控-1"><a href="#状态监控-1" class="headerlink" title="状态监控"></a>状态监控</h2><p>按照针脚跳线连接好LCD1602和树莓派并调节好LCD1602的对比度，使用python编写代码，控制1602输出相关信息，具体代码如下：</p><p><strong>将下面这个文件保存为lcd1602.py</strong></p><pre><code>#!/usr/bin/python## based on code from lrvick and LiquidCrystal# lrvic - https://github.com/lrvick/raspi-hd44780/blob/master/hd44780.py# LiquidCrystal - https://github.com/arduino/Arduino/blob/master/libraries/LiquidCrystal/LiquidCrystal.cpp#from time import sleepclass lcd1602:# commandsLCD_CLEARDISPLAY= 0x01LCD_RETURNHOME  = 0x02LCD_ENTRYMODESET= 0x04LCD_DISPLAYCONTROL  = 0x08LCD_CURSORSHIFT = 0x10LCD_FUNCTIONSET = 0x20LCD_SETCGRAMADDR= 0x40LCD_SETDDRAMADDR= 0x80# flags for display entry modeLCD_ENTRYRIGHT  = 0x00LCD_ENTRYLEFT   = 0x02LCD_ENTRYSHIFTINCREMENT = 0x01LCD_ENTRYSHIFTDECREMENT = 0x00# flags for display on/off controlLCD_DISPLAYON   = 0x04LCD_DISPLAYOFF  = 0x00LCD_CURSORON= 0x02LCD_CURSOROFF   = 0x00LCD_BLINKON = 0x01LCD_BLINKOFF= 0x00# flags for display/cursor shiftLCD_DISPLAYMOVE = 0x08LCD_CURSORMOVE  = 0x00# flags for display/cursor shiftLCD_DISPLAYMOVE = 0x08LCD_CURSORMOVE  = 0x00LCD_MOVERIGHT   = 0x04LCD_MOVELEFT= 0x00# flags for function setLCD_8BITMODE= 0x10LCD_4BITMODE= 0x00LCD_2LINE   = 0x08LCD_1LINE   = 0x00LCD_5x10DOTS= 0x04LCD_5x8DOTS = 0x00def __init__(self, pin_rs=14, pin_e=15, pins_db=[17, 18, 27, 22], GPIO = None):# Emulate the old behavior of using RPi.GPIO if we haven&apos;t been given# an explicit GPIO interface to useif not GPIO:import RPi.GPIO as GPIOself.GPIO = GPIOself.pin_rs = pin_rsself.pin_e = pin_eself.pins_db = pins_dbself.GPIO.setmode(GPIO.BCM)self.GPIO.setwarnings(False)self.GPIO.setup(self.pin_e, GPIO.OUT)self.GPIO.setup(self.pin_rs, GPIO.OUT)for pin in self.pins_db:self.GPIO.setup(pin, GPIO.OUT)self.write4bits(0x33) # initializationself.write4bits(0x32) # initializationself.write4bits(0x28) # 2 line 5x7 matrixself.write4bits(0x0C) # turn cursor off 0x0E to enable cursorself.write4bits(0x06) # shift cursor rightself.displaycontrol = self.LCD_DISPLAYON | self.LCD_CURSOROFF | self.LCD_BLINKOFFself.displayfunction = self.LCD_4BITMODE | self.LCD_1LINE | self.LCD_5x8DOTSself.displayfunction |= self.LCD_2LINE&quot;&quot;&quot; Initialize to default text direction (for romance languages) &quot;&quot;&quot;self.displaymode =  self.LCD_ENTRYLEFT | self.LCD_ENTRYSHIFTDECREMENTself.write4bits(self.LCD_ENTRYMODESET | self.displaymode) #  set the entry modeself.clear()def begin(self, cols, lines):if (lines &gt; 1):self.numlines = linesself.displayfunction |= self.LCD_2LINEself.currline = 0def home(self):self.write4bits(self.LCD_RETURNHOME) # set cursor position to zeroself.delayMicroseconds(3000) # this command takes a long time!def clear(self):self.write4bits(self.LCD_CLEARDISPLAY) # command to clear displayself.delayMicroseconds(3000)# 3000 microsecond sleep, clearing the display takes a long timedef setCursor(self, col, row):self.row_offsets = [ 0x00, 0x40, 0x14, 0x54 ]if ( row &gt; self.numlines ): row = self.numlines - 1 # we count rows starting w/0self.write4bits(self.LCD_SETDDRAMADDR | (col + self.row_offsets[row]))def noDisplay(self): &quot;&quot;&quot; Turn the display off (quickly) &quot;&quot;&quot;self.displaycontrol &amp;= ~self.LCD_DISPLAYONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def display(self):&quot;&quot;&quot; Turn the display on (quickly) &quot;&quot;&quot;self.displaycontrol |= self.LCD_DISPLAYONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def noCursor(self):&quot;&quot;&quot; Turns the underline cursor on/off &quot;&quot;&quot;self.displaycontrol &amp;= ~self.LCD_CURSORONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def cursor(self):&quot;&quot;&quot; Cursor On &quot;&quot;&quot;self.displaycontrol |= self.LCD_CURSORONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def noBlink(self):&quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;self.displaycontrol &amp;= ~self.LCD_BLINKONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def noBlink(self):&quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;self.displaycontrol &amp;= ~self.LCD_BLINKONself.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)def DisplayLeft(self):&quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVELEFT)def scrollDisplayRight(self):&quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVERIGHT);def leftToRight(self):&quot;&quot;&quot; This is for text that flows Left to Right &quot;&quot;&quot;self.displaymode |= self.LCD_ENTRYLEFTself.write4bits(self.LCD_ENTRYMODESET | self.displaymode);def rightToLeft(self):&quot;&quot;&quot; This is for text that flows Right to Left &quot;&quot;&quot;self.displaymode &amp;= ~self.LCD_ENTRYLEFTself.write4bits(self.LCD_ENTRYMODESET | self.displaymode)def autoscroll(self):&quot;&quot;&quot; This will &apos;right justify&apos; text from the cursor &quot;&quot;&quot;self.displaymode |= self.LCD_ENTRYSHIFTINCREMENTself.write4bits(self.LCD_ENTRYMODESET | self.displaymode)def noAutoscroll(self): &quot;&quot;&quot; This will &apos;left justify&apos; text from the cursor &quot;&quot;&quot;self.displaymode &amp;= ~self.LCD_ENTRYSHIFTINCREMENTself.write4bits(self.LCD_ENTRYMODESET | self.displaymode)def write4bits(self, bits, char_mode=False):&quot;&quot;&quot; Send command to LCD &quot;&quot;&quot;self.delayMicroseconds(1000) # 1000 microsecond sleepbits=bin(bits)[2:].zfill(8)self.GPIO.output(self.pin_rs, char_mode)for pin in self.pins_db:self.GPIO.output(pin, False)for i in range(4):if bits[i] == &quot;1&quot;:self.GPIO.output(self.pins_db[::-1][i], True)self.pulseEnable()for pin in self.pins_db:self.GPIO.output(pin, False)for i in range(4,8):if bits[i] == &quot;1&quot;:self.GPIO.output(self.pins_db[::-1][i-4], True)self.pulseEnable()def delayMicroseconds(self, microseconds):seconds = microseconds / float(1000000) # divide microseconds by 1 million for secondssleep(seconds)def pulseEnable(self):self.GPIO.output(self.pin_e, False)self.delayMicroseconds(1)   # 1 microsecond pause - enable pulse must be &gt; 450ns self.GPIO.output(self.pin_e, True)self.delayMicroseconds(1)   # 1 microsecond pause - enable pulse must be &gt; 450ns self.GPIO.output(self.pin_e, False)self.delayMicroseconds(1)   # commands need &gt; 37us to settledef message(self, text):&quot;&quot;&quot; Send string to LCD. Newline wraps to second line&quot;&quot;&quot;for char in text:if char == &apos;\n&apos;:self.write4bits(0xC0) # next lineelse:self.write4bits(ord(char),True)if __name__ == &apos;__main__&apos;:lcd = lcd1602()lcd.clear()lcd.message(&quot;hello world!&quot;)</code></pre><p><strong>再将这个文件保存为1602.py</strong></p><pre><code>#!/usr/bin/pythonfrom lcd1602 import *from datetime import *import commandsdef get_cpu_temp():tmp = open(&apos;/sys/class/thermal/thermal_zone0/temp&apos;)cpu = tmp.read()tmp.close()return &apos;{:.2f}&apos;.format( float(cpu)/1000 ) + &apos; C&apos;def get_gpu_temp():tmp = commands.getoutput(&apos;vcgencmd measure_temp|awk -F= \&apos;{print $2}\&apos;&apos;).replace(&apos;\&apos;C&apos;,&apos;&apos;)gpu = float(tmp)return &apos;{:.2f}&apos;.format( gpu ) + &apos; C&apos;def get_time_now():return datetime.now().strftime(&apos;%H:%M:%S\n   %Y-%m-%d&apos;)def get_ip_info():ip= commands.getoutput(&apos;ifconfig eth0 | grep inet | awk \&apos;{ print $2 }\&apos; | awk \&apos;NR==1\&apos;&apos;)return &apos;Ethernet IP:\n&apos; + ip def get_mem_info():total= commands.getoutput(&apos;free -m|grep Mem:|awk \&apos;{print $2}\&apos;&apos;)  free= commands.getoutput(&apos;free -m|grep Mem:|awk \&apos;{print $4}\&apos;&apos;)return &apos;MEM:\n&apos; + free +&apos;/&apos;+ total +&apos;M&apos;lcd = lcd1602()lcd.clear()if __name__ == &apos;__main__&apos;:while(1):lcd.clear()lcd.message( get_ip_info() )sleep(5)lcd.clear()lcd.message( get_time_now() )sleep(5)lcd.clear()lcd.message( get_mem_info() )sleep(5)lcd.clear()lcd.message( &apos;CPU: &apos; + get_cpu_temp()+&apos;\n&apos; )lcd.message( &apos;GPU: &apos; + get_gpu_temp() )sleep(5)</code></pre><p><strong>最后将两个文件保存到同一个目录下面，然后编辑文件设置开机启动即可让LCD1602循环显示信息。</strong></p><p><strong>我将这两个文件保存到/home/pi/1602目录下</strong></p><pre><code>#编辑配置文件sudo vim /etc/rc.local#将此命令添加到文件最后sudo python /home/pi/1602/1602.py</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/image034.png" alt=""></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p><strong>重启之后就可以尽情地享用树莓派打造的多媒体中心了，虽然树莓派3B+只有USB2.0接口，但是只要搭配上百兆lan口的路由器，局域网内流畅观看40G左右大小的一部电影还是毫无问题的。</strong></p><p>如果有更高的需求，还是建议上更好的路由器和NAS吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小七比较喜欢在宿舍和室友一起看电影或听音乐，且对画质和音质要求较高，一般都是观看1080P的蓝光REMUX电影（约30G一部）和听无损音质的音乐（30M一首），且观看设备较多（电视盒子、电脑、手机），再加上平时需要下载电影且自己有写博客的习惯，博客和一些其他的重要资料也需要备份，因此决定使用树莓派3B+、一块移动硬盘和一个路由器搭建一个宿舍多媒体中心来满足这些需求。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="树莓派" scheme="http://www.tiny777.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="多媒体" scheme="http://www.tiny777.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Win10下安装Ubuntu双系统</title>
    <link href="http://www.tiny777.com/2018/08/17/180817UbuntuInstall/"/>
    <id>http://www.tiny777.com/2018/08/17/180817UbuntuInstall/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2018-08-22T07:58:02.014Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu18.04发布了很长一段时间了，基本上系统本身也趋于稳定，那么我们现在来尝试一下在已经存在win10系统的情况下安装Ubuntu18.04。本文使用的是单硬盘+GPT分区表配置方案，也是目前的主流方案。<br><a id="more"></a></p><h1 id="下载Ubuntu18-04及相关工具"><a href="#下载Ubuntu18-04及相关工具" class="headerlink" title="下载Ubuntu18.04及相关工具"></a>下载Ubuntu18.04及相关工具</h1><h2 id="下载Ubuntu"><a href="#下载Ubuntu" class="headerlink" title="下载Ubuntu"></a>下载Ubuntu</h2><p>Ubuntu已经有了中文官网，而且在国内也能正常访问，因此下载相对简单。需要注意的是，<strong>Ubuntu18.04只有64位的版本。</strong></p><p>这是下载链接：        <a href="http://releases.ubuntu.com/18.04/" target="_blank" rel="noopener">http://releases.ubuntu.com/18.04/</a></p><p>▼我们下载图中的第一个后缀为desktop-amd64的iso镜像文件。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%281%29.png" alt=""></p><h2 id="下载UltraISO"><a href="#下载UltraISO" class="headerlink" title="下载UltraISO"></a>下载UltraISO</h2><p>使用搜索引擎搜索下载UltraISO并安装，关于UltraISO的使用可以参考一下小七之前发过的文章<a href="http://tiny777.com/2018/03/18/180318DouBootUdisk/" target="_blank" rel="noopener">（双启动U盘）</a>。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%282%29.png" alt=""></p><h2 id="准备U盘和硬盘分区"><a href="#准备U盘和硬盘分区" class="headerlink" title="准备U盘和硬盘分区"></a>准备U盘和硬盘分区</h2><p>准备一个8G左右的U盘即可，USB3.0最好，没有的话2.0的U盘也可以。</p><p><strong>硬盘上需要划分出一块空白空间，最少应该要有20G左右，小七这里划分了50G左右的空间。如果只是想尝试一下Ubuntu的话，预留20到30G是比较合适的。</strong></p><p>具体的划分空间操作可以使用windows系统自带的磁盘管理进行压缩操作，也可以使用DiskGenius进行分区，操作十分简单，这里不再赘述。</p><h1 id="刻录安装U盘"><a href="#刻录安装U盘" class="headerlink" title="刻录安装U盘"></a>刻录安装U盘</h1><p>▼如图所示，打开UltraISO后，<strong>点击左上角的文件-&gt;打开，选择刚刚下载好的ISO镜像文件。</strong><img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%283%29.png" alt=""></p><p>▼再点击<strong>上方菜单栏的启动-&gt;写入硬盘，</strong>硬盘驱动器要选择对应的U盘，不能选错，然后点击<strong>便捷启动-&gt;写入新的驱动器引导扇区-&gt;Syslinux</strong>。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%284%29.png" alt=""></p><p>▼接下来点击写入，就会对U盘进行格式化并将ISO文件刻录到U盘里面。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%285%29.png" alt=""></p><h1 id="进入安装界面"><a href="#进入安装界面" class="headerlink" title="进入安装界面"></a>进入安装界面</h1><p>刻录完成之后，我们<strong>重启电脑进入BIOS或者是快捷启动菜单选择启动项，</strong>一般来说都是ESC/F1/F2/F8/F9/F11/F12等按键，具体会因笔记本的型号不同或是台式机的主板不同而不同，<strong>进入之后我们选择对应的UEFI启动项，名称应该是对应的U盘型号。</strong><img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%286%29.png" alt=""></p><blockquote><p>小七注：有些电脑可能需要关闭BIOS设置中的Security Boot选项才能顺利使用U盘启动。</p></blockquote><p>▼到这里我们选择Try Ubuntu without install，这样可以先看一下Ubuntu的界面UI和各种操作，当然也可以直接选择下面的Install Ubuntu。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%287%29.png" alt=""></p><p>▼接下来就进入到了Ubuntu的界面，这里除了还没有对应的Ubuntu硬盘分区之外，其他的基本没有太大差别，我们点击桌面的Install Ubuntu 18.04.1LTS进行安装。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%288%29.png" alt=""></p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p><strong>接下来到分区之前都是一些简单的设置，我们根据实际需要选择即可。</strong></p><h2 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h2><p>▼语言选择中文<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%289%29.png" alt=""></p><h2 id="键盘设置"><a href="#键盘设置" class="headerlink" title="键盘设置"></a>键盘设置</h2><p>▼键盘布局选择汉语<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2810%29.png" alt=""></p><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><p>▼WiFi暂时先不要连接<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2811%29.png" alt=""></p><h2 id="系统安装分区"><a href="#系统安装分区" class="headerlink" title="系统安装分区"></a>系统安装分区</h2><p>▼<strong>安装类型选择其他选项</strong><img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2812%29.png" alt=""></p><p>▼如图所示，硬盘上的分区多数是NTFS分区，这是windows系统使用的分区，而上方的EFI分区则是使用UEFI+GPT分区表模式下产生的用于记录系统引导文件的分区<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2813%29.png" alt=""></p><p>一般来说，Ubuntu的安装分区可以分为三种情况：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><strong>简单粗暴，只分一个    / （主分区），将所有的空间全部分到这个分区里面。</strong></p><p>这种方案比较适合刚入门Ubuntu的萌新，想先体验上手一下Ubuntu，不需要担心分区的设置合理情况。</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p><strong>分两个，Swap交换分区和/主分区，swap分区一般根据内存大小来分，剩下的全部给/主分区</strong></p><p><strong>Swap交换分区其实就是虚拟内存分区</strong>，如果电脑内存比较小（小于8G）而且平时需要用到较多内存的话可以划分大一点（4G左右），如果平时内存足够用可以划分小一点，几百M到一两G都是没问题的。</p><p>有兴趣的同学可以点击这里跳转到小七之前的博客了解一下。<a href="http://tiny777.com/2017/05/04/170504PageFiles/" target="_blank" rel="noopener">（虚拟内存）</a></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p><strong>分四个，/boot引导分区、/home用户分区、swap交换分区和 / 主分区</strong><br><strong>/boot（引导分区）：</strong>相当于windows的efi分区，大小设置为200M即可，也可以更大一点；</p><p><strong>/（主分区）：</strong>用于存放Ubuntu系统，相当于windows的C盘，一般来说10到15G就够了。</p><p><strong>Swap(交换分区）：</strong>虚拟内存分区，大小参看第二种分法。</p><p><strong>/home（用户分区）：</strong>存储用户的各种数据，剩下的硬盘空间有多大就分多大给这个分区</p><p>这里小七选择第二种分区方案，一来是因为小七这里只划了50G来安装Ubuntu，硬盘本身的空间就不大，分太多区不太好；二来就是小七自己也没有什么分区的习惯（windows下也只是分了两个盘）。<br>▼如图所示，给交换分区（Swap）分2G（这台电脑的内存是16G，不需要分太大的交换空间）<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2814%29.png" alt=""></p><p>▼如图所示，剩下的空间全部分给    /    主分区<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2816%29.png" alt=""><img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2817%29.png" alt=""></p><p>▼确认无误后点击确认。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2818%29.png" alt=""></p><h2 id="设置区域"><a href="#设置区域" class="headerlink" title="设置区域"></a>设置区域</h2><p>▼设置区域，选择中国，默认城市是上海。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2819%29.png" alt=""></p><h2 id="设置用户名"><a href="#设置用户名" class="headerlink" title="设置用户名"></a>设置用户名</h2><p>▼设置用户名和密码，也可以不设置，但是最好还是设置一下，一些超级用户操作需要输入密码解锁权限，没有密码的话会比较麻烦。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2820%29.png" alt=""></p><p>▼接下来就静静地等待安装完成。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2821%29.png" alt=""></p><p>▼安装完成后会提示重启进入系统。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2822%29.png" alt=""></p><h1 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h1><p>▼重启后我们再进入启动选项可以看到Ubuntu已经在默认的第一个启动项中，如果平时使用windows比较多的可以把第一个改回windows。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2823%29.png" alt=""></p><p>▼如图所示即可进入Ubuntu系统，下面的第三个就是windows系统。<img src="http://p95to5vmm.bkt.clouddn.com/UbuntuInstall%20%2824%29.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu18.04发布了很长一段时间了，基本上系统本身也趋于稳定，那么我们现在来尝试一下在已经存在win10系统的情况下安装Ubuntu18.04。本文使用的是单硬盘+GPT分区表配置方案，也是目前的主流方案。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="操作系统" scheme="http://www.tiny777.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Ubuntu" scheme="http://www.tiny777.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>硬盘RaidOn模式无损转换为AHCI模式</title>
    <link href="http://www.tiny777.com/2018/08/14/180814RaidOn2AHCI/"/>
    <id>http://www.tiny777.com/2018/08/14/180814RaidOn2AHCI/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-14T14:53:14.683Z</updated>
    
    <content type="html"><![CDATA[<p>有些电脑的硬盘出厂模式就是RaidOn,RAID模式对于混合硬盘来说有一定的好处，但是对于单固态来说还是AHCI更为方便一些。今天在装Ubuntu的时候发现安装程序不认RaidOn模式的硬盘，只能改成AHCI模式。</p><a id="more"></a><p><strong>如果直接在BIOS中更改硬盘模式为AHCI，则会出现无法进入系统的情况，因此我们需要使用安全启动模式。</strong></p><h1 id="打开安全启动模式"><a href="#打开安全启动模式" class="headerlink" title="打开安全启动模式"></a>打开安全启动模式</h1><p>同时按下win+R按键，输入msconfig：<br><img src="http://p95to5vmm.bkt.clouddn.com/RaidOn2AHCI%20%281%29.png" alt=""></p><p>打开配置菜单如下图所示，点击boot，勾选safe boot，选择minimal。<br><img src="http://p95to5vmm.bkt.clouddn.com/RaidOn2AHCI%20%282%29.png" alt=""></p><p>点击OK，然后重新启动系统。<br><img src="http://p95to5vmm.bkt.clouddn.com/RaidOn2AHCI%20%283%29.png" alt=""></p><h1 id="更改BIOS中硬盘模式"><a href="#更改BIOS中硬盘模式" class="headerlink" title="更改BIOS中硬盘模式"></a>更改BIOS中硬盘模式</h1><p>进入BIOS，更改硬盘模式为AHCI，点击确定。<br><img src="http://p95to5vmm.bkt.clouddn.com/RaidOn2AHCI%20%284%29.png" alt=""></p><h1 id="关闭安全启动模式"><a href="#关闭安全启动模式" class="headerlink" title="关闭安全启动模式"></a>关闭安全启动模式</h1><p>此时重启完成进入电脑是安全模式，重复第一步，取消勾选。<br><img src="http://p95to5vmm.bkt.clouddn.com/RaidOn2AHCI%20%285%29.png" alt=""></p><p>点击OK，再次重启即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些电脑的硬盘出厂模式就是RaidOn,RAID模式对于混合硬盘来说有一定的好处，但是对于单固态来说还是AHCI更为方便一些。今天在装Ubuntu的时候发现安装程序不认RaidOn模式的硬盘，只能改成AHCI模式。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="硬盘" scheme="http://www.tiny777.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
      <category term="硬件" scheme="http://www.tiny777.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio配置</title>
    <link href="http://www.tiny777.com/2018/08/02/180802AndroidStudio/"/>
    <id>http://www.tiny777.com/2018/08/02/180802AndroidStudio/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2018-08-03T19:14:29.550Z</updated>
    
    <content type="html"><![CDATA[<p>(多图预警！！！)Android Studio作为谷歌官方的安卓开发工具，配置上并不算太难，但是有些地方需要额外注意一下。<br><a id="more"></a></p><blockquote><p><strong>注意：本文遵循一步一截图的原则，尽量详细（也可能有点冗长），希望各位同学注意耐心、时间和流量。</strong></p></blockquote><h1 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h1><p>安装Android Studio（以下简称AS），需要先配置JDK，还没有配置的同学可以点击下面的链接看小七之前的教程，这里就不再赘述。</p><p><a href="http://tiny777.com/2018/07/29/180729JAVA10/" target="_blank" rel="noopener">JAVA10安装与环境变量配置</a></p><h1 id="下载AS"><a href="#下载AS" class="headerlink" title="下载AS"></a>下载AS</h1><p>由于众所周知的原因，国内无法直接上谷歌的官网，但是对于AS的下载，还是比较简单的。</p><p>我们登录这个网址：    <a href="http://www.android-studio.org/" target="_blank" rel="noopener">http://www.android-studio.org/</a>    选择对应的版本进行下载，一般来说对于新手建议下载exe文件进行安装，如果对AS已经有一定的了解则可以下载zip文件直接解压进行使用。<br><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%280%29.png" alt=""></p><h1 id="安装AS"><a href="#安装AS" class="headerlink" title="安装AS"></a>安装AS</h1><h2 id="新建安装目录"><a href="#新建安装目录" class="headerlink" title="新建安装目录"></a>新建安装目录</h2><p>为了方便管理，我在D盘根目录下面新建了一个Android的文件夹，里面再新建三个分别名为AndroidStudio、AndroidProject和AndroidSDK的文件夹用于存放AS,Android的项目和AS的SDK。</p><blockquote><p><strong>建议不要在C盘根目录下新建文件夹，容易出现权限问题，也一定不要使用中文名给文件夹命名，包括你现在登录到windows系统的用户名也不要是中文名，否则会出错。</strong></p></blockquote><h2 id="运行exe安装文件"><a href="#运行exe安装文件" class="headerlink" title="运行exe安装文件"></a>运行exe安装文件</h2><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%281%29.png" alt="">▲双击运行安装文件，点击Next</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%282%29.png" alt="">▲<strong>此处勾选Android Virtual Device(AVD)，即安卓虚拟机，</strong>可以在不连接安卓手机的情况下进行项目的调试</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%283%29.png" alt="">▲此处即为AS的安装目录，将其更改为我们之前的新建的安装目录，<strong>最好不要使用默认目录！</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%284%29.png" alt="">▲这里我们可以看到，即便是更改了安装目录，也会在系统的Users文件夹对应的账户下面新建一个.android文件夹,<strong>因此这个账户名注意不能是中文，否则后面会报错。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%285%29.png" alt="">▲到这里AS就已经算是基本安装完成了，但是AS需要的其他的一些插件都还没有安装，因此我们勾选Start，点击Finish。</p><h1 id="安装SDK和AVD"><a href="#安装SDK和AVD" class="headerlink" title="安装SDK和AVD"></a>安装SDK和AVD</h1><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%286%29.png" alt="">▲初次运行AS会提示你是否需要导入之前的配置文件，如果有同学之前使用过AS并且导出了配置文件，这里只需要直接导入就可以了，没有的同学直接点击Do not然后OK。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%287%29.png" alt="">▲这时候就会弹出提示说找不到Android SDK，我们不需要设置代理，直接点击右边的Cancel</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%288%29.png" alt="">▲点击右边的Cancel之后会开始下载一些配置文件</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%289%29.png" alt="">▲下载完成之后就会开始配置SDK</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2810%29.png" alt="">▲同样还是为了方便管理，我们在安装选项这里选择Custom（自定义）</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2811%29.png" alt="">▲首先进行选择的是界面风格，有明暗两种色调，像小七这种夜猫子果断选暗色调。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2812%29.png" alt="">▲这里会自动选择最新的SDK和API，不过我们要更改下面的安装目录为我们之前准备好的新目录，然后把上面的Intel HAXM和Android Virtual Device也勾选上，这样就把AVD也一并安装了。</p><blockquote><p>注意：运行安卓虚拟机需要安装Intel HAXM和在电脑的BIOS中开启Intel Virtualization Technology（Intel VT/英特尔虚拟化技术），二者缺一不可。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2813%29.png" alt="">▲接下来是设置AVD的内存大小，一般我们选择默认的2G推荐值，如果电脑本身内存是4G可以调小一点，同样，如果电脑内存是16G之类的大内存请随意。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2814%29.png" alt="">▲接下来会列出各种安装包组件的大小，我们直接点击Finish进行安装</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2816%29.png" alt="">▲安装的过程可能会有点慢，请同学们保持耐心和网络畅通，等待全部安装完成之后再点击Finish。</p><p>到这里AS和对应的SDK还有AVD就已经安装完成了啦，下面我们来跑个HelloWorld试试。</p><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2817%29.png" alt="">▲这里来到了AS的启动界面，和JerBrain家出品的其他IDE风格一脉相承，我们点击Start a new Android Studio Project来新建我们的第一个HelloWorld程序。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2818%29.png" alt="">▲接下来就是设置项目的名称（一般也是APP的名称），接着将项目目录改成我们之前新建的Android Project文件夹，中间的Company Domain，如果是个人开发者就填自己的邮箱或者名字啥的，公司开发者就填公司。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2819%29.png" alt="">▲接下来就是选择你的项目类型，是正常的安卓手机APP还是其他的安卓TV、Wear等等，这里我们以安卓手机APP为例，然后就要选择API版本，<strong>这里的API版本指的是这个项目向下兼容的最低版本，一般来说，API越低，兼容的设备越多，但是新API里面的新功能和特性就越容易出问题，</strong>具体如何选择看同学们的实际需求。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2820%29.png" alt="">▲接下来就是选择Activity，AS官方提供了一些常用的Activity，这里我们选择一个空白的Activity（Empty Activity）。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2821%29.png" alt="">▲接下来是填写Activity的名字和Layout的名字，我们直接使用默认值。<strong>（Activity和Layout数量多了之后最好根据功能用途进行命名，否则查找的时候很麻烦）</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2822%29.png" alt="">▲第一次新建项目还有一些SDK需要再配置一下。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2823%29.png" alt="">▲接着就是下载Gradle，Gradle的版本可以在对应的项目配置文件中修改，修改的时候注意会引发一系列的连锁反应，因此要小心谨慎。</p><blockquote><p>Gradle是AS中很重要的一个部分，以后有机会我们再开新帖研究探讨一下。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2824%29.png" alt="">▲AS到了3.x版本之后就会又这个温馨提示窗口，有兴趣的同学可以看一下，这里我们直接跳过。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2825%29.png" alt="">▲接下来我们点击右上方的Sync按钮看一下项目有没有什么问题，如图所示这里是比较正常的。</p><h2 id="运行AVD"><a href="#运行AVD" class="headerlink" title="运行AVD"></a>运行AVD</h2><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2826%29.png" alt="">▲接下来我们点击Sync旁边的AVD按钮，打开AVD窗口</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2827%29.png" alt="">▲如图所示，我们之前在安装的时候勾选了AVD选项，所以这里已经有了一个配置好的AVD，我们点击<strong>右边的绿色播放按钮（RUN）</strong>就可以直接运行。<strong>为了方便同学们理解，此处我们再新建一个AVD设备，点击左下方的Creat Virtual Devices。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2828%29.png" alt="">▲这里我们可以看到谷歌自家的一些机型以及对应的分辨率和屏幕尺寸，我们可以直接使用这些设备，也可以点击左下方导入或者新建一个，这里我们选择谷歌家的Pixel2 XL。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2829%29.png" alt="">▲接下来就是选择API版本也就是系统版本，我们可以建立同一机型的不同系统版本的AVD方便我们调试。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2830%29.png" alt="">▲接下来可以选择AVD是横向还是纵向，我们使用默认设置，直接完成即可。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2831%29.png" alt="">▲如图所示AVD虚拟机正在开启。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2832%29.png" alt="">▲到这里我们可以看到虚拟机已经开启完毕，里面的系统正在开机，旁边是我们使用手机常用到的一些操作。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2833%29.png" alt="">▲接下来我们把界面切回AS。点击右上方的绿色播放按钮，其实是RUN按钮。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2834%29.png" alt="">▲然后我们选择在刚刚已经开启的Pixel2 XL虚拟机上运行。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2835%29.png" alt="">▲接着我们就可以看到Hello World啦。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2836%29.png" alt="">▲我们打开虚拟机里面的应用抽屉，可以看到我们刚刚run的应用已经安装在这上面了。</p><h2 id="文字内容小改"><a href="#文字内容小改" class="headerlink" title="文字内容小改"></a>文字内容小改</h2><p>接下来我们试试把HelloWorld改成HelloAndroid</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2837%29.png" alt="">▲在如图所示的目录中找到HelloWorld对应的控件，直接修改文字内容，保存然后再Sync再Run一次。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/AndroidStudio%20%2838%29.png" alt="">▲Hello Android！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(多图预警！！！)Android Studio作为谷歌官方的安卓开发工具，配置上并不算太难，但是有些地方需要额外注意一下。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="环境搭建" scheme="http://www.tiny777.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="安卓" scheme="http://www.tiny777.com/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>JAVA10安装与环境变量配置</title>
    <link href="http://www.tiny777.com/2018/07/29/180729JAVA10/"/>
    <id>http://www.tiny777.com/2018/07/29/180729JAVA10/</id>
    <published>2018-07-28T16:00:00.000Z</published>
    <updated>2018-07-28T18:12:12.329Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA10的环境搭建相比起之前的JAVA1.8要简单很多。<br><a id="more"></a></p><h1 id="下载JAVA10"><a href="#下载JAVA10" class="headerlink" title="下载JAVA10"></a>下载JAVA10</h1><p>首先我们要去官网下载JAVA10的安装包。<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html" target="_blank" rel="noopener">点击这里跳转到官网。</a></p><p>截至到发文为止，最新的版本是10.0.2。<strong>下载之前要记得先点击上面的Accept License Agreement，否则将无法下载。</strong></p><blockquote><p>另外，Windows上JAVA10只提供64位的版本。不过现在大多数电脑都是64位，这个问题应该不大。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%281%29.png" alt=""></p><p>下载完成之后，直接双击安装。</p><h1 id="安装JAVA10"><a href="#安装JAVA10" class="headerlink" title="安装JAVA10"></a>安装JAVA10</h1><p>因为小七这里只有10.0.1的版本，且系统的默认显示语言为英语，所以就以这个版本为例。（这里需要额外提一下，各种开发工具和IDE的存放文件夹和路径最好都以英文命名，不容易出现问题）</p><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%282%29.png" alt=""></p><p>▲我们点击next</p><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%283%29.png" alt=""></p><p>▲这里我们取消勾选JRE，因为没有必要而且会使后面的环境变量配置变得很复杂。<br>▲为了方便管理和记忆，我将它安装到了D盘，<strong>这个安装路径需要记住，因为后面配置环境变量的时候需要用到。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%284%29.png" alt=""></p><p>▲到这里JAVA10就已经安装完成了，下面我们进入环境变量的配置阶段。</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%285%29.png" alt=""></p><p><strong>▲我们找到我的电脑，右键选择属性，然后点击左上方列表最下面的高级系统设置，点击下方的环境变量设置，看到最下面的系统变量。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%286%29.png" alt=""></p><p>▲首先我们添加一个名为JAVA_HOME的变量，变量的值就是刚刚我们安装JAVA10的目录。</p><blockquote><p>需要注意的是，如果你前面安装了JRE，在对应的安装目录下面会有JDK和JRE两个文件夹，此时我们需要选择JDK文件夹。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%287%29.png" alt=""></p><p>▲接着我们修改PATH变量（path不区分大小写）。在path变量的最前面添加如下变量值：</p><pre><code>;%JAVA_HOME%\bin;</code></pre><p>注意这个变量值要和上面完全一样。</p><p>依次点击确定并关闭所有窗口。到这里我们就已经安装配置好JAVA10了。</p><h1 id="检验安装"><a href="#检验安装" class="headerlink" title="检验安装"></a>检验安装</h1><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%288%29.png" alt=""></p><p>▲我们打开CMD，输入java或者javac，出现下面的命令行就表示已经配置成功。</p><p>为了进一步确定是全局变量配置成功，我们在其他位置（如D盘）新建一个java文件，写个简单的hello测试一下。</p><pre><code>public class Hello{        public static void main(String[] args){            System.out.println(&quot;HelloJAVA10!&quot;);            }}</code></pre><p><img src="http://p95to5vmm.bkt.clouddn.com/JAVA10%20%289%29.png" alt=""></p><p>▲然后我们先使用javac命令编译java文件生成class文件，再使用java命令执行class文件就可以看到实际效果了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA10的环境搭建相比起之前的JAVA1.8要简单很多。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="环境搭建" scheme="http://www.tiny777.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="JAVA" scheme="http://www.tiny777.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>小程序之app.json</title>
    <link href="http://www.tiny777.com/2018/07/18/180718TinyPro002/"/>
    <id>http://www.tiny777.com/2018/07/18/180718TinyPro002/</id>
    <published>2018-07-17T16:00:00.000Z</published>
    <updated>2018-07-18T12:20:39.010Z</updated>
    
    <content type="html"><![CDATA[<p>app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 和debug模式五方面的配置。<br><a id="more"></a><br>下面我们通过一个Demo来对其进行深入的了解。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>先看一下微信官方给出的一些说明。</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:center">必填</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">pages</td><td style="text-align:left">String Array</td><td style="text-align:center">是</td><td style="text-align:left">设置页面路径</td></tr><tr><td style="text-align:left">window</td><td style="text-align:left">Object</td><td style="text-align:center">否</td><td style="text-align:left">设置默认页面的窗口表现</td></tr><tr><td style="text-align:left">tabBar</td><td style="text-align:left">Object</td><td style="text-align:center">否</td><td style="text-align:left">设置底部 tab 的表现</td></tr><tr><td style="text-align:left">networkTimeout</td><td style="text-align:left">Object</td><td style="text-align:center">否</td><td style="text-align:left">设置网络超时时间</td></tr><tr><td style="text-align:left">debug</td><td style="text-align:left">Boolean</td><td style="text-align:center">否</td><td style="text-align:left">设置是否开启 debug 模式</td></tr></tbody></table><p>再来看一段包含了上述五个部分的代码。</p><pre><code>{  &quot;pages&quot;: [    &quot;pages/index/index&quot;,    &quot;pages/logs/logs&quot;,    &quot;pages/mine/mine&quot;,    &quot;pages/resume/resume&quot;,    &quot;pages/share/share&quot;  ],  &quot;window&quot;: {    &quot;backgroundTextStyle&quot;: &quot;light&quot;,    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,    &quot;navigationBarTitleText&quot;: &quot;SchoolHunting&quot;,    &quot;navigationBarTextStyle&quot;: &quot;black&quot;  },  &quot;tabBar&quot;: {    &quot;list&quot;: [      {        &quot;pagePath&quot;: &quot;pages/index/index&quot;,        &quot;text&quot;: &quot;首页&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/index.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/index_sel.png&quot;      },      {        &quot;pagePath&quot;:&quot;pages/share/share&quot;,        &quot;text&quot;: &quot;分享&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/share.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/share_sel.png&quot;      },      {        &quot;pagePath&quot;:&quot;pages/resume/resume&quot;,        &quot;text&quot;: &quot;简历&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/resume.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/resume_sel.png&quot;      },      {        &quot;pagePath&quot;: &quot;pages/mine/mine&quot;,        &quot;text&quot;: &quot;我的&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/mine.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/mine.png&quot;      }    ]},&quot;networkTimeout&quot;: {      &quot;request&quot;: 10000,      &quot;downloadFile&quot;: 10000},&quot;debug&quot;: true}</code></pre><h1 id="pages：页面文件的路径"><a href="#pages：页面文件的路径" class="headerlink" title="pages：页面文件的路径"></a>pages：页面文件的路径</h1><ul><li><p>接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。</p></li><li><p>每一项代表对应页面的【路径+文件名】信息，数组的第一项代表小程序的初始页面。</p></li><li><p><strong>小程序中新增/减少页面，都需要对 pages 数组进行修改，在IDE的文件目录新建pages的时候IDE会提醒是否自动更新app.json中的pages字段。</strong></p></li><li><p>文件名不需要写文件后缀，因为框架会自动去寻找路径下 .json, .js, .wxml, .wxss 四个文件进行整合。</p></li></ul><h1 id="window：窗口表现"><a href="#window：窗口表现" class="headerlink" title="window：窗口表现"></a>window：窗口表现</h1><p>主要会用到的是<strong>navigationBarTitleText</strong>这个变量，变量设置的是小程序界面上方显示的名称，一般设置成小程序的名称，其余变量是对其的样式设置。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">可以点击这里查看官方的详细说明。</a></p><h1 id="tabBar：设置多bar"><a href="#tabBar：设置多bar" class="headerlink" title="tabBar：设置多bar"></a>tabBar：设置多bar</h1><ul><li><p>tabBar字段主要是设置小程序的Bar，<strong>最少为两个，最多为五个。</strong></p></li><li><p>position变量可以设置Bar的位置是在下面（bottom）还是在上方（top），需要额外注意的是，当设置为上方（top）时，不会显示图标Icon。</p></li><li><p>list作为数组，其中的变量pagePath和text设置bar对应的页面路径和名称，iconPath和selectediconPath是未选中状态和选中状态的两个图标的路径，不设置则无，只设置其中一个则另一个也相同，<strong>建议要设置两个且最好用相同图标不同颜色（黑灰或黑彩）来进行区分。</strong></p></li></ul><p>这里给出两张对比图。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%281%29.png" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%282%29.png" alt=""></p><h1 id="networkTimeout：设置网络超时时间"><a href="#networkTimeout：设置网络超时时间" class="headerlink" title="networkTimeout：设置网络超时时间"></a>networkTimeout：设置网络超时时间</h1><p><strong>主要是四个网络请求的超时设置（request、connectSocket、uploadFile和downloadFile），</strong>单位是毫秒（ms），一秒等于一千毫秒，<strong>默认的时间是60000ms即一分钟。</strong></p><h1 id="debug：debug模式"><a href="#debug：debug模式" class="headerlink" title="debug：debug模式"></a>debug：debug模式</h1><p>这个比较简单，debug这个变量本身是个布尔型，默认值也是true（开启状态）。</p><p>debug模式开启之后，在开发者工具的控制台面板，调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发 。 可以帮助开发者快速定位一些常见的问题。</p><p>这里同样给出两张对比图。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%283%29.png" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%284%29.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 和debug模式五方面的配置。&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://www.tiny777.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="编程" scheme="http://www.tiny777.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="http://www.tiny777.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序之HelloWorld</title>
    <link href="http://www.tiny777.com/2018/07/17/180717TinyPro001/"/>
    <id>http://www.tiny777.com/2018/07/17/180717TinyPro001/</id>
    <published>2018-07-16T16:00:00.000Z</published>
    <updated>2018-07-17T14:12:36.151Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序也推出了有些时间了，最近因为种种原因终于要正儿八经地开始微信小程序开发了，先记录一下基本的开发者账号注册和开发环境搭建。<br><a id="more"></a></p><h1 id="开发者账号注册"><a href="#开发者账号注册" class="headerlink" title="开发者账号注册"></a>开发者账号注册</h1><p>微信小程序的开发和其他的软件开发不太一样，需要先实名注册账号，而且官方的IDE得先登录才能使用。</p><p>注册的网址在这里： <a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/wx</a></p><p>需要注意的是，一个邮箱只能对应一个小程序开发，如果你想开发多个小程序，那就多拿几个邮箱去注册，邮箱还要绑定已经用银行卡实名认证的微信号绑定，其他的信息如实填写即可，填错了也没关系，反正填了之后还能修改。</p><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><p>微信官方也提供了开发IDE，安装包并不大，只有几十MB，下载之后傻瓜式安装即可。</p><p>这是下载链接：    <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%281%29.png" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%282%29.png" alt=""></p><p>安装之后点击打开，需要使用微信扫描二维码登陆</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%283%29.png" alt=""></p><p>然后我们选择小程序</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%284%29.png" alt=""></p><p>接下来就要填写小程序项目的目录，AppID以及小程序的名称</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%286%29.png" alt=""></p><p><strong>其中，AppID需要登录网页的微信公众平台，    <a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">https://mp.weixin.qq.com</a>    在设置→开发设置里面查看。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%285%29.png" alt=""></p><h1 id="熟悉基本开发环境"><a href="#熟悉基本开发环境" class="headerlink" title="熟悉基本开发环境"></a>熟悉基本开发环境</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>接下来我们看一下整个IDE的基本开发环境</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%287%29.png" alt=""></p><p>左上方可以选择模拟器，由于小程序和web程序差不多，（IDE本身也叫web开发者工具）所以这个模拟器基本也就是模拟一下分辨率的样子，当然不同的可能还有安卓和IOS平台之间的一些权限。</p><p>左边的这一大个就是模拟器了。</p><p>再过来的就是文件目录，以及主要的工作区。</p><p>上面的部分是工具栏，下面的控制台，和Visual Studio、Android Studio 这类IDE基本大同小异。</p><p>可能不同的地方就是微信的web开发者工具BUG比较多？</p><h2 id="四类文件"><a href="#四类文件" class="headerlink" title="四类文件"></a>四类文件</h2><p>这里我们再说一下小程序里面的四类主要文件：</p><p><strong>网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。在小程序中，也是如此。</strong></p><h3 id="js"><a href="#js" class="headerlink" title=".js"></a>.js</h3><p><strong>js是典型的脚本文件，</strong>在小程序这里，<strong>还可以在js中调用小程序的API，</strong>实现更丰富的功能。</p><p><em>（官方是这么说的，但是实际上我总觉得微信小程序的有很多功能都无法实现，被限制得太死了）</em></p><h3 id="json"><a href="#json" class="headerlink" title=".json"></a>.json</h3><p>json就是配置文件，这个没什么好说，但是根据文件名，我们可以看到<strong>这里的json文件可以分为三类</strong>，我们以 在根目录下的app.json ， project.config.json，和在 pages/logs 目录下的logs.json为例依次来说明一下他们的用途。</p><p><strong>app.json 是小程序的配置文件。</strong>它是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p><p><strong>project.config.json是整个IDE的配置文件。</strong>它保存着IDE的各类配置，比如代码的字体颜色大小等各类信息，类似于JetBrains家的IDE导出的setting文件，方便迁移IDE环境的时候恢复原来的开发环境配置的。</p><p><strong>page.json是所属页面的配置文件。</strong>和app.json不同，它只对所在目录的页面生效。如果将app.json看作是全局配置，那么page.json就可以看作是局部配置。</p><h3 id="wxss"><a href="#wxss" class="headerlink" title=".wxss"></a>.wxss</h3><p><strong>类比css文件，就是用来配置页面的各种样式。</strong></p><h3 id="wxml"><a href="#wxml" class="headerlink" title=".wxml"></a>.wxml</h3><p><strong>类比html文件，在小程序中 WXML 充当的就是类似 HTML 的角色。</strong></p><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>回到模拟器这里，我们可以看到……<br>emmm，对的，hello world就在这里。<br><em>（天哪好没成就感，这个helloworld没有一个从无到有的出现过程，太没意思了。）</em></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%288%29.png" alt=""></p><p>我们点击获取头像昵称，然后就可以登录了，用的微信账号就是我们刚刚扫码登录的那个微信账号，也是我们用来绑定这个小程序开发账号的微信账号。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%289%29.png" alt=""></p><p>最后到这里就算是登录成功了，整个第一步也就完成了。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%2810%29.png" alt=""></p><p>最后再额外提一下，关于第三方开发者能获取的微信用户的信息其实很少，除了头像昵称和ID基本就没有了。</p><p><strong>但是有些例外：</strong></p><p><strong>腾讯的嫡系（亲儿子）：</strong>QQ音乐、腾讯视频等可以通过小程序实现一些简单的输出到朋友圈的操作。</p><p><strong>腾讯的旁系（干儿子）：</strong>大众点评、美团等等可以退一步，能够获取微信用户的好友以及展示他们的操作。</p><p><strong>和腾讯扯不上啥关系的第三方开发者：</strong>获取昵称头像ID就差不多了。</p><p>所以我们可以看到，微信的小程序并不是对所有开发者平等的，至少在现在来说，对开发者能获取的权限来说是不平等的，它和Facebook的bots虽然看起来很像，但是在开发者层面来说还是有很大差别的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序也推出了有些时间了，最近因为种种原因终于要正儿八经地开始微信小程序开发了，先记录一下基本的开发者账号注册和开发环境搭建。&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://www.tiny777.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="编程" scheme="http://www.tiny777.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="http://www.tiny777.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>双启动U盘</title>
    <link href="http://www.tiny777.com/2018/03/18/180318DouBootUdisk/"/>
    <id>http://www.tiny777.com/2018/03/18/180318DouBootUdisk/</id>
    <published>2018-03-17T16:00:00.000Z</published>
    <updated>2018-07-17T10:12:39.894Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，修电脑的各位老铁们，在制作PE启动盘的时候，就会需要格式化U盘，然后将PE所需要的文件刻录进U盘里面。</p><p>对于像小七这样喜欢使用U盘刻录安装原生纯净的操作系统的人，就需要准备两个U盘，一个用来制作PE工具盘，一个用来安装操作系统，现在小七给大家介绍一个方法，让一个U盘实现双启动或者三启动。<br><a id="more"></a></p><p><strong>此处先上一张成品图</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%981.png" alt=""></p><p><strong>图中三个盘其实都是一个U盘的，第一个里面的是PE工具箱，第三个是原装win10刻录文件，第二个则可以当作普通U盘使用。</strong></p><p>这样的好处是一个U盘双启动，平时放的文件和工具箱/win10镜像的文件不容易混淆。</p><blockquote><p>有些同学说在刻录win10镜像的盘符里面用文件夹存放文件也可以，这个方法虽然简单，但是作为启动盘一般都是FAT32格式，是无法存放单个文件大小超过4G的文件的。</p></blockquote><p><strong>（PE工具箱也可以安装操作系统，习惯用PE安装系统的朋友可以忽略这篇推文）</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>原装系统镜像（此处使用最新版的64位win10，可在msdn itellyou中下载）</p></li><li><p>PE工具箱的ISO文件（此处使用微PE2.0版本，后台回复PE有惊喜）</p></li><li><p>Ultra ISO软件（试用版即可）</p></li><li><p>一个8G以上的U盘（此处使用一个32G的USB3.0的U盘）</p></li><li><p>一台能用的正常的电脑</p></li></ul><h1 id="刻录原版win10镜像"><a href="#刻录原版win10镜像" class="headerlink" title="刻录原版win10镜像"></a>刻录原版win10镜像</h1><p>首先，安装并打开UltraISO，点击上方的菜单栏中的 <strong>文件 —&gt; 打开，然后选择win10镜像文件</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%983.png" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%984.png" alt=""></p><p>然后再点击上方的菜单栏中的<strong> 启动 —&gt; 写入硬盘映像</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%985.png" alt=""></p><p><strong>在弹出的界面中，检查下图红框的两项：</strong></p><ul><li><p><strong>硬盘驱动器要确定是自己用来制作的U盘</strong></p></li><li><p><strong>隐藏启动分区里面要选择高端隐藏</strong></p></li></ul><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%986.png" alt=""></p><p><strong>接下来会格式化U盘，请务必要备份U盘中的重要文件</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%987.png" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%988.png" alt=""></p><p>刻录完成之后，打开我的电脑，会发现U盘已经被分成两个分区</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%989.png" alt=""></p><p><strong>如果不需要PE工具箱，到这里就可以停了，因为到这里已经制作了一个正常的win10安装盘，需要重装系统的话，用这个U盘就已经OK了。</strong></p><h1 id="利用磁盘管理进行二次分区"><a href="#利用磁盘管理进行二次分区" class="headerlink" title="利用磁盘管理进行二次分区"></a>利用磁盘管理进行二次分区</h1><p>右键我的电脑，点击管理，在左边找到磁盘管理，然后在下方找到自己的U盘，删除掉上图中的20多G的磁盘</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9810.png" alt=""></p><p>然后新建两个磁盘，<strong>一个大小为800M，文件系统类型记得选择FAT32，否则PE工具箱会无法正常启动</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9811.png" alt=""></p><p>剩下的全部分到另一个盘，文件系统类型随意选择<strong>（建议exFAT）</strong>。</p><p>最后应该和下图类似。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9812.png" alt=""></p><h1 id="解压ISO文件制作PE工具箱"><a href="#解压ISO文件制作PE工具箱" class="headerlink" title="解压ISO文件制作PE工具箱"></a>解压ISO文件制作PE工具箱</h1><p>解压PE工具箱的ISO文件，PE工具箱的文件一般都是两三百MB，将解压后的文件全部复制到容量比较小的磁盘中</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9813.png" alt=""></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>将U盘插入电脑，按下开机键的时候按ESC或者F1/F2/F9/F12等按键即可进入启动项选择菜单（不同电脑情况不同），如果像下图这样出现了两个一样的启动项，那么就制作成功。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9814.jpg" alt=""></p><p><strong>最后，如何区分哪个才是PE，哪个才是WIN10呢？</strong></p><p>你可能会说，直接点进去试一下不就行了。</p><p>对的，没错这确实可以，但是这样的话就太没有技术含量了。</p><p>我们还是打开我的电脑中的磁盘管理，会发现左边的是PE，右边的是WIN10，所以上图的第一个就是PE，第二个才是win10。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9815.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说，修电脑的各位老铁们，在制作PE启动盘的时候，就会需要格式化U盘，然后将PE所需要的文件刻录进U盘里面。&lt;/p&gt;
&lt;p&gt;对于像小七这样喜欢使用U盘刻录安装原生纯净的操作系统的人，就需要准备两个U盘，一个用来制作PE工具盘，一个用来安装操作系统，现在小七给大家介绍一个方法，让一个U盘实现双启动或者三启动。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Windows" scheme="http://www.tiny777.com/tags/Windows/"/>
    
      <category term="装系统" scheme="http://www.tiny777.com/tags/%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>禁用笔记本内置键盘</title>
    <link href="http://www.tiny777.com/2018/02/25/180225DISALTKB/"/>
    <id>http://www.tiny777.com/2018/02/25/180225DISALTKB/</id>
    <published>2018-02-24T16:00:00.000Z</published>
    <updated>2018-07-17T10:21:35.363Z</updated>
    
    <content type="html"><![CDATA[<p>有很多同学会有给笔记本电脑外接键盘的需求， 但是如果直接将外接键盘放到内置键盘上面容易误触，小七在这里跟大家分享一个通过CMD命令禁用笔记本内置键盘的方法。</p><a id="more"></a><h1 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h1><p><strong>首先，以管理员身份运行CMD。</strong></p><p>然后输入这条命令：</p><pre><code>sc config i8042prt start= disabled</code></pre><p>重启之后就可以禁用笔记本内置键盘的服务。</p><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>需要恢复的话也很简单：</p><pre><code>sc config i8042prt start= auto</code></pre><p>重启之后即可启用笔记本内置键盘的服务。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%A6%81%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%86%85%E7%BD%AE%E9%94%AE%E7%9B%98.png" alt=""></p><p>这个方法的好处在于简单快捷稳定。不需要什么拆机拔笔记本键盘排线，卸载键盘驱动/安装错误键盘驱动等等一系列骚操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很多同学会有给笔记本电脑外接键盘的需求， 但是如果直接将外接键盘放到内置键盘上面容易误触，小七在这里跟大家分享一个通过CMD命令禁用笔记本内置键盘的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Windows" scheme="http://www.tiny777.com/tags/Windows/"/>
    
      <category term="笔记本键盘" scheme="http://www.tiny777.com/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>第六代Wi-Fi协议的前世今生</title>
    <link href="http://www.tiny777.com/2018/01/09/180109WiFiDev/"/>
    <id>http://www.tiny777.com/2018/01/09/180109WiFiDev/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-07-17T07:42:17.589Z</updated>
    
    <content type="html"><![CDATA[<p>本周，英特尔宣布：将从今年（2018）开始添加对802.11ax的支持，包括路由芯片和消费级零售产品。其实早在去年，通信行业巨头博通就发布了三款支持802.11ax的芯片BCM43684/43694/4375，高通也宣布了IPQ8074/QCA6290。至此，三家芯片巨头都表明了对802.11ax协议的支持，802.11ax也终于是坐稳了第六代Wi-Fi协议的位置了。<br><a id="more"></a></p><p>本文将介绍历代Wi-Fi协议，按照顺序一次为802.11a/b/g/n/ac/ax，本文旨在让不了解Wi-Fi协议的读者对其能有一个粗略的认识，并不涉及过深的专业知识，同时文章本身不短，阅读耗时较长，请各位读者耐心阅读。</p><blockquote><p>小七注：802.11系列协议应用非常广泛，协议本身也非常复杂庞大，本文只设计上述的6种协议和802.11ad协议共计7种。</p></blockquote><h1 id="什么是Wi-Fi？"><a href="#什么是Wi-Fi？" class="headerlink" title="什么是Wi-Fi？"></a>什么是Wi-Fi？</h1><p>既然是讲Wi-Fi协议，那么首先讲的必然就应该是Wi-Fi了。Wi-Fi其实说白了就是一种让包括电脑手机平板在内的电子设备能够连接到一个无线网络的技术。但很多人都不知道的是，Wi-Fi其实本身是一个品牌或者说是商标，由Wi-Fi联盟所持有。Wi-Fi联盟的前身是1999年成立的无线以太网兼容性联盟WECA（Wireless Ethernet Compatibility Alliance）。而Wi-Fi联盟一直在使用的这个802.11系列的无线通信协议标准，是由IEEE下属的802.11工作组所制定的。</p><blockquote><p>小七注：电气和电子工程师协会( IEEE，全称是Institute of Electrical and Electronics Engineers)是一个国际性的电子技术与信息科学工程师的协会，是目前全球最大的非营利性专业技术学会，其会员人数超过40万人，遍布160多个国家。IEEE致力于电气、电子、计算机工程和与科学有关的领域的开发和研究，在太空、计算机、电信、生物医学、电力及消费性电子产品等领域已制定了900多个行业标准，现已发展成为具有较大影响力的国际学术组织。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE1.jpg" alt=""> </p><p>看到这里是不是觉得很懵？简单来说就是由IEEE内的802.11工作组制定802.11系列标准，而Wi-Fi联盟对使用802.11系列标准的设备进行认定，符合Wi-Fi联盟的认定标准的设备就可以打上Wi-Fi的这个logo。</p><p><strong>下面进入正文。</strong></p><h1 id="802-11——过于平庸的一代"><a href="#802-11——过于平庸的一代" class="headerlink" title="802.11——过于平庸的一代"></a>802.11——过于平庸的一代</h1><p>二战之后，世界科技进入迅猛发展时期，人们对于无线通讯的需要开始爆发性地增长，IEEE在20世纪90年代初成立了专门的802.11工作组，专门研究和定制WLAN(无线局域网)的标准协议，并在1997年6月推出了第一代WLAN协议——IEEE 802.11-1997。</p><blockquote><p>小七注：此处的802.11指的是IEEE制订的第一代协议，并非是整个系列协议，在802.11之后的协议都加入了字母后缀来进行区分。</p></blockquote><p>作为IEEE最初制定的一个无线局域网标准，802.11协议定义了物理层工作在ISM的2.4G频段，数据传输速率设计为2Mbps。很遗憾的是，由于它在传输速度和传输距离上的表现都不尽如人意，因此并未被规模使用。</p><h1 id="802-11a——生不逢时的一代"><a href="#802-11a——生不逢时的一代" class="headerlink" title="802.11a——生不逢时的一代"></a>802.11a——生不逢时的一代</h1><p>1999年．IEEE吸取了上一次的教训，这一次就直接下了猛药。在制定802.11a标准的时候，直接将频段定在了5GHz（频率越高最高传输速度越快），物理层的最高速率也随之水涨船高到了54Mbps。相比前一代来说，不可谓不给力。但是，802.11a协议也并没有被市场认可，相对来说表现的更出色的反而是几乎和它同时制订的802.11b协议。</p><p>尽管2003世界无线电通信会议让802.11a在全球的应用变得更容易，不同的国家还是有不同的规定支持。美国和日本甚至都已经出现了相关规定对802.11a进行了认可，但是在其他地区，如欧盟却因为标准的问题被禁止使用。再加上802.11a产品中5GHz的组件研制成功太慢，等其开始大规模推广的时候，市场早已被大批的802.11b产品占领，802.11a没有被广泛的采用。再加上802.11a的一些弱点，和一些地方的规定限制，使得它的使用范围更窄了。</p><h1 id="802-11b——奠定基础的一代"><a href="#802-11b——奠定基础的一代" class="headerlink" title="802.11b——奠定基础的一代"></a>802.11b——奠定基础的一代</h1><p>802.11b协议可以说是802.11a是同胞兄弟了。但它本身却是基于2.4GHz频率，同时最大的传输速度相比802.11a来说也只有11Mbps。11Mbps的传输速率在现在看来肯定算不了什么，但在2000年的时候，虽然不是翘楚，但也已经能够满足大部分人的需求了。</p><p>更何况基于2.4GHz的802.11b在传输距离和穿墙能力上本来就比基于5GHz的802.11a协议要有优势（高频率波传输距离和穿墙能力较低频率波差），加上当时802.11a的核心芯片研发进度缓慢，802.11b就此抓住了机会，占领了市场，为日后称霸天下打下了坚实的基础。</p><h1 id="802-11g——融合前人的一代"><a href="#802-11g——融合前人的一代" class="headerlink" title="802.11g——融合前人的一代"></a>802.11g——融合前人的一代</h1><p>时间来到了2003年7月，IEEE制订了第三代Wi-Fi标准：802.11g。（为什么不是C呢？因为802.11协议还应用在其他的很多领域，有些字母被用了，就只能排到g了）</p><p>802.11g继承了802.11b的2.4GHz频段和802.11a的最高54Mbps传输速率。同时，它还使用了CCK技术后向兼容802.11b产品。此时开始，IEEE在制订每一代新协议的时候都会将后向兼容考虑进去，毕竟换了新路由器旧手机就因为不支持新协议而连不上Wi-Fi这种情况谁都受不了。</p><p>说到这里，就还要再提一下在802.11a和802.11g上都有使用到的一种技术：<strong>OFDM。</strong></p><p>OFDM(Orthogonal Frequency Division Multiplexing)即正交频分复用技术，是由MCM（Multi-Carrier Modulation，多载波调制）发展而来的一种实现复杂度低、应用最广的一种多载波传输方案。<strong>OFDM主要思想是：将信道分成若干正交子信道，将高速数据信号转换成并行的低速子数据流，调制到在每个子信道上进行传输。</strong>正交信号可以通过在接收端采用相关技术来分开，这样可以减少子信道之间的相互干扰(ISI) 。每个子信道上的信号带宽小于信道的相关带宽，因此每个子信道上可以看成平坦性衰落，从而可以消除码间串扰，而且由于每个子信道的带宽仅仅是原信道带宽的一小部分，信道均衡变得相对容易。</p><p>上面这段很难理解？没关系，看小七打个比喻你们就懂了。</p><p>假设我们现在有很多车要从A地到B地，没有使用OFDM技术之前，路是一条路，所有的车四处乱开，横冲直撞，结果谁都快不了。现在使用了OFDM技术，将一条大路划分为很多个车道，大家都按照车道驾驶，这样既可以提高速度，又能减少车与车之间的干扰。同时这条道的车多了，就匀一点到那条车少的道上去，管理上也方便很多。</p><p><strong>OFDM技术也因此被应用在之后的每一代Wi-Fi协议中。</strong></p><h1 id="802-11n——初露锋芒的一代"><a href="#802-11n——初露锋芒的一代" class="headerlink" title="802.11n——初露锋芒的一代"></a>802.11n——初露锋芒的一代</h1><p><strong>如果说802.11b是奠定了整个帝国的基础的一代，那么802.11n一定是给帝国开疆扩土的一代。</strong></p><p>时间继续推进，这时的互联网已经开始出现了在线图片、视频、流媒体等服务，而随着YouTube、无线家庭媒体网关、企业VoIP Over WLAN等应用对WLAN技术提出了越来越高的带宽要求，传统技术802.11a/g已经无法支撑。用户需求呼唤着全新一代WLAN接入技术。</p><p>2009年，IEEE宣布了新的802.11n标准。传输速率最高可达600Mbps。</p><p>但是，802.11n协议还是基于2.4GHz频段，速度怎么突然就快了这么多呢？正所谓事出反常必有妖，而这背后的“妖”，就是MIMO、波束成形和40Mhz绑定。</p><h2 id="MIMO"><a href="#MIMO" class="headerlink" title="MIMO"></a>MIMO</h2><p>MIMO（Multiple-Input Multiple-Output）的中文名称为多输入多输出技术是指在发射端和接收端分别使用多个发射天线和接收天线，使信号通过发射端与接收端的多个天线传送和接收，从而改善通信质量。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE2.jpg" alt=""> </p><p>MIMO技术最早是由马可尼于1908年提出的，它利用发射端的多个天线各自独立发送信号，同时在接收端用多个天线接收并恢复原信息，就可以实现以更小的代价达到更高的用户速率。MIMO可大大提高网络传输速率、覆盖范围和性能。当基于MIMO而同时传递多条独立空间流时，系统的吞吐量可成倍地提高。</p><p><strong>简单来说，MIMO技术就是在信号的发射源和接收源都安装了多个天线，通过堆天线的方式来实现更高的传输速率，因此现在的买路由器看天线数量这一个说话虽然不可靠，但也不是没有历史渊源的。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE3.jpg" alt=""></p><p>▲通过MIMO传递多条空间流（图片来自网络）</p><p>MIMO系统支持空间流的数量取决于发送天线和接收天线的最小值。如发送天线数量为3,而接收天线数量为2，则支持的空间流为2。MIMO/SDM系统一般用“发射天线数量×接收天线数量”表示。如上图为2*2 MIMO/SDM系统。显然，增加天线可以提高MIMO支持的空间流数。<strong>但是综合成本、实效等多方面因素，当时业界的WLAN AP都普遍采用3×3的模式。而现在的旗舰级路由器都轻松的堆到8×8或者更高。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE4.jpg" alt=""> </p><p>▲图为 MIMO利用多径传输数据（图片来自网络）</p><h2 id="波束成形"><a href="#波束成形" class="headerlink" title="波束成形"></a>波束成形</h2><p>而至于波束成形技术，它本身并不是什么新名词，波束成形是天线技术与数字信号处理技术的结合，目的用于定向信号传输或接收。在20世纪60年代，波束成形技术就已经在军事应用上得到了相当高的重视。</p><p>只不过，由于早年半导体技术还处在微米级，所以它没有在民用通信中发挥到理想的状态。</p><p>而发展到无线通讯阶段，特别是应用在消费级产品中，信号传输距离和信道质量以及无线通信的抗干扰问题便成为瓶颈。提高传输速率是WLAN技术发展历程的关键。802.11n主要是结合物理层和MAC层的优化，来充分提高WLAN技术的吞吐。此时，波束成形又有了用武之地。</p><p>波束成形技术的具体原理很复杂，小七在这里用图片给大家简单展示一下，波束成形就是将原本发散的波聚合，再往指定的方向发送，从而提高传输距离。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE5.jpg" alt=""></p><p>▲波束成形技术增加传输距离的示意图（图片来自网络）</p><p>但是波束成形技术固然能改善系统性能，增加接收距离，但同时也会增加设备成本和功耗。在多天线都处于连接的状态下，即使在严重的衰落情况下，它提供的信号增益也可获提高，但要求信号处理能力也要很强。所以，多天线带来的问题是要求数据处理速度高，控制成本，并降低功耗。</p><h2 id="40Mhz绑定"><a href="#40Mhz绑定" class="headerlink" title="40Mhz绑定"></a>40Mhz绑定</h2><p>事实上，802.11n协议还使用了40Mhz绑定技术。这个技术最容易理解，对于无线技术来说，提高所用频谱的宽度，可以最为直接地提高吞吐。就好比是马路变宽了，车辆的通行能力自然提高。传统802.11a/g使用的频宽是20MHz，而802.11n支持将相邻两个频宽绑定为40MHz来使用，所以可以最直接地提高吞吐。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE6.jpg" alt=""></p><p>▲图左为802.11a/g，图右为802.11n</p><h2 id="MCS"><a href="#MCS" class="headerlink" title="MCS"></a>MCS</h2><p>802.11n引进了如此多的新技术，导致它的速率也会因为配置方法不同而不同。在802.11a/b/g时代，配置AP工作的速率非常简单，只要指定特定radio类型(802.11a/b/g)所使用的速率集，速率范围从1Mbps到54Mbps,一共有12种可能的物理速率。到了802.11n时代，由于物理速率依赖于调制方法、编码率、空间流数量、是否40MHz绑定等多个因素。这些影响吞吐的因素组合在一起，将产生非常多的物理速率供选择使用。</p><p>对此，IEEE直接推出了MCS (Modulation Coding Scheme)，MCS可以理解为将上述影响速率因素的完整组合，每种组合用整数来唯一标示。给每种情况标码，然后直接看对应的MCS码就可以知道准确的速率。</p><h2 id="802-11n小结"><a href="#802-11n小结" class="headerlink" title="802.11n小结"></a>802.11n小结</h2><p><strong>总的来说，MIMO和40Mhz绑定技术使得传输速率大大提升，而波束成形则增大了传输距离。</strong></p><h1 id="802-11ac——锋芒毕露的一代"><a href="#802-11ac——锋芒毕露的一代" class="headerlink" title="802.11ac——锋芒毕露的一代"></a>802.11ac——锋芒毕露的一代</h1><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE7.jpg" alt=""></p><p>随着时代的继续发展，人们身边拥有着越来越多的无线设备，<strong>而2.4GHz这个频段，因为本身的优越性，被各种协议使用（常见的蓝牙4.0系列协议，无线键鼠等），已经变得拥挤不堪，</strong>IEEE此时就将新的第五代Wi-Fi协议制订在了5GHz的频段上。现在说的很多双频Wi-Fi，其实就是2.4GHz和5GHz的混合双频Wi-Fi，而这种路由器常见的四天线设计，一般都是两根天线基于2.4GHz，两根基于5GHz。</p><p>802.11ac在提供良好的后向兼容性的同时，把每个通道的工作频宽将由802.11n的40MHz，提升到80MHz甚至是160MHz，再加上大约10%的实际频率调制效率提升，最终理论传输速度将由802.11n最高的600Mbps跃升至1Gbps。当然，实际传输率可能在300Mbps～400Mbps之间，接近目前802.11n实际传输率的3倍(目前802.11n无线路由器的实际传输率为75Mbps～150Mbps之间)，完全足以在一条信道上同时传输多路压缩视频流。</p><h2 id="MU-MIMO"><a href="#MU-MIMO" class="headerlink" title="MU-MIMO"></a>MU-MIMO</h2><p>实际上，802.11ac协议还分为wave1和wave2两个阶段,两者的主要区别就在于后者提升多用户数据并发处理能力和网络效率。而这背后的功臣，就非MU-MIMO莫属了。</p><p>前面已经跟大家介绍过了，IEEE在802.11n协议时代就引入了MIMO技术，而MU-MIMO技术可以理解为它的升级版或者是多用户版本。</p><p>为什么这么说呢？看下面的图片大家就明白了。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE8.png" alt=""></p><p>▲高通官方展示MU-MIMO技术所用的图片</p><p>MU-MIMO是Multi-User Multiple-Input Multiple-Output（多用户-多输入多输出）的英文缩写。顾名思义，MU-MIMO能让路由器同时和多个设备进行沟通，这极大的改善了网络资源利用率。</p><p>通俗来说，以前在802.11n上面的MIMO只能说是SU-MIMO（Single-User），传统的SU-MIMO路由器信号呈现一个圆环，以路由器圆心，呈360度向外发射信号，并依据远近亲疏，依次单独与上网设备进行通讯。当接入的设备过多时，就会出现设备等待通讯的情况，网络卡顿的情况就由此产生；更为严重的是，这种依次单独的通讯，是基于设备对AP（路由器或热点等）总频宽的平均值。也就是说，如果拥有100MHz的频宽，按照“一次只能服务一个”的原理，在有3个设备同时接入网络的情况下，每个设备只能得到约33.3MHz频宽，另外的66.6MHz则处于闲置状态。即在同一个Wi-Fi区域内，连接设备越多宽频被平均得越小，浪费的资源越多，网速也就越慢。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE9.jpg" alt=""></p><p>▲图为SU-MIMO（左）和MU-MIMO（右）的对比</p><p><strong>MU-MIMO路由器则不同，MU-MIMO路由的信号在时域、频域、空域三个维度上分成三部分，就像是同时发出三个不同的信号，能够同时与三部设备协同工作；尤其值得一提的是，由于三个信号互不干扰，因此每台设备得到的频宽资源并没有打折扣，资源得到最大化的利用，从路由器角度衡量，数据传输速率提高了3倍，改善了网络资源利用率，从而确保Wi-Fi无间断连接。</strong></p><p><strong>MU-MIMO技术就赋予了路由器并行处理的能力，</strong>让它能够同时为多台设备传输数据，极大地改善了网络拥堵的情况。在今天这种无线联网设备数量爆发式增长的时代，它是比单纯提高速率更有实际意义的。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE10.jpg" alt=""></p><p>世界上首台支持MU-MIMO的路由器是Linksys EA8500于2015年发布，采用的是全高通的MU-MIMO解决方案（Qualcomm MU | EFX）。现在MU-MIMO已经是旗舰级路由器的标配了，而那些写着ac双频路由器却不支持MU-MIMO技术的，都只能算是残缺的ac双频路由器或者是ac wave1阶段的路由器。</p><p>这里放一张到ac为止各代协议的主要参数对比图（图片来自网络）：</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE11.jpg" alt=""></p><h1 id="802-11ad——先天不足的一代"><a href="#802-11ad——先天不足的一代" class="headerlink" title="802.11ad——先天不足的一代"></a>802.11ad——先天不足的一代</h1><p>在确定第六代的Wi-Fi协议标准的时候，有一段时间，大家都认为会是802.11ad协议，说这个名字大家可以不太熟悉，它另一个名字叫WiGig。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE12.jpg" alt=""> </p><p>相比我们熟知的802.11n(工作在2.4GHz和5GHz频段)和802.11ac(工作在5GHz频段)，<strong>802.11ad则是工作在60GHz频段，且无线传输速率可高达7Gbps!</strong>当然， 802.11ac标准也可以通过堆BUFF（8x8 MIMO、256 QAM调制和信道绑定4个40 MHz信道）达到7Gbps的理论无线传输速率；但是，11ad达到7Gbps的速度，仅需通过一个空间流、64QAM调制和单个信道即可实现。此外，802.11ad还在容量、功耗和延迟方面有着11ac无法比拟的优势，特别是在延迟方面，其延迟通常仅有10微秒，堪比有线!</p><p>但可惜，802.11ad协议有着它的先天不足——60GHz，这么高的频率注定它的传输距离和穿墙能力弱到不堪一击，而在一些知名评测媒体的评测中，人们惊人地发现只需要一个纸皮箱就能隔绝802.11ad协议路由器的信号。真是可谓成也萧何，败也萧何。</p><h1 id="802-11ax——肩负使命的一代"><a href="#802-11ax——肩负使命的一代" class="headerlink" title="802.11ax——肩负使命的一代"></a>802.11ax——肩负使命的一代</h1><p>802.11ax协议基于2.4GHz和5GHz两个频段，对，就是两个频段，并非是ac双频路由器那样不同的频段对应不同的协议，ax协议本身就支持两个频段。这显然迎合了当下物联网、智能家居等发展潮流。对于一些对带宽需要不高的智能家居设备，可以使用2.4GHz频段去连接，保证足够的传输距离，而对于需要高速传输的设备，就使用5GHz频段。这看起来和现在的ac双频路由器是一样的，但实际上，ax作为第六代Wi-Fi协议的扛把子，可不只这两把刷子。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE14.png" alt=""></p><p><strong>802.11ax又被称为“高效率无线标准”（High-Efficiency Wireless，HEW），</strong>将大幅度提升用户密集环境中的每位用户的平均传输率，即在高密环境下为更多用户提供一致且稳定的数据流（平均传输率），将有效减少网络拥塞、大幅提升无线速度与覆盖范围。其实，设计802.11ax的首要目的是解决网络容量问题，因为随着公共Wi-Fi的普及，网络容量问题已成为机场、体育赛事和校园等密集环境中的一个大问题。</p><p><strong>此处要介绍两个新技术，上行MU-MIMO和OFDMA。</strong></p><h2 id="上行MU-MIMO"><a href="#上行MU-MIMO" class="headerlink" title="上行MU-MIMO"></a>上行MU-MIMO</h2><p>MU-MIMO技术在前面已经提到过，802.11ac协议中的MU-MIMO技术只是单纯的下行MU-MIMO，只有在路由器给设备传输数据的时候才可以用，而如今随着智能设备的发展，人们对于上行速率的要求也在提高，传个超清视频图片什么的已经是家常便饭了。<strong>上行MU-MIMO技术就是为此而生，改善了设备在向路由器传输数据时的拥堵情况，提高了网络资源利用率。</strong></p><h2 id="OFDMA"><a href="#OFDMA" class="headerlink" title="OFDMA"></a>OFDMA</h2><p>802.11ax与以前的无线局域网(WLAN)系统相比最大的变化在于其是采用了“正交频分多址接入”(orthogonal frequency division multiple access, OFDMA)。</p><p><strong>在OFDM系统中，用户占用了整个信道。随着用户数量的增多，用户之间的数据请求会发生冲突，从而造成瓶颈，从而导致当这些用户在请求数据（特别是在流式视频等高带宽应用中）时，服务质量较差。</strong></p><p>而在OFDMA中，用户仅在规定时间内占用子载波的一个子集。OFDMA要求所有用户同时传输，因此每个用户都需要将其数据包缓冲为相同的规定比特数，这样无论数据量有多少所有用户都能在时间上保持一致。此外， OFDMA AP可根据用户对带宽的需求来动态地改变用户所占用频谱的数量。例如，相比较对实时性能要求不高的电子邮件，流媒体视频用户需要更多子载波（频谱）。</p><p>不理解的话我们看下图：</p><p><img src="http://p95to5vmm.bkt.clouddn.com/WiFi%E5%8D%8F%E8%AE%AE15.jpg" alt=""></p><p>▲用户在ODFM中占据整个信道，而在“正交频分多址接入”(OFDMA)中不是</p><p>我们还是用回马路开车的例子，假设现在有一条马路有三条车道，现在有甲乙丙三个车队要走这条路（每队都要走一个小时，走前需要半个小时准备），如果按照一次走一个车队的方法，甲乙丙依次走完需要四个半小时，而使用OFDMA技术，给他们一队一条道，则只需要三个半小时，省下了一个小时的准备时间。OFDM和OFDMA在用户数量少的时候差距可能不大，但是一旦用户数量多了起来，差距可就不是一星半点了。</p><p><strong>OFDMA一路走来，其实就是“从无到有，再从有到善用”的演变历程。</strong></p><h2 id="802-11ax小结"><a href="#802-11ax小结" class="headerlink" title="802.11ax小结"></a>802.11ax小结</h2><p>实际上，802.11ax给我们带来的提升远不止此，其他的如更低的延迟、更精确的功耗控制等等也是不可忽略的一环。现在市面上使用802.11ax协议的产品并不是很多，只是零星的几款，<strong>但是好在它的太子身份已经确定，登基只是早晚的问题。</strong>而按照目前的进度来看，小七预计2019年802.11ax的产品就能实现不错的普及率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周，英特尔宣布：将从今年（2018）开始添加对802.11ax的支持，包括路由芯片和消费级零售产品。其实早在去年，通信行业巨头博通就发布了三款支持802.11ax的芯片BCM43684/43694/4375，高通也宣布了IPQ8074/QCA6290。至此，三家芯片巨头都表明了对802.11ax协议的支持，802.11ax也终于是坐稳了第六代Wi-Fi协议的位置了。&lt;br&gt;
    
    </summary>
    
      <category term="科普" scheme="http://www.tiny777.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="WiFi" scheme="http://www.tiny777.com/tags/WiFi/"/>
    
  </entry>
  
  <entry>
    <title>BIOS与UEFI</title>
    <link href="http://www.tiny777.com/2017/10/07/171007BIOS&amp;UEFI/"/>
    <id>http://www.tiny777.com/2017/10/07/171007BIOS&amp;UEFI/</id>
    <published>2017-10-06T16:00:00.000Z</published>
    <updated>2018-07-17T10:20:44.204Z</updated>
    
    <content type="html"><![CDATA[<p>BIOS和UEFI这两个概念对于刚接触计算机硬件的朋友来说可能有些难以区分，最近正好有空，就稍微整理了一下有关知识和大家分享交流一下，如文中有任何错误不足，还望不吝赐教。</p><a id="more"></a><h1 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h1><p><img src="http://p95to5vmm.bkt.clouddn.com/BIOS%E4%B8%8EUEFI%20%281%29.png" alt=""></p><p>▲图为经典BIOS操作界面</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>BIOS，读作/‘baious/，全称Basic Input Outpout System（基本输入输出系统），本质上是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。</strong>BIOS和手机的Bootloader有些相似，实际上，不止是电脑和手机，基本所有电子产品都有与BIOS/Bootloader功能相似的部分，它们往往体积很小（最大的也才几MB），功能看似简单但是非常重要。</p><p>存储上，在主板中有着专门的芯片（BIOS芯片/CMOS RAM）用于存储BIOS，因此它并不存储在内存或者硬盘中，稳定性和可靠性有较好的保证。</p><h2 id="BIOS的存储介质"><a href="#BIOS的存储介质" class="headerlink" title="BIOS的存储介质"></a>BIOS的存储介质</h2><p>早期的BIOS是存储在ROM（Read-Only-Memory，只读存储器）芯片中，在主板出厂前，需要通过特殊的手段将BIOS烧录进BIOS芯片中。而且由于ROM的只读特性，一方面保证了BIOS不会受到轻易更改而保证硬件的正常稳定运行，另一方面也限制了BIOS的升级（ROM不能被写入数据）。</p><p>不能被升级的BIOS显然不能迎合科技发展的需要，于是EPROM芯片开始替代ROM成为BIOS的存储芯片。</p><p><strong>EPROM全程是Erasable Programmable ROM，名为可擦除可编程ROM，这种芯片可重复擦除和写入，解决了ROM芯片只能写入一次的弊端。</strong>EPROM内资料的写入要用专用的编程器，并且往芯片中写内容时必须要加一定的编程电压，写入资料后，还要以不透光的贴纸或胶布把窗口封住，以免受到周围的紫外线照射而使资料受损。</p><p>尽管EPROM可以重复擦除和写入，但是操作方式和条件都过于苛刻，后来就使用了EEPROM芯片。<strong>EEPROM（Electrically Erasable Programmable ROM，电可擦除可编程ROM）。</strong>通过跳线开关和系统配带的驱动程序盘，可以对EEPROM进行重写，方便地实现BIOS升级。</p><p>到了现在，我们可以用软件轻易地升级BIOS，是因为现在的BIOS大多是使用了NOR Flash。NOR Flash 的特点是芯片内执行（XIP ，eXecute In Place），这样应用程序可以直接在Flash闪存内运行，不必再把代码读到系统RAM中。</p><p><strong>NOR 的传输效率很高，在1~4MB的小容量时具有很高的成本效益，但是很低的写入和擦除速度大大影响到它的性能。</strong>尽管如此，对于BIOS来说，小容量足以满足需求，而BIOS的升级并非常事，偶尔一次升级，由写入擦除速度慢导致的升级时间延长也没有太大的影响。</p><h2 id="BIOS里面有什么"><a href="#BIOS里面有什么" class="headerlink" title="BIOS里面有什么"></a>BIOS里面有什么</h2><p>一般来说，人们普遍认为BIOS是沟通软件与硬件的桥梁。讲完存储介质，我们再来了解一下这个存储芯片（BIOS芯片）里面都储存着什么东西。</p><p><strong>●自诊断程序：</strong>通过读取CMOSRAM中的内容识别硬件配置，并对其进行自检和初始化；</p><p>这就是电脑开机最开始的自检步骤，一般出现错误主板会报警，发出响声，一般可以根据响声的长短和数量来判断出现问题的部分，当然也有一些主板在上面加了一块小型的LED显示屏，通过上面的数字来直接反馈错误信息。</p><p><strong>● CMOS设置程序：</strong>这个部分就是大家通常见到的BIOS（蓝色背景界面）， 引导过程中，用特殊热键启动（一般是Del、esc、F9、F12等），进行设置后，存入CMOS RAM中；</p><p>大多数的电脑停留在这个部分的时间并不长，因此想要进入BIOS的CMOS设置程序，需要在一开机就不停地按对应的特殊热键，错过了这个时间段就只能重启再来。</p><p>● 系统自举装载程序：在自检成功后将磁盘相对0道0扇区上的引导程序（即MBR分区表）装入内存，让其运行以装入操作系统。</p><p>● 主要I/O设备的驱动程序和中断服务：由于BIOS直接和系统硬件资源打交道，因此总是针对某一类型的硬件系统，而各种硬件系统又各有不同，所以存在各种不同种类的BIOS，随着硬件技术的发展，同一种BIOS也先后出现了不同的版本。</p><h1 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>由于BIOS是使用汇编语言进行编写，因此在操作界面上相对比较简陋（没有做出太多的图形化界面），对于技术人员来说维护升级也比较麻烦，不可能使用鼠标操作，更加别说截图之类的功能了。</p><p>更致命的是，BIOS已经存在了二十多年，可是其发展却是极度缓慢，已经阻碍到了与其相关的硬件的发展，首当其冲的就是CPU。至此，个人PC行业消费市场的龙头老大英特尔坐不住了，由它主导，开始推广一种名为EFI的技术，旨在用其取代传统的BIOS。</p><p><em>小七注：在x86系列处理器进入32位的时代，由于兼容性的原因，新的处理器(i80386)保留了16位的运行方式(实模式)，此后多次处理器的升级换代都保留了这种运行方式。甚至在含64位扩展技术的至强系列处理器中，处理器加电启动时仍然会切换到16位的实模式下运行。英特尔将这种情况归咎于BIOS技术的发展缓慢。自从PC兼容机厂商通过净室的方式复制出第一套BIOS源程序，BIOS就以16位汇编代码，寄存器参数调用方式，静态链接，以及1MB以下内存固定编址的形式存在了十几年。虽然由于各大BIOS厂商的努力，有许多新元素添加到产品中，如PnP BIOS，ACPI，传统USB设备支持等等，但BIOS的根本性质没有得到任何改变。这迫使英特尔在开发更新的处理器时，都必须考虑加进使效能大大降低的兼容模式。有人曾打了一个比喻：这就像保时捷新一代的全自动档跑车被人生套上去一个蹩脚的挂档器。<br>——摘自百度百科</em></p><p><strong>EFI（Extensible Firmware Interface）的中文名一般叫做可扩展固件接口，是一种由英特尔主导的用于替代BIOS的方案。</strong>有人称EFI是“未来的类PC的电脑系统中替代BIOS的升级方案”，但实际上，这种说法有一些不太严谨，因为EFI已经被弃用，如今使用的是基于EFI标准1.10版本发展而来的UEFI标准。</p><p>如今UEFI早已经普及开来，近些年发售的主板（包括笔记本）基本都支持UEFI和BIOS两种解决方案，前者一般被称为UEFI，后者则称为Legacy。</p><p>那么为什么EFI的前面会多了一个U，变成UEFI了呢？<strong>实际上，EFI可以被理解为是在BIOS和UEFI过渡时期的产物。</strong></p><p>当传统的BIOS（Legacy BIOS）阻碍了计算机硬件发展的时候，英特尔主导推行EFI标准，但是其他企业自然不会那么傻，让英特尔一人主导了整个EFI标准，正所谓“一流企业卖标准”，由Intel, AMD, American Megatrends, Apple, Dell, Hewlett Packard Enterprise, HP，IBM, Insyde Software, Lenovo, Microsoft 和Phoenix Technologies<strong>这12家计算机软硬件和零售的巨头在2005年联合成立了一个名为Unified Extensible Firmware Interface Forum（简称Uefi Forum）的非营利性组织，专门负责制定和管理新一代的EFI标准，随后就基于最后一版的EFI标准（1.10）发布了全新的UEFI标准，EFI也就“变”成了UEFI（全称“统一的可扩展固件接口”，Unified Extensible Firmware Interface）。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/BIOS%E4%B8%8EUEFI%20%282%29.jpg" alt=""></p><p>▲图为UEFI协会的Logo</p><h2 id="UEFI的优势"><a href="#UEFI的优势" class="headerlink" title="UEFI的优势"></a>UEFI的优势</h2><p>那么相对于传统的BIOS，UEFI的优势在哪里呢？</p><p>首先，与使用汇编语言编写的传统BIOS不同，UEFI使用C语言编写，因此整体风格上也就延续了C语言风格的参数堆栈传递和动态链接，模块化特征显著。使用C语言开发和维护对于技术人员来说也方便了很多，更容易实现更强的健壮性和容错性。</p><p>UEFI内置图形驱动功能，可以提供一个高分辨率的图形化界面，用户进入后完全可以像在Windows系统下那样使用鼠标进行设置和调整，操作上更为简单快捷。<strong>同时由于UEFI在逻辑上可分为硬件控制与软件管理两部分，前者属于标准化的通用设置，而后者则是可编程的开放接口，</strong>因此主板厂商可以借助后者的开放接口在自家产品上实现各种丰富的功能，包括<strong>截图、数据备份 、硬件故障诊断、脱离操作系统进行UEFI在线升级等，</strong>功能上也要比传统BIOS更多、更强。</p><p><em>小七注：UEFI可以识别FAT/FAT32文件系统格式的U盘，因此可以通过特殊热键将截图存储在U盘中或者是将UEFI的设置导出到U盘中进行备份，还可以将升级文件放入U盘中进行UEFI系统的升级，部分高端的主板甚至可以直接在UEFI环境下联网升级。</em></p><h2 id="UEFI的组成"><a href="#UEFI的组成" class="headerlink" title="UEFI的组成"></a>UEFI的组成</h2><p><img src="http://p95to5vmm.bkt.clouddn.com/BIOS%E4%B8%8EUEFI%20%283%29.jpg" alt=""></p><p>▲UEFI在逻辑上可分为软件和硬件两个部分</p><p>UEFI在概念上可以分为<strong>平台初始化框架和UEFI Image</strong>两大部分，细分下来则由初始化模块（Pre EFI，简称PEI）、驱动执行环境（DXE）、驱动程序（UEFI Drivers）、兼容性支持模块（CSM）、UEFI应用（UEFI Applications）和GUID磁盘分区（GPT分区）/ OS Loaders组成。</p><p>初始化模块和驱动执行环境是UEFI的运行基础，通常被整合在主板的闪存芯片中，这点与传统BIOS是比较类似的。而这两者也被归属在UEFI的平台初始化框架中。</p><p><strong>驱动程序、兼容性支持模块、UEFI应用和GUID磁盘分区则归属于UEFI Image。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/BIOS%E4%B8%8EUEFI%20%284%29.jpg" alt=""></p><p>▲图为UEFI各部分组件之间的交互逻辑</p><p><strong>●初始化模块：</strong>开机的时候初始化模块首先得到执行，负责CPU、主板芯片及存储设备的初始化工作。</p><p><strong>●驱动执行环境：</strong>初始化完成后则载入驱动执行环境，即Driver Execution Environment，简称DXE，DXE是硬件的UEFI驱动程序加载和运行的必要基础环境。</p><p><strong>●驱动程序：</strong>DXE通过枚举的方式加载各种总线及设备的驱动，而这些驱动程序则可以放置在系统的任意位置，只要确保其可以按顺序被正确枚举即可。硬件的UEFI驱动一般是放置在硬盘的UEFI专用分区中，只需要系统正确加载这个硬盘，对应的驱动就可以正常读取并应用</p><p><strong>●兼容性支持模块：</strong>兼容性支持模块（CSM）是有点特殊的过渡时期的产物，是为了让不具备UEFI引导功能的操作系统也能在UEFI环境下顺利完成引导开机，这个兼容性支持模块将为UEFI提供类似于传统BIOS的系统服务，以此保证UEFI在技术上能有良好的过渡。</p><p><em>小七注：Windows操作系统在vista之后均已支持UEFI启动，而需要实现UEFI启动，还需要主板支持，且硬盘分区表要是GPT分区表，此三者缺一不可，缺一都要使用CSM才可以正常开机进入操作系统。</em></p><p><strong>●UEFI应用：</strong>硬件初始化完，操作系统启动之前的核心应用，比如：启动管理（多硬盘多系统的启动顺序）、BIOS设置、UEFI Shell、诊断程式、调度和供应程式、调试应用、包括CPU的超频，主板散热风扇的转速等等都可以在这里控制。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/BIOS%E4%B8%8EUEFI%20%285%29.jpg" alt=""></p><p>▲图为UEFI Shell</p><p><strong>●GUID磁盘分区/ OS Loaders：</strong>GPT分区表作为UEFI标准中不可或缺的重要一环，突破了老旧的MBR分区表最大仅支持2TB硬盘，四个主分区、分区表容易丢失等不足，补足了UEFI启动三要素（主板、硬盘分区表、操作系统）中硬盘分区表这关键的一环。</p><h2 id="UEFI的未来"><a href="#UEFI的未来" class="headerlink" title="UEFI的未来"></a>UEFI的未来</h2><p>UEFI有着如此多的好处，不仅收到了广大电脑用户的喜爱，同时也受到了……额……一些居心叵测的人的喜爱。由于UEFI使用C语言编写，在难度上较汇编语言降低了很多，因此容易遭到黑客的破解或者是恶意软件的植入，加上UEFI强大的应用能力（相对BIOS而言），在UEFI搞一个恶意软件什么的不是美滋滋？</p><p>尽管如此，UEFI依然是目前的主流趋势。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BIOS和UEFI这两个概念对于刚接触计算机硬件的朋友来说可能有些难以区分，最近正好有空，就稍微整理了一下有关知识和大家分享交流一下，如文中有任何错误不足，还望不吝赐教。&lt;/p&gt;
    
    </summary>
    
      <category term="科普" scheme="http://www.tiny777.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="硬件" scheme="http://www.tiny777.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>手机充电技术发展史</title>
    <link href="http://www.tiny777.com/2017/08/14/170814phoneChargingDev/"/>
    <id>http://www.tiny777.com/2017/08/14/170814phoneChargingDev/</id>
    <published>2017-08-13T16:00:00.000Z</published>
    <updated>2018-07-17T10:26:07.600Z</updated>
    
    <content type="html"><![CDATA[<p>随着科技的发展，智能手机的性能愈发强大，普及度也是越来越高，而它在我们的日常生活中的地位更是水涨船高。但是在电池技术没有什么突破性发展的今天，续航成了所有手机不得不提的一项参数，而充电作为其中不可或缺的一环，也是被各大手机厂商不遗余力地进行宣传。今天小七就带大家来简单了解一下手机充电技术的发展史。<br><a id="more"></a></p><h1 id="充电知识"><a href="#充电知识" class="headerlink" title="充电知识"></a>充电知识</h1><p>在继续后面的故事之前，我们需要先补充一点基础的充电方面的知识。</p><h2 id="知识点一：充电的电压以及发热"><a href="#知识点一：充电的电压以及发热" class="headerlink" title="知识点一：充电的电压以及发热"></a>知识点一：充电的电压以及发热</h2><p>目前大多数手机使用的电芯都是单锂或者多并锂组成，电芯工作电压在3.0V~4.4V之间，均压平台3.6V-3.8V。当进行充电行为时，电能进入手机后通过手机内的降压电路处理后再输出3.3~4.5V左右的电压给电池充电。而这个电压转换压降过程，就是由手机内的充电管理IC模块负责。<br><strong>这个电压转换压降过程会产生发热，电压差距越大产生的热量会越多。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2802%29.jpg" alt=""><br>▲图为充电器工作原理示意图</p><h2 id="知识点二：充电的电流以及功率"><a href="#知识点二：充电的电流以及功率" class="headerlink" title="知识点二：充电的电流以及功率"></a>知识点二：充电的电流以及功率</h2><p>手机充电时的电流并不是一直不变的。优秀的充电方案应该是手机需要多大的功率，充电器就给多大的功率，而不是手机只能被动地接受充电器一成不变的功率。<br>当手机处于低电量的时候，手机会要求充电器火力全开，这就是所谓的充电峰值。在这个时候充电速度非常快，但是损耗和发热也很大。<br>充电时，随着手机电量的上升，充电的功率往往是逐渐下降的。当手机的电量充到60%~80%的时候（具体看手机厂商的设定），充电电流会减小，以达到减少电池损耗和手机发热量等目的。<br>在后面这个阶段，电流往往只有几百毫安甚至更小，充电的功率也很小，也就是我们常说的涓流充电。<br>需要注意的是，涓流充电是大功率充电时代的产物，对于5V/500mA的充电器是没有涓流充电这么一说的。（电流本来就很小）</p><p><strong>下面开始正文，本文分为“史前”时期、初露锋芒、快充现世、高低之争和一统天下五个部分。</strong></p><h1 id="“史前”时期"><a href="#“史前”时期" class="headerlink" title=" “史前”时期"></a> “史前”时期</h1><p>我们先来说一下当年功能机还统治着地球的时期，比较早期的充电器和现在的充电器主要有三个比较明显的区别：</p><ul><li>①    以前的充电器并不像现在这样数据线和适配器（充电头）分开，而是一体的，也就是充电头连着数据线；</li><li>②    以前的充电器功率其实很小，一般都是5V/500mA,也就是2.5W（瓦）的功率；</li><li>③    以前的充电器单纯只能充电，而现在负责的充电器把数据线拔下来接到电脑上还可以进行数据传输（同时也能充电）</li></ul><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2803%29.jpg" alt=""><br>▲图左为老式一体充电器（黑），右为新式分体式充电器（白）</p><blockquote><p>注：此处并非指分体的充电器要优于一体的充电器，实际上两者各有优劣</p></blockquote><p>为什么当时的充电器功率这么小呢？主要原因有两个：</p><ul><li>①    手机相对功能少，耗电少，因此电池也小（大多数是几百毫安时/mAh），不需要太大功率的充电器；</li><li>②    大功率的充电器制造难度大，成本高，在当时的环境下显然不划算；</li></ul><p>但是随着手机的发展，尤其是安卓手机的崛起，手机功能也开始增多，耗电量也开始增大，电池容量也开始突飞猛进，到了动则上千毫安时的时代。这个时候如果还是继续使用着5V/500mA的充电器，那么就会出现充电非常慢，而且会出现边充电边玩手机，电量还是越来越少的这种”入不敷出”的情况。</p><p>在智能手机萌芽的时候，USB接口在手机上也随之普及开来。而手机充电技术的变革，就从这里开始了。</p><h1 id="初露锋芒"><a href="#初露锋芒" class="headerlink" title="初露锋芒"></a>初露锋芒</h1><p><strong>比较早开始出现的充电标准是USB BC 1.2（BC是Battery Charge的简称）。</strong></p><p>USB规格第一次是于1995年，由Intel（英特尔）、NEC（日本电气株式会社）、Compaq（康柏）、DEC（美国数字设备公司）、IBM（国际商业机器公司）、Microsoft（微软）、Northern Telecom（北方电信公司）等七家公司组成的USB IF（USB Implement Forum）共同提出。</p><p><strong>BC 1.2的出现，让同时进行充电和数据传输成为了主流。</strong></p><p>USB BC1.2标准由USB IF协会于2010年颁布，指的是可直接为关闭的便携式设备电池充电，成为建立通过USB端口为电池充电的正确方式的关键标准。</p><p>说白了，BC1.2就是可以给包括手机在内的便携式设备使用USB接口充电（包括关机充电）的一套官方标准。</p><p>BC 1.2出来之前，除了日渐强大的只能手机，诸如数码相机、DV等便携式设备也开始逐渐受到人们的青睐。这些便携式设备与电脑之间的数据交换也变得频繁了许多，因此，USB接口在这些设备上开始普遍起来。</p><p>尽管USB接口出现的目的是为了传输数据和连接诸如键盘鼠标的设备而并不是充电，但是在这时候，如果能使用USB接口给这些设备充电，那么就会方便很多，USB BC 1.2也就应运而生了。</p><p>目前市面上主流的USB接口可以分为USB 2.0和USB 3.0两种，其中两者的电压都是5V，而电流方面USB 2.0为500mA，USB 3.0为900mA。</p><blockquote><p>注：</p><ul><li>①    USB 3.1 gen1其实就是USB 3.0（最大传输速率仍然是5Gb/s），而USB 3.1 gen2才是升级版，最大传输速率可达10Gb/s，最大输出电压/电流可达20V/5A）；</li><li>②    传输数据的USB 2.0的线缆中只有四根线，充电的MicroUSB 2.0线缆中有五根线，而USB 3.0中升级为了九根线；</li><li>③    常见的USB分线器/集线器/HUB等可以将一个USB接口分出多个USB接口的设备，在没有独立外接电源的情况下，很有可能因为给每个USB接口提供的电流不足而导致连接在该USB接口上的设备无法正常使用甚至是损坏，因此大家在使用这类产品的时候一定要小心。</li></ul></blockquote><p>USB BC 1.2最大的功劳就是使得USB充电的最大电流能够达到1500mA也就是1.5A，尽管它没有提升电压（因为要适配其他便携设备），但是将电流提升到1.5A之后，USB接口充电的最大功率就能够达到7.5瓦（W），这个时候的USB BC 1.2已经足够应付当时的手机充电了。</p><p>USB BC 1.2的出现不仅使得当时的USB充电规范混乱的场面得到了规范，而且它对于集线器/分线器/HUB也有着很好的支持，特别需要注意的是，为了保证每个接口能有足够的电流，支持BC 1.2的集线器/分线器/HUB往往都需要外接电源。 </p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2804%29.jpg" alt=""><br>▲图为USB BC 1.2工作方案</p><p><strong>前排提示：千万不要小看USB IF协会哦</strong></p><h1 id="快充现世"><a href="#快充现世" class="headerlink" title="快充现世"></a>快充现世</h1><p>尽管USB BC 1.2标准已经能满足当时的充电需求，但是科技的发展是无止境的。随着智能手机的发展，对充电的速度再次提出了更高的要求。而就在这个时候，发布USB BC 1.2标准的USB IF协会居然没有给出一套可行的解决方案，而这就为后来的快充标准大混战埋下了伏笔。</p><p>到了2013，高通大佬就出场了。当时高通一拍桌子，振臂一呼：同志们，跟着我有肉吃！它率先突破了USB IF协会关于USB BC 1.2标准中的1.5A的最大电流限制，将其提升到了2A也就是10W的功率（5V/2A），充电速度大幅提升。</p><p><strong>这就是高通的QuickCharge快充1.0版本，也就是QC 1.0快充。</strong></p><p>了解高通的同学应该都知道，高通在手机芯片和通信专利方面可谓是一方巨擘，而凭借着这个霸主级别的地位优势，高通可以迅速推广自己的QC快充标准。然后，就可以坐着收QC标准的授权费。</p><p>而到了2014年，情况就有些不一样了，这个时候虽然Type-C的数据线已经面世，但却还没有普及，手机上依旧还使用着MicroUSB 2.0接口的数据线（也就是大家常说的安卓线）。前面我们已经提到了，由于MicroUSB 2.0的数据线内部只有四根线，对电流的承载能力非常有限，2A基本就是极限了，而Type-C接口优于设计的优越性，接口的触点非常多，因此内部可以增加的线比MicroUSB 2.0要多得多,最大可支持5A的电流。所以Type-C接口与生俱来就对大电流有着极大的友好。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2805%29.jpg" alt=""><br>▲图左为Type-C型接口，图右为MicroUSB 2.0接口</p><blockquote><p>注：</p><ul><li>①    Type-C接口只是一种接口类型，由于体积小，正反可插，以及可以兼容诸多协议，因此有着“数据接口的终极形态”之称，但也因为其兼容了诸多协议，可以集成视频、音频、数据、供电等各种接口和协议（如雷电三），导致目前市面上的Type-C接口功能不一，对新手来说比较不友好。</li><li>②    常见的MicroUSB除了2.0，还有MicroUSB 3.0，手机上有三星的note3和s5采用了这种接口。但是由于MicroUSB 3.0体积太大，因此后来就没有手机采用这种接口了，反倒是移动硬盘现在用的比较多。</li></ul></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2806%29.jpg" alt=""><br>▲图为MicroUSB 3.0数据接口</p><blockquote><p>注：以下提及的MicroUSB如无标注则均为MicroUSB 2.0</p></blockquote><h1 id="高低之争"><a href="#高低之争" class="headerlink" title="高低之争"></a>高低之争</h1><p>我们继续回到快充发展史的2014年。</p><p>而这个时候，如果还要继续通过增大电流的方法来提升充电功率，MicroUSB那孱弱的身躯可承受不了这巨大的电流。于是乎，以高通QC为首的高压快充方案和以OPPO VOOC为首的低压大电流快充方案就此分道扬镳，而快充协议的混战也从此展开。</p><p><strong>先来说说高通这边的高压快充方案。</strong></p><p>我们都知道P（功率）=U（电压）*I（电流），而既然当时增大电流不行，那就增大电压呗，同样是18W功率的快充，如果要用5V电压的话，电流已经超过了3A，正常的MicroUSB是绝对受不了的。而使用12V的电压，电流就只需要1.5A，一下子电流就降下来了。这种方案的一大好处就是成本比较低，而坏处就是将充电器的电压升到这么高，在二次降压过程中手机的充电管理IC产生的热量也是极大的，所以高压快充的一大特点就是手机发热严重。</p><blockquote><p>注意，1.5A是QC标准比较推荐的电流，因为2A是Micro USB的极限，业界的普遍共识是，不要把器件用到极限值，而是要预留余量。</p></blockquote><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2807%29.jpg" alt=""><br>▲图为高压快充方案示意图</p><p><strong>接下来我们再来说说OPPO的VOOC低压大电流快充。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2808%29.jpg" alt=""><br>▲图为低压大电流快充原理示意图<br>和高通不同，OPPO这边采用的是另外一种解决方案。不是说正常的MicroUSB数据线承载不了这么大的电流嘛，那就把充电器从头到尾彻底改造一番。OPPO采用在当时来说相当另类的解决方案，在普通的MicroUSB数据线中增加了两个个触电，使得内部从五根线变成了七根线，充电头也因为整合了IC电路而变得奇大无比。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2809%29.jpg" alt=""><br>▲图片来自充电头网</p><p>不仅如此，因为从头改造电路，所以数据线只能用官方的特制数据线，一般的数据线无法达到快充的效果，而且这样做的成本也很高，大电流充电对于电池的损耗也更为明显，很多使用初期的VOOC快充的手机在使用大约一年之后，电池续航严重下降。</p><p>但是，付出了如此巨大的代价，OPPO也不是没有收获的。</p><p>初代的VOOC快充就凭借着5V/5A的25W超大功率，<strong>在充电速度上一骑绝尘，</strong>使得其余手机都难以望其项背。而由于它将发热源外置到充电器中，手机在充电时发热量明显小于高压快充方案。既然VOOC快充如此优秀，OPPO自然也不能藏着掖着，于是乎……</p><p><strong>充电五分钟，通话两小时的广告词响彻大江南北。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2810%29.jpg" alt=""><br>▲图为OPPO R11官方宣传文案</p><p><strong>低压大电流方案虽然成本高，且对充电设备有比较高的要求（尤其是线材），但是手机上的发热量小，充电速度更快。</strong></p><h1 id="一统天下"><a href="#一统天下" class="headerlink" title="一统天下"></a>一统天下</h1><p>随后联发科也推出自己的Pump Express（PE）和后来的Pump Express Plus（PEP）快充，而魅族的mCharge快充就是基于此，华为早期推出了Fast Charge Protocol（fsp）快充，国际巨头三星也有自己的AFC（Adaptive Fast Charging）快充，而小米和努比亚等一众使用高通SoC作为自己旗舰手机SoC的厂商也是使用的高通的QC快充。以上提到的这些都是使用的高压快充方案。</p><p>当然低压大电流方案这边也不是没有援军，比如说一加。一加CEO刘作虎作为OPPO前高管，尽管一加使用的是高通的SoC，但是在一加推出自己的快充方案时，还是选择了低压大电流方案，也就是一加Dash闪充。</p><p>看到这里是不是觉得高压快充方案已经赢得了胜利，低压方案只能在一旁苟延残喘？</p><p>当然不是！事情在2016年发生了转变。</p><p>2016年，Type-C接口已经普及得七七八八了，安卓旗舰手机基本都是使用这种接口，这就为低压方案的翻身提供了有利条件。（尽管Type-C接口支持大电流，但是其线材依旧比较粗）</p><p>这一年，华为改变了快充方案，推出了自家的另一类快充（scp），全称Super Charge Protocol，搭载的机型有荣耀Magic、Mate9和P10/plus，使用的是4.5V/5A的低压大电流方案。</p><p>而联发科这边的PEP快充，也转投了低压方案，魅族最新发布的旗舰Pro7 Plus搭载的mCharge4.0也是使用了低压方案，早前的mCharge3.0属于高压快充方案（24W），充电器输出电压最高可达12V；而mCharge4.0（25W）属于低压大电流方案，充电器输出电压5V，电流可达5A。</p><p>努比亚也推出了自家的快充方案，名为NeoCharge，使用的是5V/5.2A的26W低压大电流快充方案，搭载在努比亚2017年发布的M2上。</p><p>至于小米……额……好像没有低压快充方案，目前已有的澎湃S1上搭载有9V/2A的18W的澎湃快充，是典型的高压快充方案。不知道澎湃S2会不会给我们带来惊喜呢？</p><p>再说说高通，高通似乎也发现了低压方案的优势，在最新的QC4快充上，也使用了低压大电流方案，不过于此同时也还支持着高压快充方案。</p><p>尽管目前低压大电流方案已经基本统治了快充，但是各家的快充协议互不兼容，可以说给消费者带来了很大的苦恼。</p><p>这个时候，又到USB IF协会出场了。</p><p><strong>USB IF协会之前当然也没有闲着，发布了基于USB 3.1中Type-C接口的USB Power Delivery（简称USB PD）的充电标准，最高可以提供100W（20V/5A）的充电功率，旨在统一便携移动设备的充电标准。</strong>USB IF的梦想是美好的，只是现实往往比较残酷。各家厂商自己做手机，再做快充标准，当然都是首选自家的快充协议，USB PD标准也就被晾到了一边。</p><p>但是梦想还是要有的，万一实现了呢？</p><p>要知道，USB IF协会的背景可不弱（都是行业巨头联合成立的），而谷歌官方也是表示安卓一定要支持USB PD协议，不要乱搞些有的没的快充协议。加上USB IF协会积极与各国以及各个高端实验室沟通，其最新发布的USB PD3.0已经成功收编高通的QC4快充协议，至此，高通QC、联发科PEP、华为fcp、scp，OPPO的VOOC等快充协议基本被USB PD3.0收纳。而厂商日后研发自己的快充技术，只要基于USB PD的协议即可。USB PD协议有望一统江湖。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2811%29.jpg" alt=""><br>▲图为USB PD3.0协议</p><p><strong>但是，尽管前途一片光明，道路还是一片崎岖，快充大一统，还是有不短的路要走。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着科技的发展，智能手机的性能愈发强大，普及度也是越来越高，而它在我们的日常生活中的地位更是水涨船高。但是在电池技术没有什么突破性发展的今天，续航成了所有手机不得不提的一项参数，而充电作为其中不可或缺的一环，也是被各大手机厂商不遗余力地进行宣传。今天小七就带大家来简单了解一下手机充电技术的发展史。&lt;br&gt;
    
    </summary>
    
      <category term="科普" scheme="http://www.tiny777.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="手机" scheme="http://www.tiny777.com/tags/%E6%89%8B%E6%9C%BA/"/>
    
      <category term="充电" scheme="http://www.tiny777.com/tags/%E5%85%85%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>王志东和新浪</title>
    <link href="http://www.tiny777.com/2017/08/10/170810WZD&amp;Sina/"/>
    <id>http://www.tiny777.com/2017/08/10/170810WZD&amp;Sina/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2018-07-16T12:19:59.223Z</updated>
    
    <content type="html"><![CDATA[<p>说起新浪，大家第一反应可能就是微博。没错，微博如今在国内确实有着举足轻重的影响，但是谁又能想到，在17年前，这家公司还因为互联网危机而解雇了身为CEO的创始人，并免去其董事身份。而这个遭遇了乔布斯老爷子那般被扫地出门的厄运之后，再也没能回到自己创办的公司。<br><a id="more"></a></p><p><strong>这个人，就是王志东。</strong></p><h1 id="莞中学霸，北大才子"><a href="#莞中学霸，北大才子" class="headerlink" title="莞中学霸，北大才子"></a>莞中学霸，北大才子</h1><p>让我们把时间的指针拨回五十年前。</p><p>1967年，那时，文革才刚刚开始，国家的经济还是一片荒芜。在广东虎门的一个小农村里，随着婴儿的啼哭声响起，这个世界又迎来了一个新生命。</p><p>王志东的少年时期，可以说是非常困难了。不过好在父母两人都是教师，家里住的是单位的房，虽然不可能每顿都有肉吃，但是赶上运气好的时候，杀只鸭子，全家人可以吃两星期。至于那些高档的生活用品，就更加不可想象了。</p><p>捡块砖头，拾个木块，这就是王志东小时候的玩具。家里只能给他一个放瓶瓶罐罐的小柜子，毕竟除了他，还有三个孩子。</p><p>幼年的艰苦并没有影响到他的学业，小学时就因为连跳两级升入初中，而获得学校的特许，能自由进入学校的图书馆。父亲也因此奖励了他一个他梦寐以求的电烙铁，这在王志东的无线电生涯中，可谓是浓墨重彩的一笔。</p><p>在就读东莞中学（高中）时，他不仅参加了学校的无线电兴趣班，后来还因设计了一种教学演示用的高阻电压表而获得了一个教学仪器比赛的第一名。</p><p>1984年，王志东考入了北大无线电系。这在当时，可以说是非常厉害了。</p><p><strong>而王志东第一次接触计算机，就有点意思了。</strong></p><p>当时刚入校，学校组织新生参观机房，老师一边演示一边问有谁学过。在当时的中国计算机可还是稀罕物件儿，出身贫困的王志东身处在东莞这样的小城市（当时），自然是没有见过的。但身边好几个北京上海的同学都说学过，王志东不知咋滴就跟着说学过。而他又正好站在前面，老师就让他上去操作一下。之后就是脸红脖子粗，什么都不知道了。</p><p>这件事不但没有打压王志东的斗志，反而激起了他不服输的精神。自学一个月后，王志东以不错的成绩提前考试并通过这门课程。在让老师惊讶之余，也得到了老师的重视。</p><p>1987年，王志东还没毕业，但是却已经利用课余时间到中关村搞些小买卖。</p><p>踏上中关村这片孕育了中国互联网雏形的土地，本以为在学校学得差不多的王志东感觉找到了第二个大学。他进入了一家小公司，一个人从头拼到尾，拉客户、谈判、讲价、签合同、装货、调试、配软件、培训、收费都要自己来。而正是这些在他的同学眼里看来“不搞学问、赚点小钱、特俗”的经历，给他在客户、同行和技术等方面夯实了基础。</p><p>毕业之后，王志东在方正和新天地公司待了一段时候，最后进入了四通集团，成为了四通利方公司的总经理。</p><p><strong>而四通利方，正是新浪的前身之一。</strong></p><h1 id="网景上市，泡沫初显"><a href="#网景上市，泡沫初显" class="headerlink" title="网景上市，泡沫初显"></a>网景上市，泡沫初显</h1><p>1995年8月9日，硅谷一家创始资金只有四百万美元的小公司——网景，在华尔街上市的几个小时后，瞬间成为了二十亿美元的巨人。网景的上市，瞬间引爆了美国大众和华尔街。<strong>通用动力公司花了四十三年才使市值达到二十七亿美元，而网景，只用了一分钟。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2802%29.jpg" alt=""></p><p>美国计算机历史博物馆策展人马克·韦伯如是说道。 </p><blockquote><p><strong>“网景公司的上市证明，一个基于万维网的公司，可以引起商界的重视，这是互联网繁荣的开始。”</strong></p></blockquote><p>网景一夜崛起的神话，再加上当时雅虎的成功，杨致远成为新美国梦的象征，互联网技术第一次向世人展现出惊人速度与庞大规模，整个硅谷都为互联网而疯狂。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2803%29.jpg" alt=""></p><p>在互联网的飓风中，整个硅谷都忙得人仰马翻，脑子也没办法再理性地思考了，很多人都失去了方向。果敢与理性著称的风险投资家们，在这股前所未有的气氛中，变得盲目而疯狂。</p><blockquote><p>“我想上市，像苹果的乔布斯一样。“王志东说。</p></blockquote><blockquote><p>“你现在没办法上市，要经过几个步骤：调整业务方向、管理架构、融资等等。”摩根斯坦利银行的一位董事总经理回应。</p></blockquote><blockquote><p>“那你们能帮我吗？”王志东问。</p></blockquote><blockquote><p>“你的公司请不起我们！”对方答道。</p></blockquote><p>这是1995年7月发生的一幕，当时王志东正赴美寻求风险投资。而摩根斯坦利银行就是帮助网景成功上市的那家投行。</p><p><strong>1995年底，王志东应IBM邀请，第三次访美。</strong></p><p>前两次访美，每次他都要带一大箱子的科技杂志，他甚至还想在硅谷设立一个办事处，这样便能有一个能够了解世界的通道。但是互联网改变了他的想法。</p><p>第三次访美时，王志东用一个存贮在一个附在科技杂志封底的软盘中的上网账号，在美国酒店的房间里利用电话线第一次连上了网络。<strong>王志东当时就意识到：这样的技术一旦被推广开来，人们猎取信息的速度、数量和便捷性，都会呈现爆炸性的增长。就像相对论里提到的‘虫洞’一样，时间与空间的距离可以被瞬间穿透，而这一浩大的工程一旦展开，自然会带来无限商机！</strong></p><p>英特尔创始人之一的安迪·格罗夫曾说：</p><blockquote><p>“能够识别风向的转变，并及时采取正确的行动以避免沉船，对于一个企业的未来是至关重要的。”</p></blockquote><p>在接触了互联网之后，从在方正做程序员开始就在做中文平台的王志东对于软件技术的想法发生了裂变。<strong>他认为，如果把软件和互联网结合起来，将在一个新的平台上产生一系列新的应用，这就是下一个风口。</strong></p><p>事实证明了王志东的预判是正确的。今天，那怕只是你手机上的一个计算器APP，都可能需要联网获取汇率信息来帮助你完成货币转换。</p><p><strong>而当时的王志东认为：互联网会给他们带来一个全新的游戏规则——他们有可能去打破旧的体系。中国IT业怎么做都是在微软的阴影下，就是把微软拿走还有其他公司，作为一个后来者，最好的办法就是等新的游戏规则出来的时候，自己和竞争对手都站在同一起跑线上，各自的优势也就发挥出来了。</strong></p><p>1996年4月29日，四通利方的 <a href="http://www.srsnet.com" target="_blank" rel="noopener">www.srsnet.com</a> 中文网站正式开通。</p><p><strong>四通利方想成为华人首选资讯网站的构想渐渐浮现出来。</strong></p><h1 id="四通华渊，新浪面世"><a href="#四通华渊，新浪面世" class="headerlink" title="四通华渊，新浪面世"></a>四通华渊，新浪面世</h1><p>“当时特别担心，这要是吵翻了，人家一生气不开车送我，恐怕就要一个人客死在美利坚新大陆了。”</p><p>在回忆当时自己赴美和华渊网谈判合并事项时，王志东调侃道。</p><p>当时，四通利方想成为华人首选资讯网站，华渊网（Sinanet）是一个不得不面对的强劲对手。但是，有意思的是，四通和华渊尽管都看对方不过眼，想要消灭掉对方，但却谁都没有这个能力把对方吃下。</p><p>98年9月，王志东和华渊网CEO姜丰年在北京会面，30分钟后，姜丰年迫不及待地提出了合并的想法，而王志东也表示不排除任何形式的合作。</p><p>实际上，当时占有中国大陆市场的四通想要进军美国和台湾市场，而占有美国市场的华渊网想要进军中国大陆市场，狭路相逢，两者必有一战。更何况旁边还有着虎视眈眈，随时可能杀入局的雅虎。</p><p>尽管在合并谈判过程中波折重重，但是王志东还是凭借着中国大陆市场巨大的潜力，使得合并方案按照他的设想进行。</p><p><strong>广告大师克劳德·霍普金曾说：恰当的名称本身就是广告。</strong></p><p>而新浪，正是如此。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2804%29.jpg" alt=""></p><p><strong>合并后的网站英文名确定为Sina，而当时的员工则根据音译确定中文名为“赛诺王“。当时印刷品即将交付印刷，而王志东却对姜丰年说：“等一下，明天我给你回音。”第二天，他告诉对方一个名称：新浪。</strong></p><h1 id="新浪模式，赴美上市"><a href="#新浪模式，赴美上市" class="headerlink" title="新浪模式，赴美上市"></a>新浪模式，赴美上市</h1><p>1999年，新浪、搜狐、网易等中国第一批互联网企业已经在红红火火地运营着，没有人提出它们的生存有法律上的问题。但在它们酝酿出境上市时，需要得到包括信息产业部、证监会等部门的审批，而这些犹如潜藏的定时炸弹一般的合规问题突然爆发，首当其冲的就是新浪。</p><p><strong>在当时的中国，有着这么一条规定：放开经营的电信业务，一律不允许境外各类团体、企业、个人以及在中国境内已兴办的外商独资、中外合资和合作企业经营或者参与经营，也不得以任何形式吸引外资参股经营。</strong> </p><p>尽管在2001年12月11日，为了适应中国加入世贸的要求，信息产业部决定废止上述的规定。不过这些都是后话了。</p><p>在新浪筹划赴美上市的那段时间里，王志东白天要去信息产业部的办公室给主管领导们解释互联网和新浪的情况，晚上还要回到公司和律师一起研究新浪的股权结构、资本、现金、人流、架构等等。</p><p><strong>最后王志东想出来一个模式：一个公司没法上市，那就分为三个，其中做互联网内容服务的留在国内，不上市；上市的是美国公司，不在中国做互联网业务。</strong></p><p><strong>这就是后来被包括搜狐、网易在内的很多互联网公司使用的新浪模式。</strong></p><p>当时的具体情况是这样的，被初步认可的方案是：一是要把提供互联网内容服务的运营权交到国内公司手里；二是提供互联网内容服务的必须是个全中资公司，上市公司在国内公司里不占任何股份；三是合约本身必须遵守国内的法律法规。</p><p>而根据新浪最后文本的招股说明书中，上市的是一家在开曼群岛注册的控股公司，拥有四个全资子公司：香港注册的利方投资有限责任公司、运行香港网站的香港新浪有限责任公司、美国加州注册的新浪在线（Online，包括北美和台湾两个网站）、以及在英属维尔京群岛注册的新浪有限公司。</p><p>其中上市主体的全资子公司之一利方投资有限责任公司成立于1993年3月，由它控股97.3%和四通集团下属的北京四通电子技术有限责任公司合资建立了北京四通利方信息技术有限责任公司。北京四通利方信息技术有限责任公司为一个技术服务公司，和国内的ICP公司仅发生商业协议关系。同时，另在国内注册成立一家北京新浪互动广告有限责任公司。四通利方向国内ICP提供技术服务，而国内ICP以双方商定的价格购买服务。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2805%29.jpg" alt=""></p><p>（有兴趣的童鞋可以搜索一下新浪模式，这在商业上是非常著名的一个上市模式，在这里碍于篇幅，小七只能简述一下）</p><p>实际上，新浪当时的情况要更复杂一些，新浪赴美上市时，已经将关键业务剥离。虽然还是和拆分出来的公司有着千丝万缕的关系，但对于崇尚简单的投资者来说还是过于复杂。这必然会导致其上市筹措资金的能力被削弱。但王志东表示：尽管对投资者来说有遗憾，但这是当时他们可以拿出的最好的解决方案了。</p><p><strong>2000年4月13日11点，新浪开始挂牌交易，每股定价为17美元。当日以20.875美元收盘。当天交易额共达684.79万股，大约筹得资金6600万美元。</strong></p><p>新浪总算是赶上了赴美上市的末班车，而迎接他们的，是更大的危难。</p><h1 id="泡沫破灭，扫地出门"><a href="#泡沫破灭，扫地出门" class="headerlink" title="泡沫破灭，扫地出门"></a>泡沫破灭，扫地出门</h1><p>2000年，全世界都在兴奋地庆祝着新千年的到来，而一场意想不到的危机却悄无声息地降临了。从3月10日开始，纳斯达克指数在长达两年时间里，狂跌百分之七十八。七千五百亿美元的资产和六十万个工作岗位蒸发，只有不到一半的网络公司活过了2004年。</p><p>进入2001年，新浪股票价格一路下滑，跌破2美元。董事局的董事们纷纷抱怨新浪的财经状况，称王志东应该为这一状况负责。但其实当时整个互联网泥沙俱下，大家的日子都不好过，许多公司的股票价格与企业CEO的经营能力并没有太大的关系。但总有肤浅无知的董事会幻想着能够通过换帅之举来扭转乾坤。</p><p>据芝加哥当时一家统计机构统计，进2001年2月一个月，各大科技公司离职的CEO高达119人，比去年同期增长了37%。曾经高高在上的CEO也变得朝不保夕。</p><p>而王志东，也没有例外。</p><p><strong>2001年6月1日，新浪董事们决定免去王志东的CEO及董事身份。</strong></p><p><strong>王志东事后回忆：得到自己被解职的消息，有三个强烈的感觉。一是震惊，二是感觉被出卖了，三是想回家，想回到中国。</strong></p><blockquote><p>“互联网用如此短的时间内就创造了一场人类历史上影响全球的波澜，史无前例。辉煌的泡沫盒破碎，是互联网这个新生命能量的另一种表达。”</p></blockquote><p>——摘自央视纪录片《互联网时代》</p><p>后来的新浪还是挺过了危机，而王志东再也没有回到新浪，而是创办了点击科技。</p><p>王志东认为点击科技是他的另一个孩子，他说：以前攀登过几个高峰，现在终于你有机会去攀登一次新的高峰，这样人反而有一种很兴奋的感觉。到了春天更重要的是你要更努力地去耕作，你不把握好现在这个机会，错过这个机会的话，到了收获的季节，你有可能就一无所有。</p><p>不论如何，作为如今互联网的受益者，我们都应该向曾经的互联网元老们献上最崇高的敬意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起新浪，大家第一反应可能就是微博。没错，微博如今在国内确实有着举足轻重的影响，但是谁又能想到，在17年前，这家公司还因为互联网危机而解雇了身为CEO的创始人，并免去其董事身份。而这个遭遇了乔布斯老爷子那般被扫地出门的厄运之后，再也没能回到自己创办的公司。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.tiny777.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="新浪" scheme="http://www.tiny777.com/tags/%E6%96%B0%E6%B5%AA/"/>
    
      <category term="王志东" scheme="http://www.tiny777.com/tags/%E7%8E%8B%E5%BF%97%E4%B8%9C/"/>
    
  </entry>
  
  <entry>
    <title>MBR分区表</title>
    <link href="http://www.tiny777.com/2017/08/08/170808MBR/"/>
    <id>http://www.tiny777.com/2017/08/08/170808MBR/</id>
    <published>2017-08-07T16:00:00.000Z</published>
    <updated>2018-07-10T15:33:03.606Z</updated>
    
    <content type="html"><![CDATA[<p>目前来说，比较主流的两种硬盘的分区表是MBR和GPT（GUID）。今天小七带大家了解一下比较旧一点的MBR分区表（相对于GPT）。</p><a id="more"></a><p>本文越往后的部分难度越大，各位看官老爷可根据自己的实际需要阅读。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>MBR这个概念首次出现，是在1983年的IBM PC DOS 2.0操作系统当中，因此也被称为DOS分区结构。</strong>实际上，MBR分区结构是一种应用非常广泛的硬盘分区结构，不仅仅是DOS，包括windows系列操作系统、Linux以及基于X86架构的UNIX操作系统等平台均有使用。</p><p><strong>MBR的英文全称是Main Boot Record（一说Master Boot Record）</strong>，翻译过来的中文名称是主引导记录。</p><p><strong>它主要有以下几个特点：</strong></p><p>1、在我们常见的电脑中，一般是BIOS+MBR、(U)efi+GPT的组合；</p><p>2、MBR分区表中单个分区最大仅支持2TB，而整个分区表最大也是仅支持2TB的硬盘；</p><p>3、MBR分区表最大只支持四个主分区（可少不可多），如果觉得四个不够用，可以使用三个主分区+一个扩展分区的组合（扩展分区仅能存在一个，但扩展分区下可以分出无数个逻辑分区）；</p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2801%29.jpg" alt=""></p><p>▲图为MBR分区常见的两种组成</p><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>MBR分区表占用一个扇区，位于硬盘的0磁头、0柱面、1扇区。</p><p>这里需要引用一下度娘百科对于磁头柱面扇区这三个概念的解释。</p><p><strong>磁头(Heads)</strong>：每张磁片的正反两面各有一个磁头，一个磁头对应一张磁片的一个面。因此，用第几磁 头就可以表示数据在哪个磁面。</p><p><strong>柱面(Cylinder)</strong>：所有磁片中半径相同的同心磁道构成“柱面”，意思是这一系列的磁道垂直叠在一起，就形成一个柱面的形状。简单地理解，柱面数=磁道数。</p><p><strong>扇区(Sector)</strong>：将磁道划分为若干个小的区段，就是扇区。虽然很小，但实际是一个扇子的形状，故称为扇区。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2802%29.jpg" alt=""></p><p>▲图为磁头、柱面、扇区示意图</p><p>①不管是CHS寻址还是LBA寻址，都需要知道磁头柱面和扇区来对数据进行定位；</p><p>②通常来说，一个扇区的大小为512字节（Byte）；</p><p>③该扇区为隐藏扇区，实际上，0磁头0柱面的扇区均为隐藏扇区，一般的硬盘访问命令无法访问，因此MBR分区表放在此处比较安全，不容易遭到破坏，同理，许多病毒也会隐藏在这里，不容易被查杀。</p><p>由于MBR扇区中大部分都被MBR所占领，因此这个扇区就被称为MBR扇区。而MBR扇区主要是由MBR、DPT和结束标识三个部分组成。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2803%29.jpg" alt=""></p><p>▲图为标准MBR结构</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>MBR的产生并不依赖于任何一个操作系统，在电脑开机通电后，BIOS进行自检，自检完成后就开始执行MBR中的启动代码（Bootloader），通过读取启动代码来确定需要引导的系统。因此，双系统或者是多系统安装完成之后，需要修改引导启动项，即为修改此处的启动代码（Bootloader）。</p><p>执行完启动代码之后，系统下一步就会读取MBR扇区中的最后两个字节，如果是55AA，则继续读取磁盘分区表DPT来确定是否有活动分区，从而启动系统；如果不是55AA，系统会认为该MBR为非法MBR，系统将停止操作并报错。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2804%29.jpg" alt=""></p><p>▲图为MBR分区表的硬盘开机过程</p><p>这里再额外提一下。</p><p>MBR中的选用磁盘标识，这个在MBR分区中比较重要。如果安装的是windows操作系统的话，系统在启动时需要依赖该磁盘签名来识别硬盘并确定该磁盘是否初始化。</p><p><strong>而DPT的作用其实非常简单，就是管理磁盘的分区信息。如果DPT被破坏，那么系统将无法识别该磁盘上的所有分区，并且有可能会提示需要格式化磁盘。</strong></p><p>一般小白遇到这种情况会比较无奈，只能格式化，对磁盘中宝贵的数据说拜拜，<strong>但是，其实只要修复DPT，就可以读取分区，找回数据，实际上，硬盘的数据一直都在那里。那怕是对硬盘进行一般的格式化操作，也只是将DPT中对应的分区的数据清空，并没有影响到原来的在其他扇区的数据，此时只要不进行数据的读写操作（防止覆盖原有数据），还是有可能找回丢失的数据的。</strong></p><h1 id="DPT"><a href="#DPT" class="headerlink" title="DPT"></a>DPT</h1><p>DPT其实有挺多可以讲的地方，这里拿一个分区（16Byte）为例，<strong>讲解一下MBR分区最大只能识别2TB硬盘的原因。</strong></p><h1 id="分区项表内容及含义"><a href="#分区项表内容及含义" class="headerlink" title="分区项表内容及含义"></a>分区项表内容及含义</h1><p><strong>注：1 Byte=8 bit</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2805%29.jpg" alt=""></p><p>▲图为MBR中的DPT的分区项表的内容及含义</p><p>再对其作进一步的解释：</p><p>第1字节的引导标识：如果该分区内安装了操作系统，则该分区必须为活动分区，方可成功引导该分区内的操作系统（即为80H）；</p><p>第5字节的分区类型符：记录该分区的类型，每一种类型都有一个对应的值，如00H——表示该分区未用（即没有指定，DOS和win不识别该类型分区）、06H——FAT16分区；0BH——FAT32分区、 07H——NTFS分区等；</p><p>第2、3、4、6、7、8字节：记录了这个分区的起始和结束磁头、扇区、柱面，即可确定该分区在硬盘中的位置以及该分区的容量；</p><p><strong>最后的8个字节就是MBR分区为何最大只能识别2TB容量的原因了。</strong></p><p><strong>前提知识背景：</strong></p><p>①    计算机中采用2进制，bit是最小的大小计量单位；</p><p>②    1 Byte=8 bit；</p><p>③    一个扇区的大小是512Byte；</p><p>④    Byte、KB、MB、GB、TB、PB这六者按照从小到大的顺序排列，且相邻两者间差1024倍（即2^10）；</p><p>⑤    在上面的缩写中，大写的B表示Byte，小写的b表示bit，两者相差8倍；</p><p>由于只有4 Byte来记录本分区的总扇区数，4 Byte=32 bit，在2进制即有2^32种状态，假设全部为1，则最多有2^32个扇区。即</p><p><img src="http://p95to5vmm.bkt.clouddn.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2806%29.jpg" alt=""></p><p>所以MBR分区中单个分区最多只能识别2TB容量，而由于记录已使用的扇区的字节数也是4，所以整个分区最多也只能识别2TB容量。</p><h1 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h1><p>前面我们已经提到了当四个主分区无法满足需求的时候，可以使用三个主分区+一个扩展分区的方法，在扩展分区下，理论上可以分出无数个分区（实际还要看操作系统的限制等其他因素）。</p><p>这里还要介绍一个概念——<strong>EBR（Extended Boot Record），即扩展分区引导记录。其原理和工作模式与MBR非常相似，但它是链式的，</strong>也就是说一个EBR不够用，可以再增加一个，新增加的EBR链接在旧的EBR之后，一个链接着一个，就像链条一样。理论上就可以实现无数个分区。</p><p>MBR分区表的内容介绍到这里就结束了，如果对它还有兴趣的话，或者觉得这里的介绍太过简单的话，可以去查询一些相关书籍和论坛。另外，如果文中有任何错误，还望不吝赐教。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前来说，比较主流的两种硬盘的分区表是MBR和GPT（GUID）。今天小七带大家了解一下比较旧一点的MBR分区表（相对于GPT）。&lt;/p&gt;
    
    </summary>
    
      <category term="科普" scheme="http://www.tiny777.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="硬盘" scheme="http://www.tiny777.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Filqlo时钟屏保</title>
    <link href="http://www.tiny777.com/2017/07/03/170703Filqlo/"/>
    <id>http://www.tiny777.com/2017/07/03/170703Filqlo/</id>
    <published>2017-07-02T16:00:00.000Z</published>
    <updated>2018-07-10T12:03:52.293Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家现在还有没有使用屏保的习惯，反正小七是有的。毕竟在挂机下载，或者是写作业需要开着电脑的时候，开着屏保还是相当不错的。</p><p>今天小七就给大家安利一款在Windows平台上免费的屏保软件吧。（苹果系貌似现在也免费了）</p><a id="more"></a><p>话不多说，咱们进入正文。</p><h1 id="Filqlo简介"><a href="#Filqlo简介" class="headerlink" title="Filqlo简介"></a><strong>Filqlo简介</strong></h1><p><img src="http://p95to5vmm.bkt.clouddn.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2801%29.jpg" alt=""></p><p>Fliqlo原本是一款在iOS应用商店里面的付费时钟屏保软件，但是由于其复古简单的设计，迅速吸引了一大波粉丝，现在也有了Windows版本和Mac版本。</p><p>他们的官网是fliqlo.com，需要科学上网才能正常访问。有兴趣的童鞋可以去他们的官网看看。</p><p>下面搬运一小部分他们官网的介绍。</p><p>Fliqlo for iOS is a clock app that allows you to make your mobile/tablet device screen look like a flip clock. Thanks to its visibility, you can read the time even from a distance.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Enlarge/reduce to any size</p><p>Switch between 12/24 hour clock (* without a leading zero)</p><p>Switch between portrait and landscape mode</p><h2 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h2><p>$0.00 Free for charge</p><p>小七注：windows平台的版本并不需要收费，因此大家可以放心下载，如果想支持开发者的话，可以通过它们网站下方的paypal来进行捐赠。</p><h1 id="设置教程"><a href="#设置教程" class="headerlink" title="设置教程"></a>设置教程</h1><h2 id="Mac-amp-IOS"><a href="#Mac-amp-IOS" class="headerlink" title="Mac &amp; IOS"></a>Mac &amp; IOS</h2><p>对于iOS和Mac平台的用户，直接打开AppStore输入关键字Fliqlo下载安装即可使用。Mac用户也可以去官网下载。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>至于Windows的用户就稍稍麻烦一些，需要科学上网到他们的官网进行下载。</p><p>为了方便大家使用，小七已经将windows版本从官网搬运过来，点击这里即可下载。</p><p>链接：<a href="https://pan.baidu.com/s/1eROCql0" target="_blank" rel="noopener">https://pan.baidu.com/s/1eROCql0</a> 密码：7w2w</p><p>下载完成之后，我们直接双击打开。就会弹出windows中的屏幕保护程序的设置界面。<br><img src="http://p95to5vmm.bkt.clouddn.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2805%29.jpg" alt=""></p><p>我们点击设置，可以看到有几个简单的参数可以进行修改。</p><p>它们分别是调节12/24小时制，放大和缩小（最大125%）和恢复默认设置。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2801%29.jpg" alt=""></p><p>▲默认设置</p><p><img src="http://p95to5vmm.bkt.clouddn.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2802%29.jpg" alt=""></p><p>▲放大到125%（最大）</p><p><img src="http://p95to5vmm.bkt.clouddn.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2803%29.jpg" alt=""></p><p>▲切换为24小时制</p><p>小七注：由于windows平台是免费的，所以BUG的存在也是不可避免的，初次设置的时候可能会出现崩溃的情况，但是只要重启一下电脑就可以解决。（只是初次设置时可能需要重启，不是每次都要重启）</p><p>虽然Fliqlo在功能上没有之前很火的Wallpaper Engine那么强大，但是它几乎不占用系统资源且在安装上要简单不少。</p><p>玩腻了Wallpaper Engine的同学，确定不来一个Fliqlo试试吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道大家现在还有没有使用屏保的习惯，反正小七是有的。毕竟在挂机下载，或者是写作业需要开着电脑的时候，开着屏保还是相当不错的。&lt;/p&gt;
&lt;p&gt;今天小七就给大家安利一款在Windows平台上免费的屏保软件吧。（苹果系貌似现在也免费了）&lt;/p&gt;
    
    </summary>
    
      <category term="分享" scheme="http://www.tiny777.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="屏保" scheme="http://www.tiny777.com/tags/%E5%B1%8F%E4%BF%9D/"/>
    
  </entry>
  
  <entry>
    <title>电脑的AB盘去哪了？</title>
    <link href="http://www.tiny777.com/2017/05/12/170512DiskAB/"/>
    <id>http://www.tiny777.com/2017/05/12/170512DiskAB/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2018-07-16T12:18:34.510Z</updated>
    
    <content type="html"><![CDATA[<p>今天聊一个很怀旧的话题。</p><p>相信很多人都知道我们的电脑是从C盘开始的，C盘也就是我们平时说的系统盘。</p><p>很多人可能会好奇，为什么要从C盘开始，而不是从A盘开始？A盘和B盘去哪了？</p><a id="more"></a><p>其实要解释的话，一句话就够了。<br>AB这两个盘符是预留给软驱的。<br>换句话说， AB盘是计算机发展初期给软驱留的位置。</p><p><strong>下面是讲故事时间。</strong> </p><h1 id="System-370"><a href="#System-370" class="headerlink" title="System 370"></a>System 370</h1><p>大概是在20世纪70年代初，准确来说是1970年6月30日的样子，IBM推出了System360的继任者——System 370。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%281%29.jpg" alt=""><br>▲System/370 Model 145（图片来源于IBM官网）</p><p>关于System370的功能进步小七就不在这里赘述，有兴趣的童鞋可以打开IBM官网输入System370进行搜索既可查看相关信息。</p><p>但是IBM的System370计算机面临这样一个问题，就是这种计算机的操作指令存储在半导体内存中，一旦计算机关机，指令便会被抹去。</p><p>这句话是什么意思呢？</p><p><strong>说白了就是这种电脑并没有我们现在意义上的硬盘（ROM），它只有半导体内存（RAM），</strong>因此只能将数据都存储到半导体内存中。而我们都知道，<strong>RAM是断电不保存数据的</strong>，也就是说，万一一个不小心重启一下电脑或者是断电了，你辛辛苦苦写了几天几夜的代码就没了……</p><p><em>想象一下你在办公室奋战几天几夜，赶在DDL之前把代码写了出来，然后累到在办公室睡着了，结果那晚就断电了，第二天PM找你要代码，好家伙，你要怎么办？</em></p><h1 id="8英寸软盘"><a href="#8英寸软盘" class="headerlink" title="8英寸软盘"></a>8英寸软盘</h1><p>IBM当然也意识到了这个问题，所以早在1967年，IBM的SanJose实验室的存储小组受命开发一种廉价的设备，为大型机处理器和控制单元保存和传送微代码。这种设备成本必须在5美元以下，以便易于更换，而且必须携带方便，于是软盘的研制之路开始了。</p><p><em>研发组：又要便宜又要便携，你咋不上天呢？</em></p><p>这个其实可以算是现代的软盘驱动器的鼻祖，但是在携带形式上又有点像U盘等移动存储介质。事实上，在当时计算机的体积没有达到足够小以至于能满足人们便携的时候，这种方式确实是最靠谱也是最保险的。<br>想象一下：一个程序猿把自己花高价买来的DOS系统装到软驱里面，然后再把自己花了毕生精力写的代码放到软驱里面，然后这很可能就是这个程序猿最大的财富了。</p><p><em>乍一想，怎么有点武功秘诀的感觉？</em></p><p>1971年，还在IBM推出了第一款8英寸的软盘，这是一种直径8英寸的表面涂有金属氧化物的塑料质磁盘，这个就是真正意义上的现代软盘驱动器的鼻祖了。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%282%29.jpg" alt=""></p><p>▲图为8英寸软盘（图片来源见水印）</p><h1 id="磁盘之父——Alan-Shugart"><a href="#磁盘之父——Alan-Shugart" class="headerlink" title="磁盘之父——Alan Shugart"></a>磁盘之父——Alan Shugart</h1><p>事实上，软盘的成功推出并没有我们字面上理解的这么简单，其实早在20世纪50年代时，IBM公司董事长小托马斯·沃森迅速把事业扩展到美国西海岸，下令在加利福尼亚圣何塞市附近新建实验室和工厂。约翰逊带领着30多名青年工程师，在不到三年时间，就为IBM创造了引人注目的技术成果——磁盘存储器。在约翰逊领导IBM圣何塞实验室研制硬盘的过程中，一位名叫Alan Shugart的青年工程师发挥了关键作用。</p><p>实际上，Alan Shugart也是一个硅谷的传奇人物，年幼家贫的他曾经三度创业，并且两度被自己公司的董事会扫地出门，其中就包括了著名的希捷公司（全球最大的PC硬盘制造商之一）。尽管如此，这位令人敬佩的前辈还是保持着对生活的热爱，实在是值得我们学习。</p><p><strong>后来因为Alan Shugart对于磁盘的杰出贡献，人们亲切地称呼他为磁盘之父。</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%283%29.jpg" alt=""></p><p>▲Alan Shugart</p><h1 id="5-25英寸软盘"><a href="#5-25英寸软盘" class="headerlink" title="5.25英寸软盘"></a>5.25英寸软盘</h1><p>上面说到的Alan Shugart，不久后就离开了IBM，并且创办了一家名为Shugart Associates的公司。没错，就是用他自己的名字命名的公司。</p><p>当时Alan Shugart和其他几位联合创始人的目标就是打造一家出色的八英寸软盘驱动器制造公司。因为，当时软盘驱动器制造工业刚刚起步，而且这项技术是IBM公司的薄弱环节。于是，他们就决定以此为契机大干一场。</p><p>但是，8英寸软盘虽然便携，始终还是大了些。后来他们就推出了5.25英寸的软盘。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%284%29.jpg" alt=""></p><p>▲如图从左往右以此为3.5/5.25/8英寸软盘（图片来源见水印）</p><h1 id="3-5英寸软盘"><a href="#3-5英寸软盘" class="headerlink" title="3.5英寸软盘"></a>3.5英寸软盘</h1><p>5.25英寸的软盘虽然从体积到容量上都有了一定的进步，但它还是有很多缺点，比如软盘采用的外包装比较脆弱，容易损坏，体积也比较大。因此很多厂家并没有满足于这种软盘，他们都在不断地进行探索，以寻求更为先进的软盘。</p><p><strong>新一代软盘的开发终于被日本的索尼公司拔得头筹。</strong></p><p>1980年，索尼公司率先推出体积更小、容量更大的3.5英寸软驱和软盘，不过刚推出的时候在当时并没有被一些主要PC厂家所接受，市面上流行的依旧是5.25英寸的软盘。</p><p><strong>1982年，微软基于索尼的3.5英寸软盘标准制定了统一的行业标准。</strong></p><p>但是标准制定了是一回事儿，人家用不用就是另外一回事儿了。关于3.5英寸软盘的普及，这里我们还要提一下苹果公司。</p><p>1984年，苹果推出的麦金塔（Macintosh）电脑，根本就不存在5.25英寸软盘接口这种东西，直接就上了3.5英寸的软盘接口。这个能不能算是帮忙普及小七还真的说不准，但是至少可以说明苹果在换接口这件事上还是不遗余力的。</p><p><em>2016款MacBookPro：喵喵喵？</em></p><p><strong>为什么要占用AB两个盘符而不是A一个？</strong></p><p>这个说起来就有点扎心了。当年的软盘容量普遍不大，一般都是几十KB。后来大的有几MB。</p><p>那么我们说回一开始软盘容量还是几十KB的时候。假设只有一个软盘接口，然后你需要从一张软盘复制数据到另一张软盘上，你只能先将数据复制到半导体内存（RAM）中，然后拔出第一张软盘再插入另一张软盘完成复制。</p><p>那么现在问题来了：</p><p>假设我要一次复制60KB的数据，而RAM只有32KB那怎么办？</p><p>额……好吧，那就给你两个软盘接口吧。</p><p>还有一说是随着操作系统的发展，一些指令不能像以前那样将其从软盘中存放到RAM中操作，因此需要额外读取操作数据的时候只能再多加一个软盘接口。</p><p>不管怎么说，两个软盘接口在某些时候总是比一个要方便很多的。</p><h1 id="硬盘驱动器"><a href="#硬盘驱动器" class="headerlink" title="硬盘驱动器"></a>硬盘驱动器</h1><p>人的野心是永远没有办法满足的，不然就不会有科技的进步这一回事儿了。硬盘当然是越大越好，很快人们就发明了存储容量更大的硬盘驱动器（即为我们现在用的机械硬盘），硬盘驱动器也很快凭借其容量大，速度快的优势获得了广大人民群众的喜爱和支持。</p><p>但是，早期的硬盘驱动器只能作为软盘的“从属”。</p><p>这是什么意思呢？就是说硬盘驱动器刚出来的时候，操作系统还是装在软盘上面的，开机还是得要像之前那样，先插入软盘，然后开机，电脑从软盘中读取数据进行操作，硬盘还是不能当作启动盘的。所以硬盘驱动器的盘符就是从C开始的。</p><p>然而随着技术的发展，到了MS-DOS 5.0时代，微软官方钦定了C盘作为系统的启动盘/主硬盘。</p><p>随后，软盘渐渐地被淘汰，但是AB这两个盘符还是为他们空出来了。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%285%29.jpg" alt=""></p><p>2006年，Alan Shugart因心脏病手术失败而永远离开了我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天聊一个很怀旧的话题。&lt;/p&gt;
&lt;p&gt;相信很多人都知道我们的电脑是从C盘开始的，C盘也就是我们平时说的系统盘。&lt;/p&gt;
&lt;p&gt;很多人可能会好奇，为什么要从C盘开始，而不是从A盘开始？A盘和B盘去哪了？&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.tiny777.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="硬盘" scheme="http://www.tiny777.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
      <category term="历史" scheme="http://www.tiny777.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>驱动备份(免第三方)</title>
    <link href="http://www.tiny777.com/2017/05/09/170509BackupDrivers/"/>
    <id>http://www.tiny777.com/2017/05/09/170509BackupDrivers/</id>
    <published>2017-05-08T16:00:00.000Z</published>
    <updated>2018-07-17T09:23:24.502Z</updated>
    
    <content type="html"><![CDATA[<p>给大家分享一个用win10自带命令完成驱动备份的方法。<br><a id="more"></a></p><h1 id="什么是驱动？"><a href="#什么是驱动？" class="headerlink" title="什么是驱动？"></a>什么是驱动？</h1><p>驱动的英文名称叫做driver，一说到driver，大家就懂了，司机嘛。</p><p>没错，驱动就是司机，只不是驱动是驾驭硬件的司机，而驱动是听从于系统和软件的调配的。</p><p><strong>也就是说，驱动是沟通硬件和软件的桥梁。</strong></p><p>那么在装系统之后，一定要干的一件事就是装驱动。一般来说，装驱动有三种方法：</p><ul><li>一是打开系统更新，让系统自动搜索安装；</li><li>二是自己手动下载，去官网等比较可靠的网站下载然后手动安装；</li><li>三是用第三方软件，下个驱动精灵驱动人生什么的一键安装。</li></ul><p>这三种方法都各有优劣，<strong>但是，有一点它们是一样的，那就是都需要联网下载。</strong>一些小的驱动还好，几MB或者几十MB，大的轻松达到四五百MB，下载起来费时费力，因此最好的方法当然是事先备份。</p><p>而对于大多数人来说，备份就是下载一个驱动精灵/驱动人生什么的软件，然后再一键备份，恢复的时候再安装这个软件来恢复。</p><p><strong>小七个人还是比较喜欢用系统自带的命令来完成备份这个操作。</strong></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="新建备份目录"><a href="#新建备份目录" class="headerlink" title="新建备份目录"></a>新建备份目录</h2><p>我们首先在非C盘的磁盘驱动器里面新建一个文件夹，命名的话随意，自己能记住就行，建议直接新建在根目录，这样后面会比较方便操作（这里小七在X盘根目录下新建了一个名为drivers的文件夹）；</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2801%29.jpg" alt=""></p><h2 id="找到CMD-Powershell"><a href="#找到CMD-Powershell" class="headerlink" title="找到CMD/Powershell"></a>找到CMD/Powershell</h2><p>由于接下来的操作需要系统管理员的权限，而一般在运行菜单中运行CMD是没有系统管理员权限的，因此我们需要在这个目录下找到CMD，并且将他发送到桌面快捷方式以便于以后操作，目录：C:\Windows\System32</p><blockquote><p>小七注：温馨提示：微软在Win10创意者版本之后已经使用了功能更加强大的Powershell来替代CMD成为系统的默认命令执行工具，但是CMD依旧可用（就是相当于你的默认音乐播放器从酷狗音乐变成了网易云音乐），因此并不影响本次操作。</p></blockquote><p>因此所有能够用CMD完成的操作，用POWERSHELL也能够完成，具体使用哪个看童鞋们自己的爱好。<br>不嫌麻烦的同学可以直接忽略上一步，找到CMD后，右键选择以系统管理员身份运行；</p><h2 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h2><p>然后我们在CMD窗口中输入下列命令：</p><pre><code>dism /online /export-driver /destination:X:\drivers</code></pre><p><strong>注意：X：drivers部分为驱动的备份目录，根据情况不同此处也有所不同。</strong></p><p>然后稍等片刻，系统会自动备份所有的驱动；</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2803%29.jpg" alt=""></p><p>驱动的具体数量因电脑而异，驱动的数量多少与电脑的质量并没有必然联系。</p><p>操作完成之后我们再打开刚刚选择的备份文件夹看看，会发现多了很多文件夹。</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2806%29.jpg" alt=""></p><p>每个文件夹都对应着一个驱动。看到这里可能有些童鞋就懵了，这命名，我怎么知道哪个文件夹是哪个驱动呢？</p><p><strong>答案是：不需要知道。</strong></p><h2 id="恢复驱动"><a href="#恢复驱动" class="headerlink" title="恢复驱动"></a>恢复驱动</h2><p>当我们需要安装驱动的时候，直接打开设备管理器</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2804%29.jpg" alt=""></p><p>点击左上角的设备管理器</p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2805%29.jpg" alt=""></p><p><strong>①找到需要安装的驱动（一般驱动程序有问题的硬件设备都会有一个黄色的感叹号）</strong></p><p><strong>②右键点击我们需要安装驱动程序的硬件，选择更新驱动程序软件</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2807%29.jpg" alt=""></p><p><strong>③选择下面的浏览计算机以查找驱动程序软件</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2808%29.jpg" alt=""></p><p><strong>④然后选择刚刚备份的目录，并默认勾选下面的包括子文件夹，然后系统会自动帮你搜索安装驱动程序</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2809%29.jpg" alt=""></p><p><strong>⑤最后安装完成</strong></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2810%29.jpg" alt=""></p><p><img src="http://p95to5vmm.bkt.clouddn.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2811%29.jpg" alt=""></p><p>这个操作难度不大，只要记住一条命令即可。适用于那些不喜欢使用第三方软件安装备份驱动的人群。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给大家分享一个用win10自带命令完成驱动备份的方法。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.tiny777.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Windows" scheme="http://www.tiny777.com/tags/Windows/"/>
    
      <category term="驱动" scheme="http://www.tiny777.com/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>安卓刷机基础</title>
    <link href="http://www.tiny777.com/2017/05/07/170507Android/"/>
    <id>http://www.tiny777.com/2017/05/07/170507Android/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2018-07-17T10:19:05.100Z</updated>
    
    <content type="html"><![CDATA[<p>正所谓“想要刷机刷得好，基础知识不能少”。对于想要折腾安卓的童鞋来说，刷机入门的门槛还有有点高的，因此小七整理了一些常见的概念，希望能给大家一些帮助。<br><a id="more"></a></p><h1 id="什么是安卓刷机？"><a href="#什么是安卓刷机？" class="headerlink" title="什么是安卓刷机？"></a>什么是安卓刷机？</h1><p>刷机，就是通过一定的技术手段向安卓手机中刷入ROM的过程。那么随着刷机的不断发展，刷入的东西类型也在逐渐增多，包括REC、ROM、内核甚至是基带固件等等。</p><h1 id="刷机方式都有哪些？"><a href="#刷机方式都有哪些？" class="headerlink" title="刷机方式都有哪些？"></a>刷机方式都有哪些？</h1><p>目前来说，主流的刷机方式基本可以分为两种：<strong>线刷和卡刷</strong>。<br>线刷和卡刷最大的区别就是：线刷刷机时需要通过USB数据线操作,而卡刷是通过内存卡进行操作。</p><h2 id="关于卡刷"><a href="#关于卡刷" class="headerlink" title="关于卡刷"></a>关于卡刷</h2><p>因为在早期，安卓手机的内存普遍偏小，因此一般会通过支持内存卡的方式来让用户获得更大的存储空间。而刷机包相对于早期的手机来说，算是比较大的了，一般来说是将刷机包复制进入内存卡中，再通过REC将刷机包刷入，最终完成整个刷机操作。<br>这里提一下，我们平时的正常情况下的手机系统升级，其实就是卡刷的一种。系统将系统更新文件下载到手机存储空间中，然后重启通过REC刷入更新的增量包或者是完整的刷机包。</p><h3 id="温馨提示："><a href="#温馨提示：" class="headerlink" title="温馨提示："></a><strong>温馨提示：</strong></h3><ol><li>增量包指的是在某个特定的系统版本上更新加入某些功能的更新包，它是不带有完整的整个手机操作系统的，因此在刷机的时候是不能当作刷机包使用的。</li><li>有些手机尽管不支持内存卡，但是会将手机自带的存储空间划分一部分出来当作内存卡，这部分的空间在地位上跟内存卡是一样的，只是不能像内存卡那样取出手机进行读写操作。这种情况前两年还比较常见，现在这么操作的手机好像比较少了。</li></ol><h2 id="关于线刷"><a href="#关于线刷" class="headerlink" title="关于线刷"></a><strong>关于线刷</strong></h2><p><strong>线刷最明显的特点就是需要通过数据线来操作，因此在线刷的过程中，需要非常注意数据线和手机的连接情况，千万不能断开数据线或者是关闭计算机或者是关闭手机等。</strong></p><p>同样地，由于线刷需要使用数据线的特点，它所能够进行的操作也就比卡刷更多，同时也更危险，比如说我们之前的刷入REC，就是通过线刷操作的。而很多情况下，手机不小心刷成砖了，救砖操作也是需要通过线刷进行的。</p><p>而现在很多手机厂商提供的官方刷机助手，都是需要连接数据线来进行操作，因此也是属于线刷。</p><p>由于现在手机已经有取消支持SD卡拓展的这个趋势，因此线刷的重要性也就凸现出来了。但是未来线刷和卡刷应该是会并存的，原因很简单：卡刷可以进行简单的刷机和系统更新等操作，线刷则可以进行更深度更敏感的操作。</p><h1 id="什么是ROM-image？"><a href="#什么是ROM-image？" class="headerlink" title="什么是ROM image？"></a>什么是ROM image？</h1><p><strong>对于安卓刷机来说，这个ROM image跟我们一般说的ROM是两个东西。</strong><br>这里我们简单地讲一下ROM和RAM这对双子星。</p><h2 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a><strong>RAM</strong></h2><p><strong>RAM的全称是Random Access Memory，中文名是随机存取存储器，我们日常称之为运行内存。</strong>也就是说，它是<strong>不能够断电保存数据</strong>的，主要是在我们的电子产品工作的时候，将需要调用的文件预先从ROM中读取出来，放入到RAM中（因为一般来说RAM的读写速度要比ROM快），以便于我们的CPU/GPU或者是SoC等调用。</p><h2 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a><strong>ROM</strong></h2><p><strong>ROM的全称是Read-Only Memory，中文名是只读内存，就是我们平时说的手机存储空间</strong>（用来放音乐图片视频等等的那个）。也就是说，它是可以断电保存数据，主要是用来长期存储数据的。</p><h2 id="ROM-image"><a href="#ROM-image" class="headerlink" title="ROM image"></a><strong>ROM image</strong></h2><p><strong>ROM image的全称是Read-Only Memory image，简称是ROM，</strong>中文名称叫只读内存镜像，因此会有些容易跟上面的ROM混淆。这里注意，<strong>ROM image的存在形式是一个文件，相当于我们电脑平时装系统的镜像文件。</strong></p><p><strong>那么在安卓刷机中，我们常常用ROM来指代自己要刷入的操作系统。</strong></p><h1 id="什么是OS和UI？"><a href="#什么是OS和UI？" class="headerlink" title="什么是OS和UI？"></a>什么是OS和UI？</h1><p><strong>OS就是Operating System，中文名叫做操作系统。</strong>比如说我们的Windows操作系统，安卓（Android，基于Linux）操作系统，苹果操作系统（iOS，全称叫iPhone Operating System）都可以叫做OS。</p><p>而对于移动端来说，除了比较常见的Android和 iOS，还有比较小众的WindowsMobile，Sailfish（旗鱼），Ubuntu（乌班图），BlackBerry OS（黑莓）等等。</p><p><strong>UI就是User Interface，中文名叫做用户界面。</strong>比如说我们常见的MIUI（小米），EMUI（华为，全称Emotion UI），Flyme（魅族）等等都是UI。</p><p>而一般来说，国内的安卓厂商为了做出自己的特色，都会有属于自己的UI，由于他们这些UI都是基于安卓，因此称不上是OS，只能算作UI。如果你见到名字当中有OS的（没错说的就是锤子的Smartisan OS），尽管名字里面有OS，但是还是属于UI。</p><p>由于手机厂商在UI的发力程度越来越高，修改的东西也越来越多，所以就有一种很尴尬的情况出现了，说它们是UI吧，好像又不止，说是OS吧，好像又不够格，然后就搞出了一些名词，比如说深度定制UI等等。</p><p><strong>刷机的时候，为了方便，我们一般来说是统一使用ROM或者是刷机包来指代这些东西。</strong></p><h1 id="什么是砖？"><a href="#什么是砖？" class="headerlink" title="什么是砖？"></a>什么是砖？</h1><p>这里的砖跟我们平时说的搬砖的砖不是一个概念。<strong>这里的砖指的是在刷机过程中因为操作不当而无法正常使用的手机，</strong>用不了的手机跟砖头没什么区别，因此人们很形象地称之为砖。一般来说，砖也会根据手机“受内伤”的程度进行划分，一些受伤较轻的砖还是可以救回来的，而那些受伤较重的……</p><h1 id="什么是BL？"><a href="#什么是BL？" class="headerlink" title="什么是BL？"></a>什么是BL？</h1><h2 id="BL简介"><a href="#BL简介" class="headerlink" title="BL简介"></a><strong>BL简介</strong></h2><p><strong>BL的全称叫做Bootloader，中文名字叫做（小七也不知道叫什么）。</strong>一般来说，大家都认为Bootloader是嵌入式系统在通电后执行的第一段代码。</p><p><strong>在这里用人话来说就是：手机开机要干的第一件事。</strong></p><p>BL在功能上有些类似于我们电脑的BIOS，但是实际上两者并不完全一样，手机中是不存在BIOS这一个说法的。</p><h2 id="BL能干什么"><a href="#BL能干什么" class="headerlink" title="BL能干什么"></a><strong>BL能干什么</strong></h2><p>那么要手机在通电之后（也就是我们按下开机键之后），需要干的第一件事是什么呢？打个比方来说，将军跟士兵们说要出征了，那么士兵们要干的第一件事当然是检查一下自己的装备、身体状况和精神状态有没有问题。</p><p>而对于手机来说，这里要干的事情就是初始化各个组件（屏幕、闪存、SoC、各个传感器等等），检查即将运行的固件、系统等等是否正常。</p><h3 id="什么叫锁BL"><a href="#什么叫锁BL" class="headerlink" title="什么叫锁BL"></a><strong>什么叫锁BL</strong></h3><p>既然BL能够检查即将运行的固件和系统，那么手机厂商就能在BL上动手，直接锁死BL，使得它只能识别官方的固件和系统，从而确定手机的稳定性和安全性。但是，这也就意味着不能刷机了，因为很多官方的REC只支持官方的ROM，因此刷机很多时候第一步要做的事情就是解锁BL，<strong>而对于很多厂商来说，解锁BL意味着放弃保修，</strong>因此刷机的童鞋一定要注意。</p><h3 id="怎么解锁BL？"><a href="#怎么解锁BL？" class="headerlink" title="怎么解锁BL？"></a><strong>怎么解锁BL？</strong></h3><p><strong>解锁BL的方法我们可以分为两种，官方解锁和暴力解锁。</strong></p><p>官方解锁的意思就是通过官方渠道解锁，一般是去官网或者是官方论坛，提供手机的IMEI码等进行申请，然后就可以获得解锁BL的解锁码。</p><p>暴力解锁的意思就是非官方渠道解锁，对于一些厂商来说，它们是不会提供BL的解锁方式的，因此需要一些民间的大神破解BL，破解的途径一般是利用各种漏洞，因此这种暴力破解的方法难度要更大一些。</p><p>由于安卓机型众多，小七难免会有疏漏，小七建议童鞋们可以去自己手机对应的论坛或者是贴吧了解详细情况。</p><h1 id="什么是REC？"><a href="#什么是REC？" class="headerlink" title="什么是REC？"></a>什么是REC？</h1><p><strong>REC的全称叫做Recovery，直译中文名叫做恢复</strong>，百度百科有个很奇怪的翻译叫做：Android手机备份功能。</p><p>实际上，REC的功能远不止备份这么简单。进入REC模式后，我们可以通过卡刷来升级操作系统，也可以擦除（wipe）手机数据，还可以恢复出厂设置，备份当前数据等等。</p><p>由于安卓系统的复杂原理，REC所处于的分区和我们手机系统所处的分区不同，因此，如果你不小心把系统搞崩了，可以进入REC对其进行一定的修复。也就是说，因为REC和手机的ROM处于不同分区，而不同分区之间是不会互相影响的，用REC可以进行一定程度的刷机。</p><p><strong>有些人会将REC比作我们修电脑时常用到的PE，实际上两者在地位上有些相似，但是在功能上还是有一定的差距的。</strong></p><p>官方的REC一般限制较多（只能刷入官方的固件、补丁、更新等等），而第三方的REC则在功能上要更加丰富一些，除了能够任意刷入第三方的ROM之外，有些甚至能够支持调整分区大小、在手机上实现双系统（早期的小米手机有这个功能，现在的不太清楚）。</p><p>以前比较旧的版本的REC在刷机的时候只能通过音量键和电源键操作，并且在卡刷的时候只支持将刷机包以update的文件名，zip的文件格式放入SD卡的根目录下进行操作，现在的REC则要好很多，除了能够支持触控操作，还能刷入任意命名的刷机包。</p><h1 id="什么是fastboot？"><a href="#什么是fastboot？" class="headerlink" title="什么是fastboot？"></a>什么是fastboot？</h1><p><strong>Fastboot的功能与REC相似，但是要更为高级，更为接近系统的底层。</strong></p><p>这句话可能比较难理解，这里简单地解释一下。更为高级的意思就是Fastboot能够执行的操作要比REC更多，比如我们之前的使用ADB刷入REC就是进入了fastboot模式执行的操作。</p><p>而更为接近系统的底层则意味着优劣共存。比如说，当你折腾手机的时候，不小心把REC搞崩了，没关系，我们还能够进入fastboot模式进行刷机，重新刷入REC，然后继续愉快地刷机。因此，几乎所有的救砖操作都是在fastboot模式下进行，但是，如果你连fastboot都进不去，那就意味着你的手机很有可能真的变砖了。</p><p>注意，我们如果使用第三方刷机软件（刷机精灵、刷机大师这些）进行一键刷机操作的时候，是属于线刷，它们会让你的手机进入fastboot模式，然后刷入这些刷机软件自己的REC，再进行刷入ROM的操作。</p><h1 id="什么是恢复出厂设置-双清-三清？"><a href="#什么是恢复出厂设置-双清-三清？" class="headerlink" title="什么是恢复出厂设置/双清/三清？"></a>什么是恢复出厂设置/双清/三清？</h1><h3 id="恢复出厂设置"><a href="#恢复出厂设置" class="headerlink" title="恢复出厂设置"></a><strong>恢复出厂设置</strong></h3><p><strong>顾名思义，恢复出厂设置就是将你的手机恢复到出厂状态</strong>，也就是手机刚从工厂里面加工组装完成，包装到包装盒里面的状态。需要注意的是如果你的手机升级了系统（安卓版本更新或者是UI的大版本更新），那么恢复出厂设置之后一般是不会回退你已经更新的版本的。<br>同时，恢复出厂设置默认不清除储存卡上的文件，且你先前做的关于设置的更改都不会保存。</p><h3 id="双清"><a href="#双清" class="headerlink" title="双清"></a><strong>双清</strong></h3><p>双清和三清往往需要进入REC或者是fastboot或者是使用ADB进行操作。在REC中，一般都是wipe data和wipe cache。</p><p><code>wipe data/factory reset:    清除用户数据并恢复出厂设置(刷机前必须执行的选项)</code><br><code>wipe cache partition:        清除系统缓存(刷机前执行，系统出问题也可尝试此选项,一般能够解决)</code></p><h3 id="三清"><a href="#三清" class="headerlink" title="三清"></a><strong>三清</strong></h3><p><strong>三清比双清多了一个清除虚拟机缓存，基本上三清已经是最彻底的清除手机数据的操作了。</strong></p><p><code>wipe data/factory reset:    清除用户数据并恢复出厂设置(刷机前必须执行的选项)</code><br><code>wipe cache partition:        清除系统缓存(刷机前执行，系统出问题也可尝试此选项,一般能够解决)</code><br><code>wipe dalvik cache:            清空虚拟机缓存(可以解决一些程序fc的问题)</code></p><p>很多人在刷机前都会有双清或者是三清的习惯，这样一来可以使手机刷机更加纯净，二来也可以避免之前残留的缓存文件对新刷入的ROM产生各种莫名其妙的影响，导致出现一些奇奇怪怪的问题（比如耗电量暴增，经常卡顿等等）。<br>现在一般三清用的不多，双清要更加多一些，原因就是三清会比较复杂，风险也比较大。</p><h1 id="什么是OTA升级？"><a href="#什么是OTA升级？" class="headerlink" title="什么是OTA升级？"></a>什么是OTA升级？</h1><p><strong>OTA，全称为On-The-Air，中文名不详。</strong>OTA更新的原理是通过网络下载更新包，存储在手机的存储空间中，然后再重启进行升级。OTA升级在原理上是属于卡刷的。</p><p>那么我们在日常生活中哪里会接触到OTA升级呢？实际上，我们所有的官方推送的手机更新，都是属于OTA更新。而能进行OTA升级的前提条件一般都是使用的官方REC+官方ROM+没有ROOT。是否解锁BL并不影响。</p><h1 id="什么是底包？"><a href="#什么是底包？" class="headerlink" title="什么是底包？"></a>什么是底包？</h1><p>之前我们说过，厂商可以通过锁BL的形式，使得手机只能识别官方的固件、ROM等等。那么这是不是意味着我们就不能刷机了呢？当然不是，要相信高手在民间，既然它要，我们就给它。</p><p>底包就是在这种情况下诞生的产物，它的主要目的就是使得手机能够先识别这个官方的ROM，然后我们再在这个ROM上面刷入我们自己制作的第三方ROM。</p><p>此处最典型的例子就是华为的EMUI，因为华为手机的特点，很多基于EMUI的第三方刷机包都需要基于某个特定的EMUI版本才能刷入。因此有一部分大神在制作第三方的ROM的时候，会基于官方的ROM进行修改和精简，并且加入一定的新功能。而这些制作出来的刷机包，就是需要先刷入底包的。由于华为对于刷机的支持并不友好，而且华为的主要用户群体并非是这一类的刷机发烧友，因此很多华为的机型的刷机包都是属于上述类型。</p><p>这里再额外补充一下。如果你的华为手机原来就是官方的ROM，在刷入这一类的刷机包的时候，只要你的EMUI版本符合这个第三方的刷机包的要求，是不需要刷入底包的。但是，如果你的手机已经刷入了第三方的ROM，再需要刷回这一类的ROM的时候，就需要事先刷入底包了。</p><h1 id="什么是ADB？"><a href="#什么是ADB？" class="headerlink" title="什么是ADB？"></a>什么是ADB？</h1><p><strong>ADB的全称是Android Debug Bridge，中文名就是“安卓调试桥”，</strong>也就是起到了一个连接安卓手机和电脑的桥梁的作用，可以实现许多安卓手机的调试功能（此处不一一列举），因此很形象地被称呼为Android Debug Bridge。</p><p>ADB其实并非是第三方工具，它是谷歌官方出品的工具，因此最纯净的下载方式就是去谷歌官网下载（需要科学上网）。</p><p>如果你嫌去官网麻烦，可以直接打开搜索引擎下载，小心一些不要下到流氓软件则问题不大。</p><h1 id="什么是内核？"><a href="#什么是内核？" class="headerlink" title="什么是内核？"></a>什么是内核？</h1><p><strong>内核，顾名思义就是我们手机的核心，准确的来说是我们手机的操作系统的核心。</strong>事实上不仅是手机的操作系统，每个操作系统都有对应的核心。</p><p>那么核心主要负责什么呢？<strong>基本上，所有沟通硬件和底层驱动的任务都是由核心来负责的。</strong>而不同的核心会有不同的特性。比如说：如果你的手机耗电量比较严重，那么你就可以刷入一个第三方优化过的内核，来达到省电的效果。</p><h1 id="什么是ROOT？"><a href="#什么是ROOT？" class="headerlink" title="什么是ROOT？"></a>什么是ROOT？</h1><p>ROOT在英语里面有根源的意思，<strong>而在安卓手机中，ROOT则意味着获取手机系统的最高权限，</strong>也就是相当于手机系统的超级管理员，能够执行一切操作，包括但不限于修改系统底层文件，后台安装应用程序，自动发送扣费短信等等，因此对于不知道如何使用ROOT权限的小白来说风险还是相当大的。</p><p>但是ROOT作为一把双刃剑，有坏也有好。修改系统文件虽然有可能导致系统损坏，但是也可以解锁一些手机在出厂时因为各种原因被手机厂商锁死的功能，又或者是卸载一些没用的系统软件，让手机从臃肿变得清爽。</p><p>因此关键还是看你怎么使用它。</p><h1 id="什么是Xposed？"><a href="#什么是Xposed？" class="headerlink" title="什么是Xposed？"></a>什么是Xposed？</h1><p><strong>Xposed是一个框架，它本身是不具备具体的功能的</strong>。但是有很多模块可以通过在Xposed框架上运行，实现一些很有意思的功能如各种个性化的手机定制。</p><p>因此，打个比方来说就是：Xposed本身相当于是一个容器，是用来装东西的，放米就成了米缸，放水就成了水缸，放木炭硫磺硝酸钾就成了炸弹。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正所谓“想要刷机刷得好，基础知识不能少”。对于想要折腾安卓的童鞋来说，刷机入门的门槛还有有点高的，因此小七整理了一些常见的概念，希望能给大家一些帮助。&lt;br&gt;
    
    </summary>
    
      <category term="科普" scheme="http://www.tiny777.com/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="安卓" scheme="http://www.tiny777.com/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
</feed>
