<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TinyChen&#39;s Studio</title>
  
  <subtitle>DO or DIE</subtitle>
  <link href="https://tinychen.com/atom.xml" rel="self"/>
  
  <link href="https://tinychen.com/"/>
  <updated>2021-08-10T09:00:00.000Z</updated>
  <id>https://tinychen.com/</id>
  
  <author>
    <name>TinyChen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DPVS-FullNAT模式管理篇</title>
    <link href="https://tinychen.com/20210810-dpvs-fullnat-management/"/>
    <id>https://tinychen.com/20210810-dpvs-fullnat-management/</id>
    <published>2021-08-10T09:00:00.000Z</published>
    <updated>2021-08-10T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍基于<code>CentOS7.9</code>系统部署DPVS的FullNAT模式的各种部署方式和配置管理，包括IPv4-IPv4、bonding、IPv6-IPv6、IPv6-IPv4（NAT64）和keepalived模式这五种方案。</p><span id="more"></span><p>以下的配置全部基于双臂模式，并且RS机器上面已经安装了DPVS相应的toa模块。我们先从单个网卡的IPv4简单配置开始，接着再做bonding配置，然后再进行IPv6简单配置，NAT64配置以及最后使用keepalived配置主备模式。</p><blockquote><p>本文中安装的DPVS版本为<code>1.8-10</code>，dpdk版本为<code>18.11.2</code>，详细安装过程已在之前的文章<a href="https://tinychen.com/20210728-dpvs-fullnat-deploy/">DPVS-FullNAT模式部署篇 - TinyChen’s Studio</a>中叙述过，这里不做赘述。</p></blockquote><h1 id="1、IPv4简单配置"><a href="#1、IPv4简单配置" class="headerlink" title="1、IPv4简单配置"></a>1、IPv4简单配置</h1><h2 id="1-1-架构图"><a href="#1-1-架构图" class="headerlink" title="1.1 架构图"></a>1.1 架构图</h2><p>首先是最简单的配置方式，直接使用ipvsadm的命令行操作来实现一个IPv4网络的FullNat模式，架构图如下：</p><p><img src="https://resource.tinychen.com/20210806163652.svg" alt="dpvs-two-arm-fnat-sample-fakeip"></p><p>这里我们使用dpdk2网卡作为wan口，dpdk0网卡作为lan口</p><h2 id="1-2-配置过程"><a href="#1-2-配置过程" class="headerlink" title="1.2 配置过程"></a>1.2 配置过程</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们把VIP 10.0.96.204 加到dpdk2网卡（wan）上</span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr add 10.0.96.204/32 dev dpdk2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 接着我们需要添加两条路由，分为是wan口网段的路由和到RS机器网段的路由</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 10.0.96.0/24 dev dpdk2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 192.168.229.0/24 dev dpdk0</span><br><span class="hljs-meta">#</span><span class="bash"> 最好再加一条到网关的默认路由保证ICMP数据包的回包能跑通</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add default via 10.0.96.254 dev dpdk2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用RR算法建立转发规则</span><br><span class="hljs-meta">#</span><span class="bash"> add service &lt;VIP:vport&gt; to forwarding, scheduling mode is RR.</span><br><span class="hljs-meta">#</span><span class="bash"> use ipvsadm --<span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> more info.</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -A -t 10.0.96.204:80 -s rr</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里为了方便测试我们只添加一台RS</span><br><span class="hljs-meta">#</span><span class="bash"> add two RS <span class="hljs-keyword">for</span> service, forwarding mode is FNAT (-b)</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t 10.0.96.204:80 -r 192.168.229.1 -b</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加LocalIP到网络中，FNAT模式这里需要</span><br><span class="hljs-meta">#</span><span class="bash"> add at least one Local-IP (LIP) <span class="hljs-keyword">for</span> FNAT on LAN interface</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm --add-laddr -z 192.168.229.204 -t 10.0.96.204:80 -F dpdk0</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们查看一下效果</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route show</span><br>inet 192.168.229.204/32 via 0.0.0.0 src 0.0.0.0 dev dpdk0 mtu 1500 tos 0 scope host metric 0 proto auto<br>inet 10.0.96.204/32 via 0.0.0.0 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope host metric 0 proto auto<br>inet 10.0.96.0/24 via 0.0.0.0 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope link metric 0 proto auto<br>inet 192.168.229.0/24 via 0.0.0.0 src 0.0.0.0 dev dpdk0 mtu 1500 tos 0 scope link metric 0 proto auto<br>inet 0.0.0.0/0 via 10.0.96.254 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope global metric 0 proto auto<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr show</span><br>inet 10.0.96.204/32 scope global dpdk2<br>     valid_lft forever preferred_lft forever<br>inet 192.168.229.204/32 scope global dpdk0<br>     valid_lft forever preferred_lft forever<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm  -ln</span><br>IP Virtual Server version 0.0.0 (size=0)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.96.204:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 1      0          0</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm  -G</span><br>VIP:VPORT            TOTAL    SNAT_IP              CONFLICTS  CONNS<br>10.0.96.204:80    1<br>                              192.168.229.204       0          0<br></code></pre></div></td></tr></table></figure><p>然后我们在RS上面启动一个nginx，设置返回IP和端口号，然后直接对VIP使用ping和curl命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ping -c4 10.0.96.204</span><br>PING 10.0.96.204 (10.0.96.204) 56(84) bytes of data.<br>64 bytes from 10.0.96.204: icmp_seq=1 ttl=54 time=47.2 ms<br>64 bytes from 10.0.96.204: icmp_seq=2 ttl=54 time=48.10 ms<br>64 bytes from 10.0.96.204: icmp_seq=3 ttl=54 time=48.5 ms<br>64 bytes from 10.0.96.204: icmp_seq=4 ttl=54 time=48.5 ms<br><br>--- 10.0.96.204 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 8ms<br>rtt min/avg/max/mdev = 47.235/48.311/48.969/0.684 ms<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> curl 10.0.96.204</span><br>Your IP and port is 172.16.0.1:62844<br></code></pre></div></td></tr></table></figure><h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h2><p>该模式非常的简单，可以快速配置检验自己机器上的DPVS能否正常工作，不过由于是单点，往往较少使用。</p><h1 id="2、bonding配置"><a href="#2、bonding配置" class="headerlink" title="2、bonding配置"></a>2、bonding配置</h1><p>目前DPVS支持配置<code>bonding4</code>和<code>bonding0</code>，两者的配置基本相同，配置方式可以参考<code>dpvs/conf/dpvs.conf.single-bond.sample</code>这个文件。</p><p>配置bonding模式的时候，不需要对slave网卡（如<code>dpdk0</code>等）指定<code>kni_name</code>这个参数，而是要在bonding中指定对应的<code>kni_name</code>，同时还要注意<code>primary</code>参数指定的网卡的MAC地址一般就是bonding网卡的MAC地址。</p><p><img src="https://resource.tinychen.com/20210806163659.svg" alt="dpvs-two-arm-fnat-bond4-fakeip"></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">! <span class="hljs-attribute">netif</span> config<br>netif_defs &#123;<br>    &lt;init&gt; <span class="hljs-attribute">pktpool_size</span>     <span class="hljs-number">1048575</span><br>    &lt;init&gt; pktpool_cache    <span class="hljs-number">256</span><br><br>    &lt;init&gt; device dpdk0 &#123;<br>        <span class="hljs-section">rx</span> &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        tx &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        fdir &#123;<br>            <span class="hljs-attribute">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64k</span><br>            status              matched<br>        &#125;<br>        ! mtu                   <span class="hljs-number">1500</span><br>        ! promisc_mode<br>        ! kni_name              dpdk0.kni<br>    &#125;<br><br>    &lt;init&gt; device dpdk1 &#123;<br>        <span class="hljs-section">rx</span> &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        tx &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        fdir &#123;<br>            <span class="hljs-attribute">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64k</span><br>            status              matched<br>        &#125;<br>        ! mtu                   <span class="hljs-number">1500</span><br>        ! promisc_mode<br>        ! kni_name                dpdk1.kni<br>    &#125;<br><br>    &lt;init&gt; device dpdk2 &#123;<br>        <span class="hljs-section">rx</span> &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        tx &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        fdir &#123;<br>            <span class="hljs-attribute">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64k</span><br>            status              matched<br>        &#125;<br>        ! mtu                   <span class="hljs-number">1500</span><br>        ! promisc_mode<br>        ! kni_name              dpdk2.kni<br>    &#125;<br><br>    &lt;init&gt; device dpdk3 &#123;<br>        <span class="hljs-section">rx</span> &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        tx &#123;<br>            <span class="hljs-attribute">max_burst_size</span>      <span class="hljs-number">32</span><br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        fdir &#123;<br>            <span class="hljs-attribute">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64k</span><br>            status              matched<br>        &#125;<br>        ! mtu                   <span class="hljs-number">1500</span><br>        ! promisc_mode<br>        ! kni_name              dpdk3.kni<br>    &#125;<br><br>    &lt;init&gt; bonding bond1 &#123;<br>        <span class="hljs-attribute">mode</span>                    <span class="hljs-number">4</span><br>        slave                   dpdk0<br>        slave                   dpdk1<br>        primary                 dpdk0<br>        kni_name                bond1.kni<br>    &#125;<br><br>    &lt;init&gt; bonding bond2 &#123;<br>        <span class="hljs-attribute">mode</span>                    <span class="hljs-number">4</span><br>        slave                   dpdk2<br>        slave                   dpdk3<br>        primary                 dpdk2<br>        kni_name                bond2.kni<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>随后在配置每个<code>worker-cpu</code>的时候要注意<code>port</code>要选择对应的<code>bond</code>网卡</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">&lt;init&gt; <span class="hljs-attribute">worker</span> cpu1 &#123;<br>    <span class="hljs-attribute">type</span>    slave<br>    cpu_id  <span class="hljs-number">1</span><br>    port    bond1 &#123;<br>        <span class="hljs-attribute">rx_queue_ids</span>     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>    port    bond2 &#123;<br>        <span class="hljs-attribute">rx_queue_ids</span>     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>DPVS的bonding配置和在Linux中直接操作一样。bonding配置成功后只需要对生成的bonding网卡操作即可，使用dpip命令可以查看对应网卡的工作状态：如下面的网卡就工作在全双工、20000 Mbps速率的模式下，MTU为1500，并且在DPVS中配置了16个收发队列。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> dpip link show</span><br>5: bond1: socket 0 mtu 1500 rx-queue 15 tx-queue 16<br>    UP 20000 Mbps full-duplex auto-nego<br>    addr AA:BB:CC:11:22:33<br>6: bond2: socket 0 mtu 1500 rx-queue 15 tx-queue 16<br>    UP 20000 Mbps full-duplex auto-nego<br>    addr AA:BB:CC:12:34:56<br></code></pre></div></td></tr></table></figure><h1 id="3、IPv6简单配置"><a href="#3、IPv6简单配置" class="headerlink" title="3、IPv6简单配置"></a>3、IPv6简单配置</h1><h2 id="3-1-DPVS配置过程"><a href="#3-1-DPVS配置过程" class="headerlink" title="3.1 DPVS配置过程"></a>3.1 DPVS配置过程</h2><p>IPv6的简单配置方法和IPv4一样，只是把对应的IPv4地址换成了IPv6地址，同时还需要额外注意一下IPv6地址指定端口的时候需要使用<code>[]</code>将IP地址括起来。</p><p><img src="https://resource.tinychen.com/20210806163707.svg" alt="dpvs-two-arm-fnat-ipv6-fakeip"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加VIP和相关路由</span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr add 2001::201/128 dev bond2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2001::/64 dev bond2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2407::/64 dev bond1</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add default via 2001::1 dev bond2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置ipvsadm和RS</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -A -t [2001::201]:80 -s rr</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t [2001::201]:80 -r [2407::1]:80 -b</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t [2001::201]:80 -r [2407::2]:80 -b</span><br><span class="hljs-meta">#</span><span class="bash"> 添加IPv6 LIP</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm --add-laddr -z 2407::201 -t [2001::201]:80 -F bond1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr show</span><br>inet6 2407::201/128 scope global bond1<br>     valid_lft forever preferred_lft forever<br>inet6 2001::201/128 scope global bond2<br>     valid_lft forever preferred_lft forever<br><br>     <br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 show</span><br>inet6 2001::201/128 dev bond2 mtu 1500 scope host<br>inet6 2407::201/128 dev bond1 mtu 1500 scope host<br>inet6 2407::/64 dev bond1 mtu 1500 scope link<br>inet6 2001::/64 dev bond2 mtu 1500 scope link<br>inet6 default via 2001::1 dev bond2 mtu 1500 scope global<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -Ln</span><br>IP Virtual Server version 0.0.0 (size=0)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  [2001::201]:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> [2407::1]:80 FullNat 1      0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> [2407::2]:80 FullNat 1      0          0</span><br><br></code></pre></div></td></tr></table></figure><h2 id="3-2-效果检验"><a href="#3-2-效果检验" class="headerlink" title="3.2 效果检验"></a>3.2 效果检验</h2><p>测试效果，确认RS上面的nginx能够正常返回用户端的真实IP和端口，则表明配置正常。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">  curl -6 <span class="hljs-string">&quot;http://\[2001::201\]&quot;</span></span><br>Your IP and port is [2408::1]:38383<br></code></pre></div></td></tr></table></figure><h1 id="4、NAT64配置"><a href="#4、NAT64配置" class="headerlink" title="4、NAT64配置"></a>4、NAT64配置</h1><h2 id="4-1-DPVS配置过程"><a href="#4-1-DPVS配置过程" class="headerlink" title="4.1 DPVS配置过程"></a>4.1 DPVS配置过程</h2><p>架构图上和之前的两个并没太大的不同，只是IP略有差异</p><p><img src="https://resource.tinychen.com/20210806163713.svg" alt="dpvs-two-arm-fnat-nat64-fakeip"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加VIP和相关路由</span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr add 2001::201/128 dev bond2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2001::/64 dev bond2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 192.168.229.0/23 dev bond1</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add default via 2001::1 dev bond2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置ipvsadm和RS</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -A -t [2001::201]:80 -s rr</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t [2001::201]:80 -r 192.168.229.1:80 -b</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t [2001::201]:80 -r 192.168.229.2:80 -b</span><br><span class="hljs-meta">#</span><span class="bash"> 添加IPv6 LIP</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm --add-laddr -z 192.168.229.201 -t [2001::201]:80 -F bond1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr show</span><br>inet6 2001::201/128 scope global bond2<br>     valid_lft forever preferred_lft forever<br>inet 192.168.229.201/32 scope global bond1<br>     valid_lft forever preferred_lft forever<br>     <br><span class="hljs-meta">$</span><span class="bash"> dpip route show</span><br>inet 192.168.229.201/32 via 0.0.0.0 src 0.0.0.0 dev bond1 mtu 1500 tos 0 scope host metric 0 proto auto<br>inet 192.168.229.0/23 via 0.0.0.0 src 0.0.0.0 dev bond1 mtu 1500 tos 0 scope link metric 0 proto auto<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 show</span><br>inet6 2001::201/128 dev bond2 mtu 1500 scope host<br>inet6 2001::/64 dev bond2 mtu 1500 scope link<br>inet6 default via 2001::1 dev bond2 mtu 1500 scope global<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -ln</span><br>IP Virtual Server version 0.0.0 (size=0)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  [2001::201]:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 1      0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:80              FullNat 1      0          0</span><br><br></code></pre></div></td></tr></table></figure><p>测试效果</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">  curl -6 <span class="hljs-string">&quot;http://\[2001::201\]&quot;</span></span><br>Your IP and port is 192.168.229.201:1035<br></code></pre></div></td></tr></table></figure><p>从上面的测试结果来看，即使是安装了TOA模块，也无法获取NAT64模式下客户端的源IP地址，所有的客户端IP和端口都会变成LIP转发过来的时候的IP和端口。如果是对源IP没需求的话可以忽略这个问题，如果有需求的话则需要更改RS上面的客户端程序，下面我们以nginx为例。</p><h2 id="4-2-NGINX支持NAT64"><a href="#4-2-NGINX支持NAT64" class="headerlink" title="4.2 NGINX支持NAT64"></a>4.2 NGINX支持NAT64</h2><p>dpvs还为nginx提供了一个nat64的toa模块，当VIP为ipv6而RS为ipv4的时候，可以使用这个模块在nginx中获取用户真实的ipv6地址，需要我们在源码编译安装nginx之前先打上这个补丁。</p><p>从官方的文件名我们可以看出应该是基于1.14.0版本制作的patch，首先我们使用旧版的1.14.0版本能够正常打上补丁，后续的编译安装也能正常进行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-centos7 nginx-1.14.0]# pwd<br>/home/nginx-1.14.0<br>[root@tiny-centos7 nginx-1.14.0]# ls<br>auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  nginx-1.14.0-nat64-toa.patch  README  src<br>[root@tiny-centos7 nginx-1.14.0]# cp /home/dpvs/kmod/toa/example_nat64/nginx/nginx-1.14.0-nat64-toa.patch ./<br>[root@tiny-centos7 nginx-1.14.0]# patch -p 1 &lt; nginx-1.14.0-nat64-toa.patch<br>patching file src/core/ngx_connection.h<br>patching file src/core/ngx_inet.h<br>patching file src/event/ngx_event_accept.c<br>patching file src/http/ngx_http_variables.c<br></code></pre></div></td></tr></table></figure><p>使用最新的nginx-1.21.1版本的时候会有报错</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-centos7 nginx-1.21.1]# cp /home/dpvs/kmod/toa/example_nat64/nginx/nginx-1.14.0-nat64-toa.patch ./<br>[root@tiny-centos7 nginx-1.21.1]# pwd<br>/home/nginx-1.21.1<br>[root@tiny-centos7 nginx-1.21.1]# ls<br>auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  nginx-1.14.0-nat64-toa.patch  README  src<br><br>[root@tiny-centos7 nginx-1.21.1]# patch -p 1 &lt; nginx-1.14.0-nat64-toa.patch<br>patching file src/core/ngx_connection.h<br>Hunk #1 FAILED at 144.<br>1 out of 1 hunk FAILED -- saving rejects to file src/core/ngx_connection.h.rej<br>patching file src/core/ngx_inet.h<br>Hunk #1 succeeded at 128 with fuzz 2 (offset 2 lines).<br>patching file src/event/ngx_event_accept.c<br>Hunk #1 succeeded at 17 (offset -5 lines).<br>Hunk #2 succeeded at 30 (offset -5 lines).<br>Hunk #3 succeeded at 172 (offset -5 lines).<br>patching file src/http/ngx_http_variables.c<br>Hunk #1 succeeded at 145 (offset 2 lines).<br>Hunk #2 succeeded at 398 (offset 15 lines).<br>Hunk #3 succeeded at 1311 (offset -11 lines).<br></code></pre></div></td></tr></table></figure><p>仔细查看patch文件内容可以发现出现错误是因为1.21.1版本中对应部分移除了几行代码导致patch无法匹配，我们手动将那一行代码加上去</p><p><img src="https://resource.tinychen.com/20210806163641.png"></p><p>随后就能正常编译安装了，完成之后我们可以在日志中加入<code>$toa_remote_addr</code>和<code>$toa_remote_port</code>这两个变量来获取NAT64模式下的客户端真实IP。</p><h2 id="4-3-效果检验"><a href="#4-3-效果检验" class="headerlink" title="4.3 效果检验"></a>4.3 效果检验</h2><p>再次测试发现能够显示真正的客户端源IP地址和端口号。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">  curl -6 <span class="hljs-string">&quot;http://\[2001::201\]&quot;</span></span><br>Your remote_addr and remote_port is 192.168.229.201:1030<br>Your toa_remote_addr and toa_remote_port is [2408::1]:64920<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 同时在nginx的日志中也能看到对应的字段</span><br>toa_remote_addr=2408::1 | toa_remote_port=64920 | remote_addr=192.168.229.201 | remote_port=1030 <br></code></pre></div></td></tr></table></figure><h1 id="5、keepalived配置"><a href="#5、keepalived配置" class="headerlink" title="5、keepalived配置"></a>5、keepalived配置</h1><h2 id="5-1-架构图"><a href="#5-1-架构图" class="headerlink" title="5.1 架构图"></a>5.1 架构图</h2><p>使用keepalived配置有两大好处：</p><ul><li>VIP、LIP、RS等配置参数可以固化在keepalived的配置文件中，无需每次都使用命令或脚本手动操作</li><li>keepalived可以使用VRRP协议配置主备模式（master-backup），避免了单点问题</li></ul><p>官方的keepalived配置网络拓扑使用的是单臂模式，这里我们修改为双臂模式；<strong>同时需要注意DPVS使用的keepalived是修改过的版本，和原生版本的keepalived在配置语法和参数上稍有不同</strong>。</p><p>和前面提到的一样，keepalived也支持<code>IPv4-IPv4模式</code>、<code>IPv6-IPv6模式</code>和<code>NAT64模式（IPv6-IPv4）</code>这三种模式，三者的不同只是在于路由的不同和keepalived的配置文件略有差异。</p><p><img src="https://resource.tinychen.com/20210806163732.svg" alt="dpvs-two-arm-fnat-keepalived-fakeip"></p><h2 id="5-2-配置kni网卡"><a href="#5-2-配置kni网卡" class="headerlink" title="5.2 配置kni网卡"></a>5.2 配置kni网卡</h2><p>keepalived的配置需要在正常的Linux网络栈（非DPVS实现的简单用户态网络栈）中有一个能进行正常网络通信的kni网卡。kni网卡的配置和普通网卡的配置是完全一样的，只需要将配置文件中的<code>DEVICE</code>改为对应的<code>kni</code>网卡即可。</p><blockquote><p>kni网卡的存在依赖于dpvs进程的存在，如果dpvs进程重启了，那么kni网卡不会跟着重启，而是处于<code>DOWN</code>状态直至我们手动将其启用（<code>ifup</code>）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat /etc/sysconfig/network-scripts/ifcfg-bond2.kni</span><br>DEVICE=bond2.kni<br>BOOTPROTO=static<br>ONBOOT=yes<br>IPADDR=10.0.96.200<br>NETMASK=255.255.255.0<br>GATEWAY=10.0.96.254<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ip a</span><br>32: bond2.kni: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether a0:36:9f:f0:e4:c0 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.96.200/24 brd 10.0.96.255 scope global bond2.kni<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::a236:9fff:fef0:e4c0/64 scope link<br>       valid_lft forever preferred_lft forever<br></code></pre></div></td></tr></table></figure><p>前面我们的<code>dpvs.conf</code>配置文件中会对每个<code>dpdk</code>网卡或者是<code>bond</code>网卡配置一个<code>kni</code>网卡（一般命名为<code>dpdk0.kni</code>或<code>bond0.kni</code>等），在前面的简单配置步骤中我们都是直接把VIP加到<code>DPDK</code>的网卡上，但是这样无法实现VIP的主备切换，因此这里我们需要将VIP交由<code>keepalived</code>程序控制。</p><h2 id="5-3-配置路由"><a href="#5-3-配置路由" class="headerlink" title="5.3 配置路由"></a>5.3 配置路由</h2><p>keepalived模式下，对于双臂网络模式的FullNAT，我们需要加的路由一般来说可以直观地分为三大部分：<strong>VIP网段的路由，RS/LIP网段的路由，默认路由</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> IPv4网络模式</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 10.0.96.0/24 dev bond2 <span class="hljs-comment"># VIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 192.168.229.0/23 dev bond1 <span class="hljs-comment"># RS/LIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add default via 10.0.96.254 dev bond2 <span class="hljs-comment"># 默认路由</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> IPv6网络模式</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2001::/64 dev bond2 <span class="hljs-comment"># VIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2407::/64 dev bond1 <span class="hljs-comment"># RS/LIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add default via 2001::1 dev bond2 <span class="hljs-comment"># 默认路由</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> NAT64模式（IPv6-IPv4）</span><br><span class="hljs-meta">#</span><span class="bash"> 此模式的区别在于RS要换为IPv4网段的路由</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add 2001::/64 dev bond2 <span class="hljs-comment"># VIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 192.168.229.0/23 dev bond1 <span class="hljs-comment"># RS/LIP网段的路由</span></span><br><span class="hljs-meta">$</span><span class="bash"> dpip route -6 add default via 2001::1 dev bond2 <span class="hljs-comment"># 默认路由</span></span><br></code></pre></div></td></tr></table></figure><h2 id="5-4-配置keepalived"><a href="#5-4-配置keepalived" class="headerlink" title="5.4 配置keepalived"></a>5.4 配置keepalived</h2><p>首先我们使用<code>systemctl</code>将<code>keepalived</code>管理起来，首先编写一个<code>unit</code>文件，配置中的路径要替换成DPVS定制版的<code>keepalived</code>二进制文件以及<code>keepalived</code>配置文件的路径（建议使用绝对路径）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat /usr/lib/systemd/system/keepalived.service</span><br>[Unit]<br>Description=DPVS modify version keepalived<br>After=syslog.target network-online.target<br><br>[Service]<br>Type=forking<br>PIDFile=/var/run/keepalived.pid<br>KillMode=process<br>ExecStart=/path/to/dpvs/bin/keepalived -f /etc/keepalived/keepalived.conf -D -d -S 0<br>ExecReload=/bin/kill -HUP $MAINPID<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p>随后我们修改keepalived的日志输出到指定的文件中方便我们定位问题</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对于系统使用rsyslog服务来管理日志的，可以修改 /etc/rsyslog.conf 加入下列的配置</span><br>local0.*                                                /path/to/keepalived.log<br></code></pre></div></td></tr></table></figure><p>最后我们重启相关的rsyslog日志服务和keepalived</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> systemctl daemon-reload</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> rsyslog.service</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl restart rsyslog.service</span><br></code></pre></div></td></tr></table></figure><h2 id="5-5-keepalived-conf"><a href="#5-5-keepalived-conf" class="headerlink" title="5.5 keepalived.conf"></a>5.5 keepalived.conf</h2><p>注意即使RS相同，NAT64模式和普通的IPv4模式也不能够在同一个<code>vrrp_instance</code>中同时定义IPv4地址和IPv6地址，因为两者使用的VRRP协议版本不同（VRRP和VRRP6）</p><p>以下以NAT64和IPv4网络两种配置为例，截取部分重点配置</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">! <span class="hljs-attribute">Configuration</span> File for keepalived<br><br>global_defs &#123;<br>    <span class="hljs-attribute">router_id</span> DPVS_TEST<br>&#125;<br><br><span class="hljs-comment"># 配置LOCAL IP</span><br><span class="hljs-comment"># 网卡使用DPDK的lan网段网卡</span><br>local_address_group laddr_g1 &#123;<br>    192.168.229.201 <span class="hljs-attribute">bond1</span>    <br>&#125;<br><br><span class="hljs-comment"># 配置IPv4模式的VIP</span><br>vrrp_instance VI_1 &#123;<br><span class="hljs-comment"># 确定该VIP的状态为MASTER或者是BACKUP</span><br>    <span class="hljs-attribute">state</span> MASTER<br>    <span class="hljs-comment"># interface指定为Linux网络栈能识别到的、由dpvs虚拟出来的kni网卡</span><br>    <span class="hljs-comment"># keepalived模式需要确保该kni网卡处于up状态，此前的简单配置均不需要</span><br>    interface bond2.kni<br>    <span class="hljs-comment"># dpdk_interface指定为wan口网卡，即VIP所在的dpdk网卡</span><br>    dpdk_interface bond2<br>    <span class="hljs-comment"># 虚拟路由ID，需要全局唯一</span><br>    virtual_router_id <span class="hljs-number">201</span><br>    priority <span class="hljs-number">100</span><br>    advert_int <span class="hljs-number">1</span><br>    authentication &#123;<br>        <span class="hljs-attribute">auth_type</span> PASS<br>        auth_pass dpvstest<br>    &#125;<br><span class="hljs-comment"># 配置VIP，可以多个一组，但是不可IPv6和IPv4混用</span><br>    virtual_ipaddress &#123;<br>        10.0.96.201<br>        10.0.96.202<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 配置IPv6模式的VIP</span><br><span class="hljs-attribute">vrrp_instance</span> VI_2 &#123;<br>    <span class="hljs-attribute">state</span> MASTER<br>    interface bond2.kni<br>    dpdk_interface bond2<br>    virtual_router_id <span class="hljs-number">202</span><br>    priority <span class="hljs-number">100</span><br>    advert_int <span class="hljs-number">1</span><br>    authentication &#123;<br>        <span class="hljs-attribute">auth_type</span> PASS<br>        auth_pass dpvstest<br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        2001::201<br>        2001::202<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 配置对应的VIP和RS</span><br><span class="hljs-attribute">virtual_server_group</span> <span class="hljs-number">10.0.96.201</span>-<span class="hljs-number">80</span> &#123;<br>    10.0.96.201 80<br>    10.0.96.202 80<br>&#125;<br><br><span class="hljs-attribute">virtual_server</span> group <span class="hljs-number">10.0.96.201</span>-<span class="hljs-number">80</span> &#123;<br>    <span class="hljs-attribute">delay_loop</span> <span class="hljs-number">3</span><br>    lb_algo rr<br>    lb_kind FNAT<br>    protocol TCP<br><br>    laddr_group_name laddr_g1<br><br>    real_server <span class="hljs-number">192.168.229.1</span> <span class="hljs-number">80</span> &#123;<br>        <span class="hljs-attribute">weight</span> <span class="hljs-number">100</span><br>        inhibit_on_failure<br>        TCP_CHECK &#123;<br>            <span class="hljs-attribute">nb_sock_retry</span> <span class="hljs-number">2</span><br>            connect_timeout <span class="hljs-number">3</span><br>            connect_port <span class="hljs-number">80</span><br>        &#125;<br>    &#125;<br><br>    real_server <span class="hljs-number">192.168.229.2</span> <span class="hljs-number">80</span> &#123;<br>        <span class="hljs-attribute">weight</span> <span class="hljs-number">100</span><br>        inhibit_on_failure<br>        TCP_CHECK &#123;<br>            <span class="hljs-attribute">nb_sock_retry</span> <span class="hljs-number">2</span><br>            connect_timeout <span class="hljs-number">3</span><br>            connect_port <span class="hljs-number">80</span><br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br>virtual_server_group <span class="hljs-number">10.0.96.201</span>-<span class="hljs-number">80</span>-<span class="hljs-number">6</span> &#123;<br>    2001::201 80<br>    2001::202 80<br>&#125;<br><br><span class="hljs-attribute">virtual_server</span> group <span class="hljs-number">10.0.96.201</span>-<span class="hljs-number">80</span>-<span class="hljs-number">6</span> &#123;<br>    <span class="hljs-attribute">delay_loop</span> <span class="hljs-number">3</span><br>    lb_algo rr<br>    lb_kind FNAT<br>    protocol TCP<br><br>    laddr_group_name laddr_g1<br><br>    real_server <span class="hljs-number">192.168.229.1</span> <span class="hljs-number">80</span> &#123;<br>        <span class="hljs-attribute">weight</span> <span class="hljs-number">100</span><br>        inhibit_on_failure<br>        TCP_CHECK &#123;<br>            <span class="hljs-attribute">nb_sock_retry</span> <span class="hljs-number">2</span><br>            connect_timeout <span class="hljs-number">3</span><br>            connect_port <span class="hljs-number">80</span><br>        &#125;<br>    &#125;<br><br>    real_server <span class="hljs-number">192.168.229.2</span> <span class="hljs-number">80</span> &#123;<br>        <span class="hljs-attribute">weight</span> <span class="hljs-number">100</span><br>        inhibit_on_failure<br>        TCP_CHECK &#123;<br>            <span class="hljs-attribute">nb_sock_retry</span> <span class="hljs-number">2</span><br>            connect_timeout <span class="hljs-number">3</span><br>            connect_port <span class="hljs-number">80</span><br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>keepalived启动之后，我们就可以使用<code>dpip</code>命令查看到各个定义的VIP，ipvsadm命令中应该可以看到各组RS状态正常</li><li>但是需要确保在keepalived运行过程中dpvs必须处于正常运行状态，并且配置文件中interface参数指定的kni网卡处于正常运行状态</li><li>每个网卡和网段的相关路由还是需要自己手动添加（IPv4、IPv6）</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 检查配置的各个VIP和LIP是否生效</span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr show</span><br>inet 10.0.96.202/32 scope global bond2<br>     valid_lft forever preferred_lft forever<br>inet6 2001::202/128 scope global bond2<br>     valid_lft forever preferred_lft forever<br>inet6 2001::201/128 scope global bond2<br>     valid_lft forever preferred_lft forever<br>inet 10.0.96.201/32 scope global bond2<br>     valid_lft forever preferred_lft forever<br>inet 192.168.229.201/32 scope global bond1<br>     valid_lft forever preferred_lft forever<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 检查各组RS服务是否正常</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -ln</span><br>IP Virtual Server version 0.0.0 (size=0)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.96.201:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:80              FullNat 100    0          0</span><br>TCP  10.0.96.201:443 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:443             FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:443             FullNat 100    0          0</span><br>TCP  10.0.96.202:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:80              FullNat 100    0          0</span><br>TCP  10.0.96.202:443 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:443             FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:443             FullNat 100    0          0</span><br>TCP  [2001::201]:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:80              FullNat 100    0          0</span><br>TCP  [2001::201]:443 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:443             FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:443             FullNat 100    0          0</span><br>TCP  [2001::202]:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:80              FullNat 100    0          0</span><br>TCP  [2001::202]:443 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:443             FullNat 100    0          0</span><br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.2:443             FullNat 100    0          0</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用curl测试IPv6服务是否能够走通</span><br><span class="hljs-meta">$</span><span class="bash"> curl -6 <span class="hljs-string">&quot;http://\[2001::202\]&quot;</span></span><br>Your remote_addr and remote_port is 192.168.229.201:1034<br>Your toa_remote_addr and toa_remote_port is [2408::1]:9684<br><span class="hljs-meta">#</span><span class="bash"> 使用curl测试IPv4服务是否能够走通</span><br><span class="hljs-meta">$</span><span class="bash"> curl 10.0.96.201</span><br>Your remote_addr and remote_port is 172.16.0.1:42254<br>Your toa_remote_addr and toa_remote_port is -:-<br></code></pre></div></td></tr></table></figure><p>最后需要提醒的是，如果使用了NAT64模式，那么nginx是没办法直接获取真实的源端IP的，需要对XFF头进行设置，例如：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-string">&quot;$real_remote_addr,$proxy_add_x_forwarded_for&quot;</span>;<br><br>   <span class="hljs-attribute">map</span> $toa_remote_addr $real_remote_addr &#123;<br>       <span class="hljs-attribute">default</span> $toa_remote_addr;<br>       &#x27;-&#x27; $remote_addr;<br>   &#125;<br><br>   <span class="hljs-attribute">map</span> $toa_remote_port $real_remote_port &#123;<br>       <span class="hljs-attribute">default</span> $toa_remote_port;<br>       &#x27;-&#x27; $remote_port;<br>   &#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h1><p>以上的多种配置中，基本上能在生产环境使用的<strong>最好就是keepalived的主备模式</strong>，此外还有一个需要交换机支持ECMP的多主模式这里因为条件有限暂时没有测试到，后面有条件了再补上。</p><p>至于<code>NAT64模式</code>和<code>IPv6-IPv6模式</code>的选择，如果RS是nginx，那么两种模式的区别在于是在nginx上做兼容还是在RS上面配置IPv6网络，具体看实际的网络条件和运维管理工具来判断；如果RS是其他的第三方程序，不想对源代码进行太多的侵入变更，最好就是直接使用<code>IPv6-IPv6模式</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍基于&lt;code&gt;CentOS7.9&lt;/code&gt;系统部署DPVS的FullNAT模式的各种部署方式和配置管理，包括IPv4-IPv4、bonding、IPv6-IPv6、IPv6-IPv4（NAT64）和keepalived模式这五种方案。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
    <category term="dpdk" scheme="https://tinychen.com/tags/dpdk/"/>
    
    <category term="dpvs" scheme="https://tinychen.com/tags/dpvs/"/>
    
  </entry>
  
  <entry>
    <title>DPVS-FullNAT模式部署篇</title>
    <link href="https://tinychen.com/20210728-dpvs-fullnat-deploy/"/>
    <id>https://tinychen.com/20210728-dpvs-fullnat-deploy/</id>
    <published>2021-07-28T09:00:00.000Z</published>
    <updated>2021-07-28T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在<code>CentOS7.9</code>系统上部署DPVS的FullNAT模式和在RealServer上安装toa模块获取客户端的真实IP。</p><span id="more"></span><p>此前的文章已经介绍过<a href="https://tinychen.com/20201103-dpvs-deploy-in-centos7/">DPVS简介与部署</a>以及<a href="https://tinychen.com/20201112-dpdk-in-dpvs-principle-analysis/">DPDK在DPVS中的应用及原理分析</a>，有需要的同学可以先补一下相关的内容。由于之前的文章中的部署步骤只介绍到了DPVS的部署，并没有涉及相关的各种负载均衡模式的配置，以及时间过去大半年之后，DPVS的版本和对应的DPDK版本都有所更新，因此这里再重新详细写一篇新的部署教程。</p><blockquote><p>本文中安装的DPVS版本为<code>1.8-10</code>，dpdk版本为<code>18.11.2</code>，和前文不同，安装步骤和操作也有差异。</p></blockquote><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><p>在正式开始安装之后我们需要先对机器的硬件参数进行一些调整，DPVS官方对硬件有一定的要求（主要是因为底层使用的DPDK），dpdk官方给出了一份<a href="https://core.dpdk.org/supported/">支持列表</a>，虽然支持性列表上面的平台支持得很广泛，但是实际上兼容性和表现最好的似乎还是要Intel的硬件平台。</p><h2 id="1-1-硬件部分"><a href="#1-1-硬件部分" class="headerlink" title="1.1 硬件部分"></a>1.1 硬件部分</h2><h3 id="1-1-1-硬件参数"><a href="#1-1-1-硬件参数" class="headerlink" title="1.1.1 硬件参数"></a>1.1.1 硬件参数</h3><ul><li>机器型号： <code>PowerEdge R630</code></li><li>CPU：两颗 <code>Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz</code> </li><li>内存：<code>16G*8 DDR4-2400 MT/s（Configured in 2133 MT/s）</code>，每个CPU64G，共计128G</li><li>网卡1：<code>Intel Corporation 82599ES 10-Gigabit SFI/SFP+ Network Connection (rev 01)</code></li><li>网卡2：<code>Intel Corporation Ethernet 10G 2P X520 Adapter (rev 01)</code></li><li>系统：<code>CentOS Linux release 7.9.2009 (Core)</code></li><li>内核：<code>3.10.0-1160.36.2.el7.x86_64</code></li></ul><h3 id="1-1-2-BIOS设置"><a href="#1-1-2-BIOS设置" class="headerlink" title="1.1.2 BIOS设置"></a>1.1.2 BIOS设置</h3><p>开始之前，先进入BIOS中<strong>关闭超线程和启用NUMA策略</strong>。其中DPVS是非常典型的CPU繁忙型应用（进程所在的CPU使用率一直都是100%），为了保证性能，建议关闭CPU的超线程设置。同时因为DPVS使用的是我们手动分配的大页内存，为了保证CPU亲和性，最好在BIOS中直接打开NUMA策略。</p><h3 id="1-1-3-网卡PCI-ID"><a href="#1-1-3-网卡PCI-ID" class="headerlink" title="1.1.3 网卡PCI ID"></a>1.1.3 网卡PCI ID</h3><p>使用<code>dpvs</code>的<code>PMD驱动</code>接管网卡之后，如果网卡的数量较多，容易搞混，最好提前记录下对应的<code>网卡名</code>、<code>MAC地址</code>和<code>PCI ID</code>，避免后面操作的时候搞混。</p><p>使用<code>lspci</code>命令可以查看对应网卡的<code>PCI ID</code>，接着我们可以查看<code>/sys/class/net/</code>这个目录下对应网卡名目录下的<code>device</code>文件，就能够得知网卡对应的<code>PCI ID</code>。最后就可以把<code>网卡名-MAC地址-PCI ID</code>三个参数串起来。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> lspci | grep -i net</span><br>01:00.0 Ethernet controller: Intel Corporation 82599ES 10-Gigabit SFI/SFP+ Network Connection (rev 01)<br>01:00.1 Ethernet controller: Intel Corporation 82599ES 10-Gigabit SFI/SFP+ Network Connection (rev 01)<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> file /sys/class/net/eth0/device</span><br>/sys/class/net/eth0/device: symbolic link to `../../../0000:01:00.0&#x27;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-软件部分"><a href="#1-2-软件部分" class="headerlink" title="1.2 软件部分"></a>1.2 软件部分</h2><h3 id="1-2-1-系统软件"><a href="#1-2-1-系统软件" class="headerlink" title="1.2.1 系统软件"></a>1.2.1 系统软件</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 编译安装dpvs需要使用的工具以及查看CPU NUMA信息的工具</span><br><span class="hljs-meta">$</span><span class="bash"> yum group install <span class="hljs-string">&quot;Development Tools&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> yum install patch libnuma* numactl numactl-devel kernel-devel openssl* popt* libpcap-devel -y</span><br><span class="hljs-meta">#</span><span class="bash"> 如果需要ipvsadm支持ipv6需要安装libnl3-devel</span><br><span class="hljs-meta">$</span><span class="bash"> yum install libnl libnl-devel libnl3 libnl3-devel -y</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意kernel以及相应的kernel组件的版本需要和现在使用的kernel版本相对应</span><br><span class="hljs-meta">$</span><span class="bash"> uname -r</span><br>3.10.0-1160.36.2.el7.x86_64<br><span class="hljs-meta">$</span><span class="bash"> rpm -qa | grep kernel | grep <span class="hljs-string">&quot;3.10.0-1160.36.2&quot;</span></span><br>kernel-3.10.0-1160.36.2.el7.x86_64<br>kernel-devel-3.10.0-1160.36.2.el7.x86_64<br>kernel-tools-libs-3.10.0-1160.36.2.el7.x86_64<br>kernel-debug-devel-3.10.0-1160.36.2.el7.x86_64<br>kernel-tools-3.10.0-1160.36.2.el7.x86_64<br>kernel-headers-3.10.0-1160.36.2.el7.x86_64<br></code></pre></div></td></tr></table></figure><h3 id="1-2-2-dpvs和dpdk"><a href="#1-2-2-dpvs和dpdk" class="headerlink" title="1.2.2 dpvs和dpdk"></a>1.2.2 dpvs和dpdk</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> dpvs我们直接使用git从github拉取最新的版本</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/iqiyi/dpvs.git</span><br><span class="hljs-meta">#</span><span class="bash"> dpdk我们从官网下载18.11.2版本，放到dpvs目录下方便操作</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> dpvs/</span><br><span class="hljs-meta">$</span><span class="bash"> wget https://fast.dpdk.org/rel/dpdk-18.11.2.tar.xz</span><br><span class="hljs-meta">$</span><span class="bash"> tar -Jxvf dpdk-18.11.2.tar.xz</span><br></code></pre></div></td></tr></table></figure><p>完成上述步骤之后就可以开始下面的安装了。</p><h1 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h1><h2 id="2-1-DPDK安装"><a href="#2-1-DPDK安装" class="headerlink" title="2.1 DPDK安装"></a>2.1 DPDK安装</h2><h3 id="2-1-1-安装dpdk-patch"><a href="#2-1-1-安装dpdk-patch" class="headerlink" title="2.1.1 安装dpdk-patch"></a>2.1.1 安装dpdk-patch</h3><p>在dpvs文件夹的patch目录下面有对应支持的dpdk版本的patch补丁，如果不清楚自己到底需要哪个补丁，官方的建议是全部安装</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">$ ll dpvs/patch/dpdk-stable-18.11.2<br>total 44<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 4185 </span>Jul<span class="hljs-number"> 22 </span>12:47 0001-kni-use-netlink-event-for-multicast-driver-part.patch<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1771 </span>Jul<span class="hljs-number"> 22 </span>12:47 0002-net-support-variable-IP-header-len-for-checksum-API.patch<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1130 </span>Jul<span class="hljs-number"> 22 </span>12:47 0003-driver-kni-enable-flow_item-type-comparsion-in-flow_.patch<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1706 </span>Jul<span class="hljs-number"> 22 </span>12:47 0004-rm-rte_experimental-attribute-of-rte_memseg_walk.patch<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16538 </span>Jul<span class="hljs-number"> 22 </span>12:47 0005-enable-pdump-and-change-dpdk-pdump-tool-for-dpvs.patch<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2189 </span>Jul<span class="hljs-number"> 22 </span>12:47 0006-enable-dpdk-eal-memory-debug.patch<br></code></pre></div></td></tr></table></figure><p>安装patch的操作也非常的简单</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 我们首先把所有的patch复制到dpdk的根目录下面</span><br><span class="hljs-meta">$</span><span class="bash"> cp dpvs/patch/dpdk-stable-18.11.2/*patch dpvs/dpdk-stable-18.11.2/</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> dpvs/dpdk-stable-18.11.2/</span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们按照patch的文件名顺序依次进行安装</span><br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0001-kni-use-netlink-event-for-multicast-driver-part.patch</span><br>patching file kernel/linux/kni/kni_net.c<br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0002-net-support-variable-IP-header-len-for-checksum-API.patch</span><br>patching file lib/librte_net/rte_ip.h<br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0003-driver-kni-enable-flow_item-type-comparsion-in-flow_.patch</span><br>patching file drivers/net/mlx5/mlx5_flow.c<br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0004-rm-rte_experimental-attribute-of-rte_memseg_walk.patch</span><br>patching file lib/librte_eal/common/eal_common_memory.c<br>Hunk #1 succeeded at 606 (offset 5 lines).<br>patching file lib/librte_eal/common/include/rte_memory.h<br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0005-enable-pdump-and-change-dpdk-pdump-tool-for-dpvs.patch</span><br>patching file app/pdump/main.c<br>patching file config/common_base<br>patching file lib/librte_pdump/rte_pdump.c<br>patching file lib/librte_pdump/rte_pdump.h<br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0006-enable-dpdk-eal-memory-debug.patch</span><br>patching file config/common_base<br>patching file lib/librte_eal/common/include/rte_malloc.h<br>patching file lib/librte_eal/common/rte_malloc.c<br></code></pre></div></td></tr></table></figure><h3 id="2-1-2-dpdk编译安装"><a href="#2-1-2-dpdk编译安装" class="headerlink" title="2.1.2 dpdk编译安装"></a>2.1.2 dpdk编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> dpvs/dpdk-stable-18.11.2</span><br><span class="hljs-meta">$</span><span class="bash"> make config T=x86_64-native-linuxapp-gcc</span><br><span class="hljs-meta">$</span><span class="bash"> make</span> <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 出现Build complete [x86_64-native-linuxapp-gcc]的字样就说明make成功</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RTE_SDK=<span class="hljs-variable">$PWD</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RTE_TARGET=build</span><br></code></pre></div></td></tr></table></figure><blockquote><p>这里编译安装的过程中不会出现之前使用<code>dpdk17.11.2</code>版本出现的<code>ndo_change_mtu</code>问题</p></blockquote><h3 id="2-1-3-配置hugepage"><a href="#2-1-3-配置hugepage" class="headerlink" title="2.1.3 配置hugepage"></a>2.1.3 配置hugepage</h3><p>和其他的一般程序不同，dpvs使用的dpdk并不是从操作系统中索要内存，而是直接使用大页内存（hugepage），极大地提高了内存分配的效率。hugepage的配置比较简单，官方的配置过程中使用的是2MB的大页内存，这里的<code>28672</code>指的是分配了<code>28672</code>个2MB的大页内存，也就是一个node对应56GB的内存，一共分配了112GB的内存，这里的内存可以根据机器的大小来自行调整。但是如果小于1GB可能会导致启动报错。</p><blockquote><p>单个CPU的系统可以参考dpdk的<a href="https://doc.dpdk.org/guides/linux_gsg/sys_reqs.html">官方文档</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> NUMA machine</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> 28672 &gt; /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> 28672 &gt; /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> mkdir /mnt/huge</span><br><span class="hljs-meta">$</span><span class="bash"> mount -t hugetlbfs nodev /mnt/huge</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 需要开机自动挂载的话可以在</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nodev /mnt/huge hugetlbfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置完成后我们可以看到内存的使用率立马上升了</span><br><span class="hljs-meta">$</span><span class="bash"> free -g<span class="hljs-comment"># 配置前</span></span><br>              total        used        free      shared  buff/cache   available<br>Mem:            125           1         122           0           1         123<br><span class="hljs-meta">$</span><span class="bash"> free -g<span class="hljs-comment"># 配置后</span></span><br>              total        used        free      shared  buff/cache   available<br>Mem:            125         113          10           0           1          11<br><span class="hljs-meta">#</span><span class="bash"> 使用numactl查看内存状态也可以看到确实是两边的CPU内存各分配了56G</span><br><span class="hljs-meta">$</span><span class="bash"> numactl -H</span><br>available: 2 nodes (0-1)<br>node 0 cpus: 0 2 4 6 8 10 12 14 16 18<br>node 0 size: 64184 MB<br>node 0 free: 4687 MB<br>node 1 cpus: 1 3 5 7 9 11 13 15 17 19<br>node 1 size: 64494 MB<br>node 1 free: 5759 MB<br>node distances:<br>node   0   1<br>  0:  10  21<br>  1:  21  10<br></code></pre></div></td></tr></table></figure><h3 id="2-1-4-配置ulimit"><a href="#2-1-4-配置ulimit" class="headerlink" title="2.1.4 配置ulimit"></a>2.1.4 配置ulimit</h3><p>默认情况下系统的<code>ulimit</code>限制打开的文件描述符数量如果太小会影响dpvs正常运行，因此我们将其调大一些：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">ulimit</span> -n 655350</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ulimit -n 655350&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="hljs-meta">$</span><span class="bash"> chmod a+x /etc/rc.local</span><br></code></pre></div></td></tr></table></figure><h2 id="2-2-挂载驱动模块"><a href="#2-2-挂载驱动模块" class="headerlink" title="2.2 挂载驱动模块"></a>2.2 挂载驱动模块</h2><p>首先我们需要让系统挂载我们已经编译好的dpdk驱动（PMD驱动），然后再将网卡使用的默认驱动换为我们这里编译好的PMD驱动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> modprobe uio</span><br><span class="hljs-meta">$</span><span class="bash"> insmod /path/to/dpdk-stable-18.11.2/build/kmod/igb_uio.ko</span><br><span class="hljs-meta">$</span><span class="bash"> insmod /path/to/dpdk-stable-18.11.2/build/kmod/rte_kni.ko carrier=on</span><br></code></pre></div></td></tr></table></figure><blockquote><p>需要注意的是<code>carrier</code>参数是从DPDK v18.11版本开始新增的，默认值为<code>off</code>。我们需要在加载<code>rte_kni.ko</code>模块的时候带上<code>carrier=on</code>参数才能够使KNI设备工作正常。</p></blockquote><p>在<code>dpdk-stable-18.11.2/usertools</code>目录下有一些辅助我们安装使用dpdk的脚本，我们可以用它们来降低配置的复杂度，这里我们可以使用<code>dpdk-devbind.py</code>脚本来变更网卡的驱动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们关闭我们需要加载PMD驱动的网卡</span><br><span class="hljs-meta">$</span><span class="bash"> ifdown eth&#123;2,3,4,5&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看网卡状态，注意要特别关注网卡对应的PCI ID，下面只截取部分有用的输出结果</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py --status</span><br>Network devices using kernel driver<br>===================================<br>0000:04:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth2 drv=ixgbe unused=igb_uio<br>0000:04:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth3 drv=ixgbe unused=igb_uio<br>0000:82:00.0 &#x27;Ethernet 10G 2P X520 Adapter 154d&#x27; if=eth4 drv=ixgbe unused=igb_uio<br>0000:82:00.1 &#x27;Ethernet 10G 2P X520 Adapter 154d&#x27; if=eth5 drv=ixgbe unused=igb_uio<br></code></pre></div></td></tr></table></figure><p>从上面的输出结果我们可以看到目前的网卡使用的是<code>ixgbe</code>驱动，而我们的目标是让其使用<code>igb_uio</code>驱动。注意如果这个时候系统的网卡太多，前面我们记录下来的<code>网卡名-MAC地址-PCI ID</code>三个参数就可以派上用场了。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对需要使用dpvs的网卡加载特定的驱动</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py -b igb_uio 0000:04:00.0</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py -b igb_uio 0000:04:00.1</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py -b igb_uio 0000:82:00.0</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py -b igb_uio 0000:82:00.1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 再次检查是否加载成功，下面只截取部分有用的输出结果</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py --status</span><br>Network devices using DPDK-compatible driver<br>============================================<br>0000:04:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; drv=igb_uio unused=ixgbe<br>0000:04:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; drv=igb_uio unused=ixgbe<br>0000:82:00.0 &#x27;Ethernet 10G 2P X520 Adapter 154d&#x27; drv=igb_uio unused=ixgbe<br>0000:82:00.1 &#x27;Ethernet 10G 2P X520 Adapter 154d&#x27; drv=igb_uio unused=ixgbe<br></code></pre></div></td></tr></table></figure><h2 id="2-3-DPVS安装"><a href="#2-3-DPVS安装" class="headerlink" title="2.3 DPVS安装"></a>2.3 DPVS安装</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /path/to/dpdk-stable-18.11.2/</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RTE_SDK=<span class="hljs-variable">$PWD</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /path/to/dpvs</span><br><span class="hljs-meta">$</span><span class="bash"> make</span> <br><span class="hljs-meta">$</span><span class="bash"> make install</span><br><span class="hljs-meta">#</span><span class="bash"> 查看bin目录下的二进制文件</span><br><span class="hljs-meta">$</span><span class="bash"> ls /path/to/dpvs/bin/</span><br>dpip  dpvs  ipvsadm  keepalived<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意查看make过程中的提示信息，尤其是keepalived部分，如果出现下面的部分则表示IPVS支持IPv6</span><br>Keepalived configuration<br>------------------------<br>Keepalived version       : 2.0.19<br>Compiler                 : gcc<br>Preprocessor flags       : -D_GNU_SOURCE -I/usr/include/libnl3<br>Compiler flags           : -g -g -O2 -fPIE -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -O2<br>Linker flags             : -pie -Wl,-z,relro -Wl,-z,now<br>Extra Lib                : -lm -lcrypto -lssl -lnl-genl-3 -lnl-3<br>Use IPVS Framework       : Yes<br>IPVS use libnl           : Yes<br>IPVS syncd attributes    : No<br>IPVS 64 bit stats        : No<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 为了方便管理可以将相关的操作命令软链接到/sbin下方便全局执行</span><br><span class="hljs-meta">$</span><span class="bash"> ln -s /path/to/dpvs/bin/dpvs /sbin/dpvs</span><br><span class="hljs-meta">$</span><span class="bash"> ln -s /path/to/dpvs/bin/dpip /sbin/dpip</span><br><span class="hljs-meta">$</span><span class="bash"> ln -s /path/to/dpvs/bin/ipvsadm /sbin/ipvsadm</span><br><span class="hljs-meta">$</span><span class="bash"> ln -s /path/to/dpvs/bin/keepalived /sbin/keepalived</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 检查dpvs相关命令能否正常工作,注意其他命令要在dpvs进程启动后才能正常使用</span><br><span class="hljs-meta">$</span><span class="bash"> dpvs -v</span><br>dpvs version: 1.8-10, build on 2021.07.26.15:34:26<br></code></pre></div></td></tr></table></figure><h2 id="2-4-配置dpvs-conf"><a href="#2-4-配置dpvs-conf" class="headerlink" title="2.4 配置dpvs.conf"></a>2.4 配置dpvs.conf</h2><p>在<code>dpvs/conf</code>目录下面有着各种配置方式的dpvs配置文件范例，同时在<code>dpvs.conf.items</code>文件中记录了所有的参数，建议同学们全部阅读一遍了解了基本语法之后再进行配置。默认的dpvs启动的配置文件的是<code>/etc/dpvs.conf</code>。</p><p>这里简单摘几个部分出来说一下（<code>!</code>为注释符号）：</p><ul><li><p>日志的格式可以手动调成DEBUG并且修改日志输出的位置方便定位问题</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">global_defs &#123;<br>    log_level   DEBUG<br>    log_file    <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/dpvs/</span>logs/dpvs.log<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果需要定义多个网卡，可以参考这个配置</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet"><span class="hljs-keyword">netif_defs</span> &#123;<br>    &lt;init&gt; pktpool_size     <span class="hljs-number">1048575</span><br>    &lt;init&gt; pktpool_cache    <span class="hljs-number">256</span><br><br>    &lt;init&gt; <span class="hljs-literal">device</span> dpdk<span class="hljs-number">0</span> &#123;<br>        rx &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        <span class="hljs-keyword">tx</span> &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        <span class="hljs-keyword">fdir</span> &#123;<br>            <span class="hljs-literal">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64</span>k<br>            <span class="hljs-literal">status</span>              matched<br>        &#125;<br>        <span class="hljs-keyword">kni_name</span>                <span class="hljs-keyword">dpdk0</span>.kni<br>    &#125;<br><br>    &lt;init&gt; device <span class="hljs-keyword">dpdk1</span> &#123;<br>        rx &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        <span class="hljs-keyword">tx</span> &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        <span class="hljs-keyword">fdir</span> &#123;<br>            <span class="hljs-literal">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64</span>k<br>            <span class="hljs-literal">status</span>              matched<br>        &#125;<br>        <span class="hljs-keyword">kni_name</span>                <span class="hljs-keyword">dpdk1</span>.kni<br>    &#125;<br><br>    &lt;init&gt; device <span class="hljs-keyword">dpdk2</span> &#123;<br>        rx &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        <span class="hljs-keyword">tx</span> &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        <span class="hljs-keyword">fdir</span> &#123;<br>            <span class="hljs-literal">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64</span>k<br>            <span class="hljs-literal">status</span>              matched<br>        &#125;<br>        <span class="hljs-keyword">kni_name</span>                <span class="hljs-keyword">dpdk2</span>.kni<br>    &#125;<br><br>    &lt;init&gt; device <span class="hljs-keyword">dpdk3</span> &#123;<br>        rx &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>            rss                 all<br>        &#125;<br>        <span class="hljs-keyword">tx</span> &#123;<br>            queue_number        <span class="hljs-number">16</span><br>            descriptor_number   <span class="hljs-number">1024</span><br>        &#125;<br>        <span class="hljs-keyword">fdir</span> &#123;<br>            <span class="hljs-literal">mode</span>                perfect<br>            pballoc             <span class="hljs-number">64</span>k<br>            <span class="hljs-literal">status</span>              matched<br>        &#125;<br>        <span class="hljs-keyword">kni_name</span>                <span class="hljs-keyword">dpdk3</span>.kni<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>多个网卡的同一个收发队列共用同一个CPU</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">&lt;init&gt; worker <span class="hljs-keyword">cpu1</span> &#123;<br>    <span class="hljs-built_in">type</span>    slave<br>    cpu_id  <span class="hljs-number">1</span><br>    port    dpdk<span class="hljs-number">0</span> &#123;<br>        rx_queue_ids     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">port</span>    <span class="hljs-keyword">dpdk1</span> &#123;<br>        rx_queue_ids     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">port</span>    <span class="hljs-keyword">dpdk2</span> &#123;<br>        rx_queue_ids     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">port</span>    <span class="hljs-keyword">dpdk3</span> &#123;<br>        rx_queue_ids     <span class="hljs-number">0</span><br>        tx_queue_ids     <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果需要单独指定某个CPU来处理<code>ICMP</code>数据包，可以在该worker的参数中添加<code>icmp_redirect_core</code></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;init&gt;</span> worker <span class="hljs-class">cpu16 </span>&#123;<br>    type    slave<br>    cpu_id  <span class="hljs-number">16</span><br>    icmp_redirect_core<br>    port    <span class="hljs-class">dpdk0 </span>&#123;<br>        rx_queue_ids     <span class="hljs-number">15</span><br>        tx_queue_ids     <span class="hljs-number">15</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>DPVS进程启动后可以直接在Linux系统的网络配置文件中对相应的网卡进行配置，使用起来和其他的eth0之类的网卡是完全一样的。</p><p>运行成功之后，使用<code>dpip</code>命令和正常的<code>ip</code>、<code>ifconfig</code>命令都能够看到对应的<code>dpdk</code>网卡，IPv4和IPv6网络都能够正常使用。下图只截取部分信息，IP和MAC信息已脱敏，IPv6信息已摘除。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> dpip link show</span><br>1: dpdk0: socket 0 mtu 1500 rx-queue 16 tx-queue 16<br>    UP 10000 Mbps full-duplex auto-nego<br>    addr AA:BB:CC:23:33:33 OF_RX_IP_CSUM OF_TX_IP_CSUM OF_TX_TCP_CSUM OF_TX_UDP_CSUM<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ip a</span><br>67: dpdk0.kni: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether AA:BB:CC:23:33:33 brd ff:ff:ff:ff:ff:ff<br>    inet 1.1.1.1/24 brd 1.1.1.255 scope global dpdk0.kni<br>       valid_lft forever preferred_lft forever<br>       <br><span class="hljs-meta">$</span><span class="bash"> ifconfig dpdk0.kni</span><br>dpdk0.kni: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 1.1.1.1  netmask 255.255.254.0  broadcast 1.1.1.255<br>        ether AA:BB:CC:23:33:33  txqueuelen 1000  (Ethernet)<br>        RX packets 1790  bytes 136602 (133.4 KiB)<br>        RX errors 0  dropped 52  overruns 0  frame 0<br>        TX packets 115  bytes 24290 (23.7 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></div></td></tr></table></figure><h1 id="3、配置FullNat"><a href="#3、配置FullNat" class="headerlink" title="3、配置FullNat"></a>3、配置FullNat</h1><p>为了校验我们的DPVS能够正常工作，这里我们参考官方的<a href="https://github.com/iqiyi/dpvs/blob/master/doc/tutorial.md#simple-fnat">配置文档</a>，先配置一个最简单的双臂模式的FNAT。参考官方的架构图并修改其中的IP地址信息我们可以得到下面的简单架构图。</p><blockquote><p>该模式下不需要使用系统自带的ip、ifconfig等工具对DPVS虚拟出的kni网卡进行配置</p></blockquote><p><img src="https://resource.tinychen.com/20210728123202.svg" alt="dpvs-fnat-two-arm-sample"></p><p>这里我们使用dpdk2网卡作为wan口，dpdk0网卡作为lan口</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们把VIP 10.0.96.204 加到dpdk2网卡（wan）上</span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr add 10.0.96.204/32 dev dpdk2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 接着我们需要添加两条路由，分为是wan口网段的路由和到RS机器网段的路由</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 10.0.96.0/24 dev dpdk2</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add 192.168.229.0/24 dev dpdk0</span><br><span class="hljs-meta">#</span><span class="bash"> 最好再加一条到网关的默认路由保证ICMP数据包的回包能跑通</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route add default via 10.0.96.254 dev dpdk2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用RR算法建立转发规则</span><br><span class="hljs-meta">#</span><span class="bash"> add service &lt;VIP:vport&gt; to forwarding, scheduling mode is RR.</span><br><span class="hljs-meta">#</span><span class="bash"> use ipvsadm --<span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> more info.</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -A -t 10.0.96.204:80 -s rr</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里为了方便测试我们只添加一台RS</span><br><span class="hljs-meta">#</span><span class="bash"> add two RS <span class="hljs-keyword">for</span> service, forwarding mode is FNAT (-b)</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm -a -t 10.0.96.204:80 -r 192.168.229.1 -b</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加LocalIP到网络中，FNAT模式这里需要</span><br><span class="hljs-meta">#</span><span class="bash"> add at least one Local-IP (LIP) <span class="hljs-keyword">for</span> FNAT on LAN interface</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm --add-laddr -z 192.168.229.204 -t 10.0.96.204:80 -F dpdk0</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们查看一下效果</span><br><span class="hljs-meta">$</span><span class="bash"> dpip route show</span><br>inet 192.168.229.204/32 via 0.0.0.0 src 0.0.0.0 dev dpdk0 mtu 1500 tos 0 scope host metric 0 proto auto<br>inet 10.0.96.204/32 via 0.0.0.0 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope host metric 0 proto auto<br>inet 10.0.96.0/24 via 0.0.0.0 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope link metric 0 proto auto<br>inet 192.168.229.0/24 via 0.0.0.0 src 0.0.0.0 dev dpdk0 mtu 1500 tos 0 scope link metric 0 proto auto<br>inet 0.0.0.0/0 via 10.0.96.254 src 0.0.0.0 dev dpdk2 mtu 1500 tos 0 scope global metric 0 proto auto<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> dpip addr show</span><br>inet 10.0.96.204/32 scope global dpdk2<br>     valid_lft forever preferred_lft forever<br>inet 192.168.229.204/32 scope global dpdk0<br>     valid_lft forever preferred_lft forever<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm  -ln</span><br>IP Virtual Server version 0.0.0 (size=0)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.96.204:80 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.229.1:80              FullNat 1      0          0</span><br><span class="hljs-meta">$</span><span class="bash"> ipvsadm  -G</span><br>VIP:VPORT            TOTAL    SNAT_IP              CONFLICTS  CONNS<br>10.0.96.204:80    1<br>                              192.168.229.204       0          0<br></code></pre></div></td></tr></table></figure><p>然后我们在RS上面启动一个nginx，设置返回IP和端口号，看看效果：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">default_type</span> text/plain;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;Your IP and port is $remote_addr:$remote_port\n&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>直接对VIP使用ping和curl命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ping -c4 10.0.96.204</span><br>PING 10.0.96.204 (10.0.96.204) 56(84) bytes of data.<br>64 bytes from 10.0.96.204: icmp_seq=1 ttl=54 time=47.2 ms<br>64 bytes from 10.0.96.204: icmp_seq=2 ttl=54 time=48.10 ms<br>64 bytes from 10.0.96.204: icmp_seq=3 ttl=54 time=48.5 ms<br>64 bytes from 10.0.96.204: icmp_seq=4 ttl=54 time=48.5 ms<br><br>--- 10.0.96.204 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 8ms<br>rtt min/avg/max/mdev = 47.235/48.311/48.969/0.684 ms<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> curl 10.0.96.204</span><br>Your IP and port is 192.168.229.204:1033<br></code></pre></div></td></tr></table></figure><p>可以发现不管在什么机器上面都只会返回LIP的IP和端口号，如果需要获取用户的真实IP，那么就需要安装TOA模块</p><h1 id="4、RS安装TOA模块"><a href="#4、RS安装TOA模块" class="headerlink" title="4、RS安装TOA模块"></a>4、RS安装TOA模块</h1><p>目前开源社区提供toa模块的版本比较多，这里我们为了保证兼容性，直接使用dpvs官方提供的<code>toa</code>和<code>uoa</code>模块，根据他们的官方描述，他们的<code>toa</code>模块是从<code>Alibaba TOA</code>中剥离出来</p><blockquote><p>TOA source code is included into DPVS project(in directory <a href="https://github.com/iqiyi/dpvs/blob/master/kmod/toa">kmod/toa</a>) since v1.7 to support IPv6 and NAT64. It is derived from the Alibaba TOA. For IPv6 applications which need client’s real IP address, we suggest to use this TOA version.</p></blockquote><p>由于我们这里的RS机器和DPVS机器都是使用版本的CentOS7系统，因此我们可以直接在DPVS机器上面编译toa模块，再复制到各个RS机器上使用</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /path/to/dpvs/kmod/toa/</span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br></code></pre></div></td></tr></table></figure><p>顺利编译完成之后会在当前目录下生成一个<code>toa.ko</code>模块文件，这就是我们需要的文件，直接使用<code>insmod</code>命令加载模块然后检查</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> insmod toa.ko</span><br><span class="hljs-meta">$</span><span class="bash"> lsmod  | grep toa</span><br>toa                   279641  0<br></code></pre></div></td></tr></table></figure><p>确保开机加载模块，可以在<code>rc.local</code>文件中加入下面的指令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr/sbin/insmod /path/to/toa.ko<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> example：</span><br><span class="hljs-meta">#</span><span class="bash"> /usr/sbin/insmod /home/dpvs/kmod/toa/toa.ko</span><br></code></pre></div></td></tr></table></figure><p>除了toa模块之外，还有针对UDP协议的uoa模块，和上面的toa模块编译安装过程完全一致，这里不再赘述。</p><p>在RS机器上面加载了toa模块后我们再次使用curl测试效果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl 10.0.96.204</span><br>Your IP and port is 172.16.0.1:62844<br></code></pre></div></td></tr></table></figure><p>至此，整个DPVS的FullNat模式就算是部署完成并且能够正常工作了。由于DPVS支持非常多的配置组合，后面会再专门写一篇关于IPv6、nat64、keepalived、bonding、Master/Backup模式的配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在&lt;code&gt;CentOS7.9&lt;/code&gt;系统上部署DPVS的FullNAT模式和在RealServer上安装toa模块获取客户端的真实IP。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
    <category term="dpdk" scheme="https://tinychen.com/tags/dpdk/"/>
    
    <category term="dpvs" scheme="https://tinychen.com/tags/dpvs/"/>
    
  </entry>
  
  <entry>
    <title>CoreDNS篇4-编译安装unbound</title>
    <link href="https://tinychen.com/20210713-dns07-coredns-04-unbound/"/>
    <id>https://tinychen.com/20210713-dns07-coredns-04-unbound/</id>
    <published>2021-07-13T03:00:00.000Z</published>
    <updated>2021-07-13T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍coredns的unbound插件进行编译安装的过程及常用的配置方法。</p><span id="more"></span><p>coredns官方的<code>unbound</code>文档<a href="https://coredns.io/explugins/unbound/">unbound (coredns.io)</a>，以及<code>unbound</code>插件的github地址<a href="https://github.com/coredns/unbound">coredns/unbound: CoreDNS plugin that performs recursive queries using libunbound (github.com)</a>，此前已经介绍过coredns编译<a href="https://tinychen.com/20210516-dns-04-coredns-02--install-external-plugins/">其他插件的方法</a>，有需要的同学可以先回顾一下。</p><p>此外，unbound插件虽然是coredns中的External Plugins，但是从详情页面中我们可以看到<code>Maintained by CoreDNS: CoreDNS maintainers take care of this plugin.</code>，说明这个插件是官方维护的，在稳定性可靠性以及后续更新维护上都有不错的保证，应该是可以放心使用的。</p><h1 id="1、配置环境"><a href="#1、配置环境" class="headerlink" title="1、配置环境"></a>1、配置环境</h1><p>要使用CGO特性，需要安装C/C++构建工具链，<strong>在macOS和Linux下是要安装GCC，在windows下是需要安装MinGW工具</strong>。同时需要保证环境变量<code>CGO_ENABLED</code>被设置为1，这表示CGO是被启用的状态。在本地构建时<code>CGO_ENABLED</code>默认是启用的，当交叉构建时CGO默认是禁止的。比如要交叉构建ARM环境运行的Go程序，需要手工设置好C/C++交叉构建的工具链，同时开启<code>CGO_ENABLED</code>环境变量。</p><p>以CentOS8为例，最好提前安装好<code>gcc</code>、<code>unbound-devel</code>和<code>unbound-libs</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> cat /etc/redhat-release</span><br>CentOS Linux release 8.2.2004 (Core)<br><span class="hljs-meta"></span><br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> go env | grep <span class="hljs-string">&quot;CGO_ENABLED&quot;</span></span><br>CGO_ENABLED=&quot;1&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> rpm -qa | grep gcc</span><br>libgcc-8.4.1-1.el8.x86_64<br>gcc-8.4.1-1.el8.x86_64<br>gcc-c++-8.4.1-1.el8.x86_64<br>gcc-gdb-plugin-8.4.1-1.el8.x86_64<br><span class="hljs-meta"></span><br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> rpm -qa | grep unbound</span><br>unbound-devel-1.7.3-15.el8.x86_64<br>unbound-libs-1.7.3-15.el8.x86_64<br></code></pre></div></td></tr></table></figure><p>如果在使用<code>go get</code>命令获取unbound插件的时候遇到下面的这个问题，可以参考这个issue的解决方案：<a href="https://github.com/miekg/unbound/issues/3">How to fix the issue: unbound.h: No such file or directory · Issue #3 · miekg/unbound (github.com)</a></p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">[<span class="hljs-regexp">/home/</span>coredns]# go get github.com<span class="hljs-regexp">/coredns/u</span>nbound<br># github.com<span class="hljs-regexp">/miekg/u</span>nbound<br>..<span class="hljs-regexp">/gopath/</span>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/miekg/u</span>nbound@v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20210309082708</span>-dbeefb4cdb29/unbound.go:<span class="hljs-number">36</span>:<span class="hljs-number">10</span>: fatal error: unbound.h: No such <span class="hljs-keyword">file</span> or directory<br>   <span class="hljs-number">36</span> | #<span class="hljs-keyword">include</span> &lt;unbound.h&gt;<br>      |          ^~~~~~~~~~~<br>compilation terminated.<br></code></pre></div></td></tr></table></figure><p>对于红帽系的Linux可以直接安装<code>unbound-devel</code>，debian系的解决方案类似，只是软件包名可能略有不同。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y unbound-devel<br></code></pre></div></td></tr></table></figure><p>随后测试发现正常</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> go get github.com/coredns/unbound</span><br>go get: added github.com/coredns/unbound v0.0.7<br>go get: added github.com/miekg/unbound v0.0.0-20210309082708-dbeefb4cdb29<br></code></pre></div></td></tr></table></figure><h1 id="2、编译安装"><a href="#2、编译安装" class="headerlink" title="2、编译安装"></a>2、编译安装</h1><p>虽然我们go的环境变量设置启用了CGO，但是coredns的<code>Makefile</code>文件默认是禁用的，因此需要将里面的<code>CGO_ENABLED</code>参数从默认的<code>0</code>改为<code>1</code>，从而才能启用CGO。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> grep <span class="hljs-string">&quot;CGO_ENABLED&quot;</span> Makefile</span><br>CGO_ENABLED:=1<br></code></pre></div></td></tr></table></figure><p>随后进行编译安装，安装完成后查看当前目录下的coredns二进制文件是否包含unbound插件来确定是否顺利编译安装完成。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> go generate</span><br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> go build</span><br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> make</span><br>CGO_ENABLED=1  go build -v -ldflags=&quot;-s -w -X github.com/coredns/coredns/coremain.GitCommit=7b43d042-dirty&quot; -o coredns<br><span class="hljs-meta">[/home/coredns]#</span><span class="bash"> ./coredns -plugins | grep unbound</span><br>  dns.unbound<br></code></pre></div></td></tr></table></figure><p>对比是否编译安装了<code>unbound</code>插件的coredns，可以发现从原来的静态二进制文件，变成了需要动态加载依赖库。因此如果需要提前编译然后大范围使用，最好保证编译环境的系统和最终的使用环境系统一致或全兼容（本文的编译环境为CentOS8.2，使用环境为RockyLinux8.4）。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-rockylinux coredns]# file coredns.static<br>coredns.static: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped<br>[root@tiny-rockylinux coredns]# file coredns<br>coredns: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped<br><br>[root@tiny-rockylinux coredns]# file /lib64/ld-linux-x86-64.so.2<br>/lib64/ld-linux-x86-64.so.2: symbolic link to ld-2.28.so<br>[root@tiny-rockylinux coredns]# file /lib64/ld-2.28.so<br>/lib64/ld-2.28.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=04c0b62c6350fa6ec9158369de8b5b489e3d084b, not stripped<br></code></pre></div></td></tr></table></figure><h1 id="3、配置使用"><a href="#3、配置使用" class="headerlink" title="3、配置使用"></a>3、配置使用</h1><h2 id="语法配置"><a href="#语法配置" class="headerlink" title="语法配置"></a>语法配置</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">unbound</span> [FROM] &#123;<br>    <span class="hljs-attribute">except</span> IGNORED_NAMES...<br>    option NAME VALUE<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>FROM</strong> 指的是客户端请求需要解析的域名，例如<code>blog.tinychen.com</code>和<code>tinychen.com</code>这两个的FROM都是<code>tinychen.com</code></li><li><strong>IGNORED_NAMES</strong>  和<code>except</code>搭配使用，指定不使用unbound的zone</li><li><code>option</code> 可以添加unbound本身支持的一些参数，具体可以查看<code>unbound.conf</code>的<code>man</code>文档或者直接查看<a href="https://nlnetlabs.nl/documentation/unbound/unbound.conf/">官网的文档</a></li></ul><h2 id="prometheus监控"><a href="#prometheus监控" class="headerlink" title="prometheus监控"></a>prometheus监控</h2><p>unbound插件提供了两个监控指标，只要对应的zone中启用了Prometheus插件，那么就可以同时启用这两个指标(其他插件的监控指标也一样)，它们分别是：</p><ul><li><code>coredns_unbound_request_duration_seconds&#123;server&#125;</code> - duration per query.</li><li><code>coredns_unbound_response_rcode_count_total&#123;server, rcode&#125;</code> - count of RCODEs.</li></ul><p>这两个监控指标的数据格式和内容与coredns原生的<code>coredns_dns_request_duration_seconds</code>和<code>coredns_dns_response_rcode_count_total</code>一致，因此相关的监控图表只需要套用原有的进行简单修改后就能直接使用。</p><p><img src="https://resource.tinychen.com/20210713113519.png"></p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>除了<code>tinychen.com</code>这个域名其他的都使用<code>unbound</code>，并开启DNS最小化查询功能（<a href="https://tools.ietf.org/html/rfc7816">DNS Query Name Minimisation</a>）</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">. &#123;<br>    <span class="hljs-keyword">unbound</span> &#123;<br>        except tinychen.com<br>        option qname-minimisation yes<br>    &#125;<br>    <span class="hljs-keyword">log</span><br>    <span class="hljs-keyword">errors</span><br>    <span class="hljs-keyword">prometheus</span> 0.0.0.0:9253<br>    bind 0.0.0.0<br>    <span class="hljs-keyword">cache</span> &#123;<br>        success <span class="hljs-number">86400</span><br>        denial <span class="hljs-number">60</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍coredns的unbound插件进行编译安装的过程及常用的配置方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="coredns" scheme="https://tinychen.com/tags/coredns/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇12-限速三剑客之limit_rate</title>
    <link href="https://tinychen.com/20210712-nginx-12-triple-rate-limiting-limit-rate/"/>
    <id>https://tinychen.com/20210712-nginx-12-triple-rate-limiting-limit-rate/</id>
    <published>2021-07-12T07:00:00.000Z</published>
    <updated>2021-07-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对nginx官方<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate">limit_rate</a>相关指令的用法解释和一些个人理解，<code>limit_rate</code>主要用于限制用户和服务器之间传输的字节数，最常用的场景可能就是下载/上传限速，在如今用户网速普遍大幅提升的情况下，对于一些文件传输、视频流媒体传输等服务还是有着一定的应用场景的。</p><span id="more"></span><p>和我们前面提过的limit_req模块和limit_conn模块不一样的是，limit_rate并没有单独的一个模块，而是在<code>ngx_http_core_module</code>中，同时它的相关指令也比较少，只有<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate">limit_rate</a>和<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate_after">limit_rate_after</a>这两个指令。</p><h1 id="1、limit-rate"><a href="#1、limit-rate" class="headerlink" title="1、limit_rate"></a>1、limit_rate</h1><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 语法配置</span><br>Syntax:<span class="hljs-attribute">limit_rate</span> rate;<br>Default:<span class="hljs-attribute">limit_rate</span> <span class="hljs-number">0</span>;<br>Context:http, server, location, <span class="hljs-attribute">if</span> in location<br><br><span class="hljs-comment"># 示例</span><br>limit_rate <span class="hljs-number">4k</span>;<br></code></pre></div></td></tr></table></figure><ul><li><code>limit_rate</code>的用法非常简单，后面跟随的<code>rate</code>就是具体限速的阈值</li><li>注意默认的单位是<code>bytes/s</code>，也就是每秒传输的<strong>字节数Bytes</strong>而不是<strong>比特数bits</strong></li><li><code>rate</code>可以设置为变量，从而可以实现动态限速，后面我们再详细介绍</li><li><strong>限速指令的生效范围是根据每个连接确定的</strong>，例如上面限定每个连接的速率为4k，也就是当客户端发起两个连接的时候，速率就可以变为8k</li></ul><h1 id="2、limit-rate-after"><a href="#2、limit-rate-after" class="headerlink" title="2、limit_rate_after"></a>2、limit_rate_after</h1><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 语法配置</span><br>Syntax:<span class="hljs-attribute">limit_rate_after</span> size;<br>Default:<span class="hljs-attribute">limit_rate_after</span> <span class="hljs-number">0</span>;<br>Context:http, server, location, <span class="hljs-attribute">if</span> in location<br>This directive appeared in version <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<br><br><span class="hljs-comment"># 示例</span><br>location /flv/ &#123;<br>    flv;<br>    <span class="hljs-attribute">limit_rate_after</span> <span class="hljs-number">500k</span>;<br>    <span class="hljs-attribute">limit_rate</span>       <span class="hljs-number">50k</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>limit_rate_after</code>允许在传输了一部分数据之后再进行限速，例如上面的配置中就是传输的前500kbyte数据不限速，500k之后再进行限速。比较常见的应用场景如分段下载限速，超过指定大小的部分再进行限速；又或者是流媒体视频网站一般为了保证用户体验而不会对第一个画面进行限速，确保其能够尽快加载出来，等用户开始观看视频之后，再把带宽限制在合理的范围内，从而降低因客户端网速过快导致提前加载过多内容带来的额外成本。</p><h1 id="3、proxy-limit-rate"><a href="#3、proxy-limit-rate" class="headerlink" title="3、proxy_limit_rate"></a>3、proxy_limit_rate</h1><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_limit_rate">proxy_limit_rate</a>的基本原理和用法与<code>limit_rate</code>几乎一样，唯一不同的是<code>proxy_limit_rate</code>是<strong>限制nginx和后端upstream</strong>服务器之间的连接速率而<code>limit_rate</code>限制的是<strong>nginx和客户端</strong>之间的连接速率。<strong>需要注意的是<code>proxy_limit_rate</code>需要开启了<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering">proxy_buffering</a>这个指令才会生效。</strong></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">Syntax:<span class="hljs-attribute">proxy_limit_rate</span> rate;<br>Default:<span class="hljs-attribute">proxy_limit_rate</span> <span class="hljs-number">0</span>;<br>Context:http, server, <span class="hljs-attribute">location</span><br>This directive appeared in version <span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">7</span>.<br></code></pre></div></td></tr></table></figure><h1 id="4、动态限速"><a href="#4、动态限速" class="headerlink" title="4、动态限速"></a>4、动态限速</h1><p><code>limit_rate</code>的一大特点就是能够使用变量，这就意味着和map指令之类的进行组合就可以实现动态限速功能，这里只列几个简单的示范</p><h2 id="4-1-基于时间动态限速"><a href="#4-1-基于时间动态限速" class="headerlink" title="4.1 基于时间动态限速"></a>4.1 基于时间动态限速</h2><p>这里引入了nginx内置的一个ssi模块，这个模块有两个比较有意思的时间变量：<code>$date_local</code>和<code>$date_gmt</code>，分别对应当前时间和GMT时间</p><blockquote><p><a href="http://nginx.org/en/docs/http/ngx_http_ssi_module.html#variables">Module ngx_http_ssi_module (nginx.org)</a></p><p>Embedded Variables</p><p>The <code>ngx_http_ssi_module</code> module supports two embedded variables:</p><ul><li><p><code>$date_local</code></p><p>current time in the local time zone. The format is set by the <code>config</code> command with the <code>timefmt</code> parameter.</p></li><li><p><code>$date_gmt</code></p><p>current time in GMT. The format is set by the <code>config</code> command with the <code>timefmt</code> parameter.</p></li></ul></blockquote><p>这里使用变量和map指令组合的方式，利用正则表达式匹配不同的时间段，再结合map变量将不同时间段和不同的限速对应起来。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">map</span> $date_local $limit_rate_time &#123;<br>    <span class="hljs-attribute">default</span> <span class="hljs-number">4K</span>;<br>    ~(00:|01:|02:|03:|04:|05:|06:|07:).*:.* 16K;<br>    ~(08:|12:|13:|18:).*:.* 8K;<br>    ~(19:|20:|21:|22:|23:).*:.* 16K;<br>&#125;<br><br><span class="hljs-attribute">limit_rate</span> $limit_rate_time<br></code></pre></div></td></tr></table></figure><h2 id="4-2-基于变量动态限速"><a href="#4-2-基于变量动态限速" class="headerlink" title="4.2 基于变量动态限速"></a>4.2 基于变量动态限速</h2><p>有些服务可能会对不用的用户进行不同的限速，例如VIP用户的速度要更快一些等，例如下面可以针对不同的<code>cookie</code>进行限速</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">map</span> $cookie_User $limit_rate_cookie &#123;<br>    <span class="hljs-attribute">gold</span> <span class="hljs-number">64K</span>;<br>    <span class="hljs-attribute">silver</span> <span class="hljs-number">32K</span>;<br>    <span class="hljs-attribute">copper</span> <span class="hljs-number">16K</span>;<br>    <span class="hljs-attribute">iron</span> <span class="hljs-number">8K</span>;<br>&#125;<br><br><span class="hljs-attribute">limit_rate</span> $limit_rate_cookie<br></code></pre></div></td></tr></table></figure><p>当然还可以使用<code>GeoIP</code>模块等其他模块针对如不同的IP进行限速等操作，用法和配置基本上都是大同小异，这里就不再赘述。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是对nginx官方&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate&quot;&gt;limit_rate&lt;/a&gt;相关指令的用法解释和一些个人理解，&lt;code&gt;limit_rate&lt;/code&gt;主要用于限制用户和服务器之间传输的字节数，最常用的场景可能就是下载/上传限速，在如今用户网速普遍大幅提升的情况下，对于一些文件传输、视频流媒体传输等服务还是有着一定的应用场景的。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇11-限速三剑客之limit_conn</title>
    <link href="https://tinychen.com/20210708-nginx-11-triple-rate-limiting-limit-conn/"/>
    <id>https://tinychen.com/20210708-nginx-11-triple-rate-limiting-limit-conn/</id>
    <published>2021-07-08T10:00:00.000Z</published>
    <updated>2021-07-08T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对nginx官方<a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html">limit_conn</a>相关模块的配置用法和一些个人理解，<code>limit_conn</code>主要用于限制用户的连接数，在如今多线程并发请求大量普及的情况下，对于一些特殊的场景还是有着一定的用处的。</p><span id="more"></span><h1 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h1><p>目前来说在nginx上面我们常见的三种限速操作分别是：限制请求数(request)、限制连接数(connection)、限制响应速度(rate)，对应在nginx的模块相关指令分别是<code>limit_req</code>、<code>limit_conn</code>和<code>limit_rate</code>三个系列。<code>limit_conn</code>模块和<code>limit_req</code>模块类似，有着许多个指令组成一个大的模块，两个模块之间有很多指令的命名方式和用法也大同小异，对<code>limit_req</code>模块有兴趣的可以<a href="https://tinychen.com/20210616-nginx-10-triple-rate-limiting-limit-req/">点这里查看之前的文章</a>。</p><p> <code>ngx_http_limit_conn_module</code> 模块主要是用于根据特定的key来限制连接的数量，例如根据IP地址来限制连接数。需要注意的是并不是所有的连接都会被算入其中，只有当一个连接的整个请求头被读取并且已经被nginx服务器处理的时候才会算入限制中。这里我们重点介绍的还是<a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn">limit_conn</a>和<a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone">limit_conn_zone</a>这两个指令。</p><h1 id="2、limit-conn-zone指令"><a href="#2、limit-conn-zone指令" class="headerlink" title="2、limit_conn_zone指令"></a>2、limit_conn_zone指令</h1><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 语法配置</span><br>Syntax:<span class="hljs-attribute">limit_conn_zone</span> key zone=name:size;<br>Default:—<br>Context:<span class="hljs-attribute">http</span><br><br><span class="hljs-comment"># 示例</span><br>limit_conn_zone $binary_remote_addr zone=addr:<span class="hljs-number">10m</span>;<br></code></pre></div></td></tr></table></figure><ul><li><p><code>limit_conn_zone</code>只能够在<code>http</code>块中使用</p></li><li><p><code>key</code>就是用来判定连接数的变量，这个变量可以是文本、变量或它们的组合，例如我们可以使用<code>IP地址+cookie</code>等其他复杂的组合来更精确地限定范围</p></li><li><p><code>name</code>就是这个<code>zone</code>的命名，经过实测<code>name</code>需要全局唯一，不可以和其他的<code>limit_conn_zone</code>的相同，毕竟后面的<code>limit_conn</code>命令需要根据这个<code>name</code>来查找对应的<code>zone</code>进行相应限制规则的匹配</p></li><li><p><code>size</code>定义了这个<code>zone</code>的大小，也就是nginx会在内存中开辟多大的空间来存储这个<code>zone</code>的相关信息，主要和前面定义的<code>key</code>的大小有关系，需要注意的是，当内存大小耗尽的时候，nginx会直接返回错误码<a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_status">limit_conn_status</a>给后续的请求</p><blockquote><p>If the zone storage is exhausted, the server will return the <a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_status">error</a> to all further requests.</p></blockquote></li></ul><h1 id="3、limit-conn指令"><a href="#3、limit-conn指令" class="headerlink" title="3、limit_conn指令"></a>3、limit_conn指令</h1><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 语法配置</span><br>Syntax:<span class="hljs-attribute">limit_conn</span> zone number;<br>Default:—<br>Context:http, server, <span class="hljs-attribute">location</span><br><br><span class="hljs-comment"># 示例</span><br>limit_conn_zone $binary_remote_addr zone=addr:<span class="hljs-number">10m</span>;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> /download/ &#123;<br>        <span class="hljs-attribute">limit_conn</span> addr <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>limit_conn</code>能在<code>http</code> 、<code>server</code>、 <code>location</code>三个块中使用，但是需要注意的是要搭配前面提及的<code>limit_conn_zone</code></li><li><code>limit_conn</code>指令的变量只有<code>zone</code>和<code>number</code>两个</li><li>其中<code>zone</code>就是前面的<code>limit_conn_zone</code>中的<code>name</code>变量，也就是对应着全局唯一的<code>zone</code>，负责确定限制连接数的依据</li><li>其中<code>number</code>就是限制的连接数，zone和number组合就可以完成连接数的限定功能，<strong>注意这里的number必须使用数字而不能使用变量</strong></li></ul><blockquote><p>对于开启了HTTP2的请求来说，每个并发请求都会被当作一个单独的连接</p><p>In HTTP/2 and SPDY, each concurrent request is considered a separate connection.</p></blockquote><h1 id="4、其他指令"><a href="#4、其他指令" class="headerlink" title="4、其他指令"></a>4、其他指令</h1><p>其他的一些指令用法相对简单，这里简单描述一下</p><h2 id="4-1-limit-zone-已弃用"><a href="#4-1-limit-zone-已弃用" class="headerlink" title="4.1 limit_zone(已弃用)"></a>4.1 limit_zone(已弃用)</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">Syntax:<span class="hljs-attribute">limit_zone</span> name $variable size;<br>Default:—<br>Context:http<br></code></pre></div></td></tr></table></figure><p>生于1.1.8版本，卒于1.7.6版本 </p><h2 id="4-2-limit-conn-status"><a href="#4-2-limit-conn-status" class="headerlink" title="4.2 limit_conn_status"></a>4.2 limit_conn_status</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">Syntax:<span class="hljs-attribute">limit_conn_status</span> code;<br>Default:<span class="hljs-attribute">limit_conn_status</span> <span class="hljs-number">503</span>;<br>Context:http, server, <span class="hljs-attribute">location</span><br>This directive appeared in version <span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">15</span>.<br></code></pre></div></td></tr></table></figure><p><code>limit_conn_status</code>这个指令是用来指定nginx回复那些被禁用的连接请求时的状态码，默认情况下是503（Service Unavailable 服务不可用），如果是一些有特殊需求的场景，可以手动调整为403之类的状态码，需要注意的是并不是所有的状态码都可以使用，nginx官方限定状态码<strong>必须在400到599</strong>之间。</p><h2 id="4-3-limit-conn-dry-run"><a href="#4-3-limit-conn-dry-run" class="headerlink" title="4.3 limit_conn_dry_run"></a>4.3 limit_conn_dry_run</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">Syntax:<span class="hljs-attribute">limit_conn_dry_run</span> <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span>;<br>Default:<span class="hljs-attribute">limit_conn_dry_run</span> <span class="hljs-literal">off</span>;<br>Context:http, server, <span class="hljs-attribute">location</span><br>This directive appeared in version <span class="hljs-number">1</span>.<span class="hljs-number">17</span>.<span class="hljs-number">6</span>.<br></code></pre></div></td></tr></table></figure><p>dry_run模式的意义在于试运行而不对线上业务造成影响。设置为on之后，前面的<code>limit_conn指令</code>并不会真正生效，但是<code>limit_conn_zone指令</code>会生效，nginx会在内存中存储计算相关的数据。</p><h2 id="4-4-limit-conn-log-level"><a href="#4-4-limit-conn-log-level" class="headerlink" title="4.4 limit_conn_log_level"></a>4.4 limit_conn_log_level</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">Syntax:<span class="hljs-attribute">limit_conn_log_level</span> <span class="hljs-literal">info</span> | <span class="hljs-literal">notice</span> | <span class="hljs-literal">warn</span> | <span class="hljs-literal">error</span>;<br>Default:<span class="hljs-attribute">limit_conn_log_level</span> <span class="hljs-literal">error</span>;<br>Context:http, server, <span class="hljs-attribute">location</span><br>This directive appeared in version <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>.<br></code></pre></div></td></tr></table></figure><p>用来调试的日志，从测试结果来看，会输出到<code>error.log</code>中而不是<code>access.log</code>，调成<code>info</code>的话会有较多的日志输出，需要额外注意硬盘容量等相关问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是对nginx官方&lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html&quot;&gt;limit_conn&lt;/a&gt;相关模块的配置用法和一些个人理解，&lt;code&gt;limit_conn&lt;/code&gt;主要用于限制用户的连接数，在如今多线程并发请求大量普及的情况下，对于一些特殊的场景还是有着一定的用处的。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>RockyLinux简单安装上手体验</title>
    <link href="https://tinychen.com/20210705-rockylinux-quick-start-experience/"/>
    <id>https://tinychen.com/20210705-rockylinux-quick-start-experience/</id>
    <published>2021-07-05T07:00:00.000Z</published>
    <updated>2021-07-05T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rocky Linux — A community-driven effort to bring you enterprise-grade, production-ready Linux.</p><span id="more"></span><h1 id="1、背景介绍"><a href="#1、背景介绍" class="headerlink" title="1、背景介绍"></a>1、背景介绍</h1><p>这里摘录一段官网的简介，有兴趣的同学可以访问<a href="https://rockylinux.org/">官网</a>获取更多信息，官网提供了多种语言支持，在体验上还是相当不错的。</p><blockquote><p>Rocky Linux 是一个社区化的企业级操作系统。其设计为的是与美国顶级企业 Linux 发行版实现 100％ Bug 级兼容，而原因是后者的下游合作伙伴转移了发展方向。目前社区正在集中力量发展有关设施。Rocky Linux 由 CentOS 项目的创始人 Gregory Kurtzer 领导。</p></blockquote><p>Rocky Linux 从8.2版本开始内测，随后8.3版本开始RC，8.4版本开始GA，效率上还是相当高的。我们这里以8.4版本为例进行安装体验。值得顺便一提的是，除了常规的安装镜像，Rocky Linux 还提供了WSL相关的安装包，各种版本的支持都相当全面，目前看来确实给人感觉比较靠谱。</p><p><img src="https://resource.tinychen.com/20210707192153.png"></p><h1 id="2、安装体验"><a href="#2、安装体验" class="headerlink" title="2、安装体验"></a>2、安装体验</h1><p>这里使用kvm虚拟机来进行安装体验。Rocky Linux 的整体安装过程和centos8并没有太大的区别，内置的一些软件也基本一致。除了一些关键的名称和logo、图片等进行了变更，更加契合Rocky Linux 本身的形象气质。</p><p><img src="https://resource.tinychen.com/20210707192158.png"></p><p><img src="https://resource.tinychen.com/20210707192203.png"></p><p><img src="https://resource.tinychen.com/20210707192209.png"></p><p><img src="https://resource.tinychen.com/20210707192215.png"></p><p><img src="https://resource.tinychen.com/20210707192219.png"></p><p><img src="https://resource.tinychen.com/20210707192224.png"></p><p><img src="https://resource.tinychen.com/20210707192228.png"></p><p><img src="https://resource.tinychen.com/20210707192233.png"></p><h1 id="3、常用软件"><a href="#3、常用软件" class="headerlink" title="3、常用软件"></a>3、常用软件</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-rockylinux ~]# uname -r<br>4.18.0-305.3.1.el8_4.x86_64<br><br><br>[root@tiny-rockylinux ~]# lsb_release -a<br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID: Rocky<br>Description:    Rocky Linux release 8.4 (Green Obsidian)<br>Release:        8.4<br>Codename:       GreenObsidian<br><br>[root@tiny-rockylinux ~]# rpm -qa | grep glibc<br>glibc-2.28-151.el8.x86_64<br><br>[root@tiny-rockylinux ~]# yum --version<br>4.4.2<br>  Installed: dnf-0:4.4.2-11.el8.noarch at Mon 05 Jul 2021 07:46:22 AM GMT<br>  Built    : infrastructure@rockylinux.org at Tue 25 May 2021 07:59:44 PM GMT<br><br>  Installed: rpm-0:4.14.3-14.el8_4.x86_64 at Mon 05 Jul 2021 08:22:57 AM GMT<br>  Built    : infrastructure@rockylinux.org at Tue 29 Jun 2021 05:33:33 PM GMT<br> <br>[root@tiny-rockylinux ~]# dnf --version<br>4.4.2<br>  Installed: dnf-0:4.4.2-11.el8.noarch at Mon 05 Jul 2021 07:46:22 AM GMT<br>  Built    : infrastructure@rockylinux.org at Tue 25 May 2021 07:59:44 PM GMT<br><br>  Installed: rpm-0:4.14.3-14.el8_4.x86_64 at Mon 05 Jul 2021 08:22:57 AM GMT<br>  Built    : infrastructure@rockylinux.org at Tue 29 Jun 2021 05:33:33 PM GMT<br>  <br>[root@tiny-rockylinux ~]# rpm --version<br>RPM version 4.14.3<br><br></code></pre></div></td></tr></table></figure><h1 id="4、yum源支持"><a href="#4、yum源支持" class="headerlink" title="4、yum源支持"></a>4、yum源支持</h1><p>使用centos8同样的<code>epel</code>、<code>elrepo</code>和<code>docker</code>源，发现都能够兼容安装并且正常使用。这也意味着使用国内的镜像源也是完全没有问题，这里使用的是中科大的镜像源，使用起来完全正常。</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">[root@tiny-rockylinux yum.repos.d]<span class="hljs-comment"># ll</span><br>total 72<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1919 </span>Jul <span class="hljs-number"> 5 </span>16:38 docker-ce.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1906 </span>Jun<span class="hljs-number"> 16 </span><span class="hljs-number"> 2020 </span>elrepo.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1177 </span>Dec <span class="hljs-number"> 6 </span><span class="hljs-number"> 2020 </span>epel-modular.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1259 </span>Dec <span class="hljs-number"> 6 </span><span class="hljs-number"> 2020 </span>epel-playground.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1114 </span>Dec <span class="hljs-number"> 6 </span><span class="hljs-number"> 2020 </span>epel.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1276 </span>Dec <span class="hljs-number"> 6 </span><span class="hljs-number"> 2020 </span>epel-testing-modular.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1213 </span>Dec <span class="hljs-number"> 6 </span><span class="hljs-number"> 2020 </span>epel-testing.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 700 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-AppStream.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 685 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-BaseOS.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 713 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-Devel.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 685 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-Extras.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 721 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-HighAvailability.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 680 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-Media.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 685 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-Plus.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 705 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-PowerTools.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 736 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-ResilientStorage.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 671 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-RT.repo<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 2407 </span>Jun<span class="hljs-number"> 19 </span>22:20 Rocky-Sources.repo<br></code></pre></div></td></tr></table></figure><h2 id="4-1-epel源"><a href="#4-1-epel源" class="headerlink" title="4.1 epel源"></a>4.1 epel源</h2><p><img src="https://resource.tinychen.com/20210707192242.png"></p><h2 id="4-2-elrepo源"><a href="#4-2-elrepo源" class="headerlink" title="4.2 elrepo源"></a>4.2 elrepo源</h2><p><img src="https://resource.tinychen.com/20210707192245.png"></p><h2 id="4-3-docker源"><a href="#4-3-docker源" class="headerlink" title="4.3 docker源"></a>4.3 docker源</h2><p><img src="https://resource.tinychen.com/20210707192250.png"></p><p>尝试安装docker的时候报软件冲突错误：<img src="https://resource.tinychen.com/20210707192254.png"></p><p>看起来是已经内置的<code>podman</code>、<code>buildah</code>和要安装的<code>docker</code>套件冲突了，卸载冲突的软件后再进行重新安装即可正常运行了</p><p><img src="https://resource.tinychen.com/20210707192258.png"></p><h2 id="4-4-默认源"><a href="#4-4-默认源" class="headerlink" title="4.4 默认源"></a>4.4 默认源</h2><p>我们查看一下Rocky Linux的默认源，跳转到对应的<a href="https://mirrors.rockylinux.org/mirrormanager/mirrors/Rocky/8.4">网址</a>可以看到相对应的镜像</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[root@tiny-rockylinux yum.repos.d]</span><span class="hljs-comment"># cat Rocky-BaseOS.repo</span><br><span class="hljs-comment"># Rocky-BaseOS.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirrorlist system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick current mirrors that are geographically</span><br><span class="hljs-comment"># close to the client.  You should use this for Rocky updates unless you are</span><br><span class="hljs-comment"># manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist does not work for you, you can try the commented out</span><br><span class="hljs-comment"># baseurl line instead.</span><br><br><span class="hljs-section">[baseos]</span><br><span class="hljs-attr">name</span>=Rocky Linux <span class="hljs-variable">$releasever</span> - BaseOS<br><span class="hljs-attr">mirrorlist</span>=https://mirrors.rockylinux.org/mirrorlist?arch=<span class="hljs-variable">$basearch</span>&amp;repo=BaseOS-<span class="hljs-variable">$releasever</span><br><span class="hljs-comment">#baseurl=http://dl.rockylinux.org/$contentdir/$releasever/BaseOS/$basearch/os/</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rocky<span class="hljs-literal">off</span>icial<br></code></pre></div></td></tr></table></figure><p>简单查看了一下发现国内的镜像源还不少，山东大学、重庆大学、上海交通大学等都有镜像源，目前来看满足正常使用是没有问题的。</p><p><img src="https://resource.tinychen.com/20210707192303.png"></p><p><img src="https://resource.tinychen.com/20210707192312.png"></p><p><img src="https://resource.tinychen.com/20210707192316.png"></p><h1 id="5、发展前景"><a href="#5、发展前景" class="headerlink" title="5、发展前景"></a>5、发展前景</h1><p>Rocky Linux的目标就是为了接替CentOS的位置，成为开源社区的一个独立的稳定可靠的Linux发行版，同时会100%兼容RHEL，在RHEL的下游进行更新操作，同时创始人目前表示为了让Rocky Linux不再成为下一个CentOS（指被收购后丧失社区控制权从RHEL的下游转到上游）做了许多工作，除了拉了非常多厉害的赞助商之外，还专门成立了<code>Rocky Enterprise Software Foundation (RESF)</code> 基金会，同时制订了开源社区章程，还在规划更好的文档社区，一切看起来都非常的不错。</p><blockquote><p>尽管初来乍到，Rocky Linux 项目还是拥有相当高的人气和推动力。有报道称，在发布会后 72 小时内，由 Fastly 提供的 Tier0 镜像就迎来了将近 70000 次的下载量，此外 torrent 中子文件的下载量也有将大约 10000 次。</p><p>Summarized, the Rocky Enterprise Software Foundation (RESF) is a Public Benefit Corporation (PBC) formed in Delaware (file number 4429978), backed by a board of advisors with access control policies that utilize the principle of least privilege and separation of duty to ensure that no action can be taken unilaterally (not even by the legal owner, Gregory Kurtzer). For more information, see our <a href="https://rockylinux.org/organizational-structure/">Organizational Structure</a>.</p></blockquote><p>目前看来Rocky Linux的赞助商阵容还是相对不错的，<a href="https://ctrliq.com/">CIQ</a>作为创始赞助商（官网首页宣传上了Rocky Linux），<a href="https://www.45drives.com/">45Drives</a>作为存储赞助商，还有国外的云计算三巨头<strong>微软谷歌亚马逊</strong>也表示会把Rocky Linux系统加入到它们的云服务器系统镜像列表中。此外<code>Rocky Linux 8.4 GA</code>版本发布后的下载量也是相当不错，据种子文件的统计大概在72小时内达到了八万次左右，表明社区期盼值是相当高的。</p><p>总而言之，如果能够按照目前这个势头发展下去，Rocky Linux确实未来可期。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rocky Linux — A community-driven effort to bring you enterprise-grade, production-ready Linux.&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="rockylinux" scheme="https://tinychen.com/tags/rockylinux/"/>
    
  </entry>
  
  <entry>
    <title>CoreDNS篇3-接入prometheus监控</title>
    <link href="https://tinychen.com/20210623-dns-06-coredns-03-prometheus/"/>
    <id>https://tinychen.com/20210623-dns-06-coredns-03-prometheus/</id>
    <published>2021-06-24T09:00:00.000Z</published>
    <updated>2021-06-24T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对coredns的<em>prometheus</em>监控进行介绍，以及对grafana中配置coredns的dashboard进行分享。</p><span id="more"></span><h1 id="0、背景"><a href="#0、背景" class="headerlink" title="0、背景"></a>0、背景</h1><p><a href="https://coredns.io/plugins/metrics/">Prometheus插件</a>作为coredns的Plugins，默认情况下是内置在coredns中，如果是自己编译安装的版本，需要注意在编译安装的时候的<code>plugin.cfg</code>文件中添加了<code>prometheus:metrics</code>，这样才能确保编译成功。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们检查一下运行的版本</span><br>[root@tiny-server coredns]# ./coredns -plugins | grep prometheus<br>  dns.prometheus<br></code></pre></div></td></tr></table></figure><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p><em>prometheus</em> 插件主要用于暴露CoreDNS相关的监控数据，除了coredns本身外，其他支持<em>prometheus</em>的插件（如cache插件）在启用的时候也可以通过<em>prometheus</em>插件暴露出相关的监控信息，默认情况下暴露出的监控数据在<code>localhost:9153</code>，路径为<code>/metrics</code>，<strong>配置文件中的每个server块只能使用一次<em>prometheus</em>。</strong>下面是一些coredns自身相关的指标：</p><ul><li><code>coredns_build_info&#123;version, revision, goversion&#125;</code> -  关于 CoreDNS 本身的信息</li><li><code>coredns_panics_total&#123;&#125;</code> -  panics的总数</li><li><code>coredns_dns_requests_total&#123;server, zone, proto, family, type&#125;</code> - 总查询次数</li><li><code>coredns_dns_request_duration_seconds&#123;server, zone, type&#125;</code> - 处理每个查询的耗时</li><li><code>coredns_dns_request_size_bytes&#123;server, zone, proto&#125;</code> - 请求的大小（以bytes为单位）</li><li><code>coredns_dns_do_requests_total&#123;server, zone&#125;</code> -  设置了 DO 位的查询（queries that have the DO bit set）</li><li><code>coredns_dns_response_size_bytes&#123;server, zone, proto&#125;</code> - 响应的大小（以bytes为单位）</li><li><code>coredns_dns_responses_total&#123;server, zone, rcode&#125;</code> - 每个zone的响应码和数量</li><li><code>coredns_plugin_enabled&#123;server, zone, name&#125;</code> - 每个zone上面的各个插件是否被启用</li></ul><p>需要注意的是上面频繁出现的几个标签(label)，这里额外做一些解释：</p><ul><li><code>zone</code>：每个<code>request/response</code>相关的指标都会有一个<code>zone</code>的标签，也就是上述的大多数监控指标都是可以细化到每一个<code>zone</code>的。这对于需要具体统计相关数据和监控排查问题的时候是非常有用的</li><li><code>server</code>：是用来标志正在处理这个对应请求的服务器，一般的格式为<code>&lt;scheme&gt;://[&lt;bind&gt;]:&lt;port&gt;</code>，默认情况下应该是<code>dns://:53</code>，如果使用了bind插件指定监听的IP，那么就可能是<code>dns://127.0.0.53:53</code>这个样子</li><li><code>proto</code>：指代的就是传输的协议，一般就是udp或tcp</li><li><code>family</code>：指代的是传输的IP协议代数，(1 = IP (IP version 4), 2 = IP6 (IP version 6))</li><li><code>type</code>：指代的是DNS查询的类型，这里被分为常见的如(A, AAAA, MX, SOA, CNAME, PTR, TXT, NS, SRV, DS, DNSKEY, RRSIG, NSEC, NSEC3, IXFR, AXFR and ANY) 和其他类型 “other”</li></ul><blockquote><p>If monitoring is enabled, queries that do not enter the plugin chain are exported under the fake name “dropped” (without a closing dot - this is never a valid domain name).</p></blockquote><h1 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h1><p>coredns中想要启用prometheus插件，只需要在对应的zone中加上这一行配置即可，默认监听的是本机127.0.0.1的9153端口，当然也可以根据自己的需要更改监听的网卡和端口。</p><blockquote><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">prometheus</span><span class="hljs-meta"> [ADDRESS]</span><br></code></pre></div></td></tr></table></figure></blockquote><p>我们直接来看一段配置：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">tinychen<span class="hljs-selector-class">.com</span>:<span class="hljs-number">53</span> &#123;<br>    forward tinychen<span class="hljs-selector-class">.com</span> <span class="hljs-number">47.107</span>.<span class="hljs-number">188.168</span><br>    prometheus<br>&#125;<br><br>google<span class="hljs-selector-class">.com</span>:<span class="hljs-number">53</span> &#123;<br>    forward google<span class="hljs-selector-class">.com</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">9.9</span>.<span class="hljs-number">9.9</span><br>    prometheus <span class="hljs-number">192.168</span>.<span class="hljs-number">100.100</span>:<span class="hljs-number">9253</span><br>&#125;<br><br>example<span class="hljs-selector-class">.org</span> &#123;<br>    file /home/coredns/conf/example<span class="hljs-selector-class">.org</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>prometheus的生效范围是按照zone来划分的，在上面的这个配置中：</p><ul><li><code>tinychen.com:53</code>这个域使用的是Prometheus的默认配置，那么此时的监听情况就是默认的127.0.0.1的9153端口，请求<code>http://127.0.0.1:9153/metrics/</code>这个地址就能够获取到<code>tinychen.com:53</code>这个域的监控信息</li><li>同理在<code>http://192.168.100.100:9253/metrics/</code>这个地址能够获取到<code>google.com:53</code>这个域的监控信息</li><li><code>example.org</code> 这个域因为没有添加<code>prometheus</code>指令，所以在任何地址都不会暴露相关的监控信息</li></ul><p>如果有多个zone，每个zone都有相同的基础配置，也可以使用<a href="https://coredns.io/plugins/import/">import</a>指令，如：</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">tinychen.com:<span class="hljs-number">53</span> &#123;<br>    forward tinychen.com <span class="hljs-number">47.107.188.168</span><br>    log<br>    whoami<br>    errors<br>    prometheus <span class="hljs-number">192.168.100.100</span>:<span class="hljs-number">9253</span><br>    bind <span class="hljs-number">192.168.100.100</span><br>    cache &#123;<br>        success <span class="hljs-number">3600</span><br>        denial <span class="hljs-number">600</span><br>    &#125;<br>&#125;<br><br>google.com:<span class="hljs-number">53</span> &#123;<br>    forward google.com <span class="hljs-number">8.8.8.8</span> <span class="hljs-number">9.9.9.9</span><br>    log<br>    whoami<br>    errors<br>    prometheus <span class="hljs-number">192.168.100.100</span>:<span class="hljs-number">9253</span><br>    bind <span class="hljs-number">192.168.100.100</span><br>    cache &#123;<br>        success <span class="hljs-number">3600</span><br>        denial <span class="hljs-number">600</span><br>    &#125;<br>&#125;<br><br>example.org &#123;<br>    file /home/coredns/conf/example.org<br>    log<br>    whoami<br>    errors<br>    prometheus <span class="hljs-number">192.168.100.100</span>:<span class="hljs-number">9253</span><br>    bind <span class="hljs-number">192.168.100.100</span><br>    cache &#123;<br>        success <span class="hljs-number">3600</span><br>        denial <span class="hljs-number">600</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以简化成这样：</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">(basesnip) &#123;<br>    log<br>    whoami<br>    errors<br>    prometheus <span class="hljs-number">192.168</span>.<span class="hljs-number">100.100</span>:<span class="hljs-number">9253</span><br>    bind <span class="hljs-number">192.168</span>.<span class="hljs-number">100.100</span><br>    cache &#123;<br>        success <span class="hljs-number">3600</span><br>        denial <span class="hljs-number">600</span><br>    &#125;<br>&#125;<br><br>tinychen.com:<span class="hljs-number">53</span> &#123;<br>    forward tinychen.com <span class="hljs-number">47.107</span>.<span class="hljs-number">188.168</span><br>    <span class="hljs-keyword">import</span> basesnip<br>&#125;<br><br>google.com:<span class="hljs-number">53</span> &#123;<br>    forward google.com <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">9.9</span>.<span class="hljs-number">9.9</span><br>    <span class="hljs-keyword">import</span> basesnip<br>&#125;<br><br>example.org &#123;<br>    <span class="hljs-keyword">file</span> <span class="hljs-regexp">/home/</span>coredns<span class="hljs-regexp">/conf/</span>example.org<br>    <span class="hljs-keyword">import</span> basesnip<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="3、grafana配置dashboard"><a href="#3、grafana配置dashboard" class="headerlink" title="3、grafana配置dashboard"></a>3、grafana配置dashboard</h1><p>coredns原生支持的<code>prometheus</code>指标数量和丰富程度在众多DNS系统中可以说是首屈一指的，此外在grafana的官网上也有着众多<a href="https://grafana.com/grafana/dashboards?search=coredns">现成的<code>dashboard</code></a>可用，并且由于绝大多数指标都是通用的，多个不同的<code>dashboard</code>之间的<code>panel</code>可以随意复制拖拽组合成新的<code>dashboard</code>并且不用担心兼容性问题。我们可以很容易的根据自己的实际需求配置对应的权威/递归/组合DNS相关的监控项。</p><p><img src="https://resource.tinychen.com/20210624162017.png"></p><p>如上图我们可以看到能够监控出不同DNS类型的请求数量以及不同的zone各自的请求数量，还有其他的类似请求延迟、请求总数等等各项参数都能完善地监控起来。</p><p><img src="https://resource.tinychen.com/20210624162025.png"></p><p>如上图我们能看到可以监控到不同的请求的传输层协议状态，缓存的大小状态和命中情况等各种信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对coredns的&lt;em&gt;prometheus&lt;/em&gt;监控进行介绍，以及对grafana中配置coredns的dashboard进行分享。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="coredns" scheme="https://tinychen.com/tags/coredns/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇10-限速三剑客之limit_req</title>
    <link href="https://tinychen.com/20210616-nginx-10-triple-rate-limiting-limit-req/"/>
    <id>https://tinychen.com/20210616-nginx-10-triple-rate-limiting-limit-req/</id>
    <published>2021-06-16T04:00:00.000Z</published>
    <updated>2021-06-16T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对nginx官方<code>limit_req</code>相关模块的限速原理的解释和一些个人理解，主要参考的文章为<a href="https://www.nginx.com/blog/rate-limiting-nginx/"><code>Rate Limiting with NGINX and NGINX Plus</code></a>和nginx的<a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html"><code>ngx_http_limit_req_module</code></a>的详细说明。</p><span id="more"></span><p>目前来说在nginx上面我们常见的三种限速操作分别是：限制请求数(request)、限制连接数(connection)、限制响应速度(rate)，对应在nginx的模块相关指令分别是<code>limit_req</code>、<code>limit_conn</code>和<code>limit_rate</code>三个系列。</p><h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>限速（rate limiting）是NGINX中一个非常有用但是经常被误解且误用的功能特性。我们可以用它来限制在一段时间内的HTTP请求的数量，这些请求可以是如<code>GET</code>这样的简单请求又或者是用来填充登录表单的<code>POST</code>请求。</p><p>限速还可以用于安全防护用途，例如限制密码撞库暴力破解等操作的频率，也可以通过把请求频率限制在一个正常范围来抵御<a href="https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/">DDoS攻击</a>。不过更常见的使用情况是通过限制请求的数量来确保后端的upstream服务器不会在短时间内遭受到大量的流量访问从而导致服务异常。</p><p>本文会尽量覆盖nginx中限速（rate limiting）的基本概念也相关知识同时会顺带尽可能多的提一下相关的进阶配置方法。限速（rate limiting）在付费版本的nginx（Nginx Plus）中也是同样可以使用的。</p><blockquote><p>NGINX Plus R16 及之后的版本支持“全局限速（global rate limiting）”，可以在一整个nginx集群中对某个用户或者连接进行限速状态的同步。原理基本上类似于openresty+redis的工作模式，将限速的状态存储到一个集群中，当需要限速操作的时候就去集群中读取相关参数，For details, see our <a href="https://www.nginx.com/blog/nginx-plus-r16-released/#r16-cluster-rate-limiting">blog</a> and the <a href="https://docs.nginx.com/nginx/admin-guide/high-availability/zone_sync/">NGINX Plus Admin Guide</a>.</p></blockquote><h1 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h1><p>nginx中限速（rate limiting）的主要算法原理就是基于在计算机网络中当带宽是有限时十分常用的<strong>漏桶算法</strong>。基本原理就是：<strong>以漏桶为例，水从顶部倒入，从底下漏出。</strong>这里的几个概念分别是：</p><ul><li>漏桶对应我们服务器的带宽或者是处理请求的能力或者是一个队列</li><li>水表示客户端发送过来的请求</li><li>倒入的水则代表客户端发送给服务器但尚未进行处理的请求，此时请求仍在队列（在桶内）</li><li>漏出的水则代表从队列中出来即将发送给服务器端处理的请求，此时请求已经离开了队列（在桶外）</li></ul><p>漏桶在一定程度上可以代表服务器的处理能力，请求根据<strong>先进先出（FIFO）</strong>调度算法等待处理。如果倒入水的速度小于漏水的速度，可以理解为服务器能够处理完所有的请求，此时整体服务表现正常。如果倒入水的速度大于漏水的速度，那么水桶内的水会不断增加直到最后溢出，这种情况下在水桶中的水可以理解为在队列中等待的请求，而溢出的水则表示直接被丢弃不处理的请求。</p><h1 id="3、基础配置"><a href="#3、基础配置" class="headerlink" title="3、基础配置"></a>3、基础配置</h1><p>下面这里我们列举一个简单的nginx限速配置：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=mylimit:<span class="hljs-number">10m</span> rate=10r/s;<br> <br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> /login/ &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=mylimit;<br>        <br>        <span class="hljs-attribute">proxy_pass</span> http://my_upstream;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里首先使用了<a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone"><code>limit_req_zone</code>指令</a>定义了一个限速zone，名为<code>mylimit</code>，大小为10MB，对应的变量是<code>$binary_remote_addr</code>，限制的请求速率是每秒限制10个请求（10requests/secends），在<code>login</code>这个<code>location</code>中使用<a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req"><code>limit_req</code>指令</a>指定了限制的<code>zone</code>。接下来我们详细解析一下整个限速的过程：</p><p>首先是<a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone"><code>limit_req_zone</code>指令</a>主要用于<strong>定义速度限制相关的参数</strong>，而<a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req"><code>limit_req</code>指令</a>则是用于<strong>启用定义的限速参数</strong>（如这里是在login中启用）</p><p><code>limit_req_zone</code> 指令一般用于http块中，使其可以在多个相关server、location等contexts中使用，一般来说它需要定义下面三个必要参数：</p><blockquote><p>Syntax：<strong>limit_req_zone</strong> <em>key</em> zone=<em>name</em>:<em>size</em> rate=<em>rate</em> [sync]; </p><p>Syntax:  <strong>limit_req</strong> zone=<em>name</em> [burst=<em>number</em>] [nodelay | delay=<em>number</em>];</p></blockquote><ul><li><p>key：定义用于限制请求的变量，在这个示例中使用的是NGINX的自带变量<code>$binary_remote_addr</code>，它的特点是使用二进制来表示IP地址，如<code>123.183.224.65</code>这个IP在<code>$remote_addr</code>中显示为<code>123.183.224.65</code>，在<code>$binary_remote_addr</code>表示为<code>&#123;\xB7\xE0A</code>，因此<code>$binary_remote_addr</code>占用的空间要比<code>$remote_addr</code>更少。使用<code>$binary_remote_addr</code>则意味着将每个唯一的用户IP作为限制速率的判断依据。</p></li><li><p>zone：定义用于存储<strong>前面定义的key变量</strong>和<strong>限制其访问请求频率rate变量</strong>的共享内存空间，将信息保存在共享内存中的好处是能够在多个worker进程中共享。存储空间的定义由两个部分组成：<code>zone=</code>后面的名称以及冒号后面的大小，如<code>zone=mylimit:10m</code> 就是一个名为<code>mylimit</code>的大小为<code>10m</code>的共享内存空间。以<code>$binary_remote_addr</code> 变量为例，它使用4 bytes来存储IPv4 地址或者是使用16 bytes来存储IPv6地址。存储状态始终在32位平台上占用64个字节，并在64位平台上占用128个字节。<strong>考虑到现在的服务器绝大多数都是64位的操作系统</strong>，1M的大小可以保留大约8192个128字节的状态。</p><p>当存储空间耗尽的时候，如果需要记录新的值，那么就会通过<strong>LRU算法</strong>移除旧的变量来腾出空间，如果这样腾出来的空间还是不足以接纳新的记录值，那么nginx就会返回状态码<code>503</code> <code>(Service</code> <code>Temporarily</code> <code>Unavailable)</code>。此外，为了防止内存耗尽，nginx每次创建一个新记录值的时候就会清理掉两个60秒内没被使用过的旧记录值。</p><blockquote><p>If the zone storage is exhausted, the least recently used state is removed. If even after that a new state cannot be created, the request is terminated with an <a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_status">error</a>.</p></blockquote></li><li><p>rate：设定允许的最大请求速率。上面的例子是每秒十个请求(10r/s)。nginx实现的是<strong>毫秒级别的控制粒度</strong>，10r/s对应的就是1r/100ms，这也就意味着在没有设置<code>bursts</code>的情况下，如果一个请求接受处理之后的100ms内出现第二个请求，那么它就会被拒绝处理。</p></li></ul><p><code>limit_req_zone</code>指令设置了速率限制和共享内存区域的参数，但它实际上并不限制请求速率。因此我们需要通过在<code>contexts</code>中使用<code>limit_req</code>指令来将其限制应用于特定<code>location</code>或<code>server</code>块。在上面的例子里，我们将请求速率限制在<code>/login/</code>这个<code>location</code>块中。因此现在每个唯一的 IP 地址被限制为每秒 10 个**/login/**请求，或者更准确地说，不能在前一个 URL 请求的 100 毫秒内发出对该 URL 的第二次请求。</p><h1 id="4、突发请求处理-Bursts"><a href="#4、突发请求处理-Bursts" class="headerlink" title="4、突发请求处理(Bursts)"></a>4、突发请求处理(Bursts)</h1><p>上面的基础配置只能处理最简单的理想情况，但是如果服务器在100毫秒内收到了2个及以上的请求，那么在上面的配置中，nginx就会向第1个请求之后的所有客户端返回503代码。考虑到并发是程序的天然属性，大多数情况下都是同一时间内涌入大量的请求，因此这显然并不是我们想要的处理方案，我们想要的应该是<strong>尽可能“均匀平滑”地处理所有的请求而不是直接拒绝掉它们</strong>。因此在这种情况下我们可以使用<code>burst</code>参数设置突发阈值，允许并发情况的处理。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /login/ &#123;<br>    <span class="hljs-attribute">limit_req</span> zone=mylimit burst=<span class="hljs-number">20</span>;<br>    <span class="hljs-attribute">proxy_pass</span> http://my_upstream;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面这段配置中我们设置了<code>burst=20</code>，该配置定义了客户端可以超过区域指定速率的请求数（对于我们前面定义的<code>mylimit</code>区域，请求速率限制为每秒 10 个请求即每 100 毫秒 1 个）。在前一个请求之后 100 毫秒内到达的请求会被放入到队列中，这里我们将队列大小设置为 20。</p><p>也就是说如果有22个请求同时发送过来，那么NGINX会马上把<strong>第1个</strong>请求根据相关规则转发给upstream服务器，然后把接下来的<strong>第2到21共计20个请求</strong>放入队列中，接着直接返回<code>503代码</code>给<strong>第22个请求</strong>，随后的2秒时间内，每100毫秒从队列中取出一个请求发送给upstream服务器进行处理。</p><h1 id="5、无延迟队列-Queueing-with-No-Delay"><a href="#5、无延迟队列-Queueing-with-No-Delay" class="headerlink" title="5、无延迟队列(Queueing with No Delay)"></a>5、无延迟队列(Queueing with No Delay)</h1><p>上面的方法虽然使得请求的流量变得<strong>“均匀平滑”</strong>，但是确很大程度上增加了响应时间，排在队列越后面的请求的等待时间越长，这就导致了它们的响应时间平白无故地增加了许多，过长的响应时间甚至可能会导致客户端认为请求异常或者直接导致请求超时。为了解决这种情况，我们可以在<code>brust</code>参数后面加上<code>nodelay</code>参数。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /login/ &#123;<br>    <span class="hljs-attribute">limit_req</span> zone=mylimit burst=<span class="hljs-number">20</span> nodelay;<br>    <span class="hljs-attribute">proxy_pass</span> http://my_upstream;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>加上了<code>nodelay</code>参数之后，nginx的处理方式和上面基本相同，唯一的区别在于：当nginx接受了<strong>第2到21共计20个请求</strong>之后，不会把它们放入队列中，而是直接将它们转发给upstream服务器，同时标记队列中的这20个插槽(slot)为已使用，然后把剩下的全部请求都503拒绝掉，接着每过100毫秒再释放一个新的slot让新的请求进来。</p><p>With the <code>nodelay</code> parameter, NGINX still allocates slots in the queue according to the <code>burst</code> parameter and imposes the configured rate limit, but not by spacing out the forwarding of queued requests. </p><p>Instead, when a request arrives “too soon”, NGINX forwards it immediately as long as there is a slot available for it in the queue. It marks that slot as “taken” and does not free it for use by another request until the appropriate time has passed (in our example, after 100ms).</p><p>现在假设在第一组请求转发后 101 毫秒，另外 20 个请求同时到达。队列中只有 1 个插槽已被释放，因此 NGINX 转发 1 个请求给upstream服务器并以 <code>status 503</code> 拒绝其他 19 个请求。如果在 20 个新请求到达之前 已经过去了501毫秒而不是101毫秒，则有 5 个空闲槽，因此 NGINX 立即转发 5 个请求upstream服务器并拒绝剩余15 个请求。<strong>这样最终的效果相当于每秒 10 个请求的速率限制，只不过没有了前面的<em>“均匀平滑”</em>的特性，但是却有效降低了响应时间。</strong>因此如果我们需要在不限制每个请求之间的时间间隔的情况下限制请求速率，可以考虑使用<code>nodelay</code>参数。</p><blockquote><p><strong>Note:</strong> For most deployments, we recommend including the <code>burst</code> and <code>nodelay</code> parameters to the <code>limit_req</code> directive.</p></blockquote><h1 id="6、两段限速-Two-Stage-Rate-Limiting"><a href="#6、两段限速-Two-Stage-Rate-Limiting" class="headerlink" title="6、两段限速(Two-Stage Rate Limiting)"></a>6、两段限速(Two-Stage Rate Limiting)</h1><h2 id="6-1-原理解析"><a href="#6-1-原理解析" class="headerlink" title="6.1 原理解析"></a>6.1 原理解析</h2><p><strong>简单来说，所谓的分段限速就是允许客户端在刚开始的时候有一定的突发请求，后面再进入到平稳的限速中。</strong></p><p>我们可以在<code>NGINX Plus R17</code>或者是<code>NGINX 1.15.7</code>使用<code>limit_req</code> 指令和<code>delay参数</code>来实现两段限速，<code>delay参数</code>将nginx配置为允许突发请求以适应典型的 Web 浏览器请求模式，然后将额外的过度请求限制到一定程度，超过该点的额外过度请求将被拒绝。</p><p>这里我们以5r/s的限制速率为例，一般来说网站通常每个页面有 4 到 6 个资源，并且永远不会超过 12 个资源。该配置允许最多 12 个请求的突发，其中前 8 个请求会被直接转发给upstream处理。在达到5r/s的请求限制之后，第6到第13个请求会被添加到延迟(delay)中，再之后的任何请求都会被拒绝。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=ip:<span class="hljs-number">10m</span> rate=5r/s;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=ip burst=<span class="hljs-number">12</span> delay=<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">proxy_pass</span> http://website;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>下面假设有一个客户端不断地向我们的限速服务器发出请求，根据上面的配置，nginx的处理情况如下：</p><p><img src="https://resource.tinychen.com/20210616155840.png"></p><ul><li>这里可以看到，从burst队列中首先最开始的12个请求可以按照配置分为8+5</li><li>即最前面的8个请求会被直接发送给<code>upstream</code>处理，也就是在burst队列中的<code>no delay</code>部分，这里的8个和配置中的参数<code>delay=8</code>吻合</li><li>随后的5个请求也会被加入到burst队列中，这里的处理规则就不是按照前面的<code>no delay</code>部分的规则来处理，而是先按照设定的<code>rate=5r/s</code>来进行处理，接着同样是这一秒内的其他请求都会被返回503代码拒绝掉</li><li>再进入下一秒的时间，这里的请求就和之前设定的一样，全部按照<code>rate=5r/s</code>来进行处理，同样是这一秒内的其他请求都会被返回503代码拒绝掉</li></ul><h2 id="6-2-实测"><a href="#6-2-实测" class="headerlink" title="6.2 实测"></a>6.2 实测</h2><p>这里我们使用jmeter来进行实测查看不同的配置对应的效果，这里我们尝试5秒内发送100次请求，然后查看测试结果，由于nginx的日志写入有延迟，和这里的精确到毫秒级别的测试会有误差，这里我们以秒为单位来查看日志。</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:45 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:46 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:47 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:48 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:49 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">503</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br><span class="hljs-number">1.1.1.1</span> | <span class="hljs-string">[16/Jun/2021:15:24:50 +0800]</span> | <span class="hljs-number">200</span> | test.tiny777.com<br></code></pre></div></td></tr></table></figure><p>这里的效果就非常明显了，由于15:24:45内刚好只有12个请求，因此全部都能够正常处理，而之后的每一秒的请求处理都超过5个，但是由于我们限定了rate=5r/s，因此每秒只有5个成功的请求，其余均被503.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是对nginx官方&lt;code&gt;limit_req&lt;/code&gt;相关模块的限速原理的解释和一些个人理解，主要参考的文章为&lt;a href=&quot;https://www.nginx.com/blog/rate-limiting-nginx/&quot;&gt;&lt;code&gt;Rate Limiting with NGINX and NGINX Plus&lt;/code&gt;&lt;/a&gt;和nginx的&lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html&quot;&gt;&lt;code&gt;ngx_http_limit_req_module&lt;/code&gt;&lt;/a&gt;的详细说明。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇09-location中的if指令是魔鬼吧</title>
    <link href="https://tinychen.com/20210527-nginx-09-if-is-evil-in-location/"/>
    <id>https://tinychen.com/20210527-nginx-09-if-is-evil-in-location/</id>
    <published>2021-05-27T04:00:00.000Z</published>
    <updated>2021-05-27T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对nginx官方的文章<a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/"><code>If is Evil... when used in location context</code></a>的翻译和理解。</p><span id="more"></span><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p><strong>在<code>location</code>块中的<code>if</code>指令的有点问题</strong>，在某些情况下，<code>if</code>指令并不会按照我们预期的那般工作，而是有可能往完全不同的方向发展甚至可能会引起错误。因此最好的方法就是尽可能的不要使用<code>if</code>指令。</p><p>在<code>location</code>块的<code>if</code>指令内100%安全的指令有：</p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return">return</a></li><li><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite">rewrite</a> …… last</li></ul><p>除了上面的两个指令之外的任何操作都有可能导致不可预测的效果甚至可能是SIGSEGV错误（可能出现内存错误导致程序异常终止）。</p><p>需要注意的是：<code>if</code>指令的执行结果是一致的，也就是说相同的两个请求操作，不可能会出现一个成功但是另一个失败的情况。这就意味着只要经过足够合适的测试以及我们对相应操作的足够了解，<code>if</code>指令是<em>“可以”</em>被使用的。这个建议对于其他的指令也是同样适用的。</p><p>很多情况下我们是没办法避免使用if指令的，例如当我们需要判断某个变量是否等于某个值或者包含某个字段的时候，就会需要用到if指令：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ($request_method = POST ) &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">405</span>;<br>&#125;<br><span class="hljs-attribute">if</span> ($args <span class="hljs-regexp">~ post=140)</span>&#123;<br>  <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^</span> http://example.com/ <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="2、替代方案"><a href="#2、替代方案" class="headerlink" title="2、替代方案"></a>2、替代方案</h1><p>我们可以使用 <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#try_files">try_files</a> 指令、“return …”指令或者“rewrite … last”指令用来替代if指令。在某些条件允许的情况下，也可以把<code>if</code>指令移动到<code>server</code>块的层级，此时的if指令是可以安全使用的，因为这里只有其他的rewrite模块指令能被使用（原因下文会解释）。</p><p>当然对于一些需要使用<code>if</code>指令来判断返回<code>4xx</code>和<code>5xx</code>之类的异常代码响应页面或者是操作也可以尝试使用<code>return</code>指令搭配<code>error_page</code>指令来保证安全，例如下面的这个例子：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">418</span> = @other;<br>    <span class="hljs-attribute">recursive_error_pages</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">if</span> ($something) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">418</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># some configuration</span><br>    ...<br>&#125;<br><br><span class="hljs-attribute">location</span> @other &#123;<br>    <span class="hljs-comment"># some other configuration</span><br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此外，在某些情况下使用一些嵌入的脚本模块（如lua，<a href="https://nginx.org/en/docs/http/ngx_http_perl_module.html">embedded perl</a>, 或者是其他的<a href="https://www.nginx.com/resources/wiki/modules/">ngx第三方模块</a>）来完成一些较负责的逻辑操作和判断也不失为一个好主意。</p><h1 id="3、已知错误"><a href="#3、已知错误" class="headerlink" title="3、已知错误"></a>3、已知错误</h1><p>下面列举了一些if指令不按照预期工作的的情况，请注意不要在生产环境上配置这些指令。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># Here is collection of unexpectedly buggy configurations to show that</span><br><span class="hljs-comment"># if inside location is evil.</span><br><br><span class="hljs-comment"># only second header will be present in response</span><br><span class="hljs-comment"># not really bug, just how it works</span><br><br><span class="hljs-attribute">location</span> /only-one-if &#123;<br>    <span class="hljs-attribute">set</span> $<span class="hljs-literal">true</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-attribute">add_header</span> X-First <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-attribute">add_header</span> X-Second <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>&#125;<br><br><span class="hljs-comment"># request will be sent to backend without uri changed</span><br><span class="hljs-comment"># to &#x27;/&#x27; due to if</span><br><br><span class="hljs-attribute">location</span> /proxy-pass-uri &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/;<br><br>    <span class="hljs-attribute">set</span> $<span class="hljs-literal">true</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment"># nothing</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># try_files wont work due to if</span><br><br><span class="hljs-attribute">location</span> /if-try-files &#123;<br>     <span class="hljs-attribute">try_files</span>  /file  @fallback;<br><br>     <span class="hljs-attribute">set</span> $<span class="hljs-literal">true</span> <span class="hljs-number">1</span>;<br><br>     <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>         <span class="hljs-comment"># nothing</span><br>     &#125;<br>&#125;<br><br><span class="hljs-comment"># nginx will SIGSEGV</span><br><br><span class="hljs-attribute">location</span> /crash &#123;<br><br>    <span class="hljs-attribute">set</span> $<span class="hljs-literal">true</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment"># fastcgi_pass here</span><br>        <span class="hljs-attribute">fastcgi_pass</span>  <span class="hljs-number">127.0.0.1:9000</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment"># no handler here</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># alias with captures isn&#x27;t correcly inherited into implicit nested</span><br><span class="hljs-comment"># location created by if</span><br><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~* ^/if-and-alias/(?&lt;file&gt;.*)</span> &#123;<br>    <span class="hljs-attribute">alias</span> /tmp/$file;<br><br>    <span class="hljs-attribute">set</span> $<span class="hljs-literal">true</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">if</span> ($<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment"># nothing</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果发现了上面没有列出出来的情况，可以邮件到<a href="https://mailman.nginx.org/mailman/listinfo/nginx-devel">NGINX development mailing list</a>.</p><h1 id="4、原因分析"><a href="#4、原因分析" class="headerlink" title="4、原因分析"></a>4、原因分析</h1><p><code>if</code>指令本质上其实是<code>rewrite</code>模块的一部分，<code>rewrite</code>模块本身设计就是用来“命令式”地执行操作<strong>（这就是前面说的为什么if里面搭配return和rewrite指令会100%安全的原因）</strong>。另一方面。nginx的配置通常来说是声明式的，但是出于某些原因，用户需要在if中添加某些非重写(non-rewrite)的指令（例如使用if判断http_origin之类的参数然后添加header），就有可能出现我们前面说的不正常工作的情况，尽管大部分情况下是能够正常工作的……</p><p>目前看来唯一的解决方案就是<strong>完全</strong>禁用掉<code>if</code>中的所有<strong>非重写指令</strong>（non-rewrite directives），但是这会导致很多已有的配置无法正常工作（会极大地影响前向兼容性），因此一直没有处理这个问题。</p><h1 id="5、如仍使用"><a href="#5、如仍使用" class="headerlink" title="5、如仍使用"></a>5、如仍使用</h1><p>如果还是需要在location中使用if指令，请务必注意：</p><ul><li>明确<code>if</code>的<a href="https://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">工作原理</a>和流程</li><li>事先进行足够的测试以确保能够正常工作</li></ul><p><em>You were warned.</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是对nginx官方的文章&lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/&quot;&gt;&lt;code&gt;If is Evil... when used in location context&lt;/code&gt;&lt;/a&gt;的翻译和理解。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>bind篇01-Bind+Keepalived安装高可用DNS集群</title>
    <link href="https://tinychen.com/20210520-dns-05-bind9-keepalived-ha-installation/"/>
    <id>https://tinychen.com/20210520-dns-05-bind9-keepalived-ha-installation/</id>
    <published>2021-05-20T09:00:00.000Z</published>
    <updated>2021-05-20T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对bind进行安装配置，并且搭配keepalived实现高可用。</p><span id="more"></span><h1 id="1、系统环境准备"><a href="#1、系统环境准备" class="headerlink" title="1、系统环境准备"></a>1、系统环境准备</h1><p>这里我们使用的是centos7的操作系统，默认使用yum安装的情况下，<code>bind</code>的程序<code>named</code>会安装到<code>/var/named</code>目录下，注意保证分区的大小，当然也可以使用chroot包来修改目录，这里使用默认目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /root]# lsb_release -a<br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID: CentOS<br>Description:    CentOS Linux release 7.9.2009 (Core)<br>Release:        7.9.2009<br>Codename:       Core<br></code></pre></div></td></tr></table></figure><h1 id="2、bind安装"><a href="#2、bind安装" class="headerlink" title="2、bind安装"></a>2、bind安装</h1><p>bind的安装非常简单，默认的centos系统的yum源中就包含了其安装包，不同的系统版本对应的bind版本略有差异但是不大。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# yum list | egrep ^bind.x86_64<br>bind.x86_64                                               32:9.11.20-5.el8_3.1                              appstream<br>[root@tiny-server ~]# cat /etc/redhat-release<br>CentOS Linux release 8.3.2011<br><br>[root@tiny-cloud ~]# yum list | egrep ^bind.x86_64<br>bind.x86_64                                 32:9.11.4-26.P2.el7_9.5    updates<br>[root@tiny-cloud ~]# cat /etc/redhat-release<br>CentOS Linux release 7.9.2009 (Core)<br></code></pre></div></td></tr></table></figure><p>一般我们只需要安装bind和bind-utils这两个包，前者是bind的主要程序named和控制工具rndc等，后者则是一些常用工具如dig命令等。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# yum install bind bind-utils<br></code></pre></div></td></tr></table></figure><p>安装完成之后我们就会发现系统主要新增了<code>/var/named</code>、<code>/etc/named</code>和<code>/etc/named*</code>一系列文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# ll /var/named/<br>total 28K<br>drwxrwx--- 2 named named 4.0K Apr 29 22:05 data<br>drwxrwx--- 2 named named 4.0K Apr 29 22:05 dynamic<br>-rw-r----- 1 root  named 2.3K Apr  5  2018 named.ca<br>-rw-r----- 1 root  named  152 Dec 15  2009 named.empty<br>-rw-r----- 1 root  named  152 Jun 21  2007 named.localhost<br>-rw-r----- 1 root  named  168 Dec 15  2009 named.loopback<br>drwxrwx--- 2 named named 4.0K Apr 29 22:05 slaves<br>[root@tiny-cloud /home/named]# ll /etc/named*<br>-rw-r----- 1 root named 1.8K Apr 29 22:06 /etc/named.conf<br>-rw-r--r-- 1 root named 3.9K Apr 29 22:06 /etc/named.iscdlv.key<br>-rw-r----- 1 root named  931 Jun 21  2007 /etc/named.rfc1912.zones<br>-rw-r--r-- 1 root named 1.9K Apr 13  2017 /etc/named.root.key<br><br>/etc/named:<br>total 0<br></code></pre></div></td></tr></table></figure><p>同时我们可以使用systemd来对named服务进行管理：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# systemctl enable named.service<br>Created symlink from /etc/systemd/system/multi-user.target.wants/named.service to /usr/lib/systemd/system/named.service.<br>[root@tiny-cloud /home/named]# systemctl start named.service<br>[root@tiny-cloud /home/named]# systemctl status named.service<br>● named.service - Berkeley Internet Name Domain (DNS)<br>   Loaded: loaded (/usr/lib/systemd/system/named.service; enabled; vendor preset: disabled)<br>   Active: active (running) since Thu 2021-05-20 16:26:36 CST; 10min ago<br> Main PID: 28777 (named)<br>    Tasks: 4<br>   Memory: 58.6M<br>   CGroup: /system.slice/named.service<br>           └─28777 /usr/sbin/named -u named -c /etc/named.conf<br><br>May 20 16:31:49 tiny-cloud named[28777]:   validating net/SOA: got insecure response; parent indicates it should be secure<br>May 20 16:31:49 tiny-cloud named[28777]: no valid RRSIG resolving &#x27;edgekey.net/DS/IN&#x27;: 192.12.94.30#53<br>May 20 16:31:49 tiny-cloud named[28777]:   validating net/SOA: got insecure response; parent indicates it should be secure<br>May 20 16:31:49 tiny-cloud named[28777]: no valid RRSIG resolving &#x27;edgekey.net/DS/IN&#x27;: 192.31.80.30#53<br>May 20 16:31:49 tiny-cloud named[28777]: validating net/DNSKEY: got insecure response; parent indicates it should be secure<br>May 20 16:31:49 tiny-cloud named[28777]: insecurity proof failed resolving &#x27;net/DNSKEY/IN&#x27;: 192.12.94.30#53<br>May 20 16:31:50 tiny-cloud named[28777]: validating net/DNSKEY: got insecure response; parent indicates it should be secure<br>May 20 16:31:50 tiny-cloud named[28777]: insecurity proof failed resolving &#x27;net/DNSKEY/IN&#x27;: 192.31.80.30#53<br>May 20 16:31:51 tiny-cloud named[28777]:   validating net/SOA: got insecure response; parent indicates it should be secure<br>May 20 16:31:51 tiny-cloud named[28777]: no valid RRSIG resolving &#x27;akamaiedge.net/DS/IN&#x27;: 192.31.80.30#53<br></code></pre></div></td></tr></table></figure><h1 id="3、bind配置"><a href="#3、bind配置" class="headerlink" title="3、bind配置"></a>3、bind配置</h1><h2 id="3-1-IPv6相关配置"><a href="#3-1-IPv6相关配置" class="headerlink" title="3.1 IPv6相关配置"></a>3.1 IPv6相关配置</h2><p>无论是centos7还是centos8系统使用yum进行安装的bind都已经默认开启了IPv6的支持，如果我们的系统暂时还不支持IPv6网络，则最好把配置文件中的IPv6相关的配置去除</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sed -i &#x27;s#listen-on-v6 port 53 &#123; ::1; &#125;;#//listen-on-v6 port 53 &#123; ::1; &#125;;#g&#x27; /etc/named.conf<br></code></pre></div></td></tr></table></figure><p>同时如果是把bind当作递归查询服务器使用，默认情况下的bind是会自动启用了<code>hint</code>类型的解析</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini">zone &quot;.&quot; IN &#123;<br>        type hint<span class="hljs-comment">;</span><br>        file &quot;named.ca&quot;<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>该配置会把所有匹配到这个zone的DNS查询请求转发到<code>/var/named/named.ca</code>文件中的<strong>13个根DNS服务器节点</strong>，为了减少不必要的干扰，我们可以把文件中的的<code>AAAA</code>记录注释掉。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">;; ADDITIONAL SECTION:</span><br>a.root-servers.net.     518400  IN      A       198.41.0.4<br>b.root-servers.net.     518400  IN      A       199.9.14.201<br>c.root-servers.net.     518400  IN      A       192.33.4.12<br>d.root-servers.net.     518400  IN      A       199.7.91.13<br>e.root-servers.net.     518400  IN      A       192.203.230.10<br>f.root-servers.net.     518400  IN      A       192.5.5.241<br>g.root-servers.net.     518400  IN      A       192.112.36.4<br>h.root-servers.net.     518400  IN      A       198.97.190.53<br>i.root-servers.net.     518400  IN      A       192.36.148.17<br>j.root-servers.net.     518400  IN      A       192.58.128.30<br>k.root-servers.net.     518400  IN      A       193.0.14.129<br>l.root-servers.net.     518400  IN      A       199.7.83.42<br>m.root-servers.net.     518400  IN      A       202.12.27.33<br>a.root-servers.net.     518400  IN      AAAA    2001:503:ba3e::2:30<br>b.root-servers.net.     518400  IN      AAAA    2001:500:200::b<br>c.root-servers.net.     518400  IN      AAAA    2001:500:2::c<br>d.root-servers.net.     518400  IN      AAAA    2001:500:2d::d<br>e.root-servers.net.     518400  IN      AAAA    2001:500:a8::e<br>f.root-servers.net.     518400  IN      AAAA    2001:500:2f::f<br>g.root-servers.net.     518400  IN      AAAA    2001:500:12::d0d<br>h.root-servers.net.     518400  IN      AAAA    2001:500:1::53<br>i.root-servers.net.     518400  IN      AAAA    2001:7fe::53<br>j.root-servers.net.     518400  IN      AAAA    2001:503:c27::2:30<br>k.root-servers.net.     518400  IN      AAAA    2001:7fd::1<br>l.root-servers.net.     518400  IN      AAAA    2001:500:9f::42<br>m.root-servers.net.     518400  IN      AAAA    2001:dc3::35<br></code></pre></div></td></tr></table></figure><h2 id="3-2-named-conf配置rndc"><a href="#3-2-named-conf配置rndc" class="headerlink" title="3.2 named.conf配置rndc"></a>3.2 named.conf配置rndc</h2><p><code>rndc</code>可以简单视为是一个用来控制或者查看<code>named</code>系统的命令行工具。它不仅可以在服务器本地使用，还可以远程控制其他的<code>bind</code>服务器上面的<code>named</code>服务。但是在默认情况下的配置文件中并没有对其进行显示配置，所以<code>named</code>程序默认情况下只会监听本机<code>127.0.0.1</code>的<code>953</code>端口</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# netstat -ntulp | grep named<br>tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN      12737/named<br>tcp        0      0 127.0.0.1:53            0.0.0.0:*               LISTEN      12737/named<br>udp        0      0 127.0.0.1:53            0.0.0.0:*                           12737/named<br></code></pre></div></td></tr></table></figure><p>在<code>named.conf</code>文件中对<code>rndc</code>进行配置，主要涉及到三个选项：**监听网卡（<code>inet</code>）、允许IP（<code>allow</code>）和认证使用的<code>keys</code>**：</p><ul><li><p>这样子就是设为监听机器上的所有网卡并允许所有的来源IP进行访问，不过限制了需要使用keys</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这样子就是设为监听机器上的所有网卡并允许所有的来源IP进行访问，不过限制了需要使用keys</span><br>controls &#123;<br>    inet * allow &#123; any; &#125; keys &#123; &quot;rndc-key&quot;; &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>这种限制了只能在本机上使用rndc  </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这种限制了只能在本机上使用rndc</span>    <br>controls &#123;<br>    inet 127.0.0.1 allow &#123; localhost; &#125; keys &#123; &quot;rndc-key&quot;; &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>这种限制了在局域网和本机上使用rndc，如果有多个inet需要指定监听则需要分开多条配置，并且可以添加port参数来指定端口</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这种限制了在局域网和本机上使用rndc，如果有多个inet需要指定监听则需要分开多条配置</span>  <br>controls &#123;<br>        inet 127.0.0.1 allow &#123; localhost; &#125; keys &#123; rndckey; &#125;;<br>        inet 192.168.1.1 port 1953 allow &#123; 192.168.1.1; 192.168.1.2; 192.168.1.0/24;&#125; keys &#123; rndckey; &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="3-3-rndc-key配置"><a href="#3-3-rndc-key配置" class="headerlink" title="3.3 rndc-key配置"></a>3.3 rndc-key配置</h2><p>keys在这里的作用主要是鉴权，效果相当于ssh程序中的ssh-key，因此如果需要远程操作，需要保证客户端和服务端的keys一致。</p><p><code>rndc-key</code>只是keys这个参数的一个值，相当于一个<code>key-value</code>，这里只是用来指代，实际上换成<code>tinycehn-key</code>之类的其他名字也是没问题的，本质上它们都是一个<code>HMAC-MD5</code>的key，因此首先我们需要生成一个<code>rndc-key</code>。在bind9里面，一般情况下我们可以使用<code>dnssec-keygen</code>命令生成或者是<code>rndc-confgen -a</code>命令直接生成。这里个人推荐直接使用后者。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# rndc-confgen -a<br>wrote key file &quot;/etc/rndc.key&quot;<br>[root@tiny-cloud /home/named]# cat /etc/rndc.key<br>key &quot;rndc-key&quot; &#123;<br>        algorithm hmac-md5;<br>        secret &quot;0JqEwIF4kihHEcAbgC4t1w==&quot;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>使用dnssec-keygen命令的时候会生成一个key和一个private文件，private文件里面记录着详细信息，同时这样我们需要手动将格式修改为rndc支持的格式并放置在<code>/etc/rndc.key</code>文件中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# dnssec-keygen -a hmac-md5 -b 256 -n HOST tinychen-key<br>Ktinychen-key.+157+42293<br>[root@tiny-cloud /home/named]# ll<br>total 8<br>-rw------- 1 root root  76 May 20 15:37 Ktinychen-key.+157+42293.key<br>-rw------- 1 root root 185 May 20 15:37 Ktinychen-key.+157+42293.private<br>[root@tiny-cloud /home/named]# cat Ktinychen-key.+157+42293.key<br>tinychen-key. IN KEY 512 3 157 uEICksjZ53OlSXPpHrAmS1s/FhRy5g26+KUCtGqmflM=<br>[root@tiny-cloud /home/named]# cat Ktinychen-key.+157+42293.private<br>Private-key-format: v1.3<br>Algorithm: 157 (HMAC_MD5)<br>Key: uEICksjZ53OlSXPpHrAmS1s/FhRy5g26+KUCtGqmflM=<br>Bits: AAA=<br>Created: 20210520073748<br>Publish: 20210520073748<br>Activate: 20210520073748<br></code></pre></div></td></tr></table></figure><blockquote><p>In this case, the <key-value> is a HMAC-MD5 key. You can generate your own HMAC-MD5 keys with the following command:</p><p>dnssec-keygen -a hmac-md5 -b <bit-length> -n HOST <key-file-name><br>A key with at least a 256-bit length is good idea. The actual key that should be placed in the <key-value> area can found in the <key-file-name>.</p><p>The name of the key used in /etc/named.conf should be something other than key.</p></blockquote><h2 id="3-4-rndc-conf配置"><a href="#3-4-rndc-conf配置" class="headerlink" title="3.4 rndc.conf配置"></a>3.4 rndc.conf配置</h2><p>默认情况下并不会生成<code>rndc.conf</code>文件，因此我们需要自己手动生成一个。使用<code>rndc-confgen</code>命令可以快速地生成一个配置模板并且打印到终端窗口上（注意执行命令之后并不会生成<code>rndc.conf</code>文件，需要我们手动将生成的配置写入文件<code>/etc/rndc.conf</code>）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# rndc-confgen<br><span class="hljs-meta">#</span><span class="bash"> Start of rndc.conf</span><br>key &quot;rndc-key&quot; &#123;<br>        algorithm hmac-md5;<br>        secret &quot;h0Pmn9ueo1Uk9Cv6cpPE2w==&quot;;<br>&#125;;<br><br>options &#123;<br>        default-key &quot;rndc-key&quot;;<br>        default-server 127.0.0.1;<br>        default-port 953;<br>&#125;;<br><span class="hljs-meta">#</span><span class="bash"> End of rndc.conf</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Use with the following <span class="hljs-keyword">in</span> named.conf, adjusting the allow list as needed:</span><br><span class="hljs-meta">#</span><span class="bash"> key <span class="hljs-string">&quot;rndc-key&quot;</span> &#123;</span><br><span class="hljs-meta">#</span><span class="bash">       algorithm hmac-md5;</span><br><span class="hljs-meta">#</span><span class="bash">       secret <span class="hljs-string">&quot;h0Pmn9ueo1Uk9Cv6cpPE2w==&quot;</span>;</span><br><span class="hljs-meta">#</span><span class="bash"> &#125;;</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># controls &#123;</span></span><br><span class="hljs-meta">#</span><span class="bash">       inet 127.0.0.1 port 953</span><br><span class="hljs-meta">#</span><span class="bash">               allow &#123; 127.0.0.1; &#125; keys &#123; <span class="hljs-string">&quot;rndc-key&quot;</span>; &#125;;</span><br><span class="hljs-meta">#</span><span class="bash"> &#125;;</span><br><span class="hljs-meta">#</span><span class="bash"> End of named.conf</span><br><br><br></code></pre></div></td></tr></table></figure><p>需要注意的是，当同时存在<code>rndc.conf</code>文件和<code>rndc.key</code>文件的时候，默认是优先读取<code>rndc.conf</code>，如果我们需要指定不同的key来访问不同的server，可以在命令中指定参数，如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud /home/named]# cat /etc/rndc.conf<br>key &quot;rndc-key&quot; &#123;<br>        algorithm hmac-md5;<br>        secret &quot;h0Pmn9ueo1Uk9Cv6cpPE2w==&quot;;<br>&#125;;<br><br>key &quot;rndc-conf-key&quot; &#123;<br>        algorithm hmac-md5;<br>        secret &quot;uEICksjZ53OlSXPpHrAmS1s/FhRy5g26+KUCtGqmflM=&quot;;<br>&#125;;<br><br>options &#123;<br>        default-key &quot;rndc-key&quot;;<br>        default-server 127.0.0.1;<br>        default-port 953;<br>&#125;;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> -s参数用来指定不同的服务器，这里可以是域名也可以是IP</span><br><span class="hljs-meta">#</span><span class="bash"> -k参数用来指定key，但是后面跟着的是一个类似rndc.key的文件</span><br><span class="hljs-meta">#</span><span class="bash"> -y参数也是用来指定key，但是后面跟着的参数需要是在rndc.conf文件中已经写明的key的key-value</span><br>[root@tiny-cloud /home/named]# rndc -s localhost -k /etc/rndc.key status<br>[root@tiny-cloud /home/named]# rndc -s 192.168.1.1 -y rndc-conf-key status<br></code></pre></div></td></tr></table></figure><h1 id="4、keepalived安装"><a href="#4、keepalived安装" class="headerlink" title="4、keepalived安装"></a>4、keepalived安装</h1><p>由于这里只需要支持IPv4网络的keepalived程序，因此我们可以直接使用yum源来安装keepalived，如果有较高的版本要求或者特殊需要，可以考虑自行下载源码编译安装。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@tiny-cloud <span class="hljs-regexp">/home/</span>named]<span class="hljs-comment"># yum install keepalived</span><br></code></pre></div></td></tr></table></figure><p>同时为了方便我们debug，这里再将keepalived的日志额外重定向到单独的目录文件中</p><p>首先我们需要修改keepalived的默认启动参数</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-cloud coremail]# sed -i &#x27;s#KEEPALIVED_OPTIONS=&quot;-D&quot;#KEEPALIVED_OPTIONS=&quot;-D -d -S 0&quot;#g&#x27; /etc/sysconfig/keepalived<br>[root@tiny-cloud coremail]# cat /etc/sysconfig/keepalived<br><span class="hljs-meta">#</span><span class="bash"> Options <span class="hljs-keyword">for</span> keepalived. See `keepalived --<span class="hljs-built_in">help</span><span class="hljs-string">&#x27; output and keepalived(8) and</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> keepalived.conf(5) man pages for a list of all options. Here are the most</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> common ones :</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="bash"># --vrrp               -P    Only run with VRRP subsystem.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --check              -C    Only run with Health-checker subsystem.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --dont-release-vrrp  -V    Dont remove VRRP VIPs &amp; VROUTEs on daemon stop.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --dont-release-ipvs  -I    Dont remove IPVS topology on daemon stop.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --dump-conf          -d    Dump the configuration data.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --log-detail         -D    Detailed log messages.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> --log-facility       -S    0-7 Set local syslog facility (default=LOG_DAEMON)</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="bash"></span></span><br>KEEPALIVED_OPTIONS=&quot;-D -d -S 0&quot;<br></code></pre></div></td></tr></table></figure><p>修改syslog的配置，将日志输出到指定的目录</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"># 对于系统使用rsyslog服务来管理日志的，可以修改 <span class="hljs-regexp">/etc/</span>rsyslog.conf 加入下列的配置<br>local0.*                                                <span class="hljs-regexp">/path/</span>to/keepalived.log<br></code></pre></div></td></tr></table></figure><p>最后重启rsyslog服务和keepalived服务即可</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@tiny-cloud <span class="hljs-regexp">/etc/</span>keepalived]<span class="hljs-comment"># systemctl enable rsyslog.service</span><br>[root@tiny-cloud <span class="hljs-regexp">/etc/</span>keepalived]<span class="hljs-comment"># systemctl restart rsyslog.service</span><br></code></pre></div></td></tr></table></figure><h1 id="5、bind主从安装"><a href="#5、bind主从安装" class="headerlink" title="5、bind主从安装"></a>5、bind主从安装</h1><p>主从两个节点的安装理论上应该完全一致。需要注意的是：</p><ul><li>两个节点之间的rndc配置必须要保证能够互相远程访问</li><li>确保两者之间的配置文件能够保持同步（可以使用git或者rsync等方式）</li><li>确保两个节点的named.conf配置文件中的监听网卡和端口覆盖了本机IP和VIP</li></ul><h1 id="6、高可用过程分析"><a href="#6、高可用过程分析" class="headerlink" title="6、高可用过程分析"></a>6、高可用过程分析</h1><p>这里为了保证DNS节点的高可用，我们使用keepalived将两台机器分别作为主从节点，做一个简单的主从节点方式的高可用。</p><p>正常情况下，主节点的priority为100，从节点的priority为90，此时VIP在主节点上，请求和流量从VIP进入，由主节点提供服务，从节点作为备用。</p><p>当主节点出现异常时，VIP偏移到从节点，从节点进入MASTER状态，直到主节点本身的服务恢复正常再切换过去。</p><p>而为了防止VIP偏移到对应的机器上的时候，named服务没有监听到对应的端口，我们在脚本中设置当keepalived进入<code>notify_master</code>时重启一下named服务，确保能够VIP的服务端口能够被正常监听。</p><blockquote><p>注意在主节点脚本中设置的检测方式是检测MASTER本身的IP上的rndc状态是否正常而不是VIP上面的rndc状态，而备节点则刚好相反。</p><p>这里主要是为了避免当主节点本身DNS服务就有问题，而它的检测脚本又是检测VIP的rndc状态时，VIP切到从节点后可以正常提供服务，然后主节点脚本检测正常，将VIP抢了回来，但是这时候主节点自己是无法正常提供服务的，随后从节点检测到服务不正常，又将VIP抢了过去，然后继续循环导致VIP不断偏移。</p></blockquote><h1 id="7、keepalived配置"><a href="#7、keepalived配置" class="headerlink" title="7、keepalived配置"></a>7、keepalived配置</h1><p>keepalived的配置比较简单，注意这里的<code>interval</code>、<code>interface</code>、<code>router_id</code>、<code>virtual_router_id</code>等参数可以根据实际情况进行调整。</p><h2 id="7-1-keepalived-conf（master）"><a href="#7-1-keepalived-conf（master）" class="headerlink" title="7.1 keepalived.conf（master）"></a>7.1 keepalived.conf（master）</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">! Configuration File for keepalived<br><br>global_defs &#123;<br>   router_id HA_DNS<br>&#125;<br><br>vrrp_script chk_dns &#123;<br><span class="hljs-meta">#</span><span class="bash"> 定义检测的脚本和执行参数</span><br>    script &quot;/etc/keepalived/dns_status.sh check 主机器的IP&quot;<br>    # 定义脚本的执行时间间隔为2秒<br>    interval 2<br>    # 执行失败的时候weight-20<br>    weight -20<br>    # 检测到脚本执行两次失败才算失败<br>    fall 2<br>    # 检测到脚本执行成功一次就算成功<br>    rise 1<br>&#125;<br><br>vrrp_instance VIRT_DNS &#123;<br>    state MASTER<br>    interface eth0<br>    virtual_router_id 201 <br>    priority 100<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 7777@tinychen<br>    &#125;<br>    track_script &#123;<br>        chk_dns<br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        需要配置的VIP(e.g. 1.1.1.1) dev VIP所在的网卡(e.g. eth0)<br>    &#125;<br>    <br>    notify_master &quot;/etc/keepalived/dns_status.sh notify master&quot;<br>    notify_backup &quot;/etc/keepalived/dns_status.sh notify backup&quot;<br>    notify_fault  &quot;/etc/keepalived/dns_status.sh notify fault&quot;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-2-keepalived-conf（backup）"><a href="#7-2-keepalived-conf（backup）" class="headerlink" title="7.2 keepalived.conf（backup）"></a>7.2 keepalived.conf（backup）</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">! Configuration File for keepalived<br><br>global_defs &#123;<br>   router_id HA_DNS<br>&#125;<br><br>vrrp_script chk_dns &#123;<br>    script &quot;/etc/keepalived/dns_status.sh check 用来做高可用的VIP&quot;<br>    # 定义脚本的执行时间间隔为2秒<br>    interval 2<br>    # 执行失败的时候weight-20<br>    weight -20<br>    # 检测到脚本执行两次失败才算失败<br>    fall 2<br>    # 检测到脚本执行成功一次就算成功<br>    rise 1<br>&#125;<br><br>vrrp_instance VIRT_DNS &#123;<br>    state BACKUP<br>    interface eth0<br>    virtual_router_id 201 <br>    priority 90<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 7777@tinychen<br>    &#125;<br>    track_script &#123;<br>        chk_dns<br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        需要配置的VIP(e.g. 1.1.1.1) dev VIP所在的网卡(e.g. eth0)<br>    &#125;<br>    <br>    notify_master &quot;/etc/keepalived/dns_status.sh notify master&quot;<br>    notify_backup &quot;/etc/keepalived/dns_status.sh notify backup&quot;<br>    notify_fault  &quot;/etc/keepalived/dns_status.sh notify fault&quot;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-3-dns-status-sh"><a href="#7-3-dns-status-sh" class="headerlink" title="7.3 dns_status.sh"></a>7.3 dns_status.sh</h2><p>这里脚本的放置目录要和上面的</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vim /etc/keepalived/dns_status.sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>LOGFILE=&quot;/home/named/keepalived/keepalived.log&quot;<br>case &quot;$1&quot; in<br>check)<br>    ALIVE=$(/usr/sbin/rndc -s $2 status | grep &quot;server is up and running&quot;)<br>    if [ $? == 0 ]; then<br>        exit 0<br>    else<br>        echo &quot;---------------------------------------&quot; &gt;&gt;$LOGFILE<br>        date &quot;+%Y-%m-%d %H:%M:%S&quot; &gt;&gt;$LOGFILE<br>        echo &quot;Using rndc status check failed&quot; &gt;&gt;$LOGFILE<br>        echo &quot;---------------------------------------&quot; &gt;&gt;$LOGFILE<br>        exit 1<br>    fi<br>    ;;<br>notify)<br>    echo &quot;---------------------------------------&quot; &gt;&gt;$LOGFILE<br>    date &quot;+%Y-%m-%d %H:%M:%S&quot; &gt;&gt;$LOGFILE<br>    echo &quot;Enter status: $2&quot; &gt;&gt;$LOGFILE<br>    if [ $2 == &quot;master&quot; ]; then<br>        echo &quot;Begin running systemctl restart cmd &quot; &gt;&gt;$LOGFILE<br>        systemctl restart named.service &gt;&gt;$LOGFILE 2&gt;&amp;1<br>        echo &quot;Running reload cmd done ! &quot; &gt;&gt;$LOGFILE<br>        date &quot;+%Y-%m-%d %H:%M:%S&quot; &gt;&gt;$LOGFILE<br>    fi<br>    echo &quot;---------------------------------------&quot; &gt;&gt;$LOGFILE<br>    ;;<br>*)<br>    echo &quot;Usage: sh $0 check ipaddr | notify status&quot;<br>    ;;<br>esac<br></code></pre></div></td></tr></table></figure><h1 id="8、效果检测"><a href="#8、效果检测" class="headerlink" title="8、效果检测"></a>8、效果检测</h1><p>最后我们关闭主节点上面的named服务，然后查看日志和从节点的状态确定VIP能否顺利切换，之后再重启主节点上面的named服务，保证服务能够正常运行即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对bind进行安装配置，并且搭配keepalived实现高可用。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="bind" scheme="https://tinychen.com/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>CoreDNS篇2-编译安装External Plugins</title>
    <link href="https://tinychen.com/20210516-dns-04-coredns-02--install-external-plugins/"/>
    <id>https://tinychen.com/20210516-dns-04-coredns-02--install-external-plugins/</id>
    <published>2021-05-16T03:00:00.000Z</published>
    <updated>2021-05-16T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对coredns的源码进行编译安装，以及在编译安装的过程中加入一些External Plugins的方法。</p><span id="more"></span><h1 id="1、编译安装coredns"><a href="#1、编译安装coredns" class="headerlink" title="1、编译安装coredns"></a>1、编译安装coredns</h1><h2 id="1-1-golang环境准备"><a href="#1-1-golang环境准备" class="headerlink" title="1.1 golang环境准备"></a>1.1 golang环境准备</h2><p>官方的github页面上提供了编译安装的相关指引，需要的可以点击<a href="https://github.com/coredns/coredns#compilation-from-source">这里</a>跳转。</p><blockquote><p>First, make sure your golang version is 1.12 or higher as <code>go mod</code> support is needed. See <a href="https://github.com/golang/go/wiki/Modules">here</a> for <code>go mod</code> details. </p></blockquote><p>由于coredns是使用golang编写，因此对其进行编译安装之前需要先配置go环境。而在centos中使用yum安装的go版本较旧，我们直接去官网下载最新的版本进行解压即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://golang.org/dl/go1.16.4.linux-amd64.tar.gz<br>tar -zxvf go1.16.4.linux-amd64.tar.gz -C /usr/local/<br>ln -s /usr/local/go/bin/go /usr/bin/go<br></code></pre></div></td></tr></table></figure><p>接下来的go环境变量同学们可以根据自己的实际需求进行配置。对于我个人而言，我直接在<code>/etc/profile</code>中添加下面的配置然后source生效即可。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">cat &gt;&gt; /etc<span class="hljs-built_in">/profile </span>&lt;&lt;EOF<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOBIN</span>=<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$GOBIN<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPATH</span>=/home/gopath<br>EOF<br>[root@tiny-server home]# mkdir /home/gopath<br>[root@tiny-server home]# source /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span>[root@tiny-server home]# go version<br>go version go1.16.4 linux/amd64<br></code></pre></div></td></tr></table></figure><p>go环境配置完成之后，我们还需要根据coredns的提示检查gomod是否正常，从go的<a href="https://github.com/golang/go/wiki/Modules">GitHub文档</a>中我们可以得知在1.16版本开始是默认启用并支持gomod的，所以这里我们无需额外配置。</p><blockquote><p>Go 1.16</p><p>See the <a href="https://golang.org/doc/go1.16#go-command">Go 1.16 release notes</a> for details.</p><ul><li>Module mode (<code>GO111MODULE=on</code>) is the default in all cases</li><li>Commands no longer modify <code>go.mod</code> / <code>go.sum</code> by default (<code>-mod=readonly</code>)</li><li><code>go install pkg@version</code> is the recommended way to globally install packages / executables</li><li><code>retract</code> is available in <code>go.mod</code></li></ul></blockquote><h2 id="1-2-编译coredns"><a href="#1-2-编译coredns" class="headerlink" title="1.2 编译coredns"></a>1.2 编译coredns</h2><p>接下来我们直接开始进行编译，(在编译过程中会访问<code>google.com</code>,<code>k8s.io</code>等域名，需要注意保证网络正常)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coredns/</span>coredns<br>cd coredns/<br>make<br></code></pre></div></td></tr></table></figure><p>编译完成之后我们就会在当前目录下得到一个二进制文件</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[<span class="hljs-regexp">/home/</span>coredns]<span class="hljs-comment"># file coredns</span><br>coredns: ELF <span class="hljs-number">64</span>-bit LSB executable, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), statically linked, stripped<br>[<span class="hljs-regexp">/home/</span>coredns]<span class="hljs-comment"># ./coredns -version</span><br>CoreDNS-<span class="hljs-number">1.8</span>.<span class="hljs-number">3</span><br>linux/amd64, go1.<span class="hljs-number">16.4</span>, <span class="hljs-number">7</span>b43d042<br></code></pre></div></td></tr></table></figure><h1 id="2、编译External-Plugins"><a href="#2、编译External-Plugins" class="headerlink" title="2、编译External Plugins"></a>2、编译External Plugins</h1><h2 id="2-1-什么是External-Plugins"><a href="#2-1-什么是External-Plugins" class="headerlink" title="2.1 什么是External Plugins"></a>2.1 什么是External Plugins</h2><p>coredns官方对于插件的分类基本可以分为三种：Plugins、External Plugins和其他。其中Plugins一般都会被默认编译到coredns的预编译版本中，而External Plugins则不会。官方的<a href="https://coredns.io/2017/07/23/when-should-plugins-be-external/">文档</a>对外部插件的定义有着明确的解释，主要要求大概是有用、高效、符合标准、文档齐全、通过测试等。</p><h2 id="2-2-如何编译插件"><a href="#2-2-如何编译插件" class="headerlink" title="2.2 如何编译插件"></a>2.2 如何编译插件</h2><p>官方给出了一个详细的<a href="https://coredns.io/2017/07/25/compile-time-enabling-or-disabling-plugins/">文档说明</a>，编译插件基本可以分为修改源码和修改编译的配置文件这两种方式，这里我们采用简单高效的修改配置文件的方式进行测试。</p><p><img src="https://resource.tinychen.com/20210517170652.png"></p><p>在我们前面下载的官方源码中，有一个<code>plugin</code>的目录，里面是各种插件的安装包，同时还有一个<code>plugin.cfg</code>的文件，里面列出了会编译到coredns中的插件，</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">[<span class="hljs-meta-keyword">/home/</span>coredns]<span class="hljs-meta"># tail plugin.cfg</span><br><span class="hljs-symbol">secondary:</span>secondary<br><span class="hljs-symbol">etcd:</span>etcd<br><span class="hljs-symbol">loop:</span>loop<br><span class="hljs-symbol">forward:</span>forward<br><span class="hljs-symbol">grpc:</span>grpc<br><span class="hljs-symbol">erratic:</span>erratic<br><span class="hljs-symbol">whoami:</span>whoami<br><span class="hljs-symbol">on:</span>github.com<span class="hljs-meta-keyword">/coredns/</span>caddy/onevent<br><span class="hljs-symbol">sign:</span>sign<br><span class="hljs-symbol">dump:</span>github.com<span class="hljs-meta-keyword">/miekg/</span>dump<br></code></pre></div></td></tr></table></figure><p>例如这里我们需要额外多添加一个dump插件到coredns中，只需要在plugin.cfg中加入插件的名称和地址</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">dump</span>:github.com<span class="hljs-regexp">/miekg/</span><span class="hljs-keyword">dump</span><br></code></pre></div></td></tr></table></figure><p>对于在plugin目录下已经存在的插件，则可以直接写成plugin中的目录名：</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran"><span class="hljs-built_in">sign</span>:<span class="hljs-built_in">sign</span><br></code></pre></div></td></tr></table></figure><p>然后我们开始编译</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">[<span class="hljs-regexp">/home/</span>coredns]# go get github.com<span class="hljs-regexp">/miekg/</span><span class="hljs-keyword">dump</span><br>go: downloading github.com<span class="hljs-regexp">/miekg/</span><span class="hljs-keyword">dump</span> v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20201002053733</span>-d877fdb82251<br>go get: added github.com<span class="hljs-regexp">/miekg/</span><span class="hljs-keyword">dump</span> v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20201002053733</span>-d877fdb82251<br>[<span class="hljs-regexp">/home/</span>coredns]# go generate<br>[<span class="hljs-regexp">/home/</span>coredns]# go build<br>[<span class="hljs-regexp">/home/</span>coredns]# make<br></code></pre></div></td></tr></table></figure><h2 id="2-3-验证插件"><a href="#2-3-验证插件" class="headerlink" title="2.3 验证插件"></a>2.3 验证插件</h2><p>接下来只要检验生成的coredns二进制文件中是否包含<code>dump</code>插件即可确认是否顺利编译完成：</p><p><img src="https://resource.tinychen.com/20210517170645.png"></p><p>最后我们在配置文件中启动<code>dump</code>模块并进行测试，可以看到一条查询会出现两条日志，分别对应的是<code>dump</code>插件生成的日志和<code>log</code>插件生成的日志（带INFO）</p><p><img src="https://resource.tinychen.com/20210517172717.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对coredns的源码进行编译安装，以及在编译安装的过程中加入一些External Plugins的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="coredns" scheme="https://tinychen.com/tags/coredns/"/>
    
  </entry>
  
  <entry>
    <title>CoreDNS篇1-简介和安装</title>
    <link href="https://tinychen.com/20210509-dns-03-coredns-01-introduction/"/>
    <id>https://tinychen.com/20210509-dns-03-coredns-01-introduction/</id>
    <published>2021-05-09T03:00:00.000Z</published>
    <updated>2021-05-09T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对coredns的原理和特性进行介绍，同时会对其二进制的安装方法进行尝试。</p><span id="more"></span><h1 id="1、coredns简介"><a href="#1、coredns简介" class="headerlink" title="1、coredns简介"></a>1、coredns简介</h1><p>coredns是一个用go语言编写的开源的DNS服务，它的官网可以点击<a href="https://coredns.io/">这里</a>，github页面可以点击<a href="https://github.com/coredns/coredns">这里</a>。需要额外注意的是，coredns是首批加入<a href="https://www.cncf.io/">CNCF</a>组织的云原生开源项目，并且作为已经在CNCF毕业的项目，coredns还是目前kubernetes中默认的dns服务。同时，由于coredns可以集成插件，它还能够实现服务发现的功能。</p><p>coredns和其他的诸如bind、knot、powerdns、unbound等DNS服务不同的是：coredns非常的灵活，并且几乎把所有的核心功能实现都外包给了插件。比如说如果你想要在coredns中加入Prometheus的监控支持，那么只需要安装对应的prometheus插件并且启用即可，因此官方也说coredns是由插件驱动的。</p><blockquote><p><em>CoreDNS is powered by plugins.</em></p></blockquote><p>对于coredns插件的定义，官网是这样表示的：<strong>插件是能够单独或者共同实现一个“DNS的功能（DNS function）”</strong>。</p><blockquote><p>Plugins can be stand-alone or work together to perform a “DNS function”.</p><p>So what’s a “DNS function”? For the purpose of CoreDNS, we define it as a piece of software that implements the CoreDNS Plugin API. The functionality implemented can wildly deviate. There are plugins that don’t themselves create a response, such as <a href="https://coredns.io/plugins/metrics">metrics</a> or <a href="https://coredns.io/plugins/cache">cache</a>, but that add functionality. Then there are plugins that <em>do</em> generate a response. These can also do anything: There are plugins that communicate with <a href="https://coredns.io/plugins/kubernetes">Kubernetes</a> to provide service discovery, plugins that read data from a <a href="https://coredns.io/plugins/file">file</a> or a <a href="https://coredns.io/explugins/pdsql">database</a>.</p></blockquote><h1 id="2、coredns安装"><a href="#2、coredns安装" class="headerlink" title="2、coredns安装"></a>2、coredns安装</h1><p>和大多数的软件一样，<strong>coredns提供了源码编译、预编译包和docker镜像三种安装方式</strong>。这里我们使用预编译包的方式进行安装。coredns在<a href="https://github.com/coredns/coredns/releases/">github</a>上面提供了各种版本的预编译包，我们只需要下载对应的硬件版本即可。</p><p>解压对应的版本后可以得到一个二进制文件，直接执行就可以使用。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">[root@tiny-server coredns]# ./coredns --<span class="hljs-keyword">help</span><br>Usage of ./coredn<span class="hljs-variable">s:</span><br>  -<span class="hljs-keyword">conf</span> <span class="hljs-built_in">string</span><br>        Corefile <span class="hljs-keyword">to</span> load (default <span class="hljs-string">&quot;Corefile&quot;</span>)<br>  -dns.port <span class="hljs-built_in">string</span><br>        Default port (default <span class="hljs-string">&quot;53&quot;</span>)<br>  -pidfile <span class="hljs-built_in">string</span><br>        Path <span class="hljs-keyword">to</span> <span class="hljs-keyword">write</span> pid <span class="hljs-keyword">file</span><br>  -plugins<br>        List installed plugins<br>  -quiet<br>        Quiet <span class="hljs-keyword">mode</span> (<span class="hljs-keyword">no</span> initialization output)<br>  -<span class="hljs-keyword">version</span><br>        Show <span class="hljs-keyword">version</span><br></code></pre></div></td></tr></table></figure><p>需要注意的是，对于预编译的版本，会内置全部官方认证的插件，也就是官网的<a href="https://coredns.io/plugins/">插件页面</a>列出来的全部插件</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">[root@<span class="hljs-built_in">tiny</span>-server coredns]# ./coredns -plugins<br>Server types:<br>  dns<br><br>Caddyfile loaders:<br>  flag<br>  <span class="hljs-keyword">default</span><br><br>Other plugins:<br>  dns.acl<br>  dns.<span class="hljs-built_in">any</span><br>  dns.auto<br>  dns.autopath<br>  dns.azure<br>  dns.<span class="hljs-keyword">bind</span><br>  dns.bufsize<br>  dns.cache<br>  dns.cancel<br>  dns.chaos<br>  dns.clouddns<br>  dns.debug<br>  dns.dns64<br>  dns.dnssec<br>  dns.dnstap<br>  dns.erratic<br>  dns.errors<br>  dns.etcd<br>  dns.<span class="hljs-keyword">file</span><br>  dns.forward<br>  dns.grpc<br>  dns.health<br>  dns.hosts<br>  dns.k8s_external<br>  dns.kubernetes<br>  dns.loadbalance<br>  dns.<span class="hljs-keyword">local</span><br>  dns.<span class="hljs-built_in">log</span><br>  dns.loop<br>  dns.metadata<br>  dns.nsid<br>  dns.pprof<br>  dns.prometheus<br>  dns.ready<br>  dns.reload<br>  dns.rewrite<br>  dns.root<br>  dns.route53<br>  dns.secondary<br>  dns.<span class="hljs-built_in">sign</span><br>  dns.template<br>  dns.tls<br>  dns.trace<br>  dns.<span class="hljs-built_in">transfer</span><br>  dns.whoami<br>  on<br></code></pre></div></td></tr></table></figure><p>coredns的运行也非常简单，直接运行二进制文件即可，默认情况下可以添加的参数不多，主要是指定配置文件，指定运行端口和设置quiet模式。</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@tiny</span>-server coredns]<span class="hljs-meta"># ./coredns</span><br>.:<span class="hljs-number">53</span><br>CoreDNS<span class="hljs-number">-1.8</span><span class="hljs-number">.3</span><br>linux/amd64, go1<span class="hljs-number">.16</span>, <span class="hljs-number">4293992</span><br></code></pre></div></td></tr></table></figure><p>默认情况下会直接监听53端口，并且读取和自己在相同目录下的Corefile配置文件。但是在这种情况下，虽然coredns正常运行了，但是由于没有配置文件，是无法正常解析任何域名请求的。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 直接运行coredns让其监听30053端口</span><br>[root@tiny-server coredns-test]# ./coredns -dns.port 30053<br>.:30053<br>CoreDNS-1.8.3<br>linux/amd64, go1.16, 4293992<br>[INFO] 127.0.0.1:47910 - 63992 &quot;A IN tinychen.com. udp 53 false 4096&quot; NOERROR qr,aa,rd 94 0.000162476s<br>[INFO] 127.0.0.1:48764 - 26598 &quot;A IN tinychen.com. udp 53 false 4096&quot; NOERROR qr,aa,rd 94 0.000135895s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用dig命令进行测试，发现能够正常返回请求但是解析的结果不正确</span><br>[root@tiny-server coredns-test]# dig tinychen.com @127.0.0.1 -p30053<br><br>; &lt;&lt;&gt;&gt; DiG 9.11.20-RedHat-9.11.20-5.el8_3.1 &lt;&lt;&gt;&gt; tinychen.com @127.0.0.1 -p30053<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 26598<br>;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 3<br>;; WARNING: recursion requested but not available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 4096<br>; COOKIE: 4429aa454c031afe (echoed)<br>;; QUESTION SECTION:<br>;tinychen.com.                  IN      A<br><br>;; ADDITIONAL SECTION:<br>tinychen.com.           0       IN      A       127.0.0.1<br>_udp.tinychen.com.      0       IN      SRV     0 0 48764 .<br><br>;; Query time: 0 msec<br>;; SERVER: 127.0.0.1#30053(127.0.0.1)<br>;; WHEN: Tue May 11 11:39:47 CST 2021<br>;; MSG SIZE  rcvd: 117<br></code></pre></div></td></tr></table></figure><p>这里我们简单编写一个Corefile配置文件就能够先让coredns正常解析域名，这个配置文件的意识是对所有域的请求都forward到114DNS进行解析，并且记录正常的日志和错误的日志。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server coredns]# cat Corefile<br>. &#123;<br>    forward . 114.114.114.114 223.5.5.5<br>    log<br>    errors<br>    whoami<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后我们再进行测试就发现coredns可以正常解析域名了：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server coredns-test]# dig tinychen.com @127.0.0.1 -p30053<br><br>; &lt;&lt;&gt;&gt; DiG 9.11.20-RedHat-9.11.20-5.el8_3.1 &lt;&lt;&gt;&gt; tinychen.com @127.0.0.1 -p30053<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 49732<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 4096<br>;; QUESTION SECTION:<br>;tinychen.com.                  IN      A<br><br>;; ANSWER SECTION:<br>tinychen.com.           35      IN      A       47.107.188.168<br><br>;; Query time: 29 msec<br>;; SERVER: 127.0.0.1#30053(127.0.0.1)<br>;; WHEN: Tue May 11 14:02:41 CST 2021<br>;; MSG SIZE  rcvd: 69<br><br>[root@tiny-server coredns-test]# ./coredns -dns.port 30053<br>.:30053<br>CoreDNS-1.8.3<br>linux/amd64, go1.16, 4293992<br>[INFO] 127.0.0.1:42293 - 51799 &quot;A IN tinychen.com. udp 53 false 4096&quot; NOERROR qr,rd,ra 58 0.244014828s<br></code></pre></div></td></tr></table></figure><h1 id="3、systemd管理"><a href="#3、systemd管理" class="headerlink" title="3、systemd管理"></a>3、systemd管理</h1><p>coredns作为一个二进制执行文件，并没有向其他的如nginx、bind等服务提供种类繁多的进程控制（reload stop restart等等）选项，因此为了方便我们管理和在后台一直运行coredns，这里我们使用systemd对其进行管理，只需要编写一个systemd的unit文件即可：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server coredns]# cat /usr/lib/systemd/system/coredns.service<br>[Unit]<br>Description=CoreDNS<br>Documentation=https://coredns.io/manual/toc/<br>After=network.target<br><br>[Service]<br><span class="hljs-meta">#</span><span class="bash"> Type设置为notify时，服务会不断重启</span><br><span class="hljs-meta">#</span><span class="bash"> 关于<span class="hljs-built_in">type</span>的设置，可以参考https://www.freedesktop.org/software/systemd/man/systemd.service.html<span class="hljs-comment">#Options</span></span><br>Type=simple<br>User=root<br><span class="hljs-meta">#</span><span class="bash"> 指定运行端口和读取的配置文件</span><br>ExecStart=/home/coredns/coredns -dns.port=53 -conf /home/coredns/Corefile<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p>编写完成之后我们依次reload配置文件并且设置开机启动服务和开启服务，即可看到服务正常运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server coredns]# systemctl daemon-reload<br>[root@tiny-server coredns]# systemctl enable coredns.service<br>[root@tiny-server coredns]# systemctl start coredns.service<br>[root@tiny-server coredns]# systemctl status coredns.service<br>● coredns.service - CoreDNS<br>   Loaded: loaded (/usr/lib/systemd/system/coredns.service; enabled; vendor preset: disabled)<br>   Active: active (running) since Tue 2021-05-11 11:29:53 CST; 2h 37min ago<br>     Docs: https://coredns.io/manual/toc/<br> Main PID: 131287 (coredns)<br>    Tasks: 10 (limit: 49835)<br>   Memory: 27.3M<br>   CGroup: /system.slice/coredns.service<br>           └─131287 /home/coredns/coredns -dns.port=53 -conf /home/coredns/Corefile<br><br>May 11 11:29:53 tiny-server systemd[1]: Started CoreDNS.<br></code></pre></div></td></tr></table></figure><h1 id="4、coredns日志处理"><a href="#4、coredns日志处理" class="headerlink" title="4、coredns日志处理"></a>4、coredns日志处理</h1><p>coredns的日志输出并不如nginx那么完善（并不能在配置文件中指定输出的文件目录，但是可以指定日志的格式），默认情况下不论是log插件还是error插件都会把所有的相关日志输出到程序的<code>standard output</code>中，使用systemd来管理coredns之后，</p><h2 id="4-1-StandardOutput"><a href="#4-1-StandardOutput" class="headerlink" title="4.1 StandardOutput"></a>4.1 StandardOutput</h2><p>根据网上的<a href="https://stackoverflow.com/questions/37585758/how-to-redirect-output-of-systemd-service-to-a-file">参考资料</a>我们可以得知较新版本的systemd是可以直接在systemd的unit文件里面配置<code>StandardOutput</code>和<code>StandardError</code>两个参数来将相关运行日志输出到指定的文件中。</p><p><img src="https://resource.tinychen.com/20210511112440.png"></p><p>因此对于centos8等较新的系统，我们的unit文件可以这样编写：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=CoreDNS<br>Documentation=https://coredns.io/manual/toc/<br>After=network.target<br><span class="hljs-meta">#</span><span class="bash"> StartLimit这两个相关参数也是centos8等systemd版本较新的系统才支持的</span><br>StartLimitBurst=1<br>StartLimitIntervalSec=15s<br><br>[Service]<br><span class="hljs-meta">#</span><span class="bash"> Type设置为notify时，服务会不断重启</span><br>Type=simple<br>User=root<br><span class="hljs-meta">#</span><span class="bash"> 指定运行端口和读取的配置文件</span><br>ExecStart=/home/coredns/coredns -dns.port=53 -conf /home/coredns/Corefile<br><span class="hljs-meta">#</span><span class="bash"> append类型可以在原有文件末尾继续追加内容，而file类型则是重新打开一个新文件</span><br><span class="hljs-meta">#</span><span class="bash"> 两者的区别类似于 <span class="hljs-built_in">echo</span> &gt;&gt; 和 <span class="hljs-built_in">echo</span> &gt;</span><br>StandardOutput=append:/home/coredns/logs/coredns.log<br>StandardError=append:/home/coredns/logs/coredns_error.log<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><blockquote><p>参考链接：<a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#StandardOutput=">systemd.exec (www.freedesktop.org)</a></p><p>The <code>file:*</code>path<code>*</code> option may be used to connect a specific file system object to standard output. The semantics are similar to the same option of <code>StandardInput=</code>, see above. If <em><code>path</code></em> refers to a regular file on the filesystem, it is opened (created if it doesn’t exist yet) for writing at the beginning of the file, but without truncating it. If standard input and output are directed to the same file path, it is opened only once, for reading as well as writing and duplicated. This is particularly useful when the specified path refers to an <code>AF_UNIX</code> socket in the file system, as in that case only a single stream connection is created for both input and output.</p><p><code>append:*</code>path<code>*</code> is similar to <code>file:*</code>path<code>*</code> above, but it opens the file in append mode.</p></blockquote><p>修改完成之后我们再重启服务就可以看到日志已经被重定向输出到我们指定的文件中</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server coredns]# systemctl daemon-reload<br>[root@tiny-server coredns]# systemctl restart coredns.service<br></code></pre></div></td></tr></table></figure><h2 id="4-2-rsyslog"><a href="#4-2-rsyslog" class="headerlink" title="4.2 rsyslog"></a>4.2 rsyslog</h2><p>对于centos7等系统而言，是不支持上面的append和file两个参数的，那么在开启了<code>rsyslog.service</code>服务的情况下，日志就会输出到<code>/var/log/messages</code>文件中，或者可以使用<code>journalctl -u coredns</code>命令来查看全部的日志。</p><p>如果想要将coredns的日志全部集中到一个文件进行统一管理，我们可以对负责管理<code>systemd</code>的日志的<code>rsyslog</code>服务的配置进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vim /etc/rsyslog.conf</span><br>if $programname == &#x27;coredns&#x27; then /home/coredns/logs/coredns.log<br>&amp; stop<br><br>[root@tiny-server coredns]# systemctl restart rsyslog.service<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210511145618.png"></p><p>从上图我们可以看到两种方式打出来的日志稍微有些不同，对于<code>StandardOutput</code>这种方式输出的日志缺少了前面的时间和主机名等信息，相对而言还是修改rsyslog的方式要更加的可靠。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对coredns的原理和特性进行介绍，同时会对其二进制的安装方法进行尝试。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="coredns" scheme="https://tinychen.com/tags/coredns/"/>
    
  </entry>
  
  <entry>
    <title>在centos中使用nmcli工具创建虚拟网桥</title>
    <link href="https://tinychen.com/20210408-nmcli-create-net-bridge/"/>
    <id>https://tinychen.com/20210408-nmcli-create-net-bridge/</id>
    <published>2021-04-08T03:00:00.000Z</published>
    <updated>2021-04-08T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何在centos8中使用nmcli工具创建虚拟网桥并且添加物理网卡到虚拟网桥中，使其成为一个二层交换机。</p><p>这个操作不仅适用于物理网卡设备上，还适用于各种虚拟机的虚拟网卡设备。</p><span id="more"></span><p><img src="https://resource.tinychen.com/20210508144438.png"></p><p>目标是将红框内的三个网卡都组合成为一个二层的交换机，首先我们需要创建一个网桥设备，这个设备的功能就相当于我们平时使用的交换机</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">nmcli<span class="hljs-built_in"> connection </span><span class="hljs-builtin-name">add</span><span class="hljs-built_in"> type bridge </span>con-name switch ifname switch autoconnect <span class="hljs-literal">yes</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210508144442.png"></p><p>接着我们将需要的网卡添加到刚刚创建的名为switch的网桥中</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">nmcli connection add <span class="hljs-keyword">type</span> bridge-<span class="hljs-literal">slave</span> ifname enp0s20u3 <span class="hljs-keyword">master</span> <span class="hljs-title">switch</span><br>nmcli connection add <span class="hljs-keyword">type</span> bridge-<span class="hljs-literal">slave</span> ifname enp0s20u4 <span class="hljs-keyword">master</span> <span class="hljs-title">switch</span><br>nmcli connection add <span class="hljs-keyword">type</span> bridge-<span class="hljs-literal">slave</span> ifname enp6s0 <span class="hljs-keyword">master</span> <span class="hljs-title">switch</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210508144446.png"></p><p>完成添加之后我们需要对网桥和网卡的配置进行修改，编辑对应的配置文件修改启动选项和IP地址：<code>/etc/sysconfig/network-scripts/ifcfg-*</code>，把添加到switch网桥的所有网卡取消开机启动，避免和网桥的配置产生冲突：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">no</span><br></code></pre></div></td></tr></table></figure><p>同时给网桥设置静态IP地址，配置的方法和部分相关配置如下</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.253</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br></code></pre></div></td></tr></table></figure><p>配置完成之后，这时的整个switch设备就相当于一个拥有三个RJ45接口的带有管理IP的二层交换机。我们在switch的网卡上面接上路由器，另一个接口接上我们的电脑，理论上这时候就能够正常获取路由器通过DHCP下发的IP地址：</p><p>电脑网卡使用网线直接连接到Linux主机上已经添加到网桥中的网卡，查看状态可以直接获取到IPv4和IPv6的地址并且能够正确联网，这时候证明整个虚拟网桥设备是可以正常工作的。</p><p><img src="https://resource.tinychen.com/20210508144429.png"></p><blockquote><p>同样的操作我们还可以在KVM虚拟机上面实现，一般情况下如果我们给虚拟机直接添加宿主机网卡的桥接网卡，是可以实现虚拟机和宿主机处在相同网段的操作的。但是这个时候会出现宿主机没办法直接和虚拟机进行通信的情况。</p><p>这时候就可以创建一个虚拟网桥，然后把宿主机的网卡添加到这个网桥内，然后虚拟机的网卡创建的时候选择桥接这个虚拟网桥即可。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何在centos8中使用nmcli工具创建虚拟网桥并且添加物理网卡到虚拟网桥中，使其成为一个二层交换机。&lt;/p&gt;
&lt;p&gt;这个操作不仅适用于物理网卡设备上，还适用于各种虚拟机的虚拟网卡设备。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="kvm" scheme="https://tinychen.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty篇01-入门简介和安装配置</title>
    <link href="https://tinychen.com/20210317-openresty-01-introduction-and-installation/"/>
    <id>https://tinychen.com/20210317-openresty-01-introduction-and-installation/</id>
    <published>2021-03-17T07:00:00.000Z</published>
    <updated>2021-03-17T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对openresty做入门简介以及初始化的安装配置介绍。</p><span id="more"></span><h1 id="1、OpenResty简介"><a href="#1、OpenResty简介" class="headerlink" title="1、OpenResty简介"></a>1、OpenResty简介</h1><p>了解过web服务器的同学肯定对nginx不陌生，nginx作为目前占有率第一的web服务器，本身作为静态web服务器、反向代理服务和四层、七层负载均衡器都有着非常优秀的表现。但是对于web服务器而言，nginx的很多功能都偏向于静态web应用，也就是说它的动态处理能力是有一定的缺失的。举个最简单的例子，nginx无法在配置中直接进行一个条件以上的逻辑判断，这对于一些架构设计来说有着较大的不便。OpenResty的诞生就是为了解决这个问题。</p><p>官方对于OpenResty的介绍是：</p><blockquote><p>OpenResty® 是一个基于 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过汇聚各种设计精良的 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 模块（主要由 OpenResty 团队自主开发），从而将 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p><p>OpenResty® 的目标是让你的Web服务直接跑在 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 服务内部，充分利用 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p></blockquote><p>个人简单的理解就是OpenResty=nginx+lua+第三方库，事实上nginx本身也可以通过编译的方式添加lua的支持，同时nginx也可以通过编译的方式添加第三方库的支持，OpenResty则是直接将其全部打包在一起。且不讨论OpenResty作为全能型web服务器是否能够满足所有的业务需求，就其突出的动态处理能力就能给我们的系统架构带来很大的灵活性和额外的多样化处理能力。</p><h1 id="2、yum安装"><a href="#2、yum安装" class="headerlink" title="2、yum安装"></a>2、yum安装</h1><h2 id="2-1-配置yum源"><a href="#2-1-配置yum源" class="headerlink" title="2.1 配置yum源"></a>2.1 配置yum源</h2><p>openresty官网有提供各种主流Linux发行版的<a href="https://openresty.org/en/linux-packages.html">预编译包</a>，如果没有特殊需求，一般可以直接使用官方提供的安装包进行安装。</p><p>下面我们以<code>centos</code>为例进行示范：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># add the yum repo:</span><br>wget https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/package/</span>centos/openresty.repo<br>sudo mv openresty.repo <span class="hljs-regexp">/etc/yum</span>.repos.d/<br><br><span class="hljs-comment"># update the yum index:</span><br>sudo yum check-update<br></code></pre></div></td></tr></table></figure><h2 id="2-2-rpm包介绍"><a href="#2-2-rpm包介绍" class="headerlink" title="2.2 rpm包介绍"></a>2.2 rpm包介绍</h2><p>openresty的yum源中除了openresty本身之外，还有一些其他的工具包和依赖包，我们可以这样查看所有可用的rpm包，对于这些rpm包的详细内容解说可以查看官网的<a href="https://openresty.org/en/rpm-packages.html">文档</a>。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">sudo yum <span class="hljs-params">--disablerepo=</span><span class="hljs-string">&quot;*&quot;</span> <span class="hljs-params">--enablerepo=</span><span class="hljs-string">&quot;openresty&quot;</span> list available<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210317112817.png"></p><p>下面简单介绍几个重点的rpm包。</p><h3 id="2-2-1-openresty"><a href="#2-2-1-openresty" class="headerlink" title="2.2.1 openresty"></a>2.2.1 openresty</h3><p>这是用于核心 OpenResty 服务的生产版本。也就是整个openresty中提供主要服务的核心功能文件。在使用rpm包安装的情况下，系统中的openresty指令会链接到<code>/usr/bin/openresty</code>，而<code>/usr/bin/openresty</code>实际上是<code>/usr/local/openresty/nginx/sbin/nginx</code>的软链接</p><p><img src="https://resource.tinychen.com/20210317112824.png"></p><p>实际上<code>/usr/local/openresty/nginx/sbin/nginx</code>才是整个openresty的nginx可执行文件的本体，我们加上-V参数即可查看它包括编译模块在内的详细情况。之所以要将其软链接到<code>/usr/bin/openresty</code>，官方解释是为了避免和机器上已有的nginx发生冲突。</p><p><img src="https://resource.tinychen.com/20210317112828.png"></p><blockquote><p>从上面的编译参数中我们可以看到openresty使用了它们自己维护的openssl库、zlib库、pcre库和LuaJIT库，这样一来能够较好地控制各个库之间的版本以及功能更新和同步协调。</p></blockquote><h3 id="2-2-2-openresty-resty"><a href="#2-2-2-openresty-resty" class="headerlink" title="2.2.2 openresty-resty"></a>2.2.2 openresty-resty</h3><p>这个包里面有 <code>resty</code> 命令行程序，这个工具包主要依赖于 <a href="https://github.com/openresty/resty-cli">resty-cli</a> 这个项目，这个包依赖标准 的<code>perl</code> 包以及上面提到的 <code>openresty</code> 包才能正常工作。默认情况下它是指向<code>/usr/bin/resty</code>目录的一个环境变量，并且源文件在<code>/usr/local/openresty/bin/resty</code></p><p><img src="https://resource.tinychen.com/20210317112832.png"></p><p>个人认为这个工具包的主要作用就是方便我们进行一些简单的命令调试</p><figure class="highlight console"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> resty -e <span class="hljs-string">&#x27;ngx.say(&quot;hello&quot;)&#x27;</span></span><br>hello<br></code></pre></div></td></tr></table></figure><h3 id="2-2-3-openresty-doc"><a href="#2-2-3-openresty-doc" class="headerlink" title="2.2.3 openresty-doc"></a>2.2.3 openresty-doc</h3><p>顾名思义这个rpm包最重要的功能就是提供文档查询，一般来说需要注意使用UTF-8编码的Terminal即可。和man命令有些类似，如果我们想要查询openresty中某个模块的相关文档，只需要使用<code>restydoc</code>命令即可。</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 我们可以直接输入对应的模块命查看对应的文档</span><br>restydoc ngx_lua<br>restydoc ngx_lua_upstream<br>restydoc ngx_http_v2_module<br>restydoc luajit<br><span class="hljs-meta"># 也可以加入-s参数查看某条指令或某个部分的文档</span><br>restydoc -s content_by_lua<br>restydoc -s proxy_pass<br></code></pre></div></td></tr></table></figure><h3 id="2-2-4-openresty-openssl"><a href="#2-2-4-openresty-openssl" class="headerlink" title="2.2.4 openresty-openssl"></a>2.2.4 openresty-openssl</h3><p>这是openresty官方维护的 OpenSSL 库。为了节省开销，这个版本禁用了在构建中对于多线程的支持。此外，这个版本最重要的是OpenResty官方加入了他们自己的一些补丁包来支持一些openssl的最新特性，同时也做了一些优化使得比较旧的系统也能够支持最新版本的openssl。<strong>同理，不仅是openssl，openresty自己维护的pcre和zlib库也是有这种的目的。</strong></p><blockquote><p>和nginx默认的rpm版本使用的还是较旧/稳定的openssl版本相比，openresty对于openssl版本的支持无疑是比较激进的。</p></blockquote><h3 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h3><p>更多详细的包介绍可以查看官方的英文文档，介绍的比较全面，一般来说就是主要的几个工具软件如openresty、openssl、pcre、zlib等等的主要生产版本、debug版本、asan版本、valgrind版本等，这里不做赘述。</p><h2 id="2-3-rpm包安装openresty"><a href="#2-3-rpm包安装openresty" class="headerlink" title="2.3 rpm包安装openresty"></a>2.3 rpm包安装openresty</h2><p>虽然上面介绍了很多个openresty相关的包，但是实际上安装的时候只需要安装openresty，其他的依赖关系会由yum自动处理。注意openresty-doc、openresty-resty等是可选安装的包。</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali"><span class="hljs-comment"># add the yum repo:</span><br>wget https://openresty.org/package/centos/openresty.repo<br>sudo mv openresty.repo /etc/yum.repos.d/<br><br><span class="hljs-comment"># update the yum index:</span><br>sudo yum<span class="hljs-built_in"> check-update</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># use yum to install</span><br>yum install openresty<br></code></pre></div></td></tr></table></figure><p>安装完成之后会在默认的目录路径<code>/usr/local/openresty/nginx</code>下面生成对应的配置文件目录，我们将其和yum安装的nginx和编译安装的nginx对比可以发现几乎是一致的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum安装的nginx</span><br>[root@tiny-test nginx]<span class="hljs-comment"># pwd</span><br>/etc/nginx<br>[root@tiny-test nginx]<span class="hljs-comment"># ls</span><br>conf.d  fastcgi_params  koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params  uwsgi_params  win-utf<br><br><span class="hljs-comment"># 源码编译安装的nginx</span><br>[root@tiny-test nginx]<span class="hljs-comment"># pwd</span><br>/home/nginx<br>[root@tiny-test nginx]<span class="hljs-comment"># ls</span><br>client_body_temp  conf  fastcgi_temp  html  logs  sbin  scgi_temp  uwsgi_temp<br><br><span class="hljs-comment"># 使用yum安装的openresty目录下的nginx</span><br>[root@tiny-test nginx]<span class="hljs-comment"># pwd</span><br>/usr/<span class="hljs-built_in">local</span>/openresty/nginx<br>[root@tiny-test nginx]<span class="hljs-comment"># ls</span><br>client_body_temp  conf  fastcgi_temp  html  logs  proxy_temp  sbin  scgi_temp  uwsgi_temp<br></code></pre></div></td></tr></table></figure><p>我们简单写一个nginx.conf配置文件用来测试即可，文件使用默认路径的<code>/usr/local/openresty/nginx/conf/nginx.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tiny-test conf]<span class="hljs-comment"># openresty -T</span><br>nginx: the configuration file /usr/<span class="hljs-built_in">local</span>/openresty/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/<span class="hljs-built_in">local</span>/openresty/nginx/conf/nginx.conf <span class="hljs-built_in">test</span> is successful<br><span class="hljs-comment"># configuration file /usr/local/openresty/nginx/conf/nginx.conf:</span><br>user root;<br>worker_processes  1;<br><br>error_log logs/error.log;<br><br>pid logs/nginx.pid;<br><br>events &#123;<br>    worker_connections 1024;<br>&#125;<br><br>http &#123;<br><br>    log_format main<br>    <span class="hljs-string">&#x27;$remote_addr | [$time_local] | $status | $scheme | &#x27;</span><br>    <span class="hljs-string">&#x27;$server_name | request= $request | request_uri= $request_uri | http_referer= $http_referer | &#x27;</span><br>    <span class="hljs-string">&#x27;UA= $http_user_agent | $request_time | $ssl_protocol | $ssl_cipher | &#x27;</span><br>    <span class="hljs-string">&#x27;remote_port= $remote_port | $request_id&#x27;</span>;<br><br>    access_log logs/access.log main;<br><br>    server &#123;<br>        listen 8080;<br>        location / &#123;<br>            default_type text/html;<br>            content_by_lua_block &#123;<br>                ngx.say(<span class="hljs-string">&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分别使用curl和浏览器测试均正常</p><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@tiny-test</span> conf]<span class="hljs-comment"># curl 10.224.192.144:8080</span><br><span class="hljs-variable">&lt;p&gt;</span>hello, world<span class="hljs-variable">&lt;/p&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\tinychen\OneDrive\Blogs\pic_cache\20210309-openresty01\image-20210312144310441.png" alt="image-20210312144310441"></p><p>日志中也能看到对应的操作</p><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@tiny-test</span> conf]<span class="hljs-comment"># tail -f ../logs/access.log</span><br>10.224.192.144 |<span class="hljs-string"> [12/Mar/2021:14:42:25 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> http </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> request= GET / HTTP/1.1 </span>|<span class="hljs-string"> request_uri= / </span>|<span class="hljs-string"> http_referer= - </span>|<span class="hljs-string"> UA= curl/7.29.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> remote_port= 34626 </span>|<span class="hljs-string"> 602882ad9b5cf910bea2f6d13ce4bf5e</span><br><span class="hljs-string">10.228.18.249 </span>|<span class="hljs-string"> [12/Mar/2021:14:42:51 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> http </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> request= GET / HTTP/1.1 </span>|<span class="hljs-string"> request_uri= / </span>|<span class="hljs-string"> http_referer= - </span>|<span class="hljs-string"> UA= Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> remote_port= 7148 </span>|<span class="hljs-string"> 5a91256294bf307ed62f48a06905dbc0</span><br><span class="hljs-string">10.228.18.249 </span>|<span class="hljs-string"> [12/Mar/2021:14:42:51 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> http </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> request= GET /favicon.ico HTTP/1.1 </span>|<span class="hljs-string"> request_uri= /favicon.ico </span>|<span class="hljs-string"> http_referer= http://10.224.192.144:8080/ </span>|<span class="hljs-string"> UA= Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> remote_port= 7148 </span>|<span class="hljs-string"> 372e7402db9f396950dae48b66a7e1ce</span><br></code></pre></div></td></tr></table></figure><p>再查看端口监听和服务进程都正常</p><p><img src="https://resource.tinychen.com/20210317112842.png"></p><p>那么就可以基本判定这次的安装是顺利安装成功了。</p><h1 id="3、源码编译安装"><a href="#3、源码编译安装" class="headerlink" title="3、源码编译安装"></a>3、源码编译安装</h1><p>如果需要进行定制化，那么从源码开始进行编译安装就是我们的不二之选。首先我们去<a href="https://openresty.org/en/download.html">官网</a>下载最新版本的openresty源码包并解压。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd /home<br>wget https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/download/</span>openresty-<span class="hljs-number">1.19</span>.<span class="hljs-number">3.1</span>.tar.gz<br>tar -zxvf openresty-<span class="hljs-number">1.19</span>.<span class="hljs-number">3.1</span>.tar.gz<br></code></pre></div></td></tr></table></figure><h2 id="3-1-编译环境"><a href="#3-1-编译环境" class="headerlink" title="3.1 编译环境"></a>3.1 编译环境</h2><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">[root@tiny-test home]# lsb_release -a<br>LSB Version:    :core<span class="hljs-string">-4</span>.1-amd64:core<span class="hljs-string">-4</span>.1-noarch:cxx<span class="hljs-string">-4</span>.1-amd64:cxx<span class="hljs-string">-4</span>.1-noarch:desktop<span class="hljs-string">-4</span>.1-amd64:desktop<span class="hljs-string">-4</span>.1-noarch:languages<span class="hljs-string">-4</span>.1-amd64:languages<span class="hljs-string">-4</span>.1-noarch:printing<span class="hljs-string">-4</span>.1-amd64:printing<span class="hljs-string">-4</span>.1-noarch<br>Distributor ID: CentOS<br>Description:    CentOS Linux release 7.9.2009 (Core)<br>Release:        7.9.2009<br>Codename:       Core<br></code></pre></div></td></tr></table></figure><p>同时我们还需要准备编译使用的工具如编译器等，对于CentOS7，我们可以简单的安装整个开发工具包<code>Development Tools</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum grouplist<br>yum groupinstall <span class="hljs-string">&quot;Development Tools&quot;</span> -y<br></code></pre></div></td></tr></table></figure><h2 id="3-2-准备openssl、pcre和zlib"><a href="#3-2-准备openssl、pcre和zlib" class="headerlink" title="3.2 准备openssl、pcre和zlib"></a>3.2 准备openssl、pcre和zlib</h2><p>和nginx一样，我们手动下载准备最新版本的openssl、pcre和zlib，注意这三个库<strong>只需要下载解压，并不需要提前进行安装</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>wget https://www.openssl.org/<span class="hljs-built_in">source</span>/openssl-1.1.1j.tar.gz<br>wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz<br>wget https://zlib.net/zlib-1.2.11.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar -zxvf openssl-1.1.1j.tar.gz<br>tar -zxvf pcre-8.44.tar.gz<br>tar -zxvf zlib-1.2.11.tar.gz<br></code></pre></div></td></tr></table></figure><h2 id="3-3-编译安装"><a href="#3-3-编译安装" class="headerlink" title="3.3 编译安装"></a>3.3 编译安装</h2><p>和nginx的编译安装一样，我们可以自定义编译安装的模块，这里可以查看openresty模块的<a href="https://openresty.org/en/components.html">官方说明</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">cd /home/openresty-<span class="hljs-number">1.19</span><span class="hljs-number">.3</span><span class="hljs-number">.1</span>/<br>./configure --prefix=<span class="hljs-regexp">/home/</span>openresty --<span class="hljs-keyword">with</span>-openssl=<span class="hljs-regexp">/home/</span>openssl-<span class="hljs-number">1.1</span>.1j --<span class="hljs-keyword">with</span>-pcre=<span class="hljs-regexp">/home/</span>pcre-<span class="hljs-number">8.44</span> --<span class="hljs-keyword">with</span>-zlib=<span class="hljs-regexp">/home/</span>zlib-<span class="hljs-number">1.2</span><span class="hljs-number">.11</span> --<span class="hljs-keyword">with</span>-http_realip_module --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-debug --<span class="hljs-keyword">with</span>-http_ssl_module --<span class="hljs-keyword">with</span>-http_v2_module <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210317112847.png"></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">gmake</span> -j<span class="hljs-number">8</span><br><span class="hljs-attribute">gmake</span> install<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210317112852.png"></p><p>最后在安装完成的时候我们可以看到会把编译的openresty目录下的<code>/home/openresty/nginx/sbin/nginx</code>软链接到<code>/home/openresty/bin/openresty</code>，逻辑和yum安装的openresty一样</p><p>如果想要方便全局操作，可以创建一个软链接。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/bin/</span>openresty <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>openresty<br></code></pre></div></td></tr></table></figure><p>当然要是觉得这样子的目录不好操作，我们也可以在编译的时候多加一些参数，将常用的目录都手动指定，操作起来就和nginx几乎没有差别了，下面简单列举一个例子：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">./configure \<br>--prefix=<span class="hljs-regexp">/home/</span>openresty \<br>--sbin-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/bin/</span>nginx \<br>--conf-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/conf/</span>nginx.conf \<br>--http-log-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/logs/</span>access.log \<br>--error-log-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/logs/</span>error.log \<br>--pid-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/logs/</span>nginx.pid \<br>--lock-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/logs/</span>nginx.lock \<br>--http-client-body-temp-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/client_body_temp/</span> \<br>--http-proxy-temp-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/proxy_temp/</span> \<br>--http-fastcgi-temp-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/fastcgi_temp/</span> \<br>--http-uwsgi-temp-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/uwsgi_temp/</span> \<br>--http-scgi-temp-path=<span class="hljs-regexp">/home/</span>openresty<span class="hljs-regexp">/scgi_temp/</span> \<br>--with-openssl=<span class="hljs-regexp">/home/</span>openssl-<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span>k \<br>--with-pcre=<span class="hljs-regexp">/home/</span>pcre-<span class="hljs-number">8.44</span> \<br>--with-zlib=<span class="hljs-regexp">/home/</span>zlib-<span class="hljs-number">1.2</span>.<span class="hljs-number">11</span> \<br>--with-http_realip_module \<br>--with-http_stub_status_module \<br>--with-debug \<br>--with-http_ssl_module \<br>--with-http_v2_module \<br>--build=tinychen-build \<br>--dry-run<br></code></pre></div></td></tr></table></figure><h1 id="4、OpenResty操作"><a href="#4、OpenResty操作" class="headerlink" title="4、OpenResty操作"></a>4、OpenResty操作</h1><p><strong>openresty的操作指令和nginx是完全一致的</strong>。具体如下：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@tiny-test home]<span class="hljs-comment"># nginx -h</span><br>nginx version: nginx/<span class="hljs-number">1.19</span>.<span class="hljs-number">8</span><br>Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]<br>             [-e filename] [-c filename] [-g directives]<br><br>Options:<br>  -?,-h         : this help<br>  -v            : show version and <span class="hljs-keyword">exit</span><br>  -V            : show version and configure options then <span class="hljs-keyword">exit</span><br>  -t            : test configuration and <span class="hljs-keyword">exit</span><br>  -T            : test configuration, dump it and <span class="hljs-keyword">exit</span><br>  -q            : suppress non-error messages during configuration testing<br>  -s signal     : send signal to a master process: stop, quit, reopen, reload<br>  -p prefix     : set prefix path (default: <span class="hljs-regexp">/etc/</span>nginx/)<br>  -e filename   : set error log file (default: <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log)<br>  -c filename   : set configuration file (default: <span class="hljs-regexp">/etc/</span>nginx/nginx.conf)<br>  -g directives : set global directives out of configuration file<br><br>[root@tiny-test home]<span class="hljs-comment"># openresty -h</span><br>nginx version: openresty/<span class="hljs-number">1.19</span>.<span class="hljs-number">3.1</span><br>Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]<br><br>Options:<br>  -?,-h         : this help<br>  -v            : show version and <span class="hljs-keyword">exit</span><br>  -V            : show version and configure options then <span class="hljs-keyword">exit</span><br>  -t            : test configuration and <span class="hljs-keyword">exit</span><br>  -T            : test configuration, dump it and <span class="hljs-keyword">exit</span><br>  -q            : suppress non-error messages during configuration testing<br>  -s signal     : send signal to a master process: stop, quit, reopen, reload<br>  -p prefix     : set prefix path (default: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openresty/</span>nginx/)<br>  -c filename   : set configuration file (default: conf/nginx.conf)<br>  -g directives : set global directives out of configuration file<br></code></pre></div></td></tr></table></figure><ul><li><code>-h</code> 打印帮助菜单</li><li><code>-v</code> 小写的v是打印版本并退出</li><li><code>-V</code> 大写的V是打印编译参数和版本信息并退出</li><li><code>-t</code> 小写的t是测试配置文件是否有错误并退出</li><li><code>-T</code> 大写的T是测试配置文件是否有误并且打印出生效的配置文件并退出，如果nginx.conf里面使用了include命令添加了其他的配置文件，也会一并拼接打印出来</li><li><code>-q</code> 在测试期间不打印非错误信息，适合debug使用</li><li><code>-s</code> 发送信号控制master进程，分别为<code>stop</code>（暴力停止）, <code>quit</code>（优雅停止）, <code>reopen</code>（重新打开日志文件）, <code>reload</code>（优雅重启）</li><li><code>-p</code>通过-p参数来指定实际的工作目录，例如我们有两个不同的测试项目，则可以通过<code>openresty -p /path/to/app</code>在启动的时候指定不同的工作目录，从而实现允许多个不同的 OpenResty 应用共享同一个 OpenResty 服务程序的效果</li><li><code>-c</code> 通过-c参数来指定不同的配置文件而非只是默认路径下的配置文件</li><li><code>-g</code> 在启动的时候设定配置文件之外的全局指令，例如<code>openresty -g &quot;pid /var/run/nginx.pid; worker_processes 8;&quot;</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对openresty做入门简介以及初始化的安装配置介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="openresty" scheme="https://tinychen.com/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇08-添加客户端证书认证</title>
    <link href="https://tinychen.com/20210304-nginx-08-ssl-client-certificate/"/>
    <id>https://tinychen.com/20210304-nginx-08-ssl-client-certificate/</id>
    <published>2021-03-04T07:00:00.000Z</published>
    <updated>2021-03-04T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用给nginx服务添加客户端证书认证从而实现双向加密。</p><p>对于一般的https网站来说，实际上https所使用的证书是属于单向验证，即客户端单向验证服务器的安全性，而服务器端是没有对客户端的身份进行验证的。关于https的原理，可以查看这篇文章：<a href="https://tinychen.com/20200602-encryption-intro/">《SSL/TLS、对称加密和非对称加密和TLSv1.3》</a></p><p>如果自己部署了一些安全性较高的网站不希望被其他人随意访问，就可以尝试部署https的双向认证，对客户端也添加证书认证。本文将会使用openssl自签证书来完成最简单的一个https双向认证。</p><span id="more"></span><h1 id="1、openssl自签证书"><a href="#1、openssl自签证书" class="headerlink" title="1、openssl自签证书"></a>1、openssl自签证书</h1><p>在开始之前我们新建一个目录专门用来存放这次生成证书相关的全部文件。openssl生成自签证书的命令非常简单，总结如下：</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">openssl genrsa -out<span class="hljs-built_in"> root</span><span class="hljs-built_in">.key</span> <span class="hljs-number">1024</span><br><br>openssl req -new -out<span class="hljs-built_in"> root</span>.csr -key<span class="hljs-built_in"> root</span><span class="hljs-built_in">.key</span><br><br>openssl x509 -req -<span class="hljs-keyword">in</span><span class="hljs-built_in"> root</span>.csr -out<span class="hljs-built_in"> root</span>.crt -signkey<span class="hljs-built_in"> root</span><span class="hljs-built_in">.key</span> -CAcreateserial -days <span class="hljs-number">3650</span><br></code></pre></div></td></tr></table></figure><p>接下来我们开始逐个命令进行讲解，首先我们需要生成一个<code>root.key</code>文件</p><p><img src="https://resource.tinychen.com/20210304165627.png"></p><p><img src="https://resource.tinychen.com/20210304165631.png"></p><p><code>root.key</code>文件生成之后，我们就可以根据<code>key</code>文件来生成一个记录证书信息的<code>csr</code>文件用于申请证书。<code>csr</code>文件需要记录相关的证书申请人的地址和邮件等信息，最后还可以设置一个密码，当需要使用这个<code>csr</code>文件来申请证书的适合就需要输入这个密码，否则无法使用，如果不想设置的话直接回车即可跳过</p><p><img src="https://resource.tinychen.com/20210304165634.png"></p><p><img src="https://resource.tinychen.com/20210304165638.png"></p><p>生成了<code>key</code>和<code>csr</code>文件之后，我们就可以自己生成一个<code>crt</code>的证书文件，由于这里是测试，我们可以直接把时间设定为10年</p><p><img src="https://resource.tinychen.com/20210304165643.png"></p><p><strong>到这一步，我们已经生成了一个完整的自签CA证书，其中包含了私钥key文件，证书信息csr文件和公钥crt文件。</strong></p><p><img src="https://resource.tinychen.com/20210304165646.png"></p><h1 id="2、生成p12证书"><a href="#2、生成p12证书" class="headerlink" title="2、生成p12证书"></a>2、生成p12证书</h1><p>为了方便使用，我们需要把证书打包成p12格式的证书文件，然后在客户端的电脑上导入。同样的在生成p12文件的时候我们最好添加一个密码保护，这样就算证书泄露了也不会导致安全问题。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">openssl pkcs12 -export -clcerts -<span class="hljs-keyword">in</span><span class="hljs-built_in"> root</span>.crt -inkey<span class="hljs-built_in"> root</span><span class="hljs-built_in">.key</span> -out<span class="hljs-built_in"> root</span>.p12<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210304165650.png"></p><h1 id="3、配置nginx"><a href="#3、配置nginx" class="headerlink" title="3、配置nginx"></a>3、配置nginx</h1><p>最后我们只需要在nginx中需要使用双向认证的部分添加以下配置然后重启即可生效</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 客户端公钥证书</span><br><span class="hljs-attribute">ssl_client_certificate</span> /path/to/root.crt;<br><span class="hljs-comment"># 开启客户端证书验证</span><br><span class="hljs-attribute">ssl_verify_client</span> <span class="hljs-literal">on</span>;<br></code></pre></div></td></tr></table></figure><p>最后我们在windows或者mac上面导入p12文件之后，打开对应的网站就会有相应的提示了：</p><p><img src="https://resource.tinychen.com/20210304165654.png"></p><p>如果不进行证书验证，则服务器会返回400错误。</p><p>我们还可以使用curl来进行测试，如果不带上证书，会直接报400错误。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># curl https:<span class="hljs-comment">//ip.tinychen.com</span></span><br><span class="hljs-params">&lt;html&gt;</span><br><span class="hljs-params">&lt;head&gt;</span><span class="hljs-params">&lt;title&gt;</span><span class="hljs-number">400</span> No required SSL certificate was sent<span class="hljs-params">&lt;/title&gt;</span><span class="hljs-params">&lt;/head&gt;</span><br><span class="hljs-params">&lt;body&gt;</span><br><span class="hljs-params">&lt;center&gt;</span><span class="hljs-params">&lt;h1&gt;</span><span class="hljs-number">400</span> Bad Request<span class="hljs-params">&lt;/h1&gt;</span><span class="hljs-params">&lt;/center&gt;</span><br><span class="hljs-params">&lt;center&gt;</span>No required SSL certificate was sent<span class="hljs-params">&lt;/center&gt;</span><br><span class="hljs-params">&lt;hr&gt;</span><span class="hljs-params">&lt;center&gt;</span>nginx<span class="hljs-params">&lt;/center&gt;</span><br><span class="hljs-params">&lt;/body&gt;</span><br><span class="hljs-params">&lt;/html&gt;</span><br></code></pre></div></td></tr></table></figure><p>带上证书之后则访问正常</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">[root@tiny-cloud <span class="hljs-regexp">/home/</span>certs]# curl --cert .<span class="hljs-regexp">/root.crt --key ./</span>root.key https:<span class="hljs-comment">//ip.tinychen.com</span><br>hello world<br></code></pre></div></td></tr></table></figure><p>如果想要查看curl的详细过程，我们可以加上-v参数来查看。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用给nginx服务添加客户端证书认证从而实现双向加密。&lt;/p&gt;
&lt;p&gt;对于一般的https网站来说，实际上https所使用的证书是属于单向验证，即客户端单向验证服务器的安全性，而服务器端是没有对客户端的身份进行验证的。关于https的原理，可以查看这篇文章：&lt;a href=&quot;https://tinychen.com/20200602-encryption-intro/&quot;&gt;《SSL/TLS、对称加密和非对称加密和TLSv1.3》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果自己部署了一些安全性较高的网站不希望被其他人随意访问，就可以尝试部署https的双向认证，对客户端也添加证书认证。本文将会使用openssl自签证书来完成最简单的一个https双向认证。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="tls" scheme="https://tinychen.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>tomcat入门指北</title>
    <link href="https://tinychen.com/20210303-tomcat-start-guide/"/>
    <id>https://tinychen.com/20210303-tomcat-start-guide/</id>
    <published>2021-03-03T07:00:00.000Z</published>
    <updated>2021-03-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是偏向运维角度来对tomcat进行入门介绍，重点讲解了tomcat的基本概念、基本配置和tomcat的I/O模型。是之前的<a href="https://tinychen.com/tags/tomcat/">tomcat篇</a>的汇总整理之作。</p><span id="more"></span><h1 id="1、Tomcat简介"><a href="#1、Tomcat简介" class="headerlink" title="1、Tomcat简介"></a>1、Tomcat简介</h1><p>在了解tomcat之前我们需要了解一些基本的概念。</p><h2 id="1-1-web应用"><a href="#1-1-web应用" class="headerlink" title="1.1 web应用"></a>1.1 web应用</h2><p>所谓Web应用，就是指需要通过编程来创建的Web站点。Web应用中不仅包括普通的静态HTML文档，还包含大量可被Web服务器动态执行的程序。用户在Internet上看到的能开展业务的各种Web站点都可看作Web应用，例如，网上商店和网上银行都是Web应用。此外，公司内部基于Web的Intranet工作平台也是Web应用。</p><p>Web应用与传统的桌面应用程序相比，具有以下特点：</p><ul><li>以浏览器作为展示客户端界面的窗口。</li><li>客户端界面一律表现为网页形式，网页由HTML语言写成。</li><li>客户端与服务器端能进行和业务相关的<strong>动态交互</strong>。</li><li>能完成与桌面应用程序类似的功能。</li><li>使用浏览器—服务器架构（B/S），浏览器与服务器之间采用HTTP协议通信。</li><li>Web应用通过Web服务器来发布。</li></ul><p>web应用的一大好处就是可以轻易地跨平台运行，不论是windows、mac、ios、android还是linux，只要安装了浏览器，一般都可以使用web应用，而浏览器在各个平台都是标配的软件，因此给web应用的普及提供了非常良好的条件。同样的，web应用使用的是B/S架构，即Browser/Server架构，主要的计算任务都交给Server端进行，因此都客户端的性能要求较低，同时也推动了服务端的负载均衡、高可用等技术的发展。</p><blockquote><p><code>Context</code>：在tomcat中一般指web应用</p></blockquote><h2 id="1-2-Servlet"><a href="#1-2-Servlet" class="headerlink" title="1.2 Servlet"></a>1.2 Servlet</h2><p><strong>Servlet（Server Applet），全称Java Servlet。是用Java编写的服务器端程序。</strong>其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类别，一般情况下，我们说的Servlet为后者。</p><p>Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。也就是说Web服务器可以访问任意一个Web应用中所有实现Servlet接口的类。而Web应用中用于被Web服务器动态调用的程序代码位于Servlet接口的实现类中。既然servlet和java关系密切，那么servlet接口的标准制定毫无疑问也是由甲骨文公司来主导。</p><p><strong>Servlet规范把能够发布和运行Java Web应用的Web服务器称为Servlet容器。</strong>Servlet容器最主要的特征是动态执行Java Web应用中Servlet实现类的程序代码。由Apache开源软件组织创建的Tomcat是一个符合Servlet规范的优秀Servlet容器。</p><p><img src="https://resource.tinychen.com/blog/20200324/dak4snL5hzJi.png"></p><h2 id="1-3-jsp"><a href="#1-3-jsp" class="headerlink" title="1.3 jsp"></a>1.3 jsp</h2><p>JSP（全称JavaServer Pages）是由Sun Microsystems公司主导建立的一种<strong>动态网页技术标准</strong>。JSP是HttpServlet的扩展。JSP将Java代码和特定变动内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容。JSP在首次被访问的时候被应用服务器转换为servlet，在以后的运行中，容器直接调用这个servlet，而不再访问JSP页面。<strong>JSP的实质仍然是servlet。</strong></p><h2 id="1-4-Tomcat"><a href="#1-4-Tomcat" class="headerlink" title="1.4 Tomcat"></a>1.4 Tomcat</h2><p><a href="http://tomcat.apache.org/">Tomcat</a>是在Oracle公司的JSWDK（JavaServer Web DevelopmentKit，是Oracle公司推出的小型Servlet/JSP调试工具）的基础上发展起来的一个优秀的Servlet容器，<strong>Tomcat本身完全用Java语言编写</strong>。作为一个开源软件，Tomcat除了运行稳定、可靠，并且效率高之外，还可以和目前大部分的主流Web服务器（如IIS、Apache、Nginx等）一起工作。</p><p>tomcat的版本实际上比较复杂，目前有7、8、9、10四个版本并行发布，具体的各个版本的兼容信息我们可以通过<a href="https://tomcat.apache.org/whichversion.html">官网</a>查询。</p><h1 id="2、Tomcat的目录结构"><a href="#2、Tomcat的目录结构" class="headerlink" title="2、Tomcat的目录结构"></a>2、Tomcat的目录结构</h1><p>我们先来看一下tomcat8.5和tomcat9中的home目录中的文件：</p><p><img src="https://resource.tinychen.com/blog/20200401/EurnK7y7obav.png"></p><p>可以看到除掉一些说明文件之后，还有7个目录：</p><table><thead><tr><th align="center">目录名</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">bin</td><td align="center">存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同于 windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件</td></tr><tr><td align="center">conf</td><td align="center">配置文件及相关的 DTD<em>（document type definition 文档类型定义，DTD文件一般和XML文件配合使用，主要是为了约束XML文件）</em>。其中最重要的文件是 server.xml，这是容器的主配置文件</td></tr><tr><td align="center">lib</td><td align="center">存放tomcat服务器自身和所有的web应用都可以访问的JAR文件</td></tr><tr><td align="center">logs</td><td align="center">日志文件的默认目录</td></tr><tr><td align="center">temp</td><td align="center">存放临时文件的默认目录</td></tr><tr><td align="center">webapps</td><td align="center">在tomcat上发布Java web应用的时候，默认把web应用的文件存放在这个目录</td></tr><tr><td align="center">work</td><td align="center">tomcat的工作目录，tomcat把运行时生成的一些工作文件存放在这个目录，如默认情况下tomcat会把编译JSP生成的Servlet类文件存放在这里</td></tr></tbody></table><p>实际上除了主目录里有lib目录，在webapps目录下的web应用中的WEB-INF目录下也存在一个lib目录：</p><p><img src="https://resource.tinychen.com/blog/20200331/9XL5OhCa6UtT.png"></p><p>两者的区别在于：</p><p>●　Tomcat主目录下的lib目录：存放的JAR文件<strong>不仅能被Tomcat访问，还能被所有在Tomcat中发布的Java Web应用访问</strong><br>●　webapps目录下的Java Web应用的lib目录：存放的JAR文件<strong>只能被当前Java Web应用访问</strong></p><p>既然有多个lib目录，那么肯定就有使用的优先顺序，Tomcat类加载器的目录加载优先顺序如下：</p><p>Tomcat的类加载器负责为Tomcat本身以及Java Web应用加载相关的类。假如Tomcat的类加载器要为一个Java Web应用加载一个类，类加载器会按照以下优先顺序到各个目录中去查找该类的.class文件，直到找到为止，如果所有目录中都不存在该类的.class文件，则会抛出异常：</p><ol><li>在Java Web应用的<code>WEB-INF/classes</code>目录下查找该类的.class文件</li><li>在Java Web应用的<code>WEB-INF/lib</code>目录下的JAR文件中查找该类的.class文件</li><li>在Tomcat的<code>lib</code>子目录下直接查找该类的.class文件</li><li>在Tomcat的<code>lib</code>子目录下的JAR文件中查找该类的.class文件</li></ol><h1 id="3、Tomcat安装配置"><a href="#3、Tomcat安装配置" class="headerlink" title="3、Tomcat安装配置"></a>3、Tomcat安装配置</h1><p>tomcat的配置安装需要先在系统上配置好jdk环境，这里我们使用<code>centos7.7</code>版本的Linux系统和<code>jdk8</code>版本。</p><h2 id="3-1-配置jdk8"><a href="#3-1-配置jdk8" class="headerlink" title="3.1 配置jdk8"></a>3.1 配置jdk8</h2><p>我们首先到<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">官网</a>下载JDK8的安装包，这里我们选择<code>tar.gz</code>格式的压缩包下载，需要注意建议先使用浏览器下载再使用工具传输到Linux上，因为下载需要登录注册账号。</p><p>接着我们解压将安装包解压到自己想要配置的jdk安装目录下，这里我们使用/home/目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /home/<br></code></pre></div></td></tr></table></figure><p>在<code>/etc/profile</code>中添加以下三个参数并导入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">JAVA_HOME=/home/jdk_1.8.0_241<br>CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin<br>export JAVA_HOME CLASSPATH PATH<br></code></pre></div></td></tr></table></figure><p>重新载入配置文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><p>检查配置是否生效，如不生效可以重启终端试试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-yun ~]# java -version<br>java version &quot;1.8.0_241&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_241-b07)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<br></code></pre></div></td></tr></table></figure><h2 id="3-2-配置tomcat"><a href="#3-2-配置tomcat" class="headerlink" title="3.2 配置tomcat"></a>3.2 配置tomcat</h2><p>tomcat的安装配置和上面几乎一样，由于我们已经在<code>/etc/profile</code>中设定了全局的java环境变量，因此在tomcat中就不用再特殊配置，直接就会使用默认的全局变量。</p><p>这里我们还是使用<a href="https://downloads.apache.org/">官网</a><br>提供的<code>tar.gz</code>压缩包来安装。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># tomcat可以直接使用wget下载</span><br><span class="hljs-attribute">wget</span> https://downloads.apache.org/tomcat/tomcat-<span class="hljs-number">8</span>/v<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>/bin/apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>.tar.gz<br><span class="hljs-comment"># 解压到安装目录并重命名</span><br><span class="hljs-attribute">tar</span> -zxvf apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>.tar.gz /home/<br><span class="hljs-attribute">cd</span> /home<br><span class="hljs-attribute">mv</span> apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span> tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span><br></code></pre></div></td></tr></table></figure><p>首先我们来看一下tomcat中的主要目录：</p><ul><li><strong>/bin</strong> 存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同于 Windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件。</li><li><strong>/conf</strong> 配置文件及相关的 DTD。其中最重要的文件是 server.xml，这是容器的主配置文件。</li><li><strong>/log</strong> 日志文件的默认目录。</li><li><strong>/webapps</strong> 存放 Web 应用的相关文件。</li></ul><p>接着我们进入tomcat目录下的<code>bin</code>目录就可以看到各种各样的脚本文件，主要分为<code>bat</code>和<code>sh</code>两类，其中bat主要是在windows系统上使用的，我们可以把它们删掉，接着我们执行一些<code>version.sh</code>这个脚本就可以看到版本信息。</p><p><img src="https://resource.tinychen.com/blog/20200324/fL53hXHw5Q1I.png"></p><p>接下来我们来看一下和tomcat相关的几个变量：</p><ul><li><p><code>JRE_HOME</code></p><p>这里我们可以看到<code>JRE_HOME</code>这个变量是之前设置了的<code>JAVA_HOME</code>环境变量。</p><ul><li>如果同时定义了<code>JRE_HOME</code>和<code>JAVA_HOME</code>这两个变量，那么使用的是<code>JRE_HOME</code></li><li>如果只定义了<code>JAVA_HOME</code>，那么<code>JRE_HOME</code>变量值就是<code>JAVA_HOME</code>的变量值</li><li>如果两个变量都没定义，那么tomcat无法运行</li></ul></li></ul><blockquote><p>前面我们提到过tomcat是使用Java编写的，这也就意味着它在运行的时候需要创建一个JVM虚拟机，所以如果没定义JAVA环境变量，tomcat是无法运行的</p></blockquote><ul><li><p><code>CATALINA_HOME</code></p><p>tomcat安装目录的根目录</p></li><li><p><code>CATALINA_BASE</code></p><p>tomcat实例运行的目录，默认情况下等于<code>CATALINA_HOME</code>，如果我们需要在一台机器上运行多个tomcat实例，可以设置多个<code>CATALINA_BASE</code></p></li><li><p><code>setenv.sh</code></p><p>这个脚本默认是不存在的，需要我们自己手动创建在<code>bin</code>目录下，在windows系统则应该是<code>setenv.bat</code>，我们在里面指定了JRE_HOME环境变量以及PID文件的位置，这样在运行的时候就能比较方便的定位到运行进程</p><blockquote><p>注意前面提到的<code>CATALINA_HOME</code>和<code>CATALINA_BASE</code>两个变量不能在这里设定，因为tomcat就是根据这两个变量来找到 <code>setenv.sh</code>的。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">[admin@tiny-yun bin]$ cat setenv.sh <br><span class="hljs-attribute">JRE_HOME</span>=/home/jdk1.8.0_241/jre<br><span class="hljs-attribute">CATALINA_PID</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$CATALINA_BASE</span>/tomcat.pid&quot;</span><br></code></pre></div></td></tr></table></figure><p>这时候运行<code>./catalina.sh start</code>或者是<code>./startup.sh</code>文件就可以启动tomcat，注意要在防火墙中放行默认的8080端口。如果没有指定PID文件的位置，在关闭tomcat的时候可能会出现错误。此外，一般不建议使用root用户来运行tomcat。</p></li></ul><p>  <img src="https://resource.tinychen.com/blog/20200325/Jdtn5kIniRtV.png"></p><h2 id="3-3-manager应用"><a href="#3-3-manager应用" class="headerlink" title="3.3 manager应用"></a>3.3 manager应用</h2><p>tomcat本身内置了两个web应用，专门用来管理tomcat，它们分别是host-manager（管理virtual host）和manager（管理web应用）。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/host-manager/</span>html<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/manager/</span>html<br></code></pre></div></td></tr></table></figure><p>在启动tomcat之后，我们访问上面的这两个网址可以发现被403了。因为我们还没有在配置文件中增加相关的用户，为了保证安全，这里的用户默认都是禁用的，我们需要自己创建。</p><p>我们编辑tomcat目录下的conf子目录中的<code>tomcat-users.xml</code>，添加对应的配置即可：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--admin对应的是host-manager的用户--&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the HTML GUI--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the text interface--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin‐script&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--manager对应的是manager的用户--&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the HTML GUI and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the text interface and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager‐script&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the JMX proxy and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-jmx&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the status pages only--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-status&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--我们这里添加一个用户，然后定义角色即可--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;tinychen&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tinychen#321&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;admin‐gui,manager-gui&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>Users with the <code>admin-gui</code> role should not be granted the <code>admin-script</code> role.</p><p>注意被授予<code>admin-gui</code>权限的用户不应该授予<code>admin-script</code>权限</p><p>Users with the <code>manager-gui</code> role should not be granted either the <code>manager-script</code> or <code>manager-jmx</code> roles.</p><p>注意被授予<code>manager-gui</code>权限的用户不应该授予<code>manager-script</code>或<code>manager-jmx</code>权限</p></blockquote><p>tomcat9中默认是只允许部署tomcat的机器访问manger和host-manager的页面的，因此我们需要修改tomcat目录下对应的web应用的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /home/tomcat9/webapps/host-manager/META-INF/context.xml <br>vim /home/tomcat9/webapps/manager/META-INF/context.xml<br></code></pre></div></td></tr></table></figure><p>然后修改里面限制的IP地址为全部或者自己的IP地址即可。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">antiResourceLocking</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">privileged</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">allow</span>=<span class="hljs-string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">sessionAttributeValueClassNameFilter</span>=<span class="hljs-string">&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)</span></span><br><span class="hljs-string"><span class="hljs-tag">|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br><br># 将allow参数改为<br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">allow</span>=<span class="hljs-string">&quot;^.*$&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后我们就可以访问web界面来查看tomcat服务器的运行状态了。</p><ul><li>manager的web界面</li></ul><p><img src="https://resource.tinychen.com/20200410100657.png"></p><ul><li>host-manager的web界面</li></ul><p><img src="https://resource.tinychen.com/20200410100810.png"></p><h2 id="3-4-Tomcat的守护进程（jsvc）"><a href="#3-4-Tomcat的守护进程（jsvc）" class="headerlink" title="3.4 Tomcat的守护进程（jsvc）"></a>3.4 Tomcat的守护进程（jsvc）</h2><p>在Windows上，tomcat会默认注册成系统服务，这样设置启动和运行都方便很多，而在Linux上，我们需要借助jsvc来实现这一效果。</p><h3 id="3-4-1-什么是jsvc"><a href="#3-4-1-什么是jsvc" class="headerlink" title="3.4.1 什么是jsvc"></a>3.4.1 什么是jsvc</h3><p><strong>Commons Daemon</strong>（共享守护进程），<a href="http://commons.apache.org/proper/commons-daemon/jsvc.html">原名JSVC</a>，是一个属于Apache的Commons项目的Java库。守护程序提供了一种启动和停止正在运行服务器端应用程序的Java虚拟机（JVM）的便携式方法。<strong>守护程序包括两部分：用C编写的操作系统接口的原生库 ，以及提供用Java编写的Daemon API的库。</strong></p><p><strong>有两种使用Commons守护程序的方法：直接调用实现守护程序接口（interface）或调用为守护程序提供所需方法（method）的类（class）。</strong>例如，Tomcat-4.1.x使用守护程序接口，而Tomcat-5.0.x提供了一个类，该类的方法直接由JSVC调用。</p><h3 id="3-4-2-jsvc工作原理"><a href="#3-4-2-jsvc工作原理" class="headerlink" title="3.4.2 jsvc工作原理"></a>3.4.2 jsvc工作原理</h3><p>jsvc使用了三个进程来工作：一个启动进程、一个控制进程、一个被控制进程。其中被控制进程一般来说就是java主线程（我们这里就是tomcat），如果JVM虚拟机崩溃了，那么控制进程会在下一分钟重启。因为jsvc是守护进程，所以它应该使用root用户来启动，同时我们可以使用-user参数来进行用户的降级（downgrade），即先使用root用户来创建进程，然后再降级到指定的非root用户而不丢失root用户的特殊权限，如监听1024以下的端口。</p><h3 id="3-4-3-jsvc配置tomcat守护进程（daemon）"><a href="#3-4-3-jsvc配置tomcat守护进程（daemon）" class="headerlink" title="3.4.3 jsvc配置tomcat守护进程（daemon）"></a>3.4.3 jsvc配置tomcat守护进程（daemon）</h3><p>tomcat的二进制安装包中的bin目录下就有jsvc的安装包，我们需要使用GCC编译器对其进行编译安装。同时在编译的时候我们需要指定jdk的路径，由于我们前面已经手动指定了，这里不需要再指定。如果没有，可以使用<code>./configure --with-java=$JAVA_HOME</code>来进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们进入tomcat的bin目录进行编译</span><br>cd $CATALINA_HOME/bin<br>tar xvfz commons-daemon-native.tar.gz<br>cd commons-daemon-1.2.2-native-src/unix<br>./configure<br>make<br><span class="hljs-meta">#</span><span class="bash"> 编译完成后，会在当前文件夹生成一个jsvc的文件，将它拷贝到tomcat的/bin/目录下</span><br>cp jsvc ../..<br>cd ../..<br><span class="hljs-meta">#</span><span class="bash"> 接着我们可以这样查看jsvc的帮助文档</span><br>./jsvc -help<br></code></pre></div></td></tr></table></figure><p>使用jsvc来启动tomcat，我们使用下面的参数来进行启动</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">./jsvc \<br>    -user tomcat \<br>    -classpath <span class="hljs-variable">$CATALINA_HOME</span>/bin/bootstrap<span class="hljs-selector-class">.jar</span>:<span class="hljs-variable">$CATALINA_HOME</span>/bin/tomcat-juli<span class="hljs-selector-class">.jar</span> \<br>    -outfile <span class="hljs-variable">$CATALINA_BASE</span>/logs/catalina<span class="hljs-selector-class">.out</span> \<br>    -errfile <span class="hljs-variable">$CATALINA_BASE</span>/logs/catalina<span class="hljs-selector-class">.err</span> \<br>    -Dcatalina.home=<span class="hljs-variable">$CATALINA_HOME</span> \<br>    -Dcatalina.base=<span class="hljs-variable">$CATALINA_BASE</span> \<br>    -Djava<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.logging</span>.manager=org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.juli</span><span class="hljs-selector-class">.ClassLoaderLogManager</span> \<br>    -Djava<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.config</span>.file=<span class="hljs-variable">$CATALINA_BASE</span>/conf/logging<span class="hljs-selector-class">.properties</span> \<br>    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.startup</span>.Bootstrap<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200326/jlQScDXanNG5.png"></p><p>注意看这时的用户和PID，上面的12839的用户为root，也就是我们前面说的控制进程，后面被12839进程控制的12840进程才是我们主要运行的tomcat进程，而这里的用户也符合我们使用-user参数指定的tomcat用户。如果我们不指定进程的PID文件位置，那么默认就会在/var/run目录下生成PID文件，我们可以看到这个jsvc.pid对应的正好是jsvc运行的三个进程中的被控制进程。</p><p>如果需要关闭，我们可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./jsvc -stop org.apache.catalina.startup.Bootstrap stop<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 还可以指定pid文件位置，如果前面没有使用默认的pid文件目录的话</span><br>./jsvc -stop -pidfile /var/run/jsvc.pid org.apache.catalina.startup.Bootstrap stop<br></code></pre></div></td></tr></table></figure><p>这个时候可能就会有同学发现，前面不是说jsvc主要有三个进程来工作的吗，怎么这里只有两个进程呢？</p><p>我们在上面的启动命令的选项里面加入一个<code>-wait 10</code>的参数，然后启动之后迅速查看一下进程。</p><blockquote><p>一般情况下，启动进程在启动了控制进程之后就会结束，而当我们使用了<code>-wait</code>参数之后，启动进程会等待被控制进程启动好了之后向其发送一个”I am ready”信号，启动进程在收到信号之后就会结束。<code>-wait 10</code>表示等待时间为10秒，需要注意等待时间要是10的倍数。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20200326/rGRNwKHxcWyh.png"></p><p>这时候可以看到存在三个jsvc相关的进程，等tomcat启动完之后再查看的时候我们就会发现最上面的19347号进程，也就是jsvc启动进程消失了。并且控制进程19350的父进程变成了1号进程。</p><p><img src="https://resource.tinychen.com/blog/20200326/Wz45K8kzINLa.png"></p><p>我们再进一步查看以下进程的关系：</p><p><img src="https://resource.tinychen.com/blog/20200326/5JVRVSUwyzte.png"></p><p>接着我们再来查看一下1号进程。可以发现，在centos7中的1号进程是<code>systemd</code>。</p><p><img src="https://resource.tinychen.com/blog/20200326/N2GUtLLlwlRf.png"></p><p>接着我们可以总结以上的整个过程为下列步骤：</p><ol><li>系统启动，0号进程启动，0号通过fork()生成1号进程systemd；</li><li>1号进程systemd通过fork()创建进程sshd，这就是我们使用的ssh服务的进程；</li><li>用户使用ssh远程登录系统，sshd进程创建了对应的终端进程pts；</li><li>用户在终端输入指令，pts根据系统中指定的该用户使用的shell（此处为bash shell）来执行对应的操作，这里具体表现为根据我们输入的指令来创建jsvc的启动进程；</li><li>jsvc启动进程创建jsvc控制进程，并根据启动参数决定是否在等待jsvc控制进程的”I am ready”信号再结束，同时jsvc启动进程在结束之前会把jsvc控制进程交给1号进程systemd来管理控制；</li><li>jsvc控制进程创建jsvc被控制进程，也就是我们的主要进程tomcat，同时jsvc控制进程会监视jsvc被控制进程，如果它崩溃了，jsvc控制进程则会重启，确保其正常运行；</li></ol><p>这里使用jsvc来启动tomcat的好处就是启动完成了之后即使我们的shell终端关闭了也不会影响它的运行，当然如果我们直接使用tomcat的bin目录下的启动脚本来进行启动然后再送入后台运行也是可以达到这样的效果。实际上我们还可以通过编写systemd的unit单元配置文件，将tomcat注册成系统服务。</p><h3 id="3-4-4-daemon-sh"><a href="#3-4-4-daemon-sh" class="headerlink" title="3.4.4 daemon.sh"></a>3.4.4 daemon.sh</h3><p>同样的，在tomcat的bin目录下，集成了一个daemon.sh的脚本，用来调用jsvc从而实现tomcat的守护进程。daemon.sh的实现原理还是jsvc，只不过在脚本中加入了大量的变量判断和环境配置文件读取等操作</p><p>在官网上会建议我们直接把daemon.sh脚本复制到 <code>/etc/init.d</code> 目录下，就可以实现开机自动启动了。不过在CentOS7等使用了systemd的系统上，我个人更推荐使用systemd来管理。</p><h2 id="3-5-Tomcat的守护进程（systemd-jsvc）"><a href="#3-5-Tomcat的守护进程（systemd-jsvc）" class="headerlink" title="3.5 Tomcat的守护进程（systemd+jsvc）"></a>3.5 Tomcat的守护进程（systemd+jsvc）</h2><blockquote><p>这里先放上archwiki和fedoraproject官网上面的链接作为参考资料：</p><p><a href="https://wiki.archlinux.org/index.php/Systemd">https://wiki.archlinux.org/index.php/Systemd</a></p><p><a href="https://docs.fedoraproject.org/en-US/quick-docs/understanding-and-administering-systemd/index.html">https://docs.fedoraproject.org/en-US/quick-docs/understanding-and-administering-systemd/index.html</a></p></blockquote><h3 id="3-5-1-systemd简介"><a href="#3-5-1-systemd简介" class="headerlink" title="3.5.1 systemd简介"></a>3.5.1 systemd简介</h3><p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器，是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。systemd 和 ubuntu 的 upstart 是竞争对手，不过现在ubuntu也使用了systemd。</p><p>systemd 使用 socket 和 D-Bus 来开启服务，<strong>提供基于守护进程（daemon）的按需启动策略</strong>，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit 。</p><p><strong>systemd 开启和监督整个系统是基于 unit 的概念。</strong>unit 是由一个与配置文件对应的名字和类型组成的(例如：avahi.service unit 有一个具有相同名字的配置文件，是守护进程 Avahi 的一个封装单元)。一个unit单元配置文件可以描述的内容有：系统服务（<code>.service</code>）、挂载点（<code>.mount</code>）、sockets（<code>.sockets</code>） 、系统设备（<code>.device</code>）、交换分区（<code>.swap</code>）、文件路径（<code>.path</code>）、启动目标（<code>.target</code>）、由 systemd 管理的计时器（<code>.timer</code>）。</p><ul><li><code>service</code> ：守护进程的启动、停止、重启和重载是此类 unit 中最为明显的几个类型。</li><li><code>socket</code> ：此类 unit 封装系统和互联网中的一个 socket 。当下，systemd 支持流式、数据报和连续包的 AF_INET、AF_INET6、AF_UNIX socket 。也支持传统的 FIFO（先进先出） 传输模式。<strong>每一个 socket unit 都有一个相应的服务 unit 。相应的服务在第一个连接（connection）进入 socket 或 FIFO 时就会启动(例如：nscd.socket 在有新连接后便启动 nscd.service)。</strong></li><li><code>device</code> ：此类 <em>unit</em> 封装一个存在于 Linux 设备树中的设备。每一个使用 udev 规则标记的设备都将会在 systemd 中作为一个设备 <em>unit</em> 出现。udev 的属性设置可以作为配置设备 <em>unit</em> 依赖关系的配置源。</li><li><code>mount</code> ：此类 <em>unit</em> 封装系统结构层次中的一个挂载点。</li><li><code>automount</code> ：此类 <em>unit</em> 封装系统结构层次中的一个自挂载点。每一个自挂载 unit 对应一个已挂载的挂载 unit (需要在自挂载目录可以存取的情况下尽早挂载)。</li><li><code>target</code> ：此类 unit 为其他 unit 进行逻辑分组。它们本身实际上并不做什么，只是引用其他 <em>unit</em> 而已。这样便可以对 unit 做一个统一的控制。(例如：multi-user.target 相当于在传统使用 SysV 的系统中运行级别5，即GUI图形化界面)；bluetooth.target 只有在蓝牙适配器可用的情况下才调用与蓝牙相关的服务，如：bluetooth 守护进程、obex 守护进程等）</li><li>snapshot ：与 target unit 相似，快照本身不做什么，唯一的目的就是引用其他 unit 。</li></ul><p>systemd的unit文件可以从多个地方加载，使用<code>systemctl show --property=UnitPath</code> 可以按优先级从低到高显示加载目录。</p><p><img src="https://resource.tinychen.com/blog/20200326/dqTDvbfsMkK7.png"></p><blockquote><p>主要的unit文件在下面的两个目录中：</p><ul><li><code>/usr/lib/systemd/system/</code> ：软件包安装的单元</li><li><code>/etc/systemd/system/</code> ：系统管理员安装的单元</li></ul></blockquote><h3 id="3-5-2-systemd原理"><a href="#3-5-2-systemd原理" class="headerlink" title="3.5.2 systemd原理"></a>3.5.2 systemd原理</h3><p>这里我们重点分析一下systemd的并行操作性能以及service服务的配置单元。</p><p>和前任的sysvinit的完全串行相比，systemd为了加速整个系统启动，实现了几乎所有的进程都并行启动（包括需要上下进程依赖的进程也并行启动）。想要实现这一点，主要需要解决三个方面的依赖问题：socket、D-Bus和文件系统。</p><h4 id="3-5-2-1-socket-依赖-inetd"><a href="#3-5-2-1-socket-依赖-inetd" class="headerlink" title="3.5.2.1 socket 依赖(inetd)"></a>3.5.2.1 socket 依赖(inetd)</h4><p>绝大多数的服务依赖是套接字依赖。比如服务 A 通过一个套接字端口 S1 提供自己的服务，其他的服务如果需要服务 A，则需要连接 S1。因此如果服务 A 尚未启动，S1 就不存在，其他的服务就会得到启动错误。</p><p>所以传统地，人们需要先启动服务 A，等待它进入就绪状态，再启动其他需要它的服务。</p><p>systemd 认为，只要我们预先把套接字端口S1建立好，那么其他所有的服务就可以同时启动而无需等待服务 A来创建套接字端口S1了。如果服务 A 尚未启动，那么其他进程向套接字端口S1发送的服务请求实际上会被 Linux 操作系统缓存，其他进程会在这个请求的地方等待（这里使用FIFO方式）。一旦服务A启动就绪，就可以立即处理缓存的请求，一切都开始正常运行。</p><p>那么服务如何使用由 init 进程创建的套接字呢？</p><p>Linux 操作系统有一个特性，当进程调用<code>fork</code>或者<code>exec</code>创建子进程之后，所有在父进程中被打开的文件句柄 (<code>file descriptor</code>) 都被子进程所继承。套接字也是一种文件句柄，进程A可以创建一个套接字，此后当进程 A调用 exec 启动一个新的子进程时，只要确保该套接字的<code>close_on_exec</code>标志位被清空，那么新的子进程就可以继承这个套接字。子进程看到的套接字和父进程创建的套接字是同一个系统套接字，就仿佛这个套接字是子进程自己创建的一样，没有任何区别。</p><p>这个特性以前被一个叫做<code>inetd</code>的系统服务所利用。<code>Inetd</code>进程会负责监控一些常用套接字端口，比如 ssh，当该端口有连接请求时，<code>inetd</code>才启动<code>telnetd</code>进程，并把有连接的套接字传递给新的<code>telnetd</code>进程进行处理。这样，当系统没有 ssh 客户端连接时，就不需要启动 sshd 进程。Inetd 可以代理很多的网络服务，这样就可以节约很多的系统负载和内存资源，只有当有真正的连接请求时才启动相应服务，并把套接字传递给相应的服务进程。</p><p>和 inetd 类似，systemd(1号进程)是所有其他进程的父进程，它可以先建立所有需要的套接字，然后在调用 exec 的时候将该套接字传递给新的服务进程，而新进程直接使用该套接字进行服务即可。</p><h4 id="3-5-2-2-D-Bus-依赖-bus-activation"><a href="#3-5-2-2-D-Bus-依赖-bus-activation" class="headerlink" title="3.5.2.2 D-Bus 依赖(bus activation)"></a>3.5.2.2 D-Bus 依赖(bus activation)</h4><p><strong>D-Bus 是 <code>desktop-bus</code> 的简称，是一个低延迟、低开销、高可用性的进程间通信机制。</strong>它越来越多地用于应用程序之间通信，也用于应用程序和操作系统内核之间的通信。很多现代的服务进程都使用D-Bus 取代套接字作为进程间通信机制，对外提供服务。</p><blockquote><p>Linux的 <code>NetworkManager</code> 服务就使用 D-Bus 和其他的应用程序或者服务进行交互：Linux上常见的邮件客户端软件 <code>evolution</code> 可以通过 D-Bus 从 <code>NetworkManager</code> 服务获取网络状态的改变，以便做出相应的处理。</p></blockquote><p>D-Bus 支持所谓<code>&quot;bus activation&quot;</code>功能。如果服务 A 需要使用服务 B 的 D-Bus 服务，而服务 B 并没有运行，则 D-Bus 可以在服务 A 请求服务 B 的 D-Bus 时自动启动服务 B。而服务 A 发出的请求会被 D-Bus 缓存，服务 A 会等待服务 B 启动就绪。利用这个特性，依赖 D-Bus 的服务就可以实现并行启动。</p><h4 id="3-5-2-3-文件系统依赖-automounter"><a href="#3-5-2-3-文件系统依赖-automounter" class="headerlink" title="3.5.2.3 文件系统依赖(automounter)"></a>3.5.2.3 文件系统依赖(automounter)</h4><p>系统启动过程中，文件系统相关的活动是最耗时的，比如挂载文件系统，对文件系统进行磁盘检查（fsck），磁盘配额检查等都是非常耗时的操作。在等待这些工作完成的同时，系统处于空闲状态。那些想使用文件系统的服务似乎必须等待文件系统初始化完成才可以启动。但是 systemd 发现这种依赖也是可以避免的。</p><p>systemd 参考了 <a href="https://wiki.archlinux.org/index.php/Autofs">autofs</a> 的设计思路，使得依赖文件系统的服务和文件系统本身初始化两者可以并行工作。autofs 可以监测到某个文件系统挂载点真正被访问到的时候才触发挂载操作，这是通过内核 <a href="https://en.wikipedia.org/wiki/Automounter"><code>automounter</code></a> 模块的支持而实现的。systemd 集成了autofs的实现，对于系统中的挂载点，比如<code>/home</code>，当系统启动的时候，systemd 为其创建一个临时的自动挂载点。在这个时刻<code>/home</code> 真正的挂载设备尚未启动好，真正的挂载操作还没有执行，文件系统检测也还没有完成。可是那些依赖该目录的进程已经可以并发启动，他们的 <code>open()</code>操作被内建在 systemd 中的 <code>autofs</code> 捕获，将该 <code>open()</code>调用挂起（可中断睡眠状态）。然后等待真正的挂载操作完成，文件系统检测也完成后，systemd 将该自动挂载点替换为真正的挂载点，并让 <code>open()</code>调用返回。由此，实现了那些依赖于文件系统的服务和文件系统本身同时并发启动。</p><p>对于<code>/</code>根目录的依赖实际上一定还是要<strong>串行执行</strong>，因为 systemd 自己也存放在<code>/</code>根目录之下，必须等待系统根目录挂载检查好。</p><blockquote><p>不过对于类似<code>/home</code>等挂载点，这种并发可以提高系统的启动速度，尤其是当<code>/home</code>是远程的 NFS 节点，或者是加密盘等，需要耗费较长的时间才可以准备就绪的情况下，因为并发启动，这段时间内，系统并不是完全无事可做，而是可以利用这段空余时间做更多的启动进程的事情，总的来说就缩短了系统启动时间。</p></blockquote><h4 id="3-5-2-4-总结"><a href="#3-5-2-4-总结" class="headerlink" title="3.5.2.4 总结"></a>3.5.2.4 总结</h4><p>从上面的三个办法我们可以看出，systemd让多个程序并行启动的解决思路就是先创建一个虚拟点，让各类需要依赖的服务先运行起来，最后再把虚拟点换成实际的服务使得能够正常运行。</p><h3 id="3-5-3-systemd实现tomcat的daemon进程"><a href="#3-5-3-systemd实现tomcat的daemon进程" class="headerlink" title="3.5.3 systemd实现tomcat的daemon进程"></a>3.5.3 systemd实现tomcat的daemon进程</h3><p>我们在<code>/usr/lib/systemd/system/</code>目录下新建一个<code>tomcat9.service</code>文件，接下来我们可以使用<code>systemctl</code>命令来进行控制：</p><blockquote><ul><li><p>使用 <code>systemctl</code> 控制单元时，通常需要使用unit文件的全名，包括扩展名（例如 <code>sshd.service</code> ）。但是有些unit可以在 <code>systemctl</code> 中使用简写方式。</p></li><li><p>如果无扩展名，systemctl 默认把扩展名当作 <code>.service</code> 。例如 tomcat 和 <code>tomcat.service</code> 是等价的。</p></li><li><p>挂载点会自动转化为相应的 <code>.mount</code> 单元。例如 <code>/home</code> 等价于 <code>home.mount</code> 。</p></li><li><p>设备会自动转化为相应的 <code>.device</code> 单元，所以 <code>/dev/sda1</code> 等价于 <code>dev-sda1.device</code> 。</p></li></ul></blockquote><h4 id="3-5-3-1-使用daemon-sh"><a href="#3-5-3-1-使用daemon-sh" class="headerlink" title="3.5.3.1 使用daemon.sh"></a>3.5.3.1 使用daemon.sh</h4><p>首先我们尝试在systemd中使用自带的脚本进行启动和关闭tomcat，这里我们先把<code>startup.sh</code>和<code>shutdown.sh</code>两个脚本给排除掉，虽然它们无法启动守护进程的缺陷可以使用systemd来进行弥补，但是还是无法使用jsvc，无法在特权端口和运行用户之间取得两全，我们直接使用<code>daemon.sh</code>来运行。</p><p>需要注意的是，systemd并不会去读取我们先前在/etc/profile中设定的变量，因此我们直接把变量写进unit配置文件中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br><br>[Service]<br>User=tomcat<br>Group=tomcat<br>PIDFile=/var/run/tomcat.pid<br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br>ExecStart=/home/tomcat9/bin/daemon.sh start<br>ExecStop=/home/tomcat9/bin/daemon.sh stop<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p>添加了新的unit单元之后我们先<code>systemctl daemon-reload</code>重启一下daemon进程，再使用<code>systemctl start tomcat9.service</code>来启动服务，接着查看状态，发现无法正常运行，一启动进程就failed掉了，查看daemon脚本默认的日志文件（位于tomcat目录下的<code>logs/catalina-daemon.out</code>）我们发现返回了143错误。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Service <span class="hljs-keyword">exit</span> with a return value of <span class="hljs-number">143</span><br></code></pre></div></td></tr></table></figure><p>网上搜索了一下，有个解决方案是把daemon.sh脚本中的wait参数时间从10调成240，在125行左右的位置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Set the default service-start <span class="hljs-built_in">wait</span> time <span class="hljs-keyword">if</span> necessary</span><br>test &quot;.$SERVICE_START_WAIT_TIME&quot; = . &amp;&amp; SERVICE_START_WAIT_TIME=10<br></code></pre></div></td></tr></table></figure><p>wait参数调大之后，等待启动成功之后（这里用的主机配置很低，启动比较耗时）就可以正常访问了</p><p><img src="https://resource.tinychen.com/blog/20200327/KFmNuX2L0N1j.png"></p><p>但是在四分钟（240s）之后我们再查看tomcat9.service就会发现，进程已经结束了，再次访问默认的8080端口也无法访问，查找进程也没有找到相关的进程。</p><p><img src="https://resource.tinychen.com/blog/20200327/4IS7HuajJiAC.png"></p><p><strong>试图分析一波</strong></p><p>我们来根据上面的情况结合原理来试图分析一下：</p><p>首先我们可以看到-wait参数时长调到240之后，bash shell进程的生命周期延长了，根据之前的jsvc工作原理部分我们可以知道-wait参数会影响jsvc的启动进程的生命周期，而从systemd输出的信息来看，有包括jsvc三个进程和bash shell进程在内共计四个进程，这和之前我们直接运行daemon.sh之后最终只有jsvc的两个进程（控制进程和被控制进程不同），且Main PID参数指向的是bash shell进程。</p><p>于是乎我们大胆猜测一下：使用<code>daemon.sh start</code>命令启动tomcat，systemd会把启动daemon.sh的bash的PID作为整个service的PID来监控，而这个bash进程在启动了jsvc之后是会自行退出的，这也就导致了systemd认为service已经运行失败，从而清理掉了关联的进程，进而使得jsvc相关的tomcat进程也被清理掉了。而-wait参数时长调到240之后，bash shell进程的存活时间变长，我们就能在tomcat启动完成之后且bash shell进程结束之前访问到tomcat服务器。</p><p>考虑到这种情况，我们可以试一下使用<code>daemon.sh run</code>来启动tomcat，因为在终端中使用run参数的时候会一直把log信息输出到终端，我猜测这个运行方式是和start不太一样的。</p><p><strong>把systemd的unit文件的启动参数改为run，同时将-wait参数时长调回默认的10，再次启动服务。</strong></p><p><img src="https://resource.tinychen.com/blog/20200327/7fEtIOxNacQi.png"></p><p>这次我们可以看到systemd的Main PID对应为jsvc的主进程，tomcat服务也能一直正常的在后台运行。应该算是成功的使用systemd来管理jsvc启动的tomcat进程了。</p><p>那么这两者的区别在哪里呢？接着我们打开daemon.sh这个脚本来查看一下两者的不同：</p><p><img src="https://resource.tinychen.com/blog/20200327/SDqqCLNFjEKa.png"></p><p>从图中我们可以看到两者最大的不同就是使用run命令的时候是<code>exec</code>调用<code>jsvc</code>来启动tomcat并且使用了<code>-nodetach</code>参数。</p><p>shell中的<code>exec</code>命令和直接调用不同，命令<code>exec</code>将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，<strong>而且exec命令后的其它命令将不再执行。</strong></p><p>也就是说，run命令使用exec调用了jsvc，是直接替代原来启动daemon.sh的bash shell进程，并且在这个exec命令执行完之后才会执行后面的exit命令。这样就可以让systemd的Main PID从bash shell进程顺理成章地变为jsvc的启动进程。</p><p>那么我们知道，jsvc的启动进程在启动完jsvc控制进程之后还是会退出的，这个时候systemd还是会监听失败。而<code>-nodetach</code>参数的作用就是不脱离父进程而成为守护进程（ don’t detach from parent process and become a daemon），这样就能顺利地使得jsvc控制进程从它的父进程jsvc启动进程那里“得到”systemd的Main PID的位置，成为该service的主要进程。</p><p>我们直接在终端中运行jsvc并加上<code>-nodetach</code>参数，可以看到即使是运行成功了之后也不会退出（控制进程继承了启动进程成为守护进程一直运行），而没加的情况下则是jsvc启动进程退出后就会退出。</p><p><img src="https://resource.tinychen.com/blog/20200327/nOEzacp0ewCV.png"></p><p>这里再放上systemd使用daemon.sh启动tomcat的整个unit文件的配置及注释：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br><span class="hljs-meta">#</span><span class="bash"> 对整个serive的描述，相当于备注，会出现在systemd的<span class="hljs-built_in">log</span>中</span><br>After=network.target<br><span class="hljs-meta">#</span><span class="bash"> 在network服务启动之后再启动</span><br><br>[Service]<br>User=tomcat<br>Group=tomcat<br><span class="hljs-meta">#</span><span class="bash"> 运行该service的用户及用户组</span><br><br>PIDFile=/var/run/tomcat.pid<br><span class="hljs-meta">#</span><span class="bash"> 该service的PID文件</span><br><br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br><span class="hljs-meta">#</span><span class="bash"> 定义了运行时需要的变量</span><br><br>ExecStart=/home/tomcat9/bin/daemon.sh start<br>ExecStop=/home/tomcat9/bin/daemon.sh stop<br><span class="hljs-meta">#</span><span class="bash"> 对应systemd控制的start和stop命令</span><br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta">#</span><span class="bash"> 运行级别为第三级（带有网络的多用户模式）</span><br></code></pre></div></td></tr></table></figure><h4 id="3-5-3-2-直接使用jsvc"><a href="#3-5-3-2-直接使用jsvc" class="headerlink" title="3.5.3.2 直接使用jsvc"></a>3.5.3.2 直接使用jsvc</h4><p>既然搞清楚了运行原理，我们也就可以跳过脚本直接在unit文件中定义各种参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br>After=network.target<br><br>[Service]<br>User=root<br>Group=root<br><span class="hljs-meta">#</span><span class="bash"> 这里使用root用户启动方便jsvc监听特权端口</span><br><span class="hljs-meta">#</span><span class="bash"> 后面可以在jsvc参数中使用-user降权到tomcat用户</span><br><br>PIDFile=/var/run/tomcat.pid<br><br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br><br>ExecStart=/home/tomcat9/bin/jsvc \<br>        -user tomcat \<br>        -nodetach \<br>        -java-home $&#123;JAVA_HOME&#125; \<br>        -pidfile $&#123;CATALINA_BASE&#125;/tomcat.pid \<br>        -classpath $&#123;CATALINA_HOME&#125;/bin/bootstrap.jar:$&#123;CATALINA_HOME&#125;/bin/tomcat-juli.jar \<br>        -outfile $&#123;CATALINA_BASE&#125;/logs/catalina.out \<br>        -errfile $&#123;CATALINA_BASE&#125;/logs/catalina.err \<br>        -Dcatalina.home=$&#123;CATALINA_HOME&#125; \<br>        -Dcatalina.base=$&#123;CATALINA_BASE&#125; \<br>        -Djava.io.tmpdir=$&#123;CATALINA_TMPDIR&#125; \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        -Djava.util.logging.config.file=$&#123;CATALINA_BASE&#125;/conf/logging.properties \<br>        org.apache.catalina.startup.Bootstrap<br><br>ExecStop=/home/tomcat9/bin/jsvc \<br>        -stop \<br>        -classpath $&#123;CLASSPATH&#125; \<br>        -Dcatalina.base=$&#123;CATALINA_BASE&#125; \<br>        -Dcatalina.home=$&#123;CATALINA_HOME&#125; \<br>        -pidfile $&#123;CATALINA_BASE&#125;/tomcat.pid \<br>        -Djava.io.tmpdir=$&#123;CATALINA_TMPDIR&#125; \<br>        -Djava.util.logging.config.file=$&#123;CATALINA_BASE&#125;/conf/logging.properties \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        org.apache.catalina.startup.Bootstrap<br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：ExecStart和ExecStop两个命令中的执行文件路径需要使用绝对路径</p></blockquote><p><img src="https://resource.tinychen.com/blog/20200327/xePF5uyykIOM.png"></p><h1 id="4、Tomcat的工作模式"><a href="#4、Tomcat的工作模式" class="headerlink" title="4、Tomcat的工作模式"></a>4、Tomcat的工作模式</h1><p>Tomcat不仅可以单独运行，还可以与其他的Web服务器集成，作为其他Web服务器的进程内或进程外的servlet容器。<strong>集成的意义在于：对于不支持运行Java Servlet的其他Web服务器，可通过集成Tomcat来提供运行Servlet的功能。</strong></p><p><strong>Tomcat有三种工作模式：</strong></p><ul><li><p><strong>第一种：Tomcat在一个Java虚拟机进程中独立运行，此时客户端直接和tomcat通信。</strong>Tomcat可看作是能运行Servlet的独立Web服务器。Servlet容器组件作为Web服务器中的一部分而存在。<strong>这是Tomcat的默认工作模式。</strong></p><p><img src="https://resource.tinychen.com/blog/20200401/FldbzwEHSxcO.png"></p></li></ul><ul><li><p><strong>第二种：Tomcat运行在其他Web服务器的进程中，Tomcat不直接和客户端通信，仅仅为其他Web服务器处理客户端访问Servlet的请求。</strong>进程内的Servlet容器对于单进程、多线程的Web服务器非常合适，<strong>可以提供较高的运行速度，但缺乏伸缩性。</strong></p><p>在这种模式下，Tomcat分为Web服务器插件和Servlet容器组件两部分。如下图所示，Web服务器插件在其他Web服务器进程的内部地址空间启动一个Java虚拟机，Servlet容器组件在此Java虚拟机中运行。如有客户端发出调用Servlet的请求，Web服务器插件获得对此请求的控制并将它转发<strong>（使用JNI通信机制）</strong>给Servlet容器组件。</p><p><img src="https://resource.tinychen.com/blog/20200401/Qyp6hqzGjiDW.png"></p></li></ul><blockquote><p>JNI（Java Native Interface）指的是Java本地调用接口，通过这一接口，Java程序可以和采用其他语言编写的本地程序进行通信。</p></blockquote><ul><li><p><strong>第三种：Tomcat在一个Java虚拟机进程中独立运行，但是它不直接和客户端通信，仅仅为与它集成的其他Web服务器处理客户端访问Servlet的请求。</strong></p><p>在这种模式下，Tomcat分为Web服务器插件和Servlet容器组件两部分。如下图所示，Web服务器插件在其他Web服务器的<strong>外部地址空间</strong>启动一个JVM进程，Servlet容器组件在此JVM中运行。如有客户端发出调用Servlet的请求，Web服务器插件获得对此请求的控制并将它转发（采用IPC通信机制）给Servlet容器。</p><p><strong>进程外Servlet容器对客户请求的响应速度不如进程内Servlet容器，但进程外容器具有更好的伸缩性和稳定性。</strong></p><p><img src="https://resource.tinychen.com/image-20200401104831691.png"></p><blockquote><p>IPC（Inter-Process Communication，进程间通信）是两个进程之间进行通信的一种机制。</p></blockquote></li></ul><h1 id="5、Tomcat的整体架构"><a href="#5、Tomcat的整体架构" class="headerlink" title="5、Tomcat的整体架构"></a>5、Tomcat的整体架构</h1><p>我们先从tomcat的源码目录来分析一下tomcat的整体架构，前面我们配置jsvc运行tomcat的时候，我们知道tomcat中启动运行的最主要的类是<code>org.apache.catalina.startup.Bootstrap</code>，那么我们在tomcat的源码中的java目录下的org目录的apache目录可以找到主要的源码的相对应的类。</p><p><img src="https://resource.tinychen.com/blog/20200401/VjgcMc38VXw4.png"></p><p>图中的目录如果画成架构图，可以这样表示：</p><p><img src="https://resource.tinychen.com/20200401115202.png"></p><p>Tomcat 本质上就是一款Servlet 容器，因此<code>catalina</code>才是Tomcat的核心 ，其他模块都是为<code>catalina</code>提供支撑的。 </p><ul><li><code>coyote</code>模块主要负责链接通信，Tomcat作为http服务器，需要从socket中获得HTTP数据流；而Tomcat作为容器，只能处理封装好的<code>org.apache.coyote.Request</code>，因此从socket到Request之间的转换就交给<code>coyote</code>来负责了。因此，连接socket和容器之间的重任就交给了Coyote。简单说就是coyote来处理底层的socket，并将http请求、响应等字节流层面的东西，包装成Request和Response两个类（这两个类是tomcat定义的，而非servlet中的ServletRequest和ServletResponse），供容器使用；同时，为了能让我们编写的servlet能够得到ServletRequest，tomcat使用了facade模式，将比较底层、低级的Request包装成为ServletRequest（这一过程通常发生在Wrapper容器一级）</li></ul><p><img src="https://resource.tinychen.com/20200402111850.png"></p><ul><li><p><code>jasper</code>模块提供JSP引擎，在jsp文件被初次访问的时候做出响应，将jsp页面翻译成servlet请求，然后调用java编译器对servlet进行编译得到class文件，再调用jvm来执行class文件生成应答，最后把应答发送回客户端。</p></li><li><p><code>el</code>全名为Expression Language，也叫<a href="https://en.wikipedia.org/wiki/Unified_Expression_Language">JUEL</a>，主要在Java Web应用中用于将表达式嵌入到web页面</p></li><li><p><code>naming</code>提供JNDI 服务(Java Naming and Directory Interface,Java命名和目录接口)，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</p></li><li><p><code>juli</code>提供日志服务，JDK 所提供的默认 <code>java.util.logging</code> 实现功能太过局限，不能实现针对每一应用进行日志记录，因为配置是针对VM的。而<code>juli</code>通过自定义的 <code>LogManager</code> 能分辨运行在 Tomcat 上的不同 Web 应用（以及它们所用的不同的类加载器），还能针对每一应用进行私有的日志配置。</p></li></ul><h1 id="6、Tomcat的容器架构"><a href="#6、Tomcat的容器架构" class="headerlink" title="6、Tomcat的容器架构"></a>6、Tomcat的容器架构</h1><p>Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器是父子关系， Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。</p><p><img src="https://resource.tinychen.com/20200403155129.png"></p><p>如上图所示，我们可以看到：</p><ul><li>一台机器上可以通过设置不同的CATALINA_BASE来运行多个tomcat实例，即可以运行<strong>多个</strong>server</li><li>一个server中只有<strong>一个</strong>Engine，而Engine就是实现了servlet规范的引擎，这里就是Catalina</li><li>一个engine中可以包含<strong>多个</strong>host，即和apache、nginx等服务器相同，可以配置多个virtual host站点</li><li>一个host中可以包含<strong>多个</strong>context，即可以包含多个web应用</li><li>一个warpper表示<strong>一个</strong>Servlet，wrapper 作为容器中的最底层，不能包含子容器</li></ul><p>Tomcat使用组合模式来管理这些容器，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象（最底层的Wrapper）和组合容器对象（Context、Host或者Engine）的使用具有一致性。</p><p>Tomcat 服务器的配置主要集中于 <code>tomcat/conf</code> 下的 <code>catalina.policy</code>、 <code>catalina.properties</code>、<code>context.xml</code>、<code>server.xml</code>、<code>tomcat-users.xml</code>、<code>web.xml</code> 文件。</p><p>Tomcat的这一设计思想在其配置文件<code>server.xml</code>中得到了很好的诠释，<code>server.xml</code> 是tomcat 服务器的核心配置文件，包含了Tomcat的 Servlet 容器 （Catalina）的所有配置。下面我们先来了解一下<code>server.xml</code>文件中的一些主要配置。</p><h1 id="7、Tomcat的connector简介"><a href="#7、Tomcat的connector简介" class="headerlink" title="7、Tomcat的connector简介"></a>7、Tomcat的connector简介</h1><h2 id="7-1-connector的工作原理"><a href="#7-1-connector的工作原理" class="headerlink" title="7.1 connector的工作原理"></a>7.1 connector的工作原理</h2><p>这里我们说的Tomcat中三种不同的I/O模型主要指的是其连接器（connector）的工作模型，对于tomcat而言，连接器一般指的是coyote，其工作原理大致如下图所示：</p><p><img src="https://resource.tinychen.com/blog/20200409/Yt4hJSPQcMJj.png"></p><p>连接器中的各个组件的作用如下： </p><h3 id="7-1-1-EndPoint"><a href="#7-1-1-EndPoint" class="headerlink" title="7.1.1 EndPoint"></a>7.1.1 EndPoint</h3><p><code>EndPoint</code>即Coyote通信端点，是通信监听的接口，是具体Socket接收和发送处理器，是对传输层（四层）的抽象，因此<code>EndPoint</code>用来实现TCP/IP协议的。Tomcat 并没有<code>EndPoint</code>接口，而是提供了一个抽象类<code>AbstractEndpoint</code>， 里面定义了两个内部类：<code>Acceptor</code>和<code>SocketProcessor</code>。<code>Acceptor</code>用于监听Socket连接请求。 <code>SocketProcessor</code>用于处理接收到的Socket请求，它实现<code>Runnable</code>接口，在<code>Run</code>方法里 调用协议处理组件<code>Processor</code>进行处理。为了提高处理能力，<code>SocketProcessor</code>被提交到线程池来执行，而这个线程池叫作执行器（<strong>Executor</strong>)。</p><h3 id="7-1-2-Processor"><a href="#7-1-2-Processor" class="headerlink" title="7.1.2 Processor"></a>7.1.2 Processor</h3><p><strong><code>Processor</code>是coyote的协议处理接口 。</strong>如果说EndPoint是用来实现TCP/IP协议的，那么 <code>Processor</code>用来实现HTTP协议，<code>Processor</code>接收来自EndPoint的Socket，读取字节流解析成Tomcat的<code>Request</code>和<code>Response</code>对象，并通过<code>Adapter</code>将其提交到容器处理， <code>Processor</code>是对应用层（七层）协议的抽象。</p><h3 id="7-1-3-ProtocolHandler"><a href="#7-1-3-ProtocolHandler" class="headerlink" title="7.1.3 ProtocolHandler"></a>7.1.3 ProtocolHandler</h3><p><strong><code>ProtocolHandler</code>是Coyote的协议接口，通过Endpoint和Processor ，实现对具体协议（HTTP或AJP）的处理。</strong>Tomcat 按照协议和I/O 提供了6个实现类 ： <code>AjpNioProtocol</code> ， <code>AjpAprProtocol</code>， <code>AjpNio2Protocol</code> ， <code>Http11NioProtocol</code> ，<code>Http11Nio2Protocol</code> ， <code>Http11AprProtocol</code>。我们在配置<code>tomcat/conf/server.xml</code> 中的<code>connecter</code>块时 ， 至少要指定具体的<code>ProtocolHandler</code> , 当然也可以指定协议名称（如HTTP/1.1）。</p><h3 id="7-1-4-Adapter"><a href="#7-1-4-Adapter" class="headerlink" title="7.1.4 Adapter"></a>7.1.4 Adapter</h3><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来存放这些请求信息。<code>ProtocolHandler</code>接口负责解析请求并生成Tomcat的<code>Request</code>类。 但是这个Request对象不是标准的ServletRequest，不能用来作为参数来调用容器。因此需要引入<code>CoyoteAdapter</code>，连接器调用<code>CoyoteAdapter</code>的<code>Sevice</code>方法，传入Tomcat的<code>Request</code>对象，CoyoteAdapter将<code>Request</code>转成<code>ServletRequest</code>，再调用容器的Service方法。</p><h2 id="7-2-connector的几个重要参数"><a href="#7-2-connector的几个重要参数" class="headerlink" title="7.2 connector的几个重要参数"></a>7.2 connector的几个重要参数</h2><h3 id="7-2-1-connectionTimeout"><a href="#7-2-1-connectionTimeout" class="headerlink" title="7.2.1 connectionTimeout"></a>7.2.1 connectionTimeout</h3><blockquote><p>The number of milliseconds this <strong>Connector</strong> will wait, after accepting a connection, for the request URI line to be presented. Use a value of -1 to indicate no (i.e. infinite) timeout. The default value is 60000 (i.e. 60 seconds) but note that the standard server.xml that ships with Tomcat sets this to 20000 (i.e. 20 seconds). Unless <strong>disableUploadTimeout</strong> is set to <code>false</code>, this timeout will also be used when reading the request body (if any).</p></blockquote><p>在connector和请求的客户端建立连接之后开始计时，当超过该值的时候就会超时，然后断开连接。使用值-1表示无超时，默认值为60000（即60秒），但Tomcat中的server.xml将此值设置为20000（即20秒）。</p><p>除非disableUploadTimeout设置为false，否则在读取请求正文（如果有）时也会使用此超时。</p><h3 id="7-2-2-maxThreads"><a href="#7-2-2-maxThreads" class="headerlink" title="7.2.2 maxThreads"></a>7.2.2 maxThreads</h3><blockquote><p>The maximum number of request processing threads to be created by this <strong>Connector</strong>, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as <code>-1</code> to make clear that it is not used.</p></blockquote><p>最大线程数，大并发请求时，tomcat能创建来处理请求的最大线程数，超过则放入请求队列中进行排队，默认值为200。</p><h3 id="7-2-3-acceptCount"><a href="#7-2-3-acceptCount" class="headerlink" title="7.2.3 acceptCount"></a>7.2.3 acceptCount</h3><blockquote><p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p></blockquote><p>当最大线程数（maxThreads）被使用完时，可以放入请求队列排队个数，超过这个数返回connection refused（请求被拒绝），默认值为100；</p><h3 id="7-2-4-maxConnections"><a href="#7-2-4-maxConnections" class="headerlink" title="7.2.4 maxConnections"></a>7.2.4 maxConnections</h3><blockquote><p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below <strong>maxConnections</strong> at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the <code>acceptCount</code> setting. The default value is <code>8192</code>.For NIO/NIO2 only, setting the value to -1, will disable the maxConnections feature and connections will not be counted.</p></blockquote><p>Tomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。默认值为8192。 </p><p>对于NIO / NIO2，将该值设置为-1将禁用maxConnections功能，并且不计算连接数。</p><h3 id="7-2-5-图解"><a href="#7-2-5-图解" class="headerlink" title="7.2.5 图解"></a>7.2.5 图解</h3><p>按照被处理的先后顺序我们可以把tomcat中的线程队列和以上四个参数使用该图进行表示</p><p><img src="https://resource.tinychen.com/blog/20200409/Ic6Wtt6KkKeV.png"></p><ul><li>当<code>maxThreads + acceptCount &lt; maxConnections</code>的时候将不会有线程被阻塞</li><li>当阻塞的线程时间超过connectionTimeout还没得到返回值将返回连接超时</li></ul><h1 id="8、常见的服务器I-O模型"><a href="#8、常见的服务器I-O模型" class="headerlink" title="8、常见的服务器I/O模型"></a>8、常见的服务器I/O模型</h1><p>在开始了解Tomcat的I/O模型之前，我们需要先对服务器中常见的I/O模型进行简单介绍。</p><h2 id="8-1-阻塞I-O处理模型"><a href="#8-1-阻塞I-O处理模型" class="headerlink" title="8.1 阻塞I/O处理模型"></a>8.1 阻塞I/O处理模型</h2><h3 id="8-1-1-单线程阻塞I-O模型"><a href="#8-1-1-单线程阻塞I-O模型" class="headerlink" title="8.1.1 单线程阻塞I/O模型"></a>8.1.1 单线程阻塞I/O模型</h3><p>单线程阻塞I/O模型是最简单的一种服务器I/O模型，单线程即同时只能处理一个客户端的请求，阻塞即该线程会一直等待，直到处理完成为止。对于多个客户端访问，必须要等到前一个客户端访问结束才能进行下一个访问的处理，请求一个一个排队，只提供一问一答服务。</p><p><img src="https://resource.tinychen.com/20200401153247.png"></p><p>如上图所示：这是一个同步阻塞服务器响应客户端访问的时间节点图。</p><ul><li>首先，服务器必须初始化一个套接字服务器，并绑定某个端口号并使之监听客户端的访问</li><li>接着，客户端1调用服务器的服务，服务器接收到请求后对其进行处理，处理完后写数据回客户端1，整个过程都是在一个线程里面完成的</li><li>最后，处理客户端2的请求并写数据回客户端2，期间就算客户端2在服务器处理完客户端1之前就进行请求，也要等服务器对客户端1响应完后才会对客户端2进行响应处理</li></ul><p><strong>这种模型的特点在于单线程和阻塞I/O。</strong>单线程即服务器端只有一个线程处理客户端的所有请求，客户端连接与服务器端的处理线程比是<code>n:1</code>，它无法同时处理多个连接，只能串行处理连接。而阻塞I/O是指服务器在读写数据时是阻塞的，读取客户端数据时要等待客户端发送数据并且把操作系统内核复制到用户进程中，这时才解除阻塞状态。写数据回客户端时要等待用户进程将数据写入内核并发送到客户端后才解除阻塞状态。<strong>这种阻塞带来了一个问题，服务器必须要等到客户端成功接收才能继续往下处理另外一个客户端的请求，在此期间线程将无法响应任何客户端请求。</strong></p><p>该模型的特点：它是最简单的服务器模型，整个运行过程都只有一个线程，只能支持同时处理一个客户端的请求(如果有多个客户端访问，就必须排队等待)，<strong>服务器系统资源消耗较小，但并发能力低，容错能力差。</strong></p><h3 id="8-1-2-多线程阻塞I-O模型"><a href="#8-1-2-多线程阻塞I-O模型" class="headerlink" title="8.1.2 多线程阻塞I/O模型"></a>8.1.2 多线程阻塞I/O模型</h3><p>多线程阻塞I/O模型在单线程阻塞I/O模型的基础上对其进行改进，加入多线程，提高并发能力，使其能够同时对多个客户端进行响应，多线程的核心就是利用多线程机制为每个客户端分配一个线程。</p><p><img src="https://resource.tinychen.com/image-20200401154934307.png"></p><p>如上图所示，服务器端开始监听客户端的访问，假如有两个客户端同时发送请求过来，服务器端在接收到客户端请求后分别创建两个线程对它们进行处理，每条线程负责一个客户端连接，直到响应完成。<strong>期间两个线程并发地为各自对应的客户端处理请求</strong>，包括读取客户端数据、处理客户端数据、写数据回客户端等操作。</p><p><strong>这种模型的I/O操作也是阻塞的</strong>，因为每个线程执行到读取或写入操作时都将进入阻塞状态，直到读取到客户端的数据或数据成功写入客户端后才解除阻塞状态。尽管I/O操作阻塞，但这种模式比单线程处理的性能明显高了，它不用等到第一个请求处理完才处理第二个，而是并发地处理客户端请求，客户端连接与服务器端处理线程的比例是<code>1:1</code>。</p><p>多线程阻塞I/O模型的特点：支持对多个客户端并发响应，处理能力得到大幅提高，有较大的并发量，但服务器系统资源消耗量较大，而且如果线程数过多，多线程之间会产生较大的线程切换成本，同时拥有较复杂的结构。</p><h2 id="8-2-非阻塞I-O模型"><a href="#8-2-非阻塞I-O模型" class="headerlink" title="8.2 非阻塞I/O模型"></a>8.2 非阻塞I/O模型</h2><h3 id="8-2-1-非阻塞情况下的事件检测"><a href="#8-2-1-非阻塞情况下的事件检测" class="headerlink" title="8.2.1 非阻塞情况下的事件检测"></a>8.2.1 非阻塞情况下的事件检测</h3><p>在探讨单线程非阻塞I/O模型前必须要先了解非阻塞情况下套接字事件的检测机制，因为对于单线程非阻塞模型最重要的事情是检测哪些连接有感兴趣的事件发生。一般会有如下三种检测方式。</p><blockquote><p>此处“有感兴趣的事件发生”指的是需要进行读写数据等操作。</p></blockquote><h4 id="1-应用程序遍历套接字的事件检测"><a href="#1-应用程序遍历套接字的事件检测" class="headerlink" title="(1)应用程序遍历套接字的事件检测"></a>(1)应用程序遍历套接字的事件检测</h4><p>当多个客户端向服务器请求时，服务器端会保存一个套接字连接列表中，应用层线程对套接字列表轮询尝试读取或写入。如果成功则进行处理，如果失败则下次继续。这样不管有多少个套接字连接，它们都可以被一个线程管理，这很好地利用了阻塞的时间，处理能力得到提升。</p><p>但这种模型需要在应用程序中遍历所有的套接字列表，同时需要处理数据的拼接，连接空闲时可能也会占用较多CPU资源，不适合实际使用。</p><h4 id="2-内核遍历套接字的事件检测"><a href="#2-内核遍历套接字的事件检测" class="headerlink" title="(2)内核遍历套接字的事件检测"></a>(2)内核遍历套接字的事件检测</h4><p>这种方式将套接字的遍历工作交给了操作系统内核，把对套接字遍历的结果组织成一系列的事件列表并返回应用层处理。对于应用层，它们需要处理的对象就是这些事件，这是一种事件驱动的非阻塞方式。</p><p>服务器端有多个客户端连接，应用层向内核请求读写事件列表。内核遍历所有套接字并生成对应的可读列表readList和可写列表writeList。readList和writeList则标明了每个套接字是否可读/可写。应用层遍历读写事件列表readList和writeList，做相应的读写操作。</p><p>内核遍历套接字时已经不用在应用层对所有套接字进行遍历，将遍历工作下移到内核层，这种方式有助于提高检测效率。<strong>然而，它需要将所有连接的可读事件列表和可写事件列表传到应用层，假如套接字连接数量变大，列表从内核复制到应用层也是不小的开销。</strong>另外，当活跃连接较少时，<strong>内核与应用层之间存在很多无效的数据副本</strong>，因为它将活跃和不活跃的连接状态都复制到应用层中。</p><h4 id="3-内核基于回调的事件检测"><a href="#3-内核基于回调的事件检测" class="headerlink" title="(3)内核基于回调的事件检测"></a>(3)内核基于回调的事件检测</h4><p>通过遍历的方式检测套接字是否可读可写是一种效率比较低的方式，不管是在应用层中遍历还是在内核中遍历。所以需要另外一种机制来优化遍历的方式，那就是<strong>回调函数</strong>。内核中的套接字都对应一个回调函数，当客户端往套接字发送数据时，内核从网卡接收数据后就会调用回调函数，在回调函数中维护事件列表，应用层获取此事件列表即可得到所有感兴趣的事件。</p><p><strong>内核基于回调的事件检测方式有两种</strong></p><h5 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a><strong>方式一：</strong></h5><p>第一种是用<code>可读列表readList</code>和<code>可写列表writeList</code>标记读写事件，<strong>套接字的数量与<code>readList</code>和<code>writeList</code>两个列表的长度一样</strong>。</p><ul><li><p>服务器端有多个客户端套接字连接</p></li><li><p>当客户端发送数据过来时，内核从网卡复制数据成功后调用回调函数将<code>readList/writeList</code>对应的元素标记为可读/可写</p></li><li><p>应用层发送请求读、写事件列表，内核返回包含了事件标识的<code>readList</code>和<code>writeList</code>事件列表，此时返回的两个列表内容大致如下</p><table><thead><tr><th align="center">套接字</th><th align="center">readList</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center">1</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table><table><thead><tr><th align="center">套接字</th><th align="center">writeList</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">0</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table></li><li><p>应用程序接着分表遍历读事件列表readList和写事件列表writeList，对置为1的元素对应的套接字进行读或写操作</p></li><li><p>这样就避免了遍历套接字的操作，但仍然有大量无用的数据(状态为0的元素)从内核复制到应用层中。从上面的表格中我们可以看到实际上有用的数据只是在List中被标记为1的数据（意味着可读或可写），其他的数据并没有传送回去的必要。</p></li></ul><h5 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a><strong>方式二：</strong></h5><ul><li><p>服务器端有多个客户端套接字连接。</p></li><li><p>应用层告诉内核每个套接字感兴趣的事件，这时候直接发送一个列表给内核</p><table><thead><tr><th align="center">套接字</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">read</td></tr><tr><td align="center">2</td><td align="center">write</td></tr><tr><td align="center">3</td><td align="center">read</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table></li><li><p>接着，当客户端发送数据过来时，对应会有一个回调函数，内核从网卡复制数据成功后即调回调函数将套接字1作为可读事件event1加入到事件列表，同样地，内核发现网卡可写时就将套接字2作为可写事件event2添加到事件列表中</p></li><li><p>应用层向内核请求读、写事件列表，内核将包含了event1和event2的事件列表返回应用层，此时的列表内容大致如下：</p><table><thead><tr><th align="center">套接字</th><th align="center">可以进行的操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">read</td></tr><tr><td align="center">2</td><td align="center">write</td></tr></tbody></table><p>注意这时不能进行读写操作的套接字是不会被记录到列表中返回给应用层的，这就大大地减少了数据的传输量。</p></li><li><p>应用层通过遍历事件列表得知哪些套接字可以进行哪些操作，然后执行对应的操作。</p></li></ul><p>上面两种方式由操作系统内核维护客户端的所有连接并通过回调函数不断更新事件列表，而应用层线程只要遍历这些事件列表即可知道可读取或可写入的连接，进而对这些连接进行读写操作，极大提高了检测效率，自然处理能力也更强。</p><h3 id="8-2-2-单线程非阻塞I-O模型"><a href="#8-2-2-单线程非阻塞I-O模型" class="headerlink" title="8.2.2 单线程非阻塞I/O模型"></a>8.2.2 单线程非阻塞I/O模型</h3><p>单线程非阻塞I/O模型最重要的一个特点是，在调用读取或写入接口后立即返回，而不会进入阻塞状态。虽然只有一个线程，但是它通过把非阻塞读写操作与上面几种检测机制配合就可以实现对多个连接的及时处理，而不会因为某个连接的阻塞操作导致其他连接无法处理。在客户端连接大多数都保持活跃的情况下，这个线程会一直循环处理这些连接，它很好地利用了阻塞的时间，大大提高了这个线程的执行效率。</p><p>单线程非阻塞I/O模型的主要优势体现在对多个连接的管理，一般在同时需要处理多个连接的发场景中会使用非阻塞NIO模式，此模型下只通过一个线程去维护和处理连接，这样大大提高了机器的效率。一般服务器端才会使用NIO模式，而对于客户端，出于方便及习惯，可使用阻塞模式的套接字进行通信。</p><h3 id="8-2-3-多线程非阻塞I-O模型"><a href="#8-2-3-多线程非阻塞I-O模型" class="headerlink" title="8.2.3 多线程非阻塞I/O模型"></a>8.2.3 多线程非阻塞I/O模型</h3><p>在多核的机器上可以通过多线程继续提高机器效率。最朴实、最自然的做法就是将客户端连接按组分配给若干线程，每个线程负责处理对应组内的连接。比如有4个客户端访问服务器，服务器将套接字1和套接字2交由线程1管理，而线程2则管理套接字3和套接字4，通过事件检测及非阻塞读写就可以让每个线程都能高效处理。</p><p><strong>多线程非阻塞I/O模式让服务器端处理能力得到很大提高，它充分利用机器的CPU，适合用于处理高并发的场景，但它也让程序更复杂，更容易出现问题（死锁、数据不一致等经典并发问题）。</strong></p><h3 id="8-2-4-Reactor模式"><a href="#8-2-4-Reactor模式" class="headerlink" title="8.2.4 Reactor模式"></a>8.2.4 Reactor模式</h3><p>最经典的多线程非阻塞I/O模型方式是Reactor模式。首先看单线程下的Reactor，Reactor将服务器端的整个处理过程分成若干个事件，例如分为接收事件、读事件、写事件、执行事件等。Reactor通过事件检测机制将这些事件分发给不同处理器去处理。在整个过程中只要有待处理的事件存在，即可以让Reactor线程不断往下执行，而不会阻塞在某处，所以处理效率很高。</p><p><img src="https://resource.tinychen.com/20200402115511.png"></p><p><strong>基于单线程Reactor模型，根据实际使用场景，把它改进成多线程模式。常见的有两种方式：一种是在耗时的process处理器中引入多线程，如使用线程池；另一种是直接使用多个Reactor实例，每个Reactor实例对应一个线程。</strong></p><p>Reactor模式的一种改进方式如下图所示。其整体结构基本上与单线程的Reactor类似，只是引入了一个线程池。由于对连接的接收、对数据的读取和对数据的写入等操作基本上都耗时较少，因此把它们都放到Reactor线程中处理。然而，对于逻辑处理可能比较耗时的工作，可以在process处理器中引入线程池，process处理器自己不执行任务，而是交给线程池，从而在Reactor线程中避免了耗时的操作。将耗时的操作转移到线程池中后，尽管Reactor只有一个线程，它也能保证Reactor的高效。</p><p><img src="https://resource.tinychen.com/20200402115553.png"></p><p>Reactor模式的另一种改进方式如下图所示。其中有多个Reactor实例，每个Reactor实例对应一个线程。因为接收事件是相对于服务器端而言的，所以客户端的连接接收工作统一由一个accept处理器负责，accept处理器会将接收的客户端连接均匀分配给所有Reactor实例，每个Reactor实例负责处理分配到该Reactor上的客户端连接，包括连接的读数据、写数据和逻辑处理。这就是多Reactor实例的原理。</p><p><img src="https://resource.tinychen.com/20200402115623.png"></p><h1 id="9、Tomcat的三种主要I-O模型"><a href="#9、Tomcat的三种主要I-O模型" class="headerlink" title="9、Tomcat的三种主要I/O模型"></a>9、Tomcat的三种主要I/O模型</h1><p>Tomcat支持的I/O模型如下表（自8.5/9.0 版本起，Tomcat移除了对BIO的支持），在 8.0 之前 ， Tomcat 默认采用的I/O方式为 BIO ， 之后改为 NIO。 无论 NIO、NIO2 还是 APR， 在性能方面均优于以往的BIO。</p><table><thead><tr><th>IO模型</th><th>描述</th></tr></thead><tbody><tr><td>NIO</td><td>同步非阻塞I/O，采用Java NIO类库实现</td></tr><tr><td>NIO2</td><td>异步非阻塞I/O，采用JDK 7最新的NIO2类库实现</td></tr><tr><td>APR</td><td>采用Apache可移植运行库实现，是C/C++编写的本地库，需要单独安装APR库</td></tr></tbody></table><p>在开始之前，我们先看一下<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/http.html">tomcat官网</a>给出的这三种I/O模型的工作参数的一个对比图：</p><p><img src="https://resource.tinychen.com/blog/20200409/l0bTxdP2juMk.png"></p><p>这里我们可以看到一般说的NIO、NIO2和APR使用的是非阻塞方式指的就是在<strong>读取请求报头</strong>和<strong>等待下一个请求</strong>的时候是使用的<strong>非阻塞方式。</strong></p><p><strong>Tomcat的NIO是基于I/O复用（同步I/O）来实现的，而NIO2是使用的异步I/O。</strong>参考经典书籍《UNIX网络编程 卷1 套接字联网API》，两者的主要原理如下：</p><ul><li><p>I/O复用</p><p>I/O复用（I/O multiplexing）可以调用<code>select</code>或<code>poll</code>，阻塞在这两个系统调用中的某一个之上，而不是阻塞在真正的I/O系统调用上。进程阻塞于<code>select</code>调用，等待数据报套接字变为可读。当<code>select</code>返回套接字可读这一条件时，进程调用<code>recvfrom</code>把所读数据报复制到应用进程缓冲区，尽管这里需要使用<code>select</code>和<code>recvfrom</code>两个系统调用，但是使用<code>select</code>的可以等待多个描述符就绪，即可以等待多个请求。</p><p><img src="https://resource.tinychen.com/blog/20200409/tKX17eQCJnzT.png"></p></li><li><p>异步IO</p><p>异步I/O（asynchronous I/O）的工作机制是：告知内核启动某个操作，并让内核在整个操作（包括将数据从内核复制到应用程序的缓冲区）完成后通知应用程序。需要注意的是：异步I/O模型是由内核通知应用进程I/O操作何时完成。</p><p><img src="https://resource.tinychen.com/blog/20200409/cxhjDzPYM0a4.png"></p></li></ul><p>最后我们可以把上面的过程结合剩下没有提到的三种UNIX系统中的IO模型进行对比得到下图：</p><p><img src="https://resource.tinychen.com/blog/20200409/YDYCG1ChUYRp.png"></p><h2 id="9-1-NIO（New-I-O-APIs、同步非阻塞）"><a href="#9-1-NIO（New-I-O-APIs、同步非阻塞）" class="headerlink" title="9.1 NIO（New I/O APIs、同步非阻塞）"></a>9.1 NIO（New I/O APIs、同步非阻塞）</h2><p><strong>Tomcat中的NIO模型是使用的JAVA的NIO类库，其内部的IO实现是同步的（也就是在用户态和内核态之间的数据交换上是同步机制），采用基于selector实现的异步事件驱动机制（这里的异步指的是selector这个实现模型是使用的异步机制）。</strong>而对于Java来说，非阻塞I/O的实现完全是基于操作系统内核的非阻塞I/O，它将操作系统的非阻塞I/O的差异屏蔽并提供统一的API，让我们不必关心操作系统。JDK会帮我们选择非阻塞I/O的实现方式。</p><blockquote><p>这里需要提一下同步异步和阻塞非阻塞的概念：</p><p><strong>同步和异步关注的是消息通信机制</strong>，同步异步指的是应用程序<strong>发起的调用请求</strong>和<strong>获得的返回值</strong>是否一起返回，如果一起返回就是同步，否则就是异步，异步可以通过回调函数等方式实现。</p><p><strong>阻塞和非阻塞关注的是程序在等待调用结果时的状态</strong>，应用程序发起调用请求之后不能干别的事情直到请求处理完成了就是阻塞，否则就是非阻塞。</p><p><strong>所以我个人认为，对于阻塞I/O谈同步异步是没有太大意义的，因为此时进程已经阻塞，想要去干别的事情必须得等请求处理完，而请求处理完必然会得到返回值。</strong></p><p>上面我们提到得内核基于回调得事件检测方式二就是典型的异步非阻塞I/O模型。</p></blockquote><h2 id="9-2-NIO2（New-I-O-APIs-2、异步非阻塞、AIO）"><a href="#9-2-NIO2（New-I-O-APIs-2、异步非阻塞、AIO）" class="headerlink" title="9.2 NIO2（New I/O APIs 2、异步非阻塞、AIO）"></a>9.2 NIO2（New I/O APIs 2、异步非阻塞、AIO）</h2><p>NIO2和前者相比的最大不同就在于引入了异步通道来实现异步IO操作，因此也叫AIO（Asynchronous I/O）。NIO.2 的异步通道 APIs 提供方便的、平台独立的执行异步操作的标准方法。这使得应用程序开发人员能够以更清晰的方式来编写程序，而不必定义自己的 Java 线程，此外，还可通过使用底层 OS 所支持的异步功能来提高性能。如同其他 Java API 一样，API 可利用的 OS 自有异步功能的数量取决于其对该平台的支持程度。</p><p>异步通道提供支持连接、读取、以及写入之类非锁定操作的连接，并提供对已启动操作的控制机制。Java 7 中用于 Java Platform（NIO.2）的 More New I/O APIs，通过在 <code>java.nio.channels</code> 包中增加四个异步通道类，从而增强了 Java 1.4 中的 New I/O APIs（NIO），这些类在风格上与 NIO 通道 API 很相似。他们共享相同的方法与参数结构体，并且大多数对于 NIO 通道类可用的参数，对于新的异步版本仍然可用。主要区别在于新通道可使一些操作异步执行。</p><p>异步通道 API 提供两种对已启动异步操作的监测与控制机制。第一种是通过返回一个 <code>java.util.concurrent.Future</code> 对象来实现，它将会建模一个挂起操作，并可用于查询其状态以及获取结果。第二种是通过传递给操作一个新类的对象，<code>java.nio.channels.CompletionHandler</code>，来完成，它会定义在操作完毕后所执行的处理程序方法。每个异步通道类为每个操作定义 API 副本，这样可采用任一机制。</p><h2 id="9-3-APR"><a href="#9-3-APR" class="headerlink" title="9.3 APR"></a>9.3 APR</h2><p><strong>Apache可移植运行时（Apache Portable Runtime，APR）</strong>是Apache HTTP服务器的支持库，最初，APR是作为Apache HTTP服务器的一部分而存在的，后来成为一个单独的项目。其他的应用程序可以使用APR来实现平台无关性（跨平台）。APR提供了一组映射到下层操作系统的API，如果操作系统不支持某个特定的功能，APR将提供一个模拟的实现。这样程序员使用APR编写真正可在不同平台上移植的程序。</p><h2 id="9-4-Tomcat配置APR"><a href="#9-4-Tomcat配置APR" class="headerlink" title="9.4 Tomcat配置APR"></a>9.4 Tomcat配置APR</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 首先使用yum来安装apr</span><br>yum install apr apr-devel<br><br><span class="hljs-comment"># 进入tomcat目录下对tomcat-native进行解压</span><br>cd <span class="hljs-regexp">/home/</span>tomcat9<span class="hljs-regexp">/bin/</span><br>tar -zxvf tomcat-native.tar.gz <br>cd tomcat-native-<span class="hljs-number">1.2</span>.<span class="hljs-number">23</span>-src<span class="hljs-regexp">/native/</span><br><span class="hljs-comment"># 编译安装</span><br>./configure <br>make<br>make install<br></code></pre></div></td></tr></table></figure><p>顺利安装完成后会显示apr的lib库路径，一般都是<code>/usr/local/apr/lib</code></p><p><img src="https://resource.tinychen.com/20200402101103.png"></p><p>安装完成之后我们还需要修改环境变量和配置参数</p><p>这里我们使用的是systemd调用jsvc来启动tomcat，所以我们直接在systemd对应的tomcat的unit文件中的<code>ExecStart</code>中添加一个路径参数<code>-Djava.library.path=/usr/local/apr/lib</code>指向apr库的路径：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/home/</span>tomcat9<span class="hljs-regexp">/bin/</span>jsvc \<br>        -user tomcat \<br>        -nodetach \<br>        -java-home <span class="hljs-variable">$&#123;JAVA_HOME&#125;</span> \<br>        -pidfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span>/tomcat.pid \<br>        -classpath <span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span><span class="hljs-regexp">/bin/</span>bootstrap.jar:<span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span><span class="hljs-regexp">/bin/</span>tomcat-juli.jar \<br>        -outfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/logs/</span>catalina.out \<br>        -errfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/logs/</span>catalina.err \<br>        -Dcatalina.home=<span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span> \<br>        -Dcatalina.base=<span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span> \<br>        -Djava.io.tmpdir=<span class="hljs-variable">$&#123;CATALINA_TMPDIR&#125;</span> \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        -Djava.util.logging.config.file=<span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/conf/</span>logging.properties \<br>        -Djava.library.path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apr/</span>lib \<br>        org.apache.catalina.startup.Bootstrap<br></code></pre></div></td></tr></table></figure><p>然后我们在tomcat的home目录下的conf子目录中对server.xml文件进行修改</p><p>把8080端口对应的配置修改成apr：（其他端口配置也类似）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200402102439.png"></p><p>重启tomcat服务我们从tomcat的日志中就可以看到协议已经从默认的nio变成了apr。</p><p><img src="https://resource.tinychen.com/20200402102535.png"></p><h2 id="9-5-三者之间的区别："><a href="#9-5-三者之间的区别：" class="headerlink" title="9.5 三者之间的区别："></a>9.5 三者之间的区别：</h2><table><thead><tr><th></th><th>NIO</th><th>NIO2</th><th>APR</th></tr></thead><tbody><tr><td>实现</td><td>JAVA NIO库</td><td>JDK1.7 NIO2库</td><td>C</td></tr><tr><td>IO模型</td><td>同步非阻塞</td><td>异步非阻塞</td><td>取决于系统</td></tr></tbody></table><blockquote><p>APR的重点在于使用C语言实现并且能够跨平台使用，它相当于将UNIX系统中的IO操作进行了一层封装使得编程开发更容易</p></blockquote><p>NIO性能是最差的这是毋庸置疑的，如果是考虑到高并发的情况，显然异步非阻塞I/O模式的NIO2和APR库在性能上更有优势，实际上NIO2的性能表现也和APR不相上下，但是NIO2要求Tomcat的版本要在8.0以上，而APR只需要5.5以上即可，但是APR需要额外配置库环境，相对于内置集成的NIO2来说APR这个操作比较麻烦，两者各有优劣。具体使用哪个还是需要结合实际业务需求和环境进行测试才能决定。</p><h1 id="10、server-xml"><a href="#10、server-xml" class="headerlink" title="10、server.xml"></a>10、server.xml</h1><p>Tomcat中的大多数配置都会在<code>server.xml</code>文件中，<code>server.xml</code>的地位就好像nginx中的<code>nginx.conf</code>文件，因此我们想要学习配置tomcat的各类参数，最先开始学习的配置就是<code>server.xml</code>文件。</p><h2 id="10-1-server-xml整体架构"><a href="#10-1-server-xml整体架构" class="headerlink" title="10.1 server.xml整体架构"></a>10.1 server.xml整体架构</h2><p>首先我们需要知道<code>server.xml</code>中的xml代码块分类，tomcat官网将其主要分为四类：</p><ul><li><strong>Top Level Elements</strong>：<code>server</code>块是整个配置文件的根元素，而<code>service</code>块代表与引擎关联的一组连接器（connector）。</li><li><strong>Connectors</strong> ：表示外部客户端向特定服务发送请求和接收响应的接口（比如我们之前提到的coyote连接器以及对应的NIO等IO模式都是整个范畴内的概念）。 </li><li><strong>Containers</strong>：容器（<code>Container</code>）负责处理传入的请求并创建相应的响应。<code>Engine</code>处理对Service的所有请求，<code>Host</code>处理对特定<code>virtual host</code>的所有请求，而<code>Context</code>处理对特定Web应用程序的所有请求。</li><li><strong>Nested Components</strong>：表示可以嵌套在<code>Container</code>元素内的元素。 注意一些元素可以嵌套在任何Container中，而另一些元素只能嵌套在<code>Context</code>中。</li></ul><h2 id="10-2-Top-Level-Elements"><a href="#10-2-Top-Level-Elements" class="headerlink" title="10.2 Top Level Elements"></a>10.2 Top Level Elements</h2><h3 id="3-2-1-Server块"><a href="#3-2-1-Server块" class="headerlink" title="3.2.1 Server块"></a>3.2.1 Server块</h3><p>Server块代表的是整个catalina servlet容器。因此，它必须是<code>conf/server.xml</code>配置文件中最外面的单个元素。它的属性代表了整个servlet容器的特征。Tomcat9中默认的配置文件中<code>Server</code>块内嵌的子元素为 <code>Listener</code>、<code>GlobalNamingResources</code>、<code>Service</code>（可以嵌套多个）。具体的每个属性参数我们可以查询<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/server.html">官网</a>，下面解释默认的参数配置。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8005&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">port ： Tomcat监听的关闭服务器的端口 </span><br><span class="hljs-comment">shutdown ： 关闭服务器的指令字符串</span><br><span class="hljs-comment"> --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 以日志形式输出服务器、操作系统、JVM的版本信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启动和停止APR。如果找不到APR库会输出日志但并不影响tomcat正常启动 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="hljs-attr">SSLEngine</span>=<span class="hljs-string">&quot;off&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        注意这里的SSLEngine默认是打开的（on）</span><br><span class="hljs-comment">        如果启用了apr作为连接器的协议</span><br><span class="hljs-comment">        但是只配置了http而没有配置https</span><br><span class="hljs-comment">        则会报错    </span><br><span class="hljs-comment">    --&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用于避免JRE内存泄漏问题 --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用户加载（服务器启动）和销毁（服务器停止）全局命名服务 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用于在Context停止时重建Executor池中的线程， 以避免ThreadLocal相关的内</span><br><span class="hljs-comment">存泄漏 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- GlobalNamingResources中定义了全局命名服务： --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Resource</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;UserDatabase&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;Container&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;User database that can be updated and saved&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">factory</span>=<span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">pathname</span>=<span class="hljs-string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span><br>              <span class="hljs-comment">&lt;!--这里定义的文件就是我们前面配置manager和host manager的用户的文件--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Service</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Service</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">Server</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-Service块"><a href="#3-2-2-Service块" class="headerlink" title="3.2.2 Service块"></a>3.2.2 Service块</h3><p> Service元素用于创建 Service 实例，默认使用 <code>org.apache.catalina.core.StandardService</code>。 默认情况下，Tomcat9中默认仅指定了Service的名称为<code>Catalina</code>。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">Service</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>Service</code> 可以内嵌的元素为 ： <code>Listener</code>、<code>Executor</code>、<code>Connector</code>、<code>Engine</code> ，详细的参数可以点击这里查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/service.html">官网</a></p><ul><li><code>Listener</code> 用于为<code>Service</code> 添加生命周期监听器</li><li><code>Executor</code> 用于配置<code>Service</code> 共享线程池</li><li><code>Connector</code> 用于配置 <code>Service</code> 包含的链接器</li><li><code>Engine</code> 用于配置<code>Service</code>中连接器（<code>connector</code>）对应的Servlet 容器引擎</li></ul><h2 id="10-3-Executor"><a href="#10-3-Executor" class="headerlink" title="10.3 Executor"></a>10.3 Executor</h2><p><code>executor</code>表示可组件之间Tomcat中共享的线程池。默认情况下，<code>Service</code>并未添加共享线程池配置。<code>executor</code>实现了tomcat中的<code>org.apache.catalina.Executor</code>接口。 如果不配置共享线程池，那么Catalina 各组件在用到线程池时会独立创建。由于<code>executor</code>是<code>Service</code>元素的嵌套元素。为了使它能够被<code>Connector</code>使用，<code>Executor</code>元素必须出现在<code>server.xml</code>中的<code>Connector</code>元素之前。下面展示的是一个简单的executor的配置，具体的配置参数可以点这里查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/executor.html">官网</a>：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Executor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tomcatThreadPool&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">namePrefix</span>=<span class="hljs-string">&quot;catalina‐exec‐&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;200&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">minSpareThreads</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxIdleTime</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxQueueSize</span>=<span class="hljs-string">&quot;Integer.MAX_VALUE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">prestartminSpareThreads</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">threadPriority</span>=<span class="hljs-string">&quot;5&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardThreadExecutor&quot;</span>/&gt;</span><br><br></code></pre></div></td></tr></table></figure><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>线程池名称，用于<code>Connector</code>中指定。</td></tr><tr><td>namePrefix</td><td>所创建的每个线程的名称前缀，一个单独的线程名称为 <code>namePrefix</code>+<code>threadNumber</code>。</td></tr><tr><td>daemon</td><td>是否作为守护线程（类似于守护进程），默认为true</td></tr><tr><td>maxThreads</td><td>线程池中最大线程数。</td></tr><tr><td>minSpareThreads</td><td>活跃线程数，也就是核心池线程数，这些线程不会被销毁，会一直存在。</td></tr><tr><td>maxIdleTime</td><td>线程空闲时间，超过该时间后，空闲线程会被销毁，默 认值为6000（1分钟），单位毫秒。</td></tr><tr><td>maxQueueSize</td><td>在被执行前最大线程排队数目，默认为<code>int</code>的最大值，也就是广义的无限。除非特殊情况，这个值不需要更改， 否则会有请求不会被处理的情况发生。</td></tr><tr><td>prestartminSpareThreads</td><td>启动线程池时是否启动 <code>minSpareThreads</code>部分线程。 默认值为<code>false</code>，即不启动。</td></tr><tr><td>threadPriority</td><td>线程池中线程优先级，默认值为5，值从1到10。</td></tr><tr><td>className</td><td>线程池实现类，未指定情况下，默认实现类为 <code>org.apache.catalina.core.StandardThreadExecutor</code>。 如果想使用自定义线程池首先需要实现 <code>org.apache.catalina.Executor</code>接口。</td></tr></tbody></table><h2 id="10-4-Connector"><a href="#10-4-Connector" class="headerlink" title="10.4 Connector"></a>10.4 Connector</h2><p>Connector 用于创建链接器实例。默认情况下，server.xml 配置了两个链接器，一个支 持HTTP协议，一个支持AJP协议。因此大多数情况下，我们并不需要新增链接器配置， 只是根据需要对已有链接器进行优化。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8009&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;AJP/1.3&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>port</code>为监听的端口，如果设置为0，Tomcat将会随机选择一个可用的端口号给当前Connector 使用</li><li><code>protocol</code>为Connector的协议，这里默认的是HTTP和AJP两种协议，后面可以指定对应协议的不同版本，默认情况下会检测本机是否配置了APR库，如果有并且 <code>useAprConnector</code>设置为true则会默认使用APR模式的IO协议，如果无则会使用NIO模式</li><li><code>connectionTimeOut</code> ：Connector 接收链接后的等待超时时间，单位为毫秒。 -1表示永不超时</li><li><code>redirectPort</code>：当前Connector 不支持SSL请求， 接收到了一个请求， 并且也符合 security-constraint 约束， 需要SSL传输，Catalina自动将请求重定向到指定的端口</li><li><code>executor</code> ： 指定前面提到的共享线程池的名称，也可以通过maxThreads、minSpareThreads 等属性对该connector进行单独配置对应的内部线程池</li><li><code>URIEncoding</code> : 用于指定编码URI的字符编码， Tomcat8.x和Tomcat9.x版本默认的编码为 UTF-8 , Tomcat7.x版本默认为ISO-8859-1</li></ul><h2 id="10-5-engine"><a href="#10-5-engine" class="headerlink" title="10.5 engine"></a>10.5 engine</h2><p>Engine 作为Servlet 引擎的顶级元素，内部可以嵌入： Cluster、Listener、Realm、 Valve和Host。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Engine</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span> <span class="hljs-attr">defaultHost</span>=<span class="hljs-string">&quot;localhost&quot;</span>&gt;</span><br>    ……<br><span class="hljs-tag">&lt;/<span class="hljs-name">Engine</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>name</code>：用于指定Engine 的名称， 默认为Catalina </li><li><code>defaultHost</code>：默认使用的虚拟主机名称，当客户端请求访问的host无效时，会跳转到默认的host来处理请求</li></ul><h2 id="10-6-Host"><a href="#10-6-Host" class="headerlink" title="10.6 Host"></a>10.6 Host</h2><p>Host 元素用于配置一个虚拟主机，它支持以下嵌入元素：Alias、Cluster、Listener、 Valve、Realm、Context</p><p>如果在Engine下配置Realm，那么此配置将在当前Engine下的所有Host中共享。 同样，如果在Host中配置Realm ，则在当前Host下的所有Context 中共享</p><p><strong>Context中的Realm优先级 &gt; Host的Realm优先级 &gt; Engine中的Realm优先级</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;localhost_access_log&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Alias</span>&gt;</span>www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">Alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Alias</span>&gt;</span>www.example2.com<span class="hljs-tag">&lt;/<span class="hljs-name">Alias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>上面这一段Host的配置文件中还额外添加了Valve配置来实现自定义的日志记录。其中一些参数的详细信息和配置方式可以查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging">官网的说明</a><br>。</p><p>The shorthand pattern <code>pattern=&quot;common&quot;</code> corresponds to the Common Log Format defined by <strong>‘%h %l %u %t “%r” %s %b’</strong>.</p></blockquote><ul><li>name: 当前Host通用的网络名称，也就是常用的域名，如果有多个域名对应同一个Host的应用，我们可以设置一个或多个Alias来实现访问</li><li>appBase：当前Host应用对应的目录，当前Host上部署的Web应用均在该目录下（相对路径和绝对路径均可），默认为webapps</li><li>unpackWARs：设置为true，Host在启动时会将appBase目录下war包解压为目 录。设置为false，Host将直接从war文件启动</li><li>autoDeploy： 控制tomcat是否在运行时定期检测并自动部署新增或变更的web应用</li></ul><h2 id="10-7-Context"><a href="#10-7-Context" class="headerlink" title="10.7 Context"></a>10.7 Context</h2><p><a href="https://tomcat.apache.org/tomcat-9.0-doc/config/context.html">Context的完整配置官网文档</a>，Context 用于配置一个Web应用，默认的配置如下。它支持的内嵌元素为：CookieProcessor，Loader，Manager，Realm，Resources，WatchedResource，JarScanner，Valve。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;myAppDeploy&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myApp&quot;</span>&gt;</span><br>    ....<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>docBase：Web应用目录或者War包的部署路径。可以是绝对路径，也可以是相对于该Context所属的Host中的<code>appBase</code>的相对路径。</li><li>path：Web应用的Context的访问路径。</li></ul><p>假设tomcat的安装目录为<code>/home/tomcat9</code>，Host为默认的localhost， 则该web应用访问的根路径为： <code>http://localhost:8080/myApp</code>，对应的部署文件所存放的路径为：<code>/home/tomcat9/webapps/myAppDeploy</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是偏向运维角度来对tomcat进行入门介绍，重点讲解了tomcat的基本概念、基本配置和tomcat的I/O模型。是之前的&lt;a href=&quot;https://tinychen.com/tags/tomcat/&quot;&gt;tomcat篇&lt;/a&gt;的汇总整理之作。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>PowerDNS篇1-简介和安装</title>
    <link href="https://tinychen.com/20210224-dns-02-pdns01-pdns-auth-and-rec-introduction/"/>
    <id>https://tinychen.com/20210224-dns-02-pdns01-pdns-auth-and-rec-introduction/</id>
    <published>2021-02-24T03:00:00.000Z</published>
    <updated>2021-02-24T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍PowerDNS的主要特性和初始化安装的配置方法，侧重点是对复杂程度相对较高<code>PowerDNS Authoritative Server</code>进行介绍，同时会夹杂部分<code>PowerDNS-Recursor</code>的初始化安装和配置。</p><span id="more"></span><h1 id="1、PowerDNS简介"><a href="#1、PowerDNS简介" class="headerlink" title="1、PowerDNS简介"></a>1、PowerDNS简介</h1><p>PowerDNS（PDNS）成立于20世纪90年代末，是开源DNS软件、服务和支持的主要供应商，它们提供的<strong>权威认证DNS服务器</strong>和<strong>递归认证DNS服务器</strong>都是100%开源的软件，同时也和红帽等开源方案提供商一样提供了付费的技术支持版本。同时官方表示为了避免和软件使用者出现竞争，他们只提供服务支持而不提供DNS托管服务。</p><blockquote><p>Our <a href="https://www.powerdns.com/auth.html">Authoritative Server</a>, <a href="https://www.powerdns.com/recursor.html">Recursor</a> and <a href="http://www.dnsdist.org/">dnsdist</a> products are <strong><a href="https://www.powerdns.com/opensource.html">100% open source</a></strong>. For the service provider market, OX also sells the <a href="https://www.open-xchange.com/portfolio/ox-powerdns/">PowerDNS Platform</a> which builds on our Open Source products to deliver an integrated DNS solution with 24/7 support and includes features as parental control, malware filtering, automated attack mitigation, and long-term query logging &amp; searching.</p></blockquote><p>熟悉DNS工作原理的同学可以大致地将DNS记录的查询分为两种：<strong>查询本地缓存</strong>和<strong>向上递归查询</strong>。和其他的如BIND、dnsmasq等将这些功能集成到一起的DNS软件不同，PowerDNS将其一分为二，分为了<code>PowerDNS Authoritative Server</code>和<code>PowerDNS Recursor</code>，分别对应这两种主要的需求，而我们常说的<code>pdns</code>指的就是<code>PowerDNS Authoritative Server (后面简称PDNS Auth)</code>，主要用途就是作为<strong>权威域名服务器</strong>，当然也可以作为普通的DNS服务器提供DNS查询功能。</p><p><img src="https://resource.tinychen.com/20200417112013.png"></p><p>对于PowerDNS-Recursor，PowerDNS官网介绍其是一个<strong>内置脚本能力</strong>的高性能的<strong>DNS递归查询</strong>服务器，并且已经为一亿五千万个互联网连接提供支持。</p><blockquote><p>The PowerDNS Recursor is a high-performance DNS recursor with built-in scripting capabilities. It is known to power the resolving needs of over 150 million internet connections.</p></blockquote><p>PowerDNS-Recursor(以下简称pdns-rec)的官方文档可以点击<a href="https://doc.powerdns.com/recursor/index.html">这里</a>查看。官方指的内置脚本能力是指在4.0.0版本之后的配置文件里面添加了对lua脚本的支持。</p><h1 id="2、PowerDNS安装"><a href="#2、PowerDNS安装" class="headerlink" title="2、PowerDNS安装"></a>2、PowerDNS安装</h1><h2 id="2-1-PowerDNS-Authoritative-Server安装"><a href="#2-1-PowerDNS-Authoritative-Server安装" class="headerlink" title="2.1 PowerDNS Authoritative Server安装"></a>2.1 PowerDNS Authoritative Server安装</h2><p>这里我们还是使用经典的CentOS7系统进行安装测试，系统的相关版本和内核信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tiny-test home]<span class="hljs-comment"># lsb_release -a</span><br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID: CentOS<br>Description:    CentOS Linux release 7.9.2009 (Core)<br>Release:        7.9.2009<br>Codename:       Core<br>[root@tiny-test home]<span class="hljs-comment"># uname -r</span><br>3.10.0-1160.11.1.el7.x86_64<br></code></pre></div></td></tr></table></figure><p>pdns对主流的操作系统都有着较好的支持，在centos上面可以直接通过repo仓库来安装，红帽系的Linux可以通过epel源，monshouwer提供的第三方源和powerdns官方源三种源来进行安装。</p><blockquote><p>On RedHat based systems there are 3 options to install PowerDNS, from <a href="https://fedoraproject.org/wiki/EPEL">EPEL</a>, the <a href="https://www.monshouwer.eu/download/3rd_party/pdns/">repository from Kees Monshouwer</a> or from <a href="https://repo.powerdns.com/">the PowerDNS repositories</a>:</p></blockquote><p>使用epel源来进行安装的话可能会导致无法安装最新版本</p><p><img src="https://resource.tinychen.com/20210118145131.png"></p><p>如果网络条件允许的话，最好的办法是直接通过官方的<a href="https://repo.powerdns.com/">repo源</a>来进行安装，如果使用的是master源，则可以安装到最新的测试版本：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">yum install epel-release yum-plugin-priorities<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/powerdns-auth-master.repo https:/</span><span class="hljs-regexp">/repo.powerdns.com/</span>repo-files/centos-auth-master.repo<br>yum install pdns<br>yum install pdns-backend-<span class="hljs-variable">$backend</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210118145142.png"></p><p>这里我们使用最新的稳定版4.4版本进行安装，<code>backend</code>这里我们选择<code>pdns-backend-mysql</code></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">yum install epel-release yum-plugin-priorities<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/powerdns-auth-44.repo https:/</span><span class="hljs-regexp">/repo.powerdns.com/</span>repo-files/centos-auth-<span class="hljs-number">44</span>.repo<br>yum install pdns<br>yum install pdns-backend-<span class="hljs-variable">$backend</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210118145147.png"></p><blockquote><p>请注意对于某些软件包源，bind backend作为基本pdns软件包的一部分提供，并且没有单独的pdns-backend-bind软件包。</p></blockquote><h2 id="2-2-PowerDNS-Recursor安装"><a href="#2-2-PowerDNS-Recursor安装" class="headerlink" title="2.2 PowerDNS-Recursor安装"></a>2.2 PowerDNS-Recursor安装</h2><p>这里我们还是使用经典的CentOS7系统进行安装测试，系统的相关版本和内核信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tiny-cloud /home]<span class="hljs-comment"># lsb_release -a</span><br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID: CentOS<br>Description:    CentOS Linux release 7.9.2009 (Core)<br>Release:        7.9.2009<br>Codename:       Core<br>[root@tiny-cloud /home]<span class="hljs-comment"># uname -r</span><br>3.10.0-1160.24.1.el7.x86_64<br></code></pre></div></td></tr></table></figure><p>pdns对主流的操作系统都有着较好的支持，在红帽系和CentOS系相关的发行版本上面可以之间通过epel源来进行安装，不过使用epel源来进行安装的话可能会导致无法安装最新版本。</p><blockquote><p>On Red Hat, CentOS and related distributions, ensure that <a href="https://fedoraproject.org/wiki/EPEL">EPEL</a> is available. To install the PowerDNS Recursor, run <code>yum install pdns-recursor</code> as root.</p></blockquote><p><img src="https://resource.tinychen.com/20210430141702.png"></p><p>如果网络条件允许的话，最好的办法是直接通过官方的<a href="https://repo.powerdns.com/">repo源</a>来进行安装，如果使用的是master分支的repo源，则可以安装到最新的测试版本。官方表示master存储库对应的是他们在<a href="https://github.com/PowerDNS/pdns">github</a>上面正在开发的master分支。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">yum install epel-release yum-plugin-priorities &amp;&amp;<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/powerdns-rec-master.repo https:/</span><span class="hljs-regexp">/repo.powerdns.com/</span>repo-files/centos-rec-master.repo &amp;&amp;<br>yum install pdns-recursor<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210430143317.png"></p><p>当然我们也可以通过官方提供的不同版本yum源来安装对应版本的pdns，不同的版本分支对应的支持时间也是不一样的，官方表示在对应版本的生命周期结束之后，对应的仓库也不会再提供支持，pdns-rec的EOL信息可以点击<a href="https://doc.powerdns.com/recursor/appendices/EOL.html">这里</a>查看。由于目前4.5.x版本还处于rc阶段，因此这里我们还是安装最新的稳定版本4.4.x版本。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">yum install epel-release yum-plugin-priorities &amp;&amp;<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/powerdns-rec-44.repo https:/</span><span class="hljs-regexp">/repo.powerdns.com/</span>repo-files/centos-rec-<span class="hljs-number">44</span>.repo &amp;&amp;<br>yum install pdns-recursor<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210430143305.png"></p><h1 id="3、pdns-auth的mysql安装配置"><a href="#3、pdns-auth的mysql安装配置" class="headerlink" title="3、pdns-auth的mysql安装配置"></a>3、pdns-auth的mysql安装配置</h1><h2 id="3-1-安装mysql"><a href="#3-1-安装mysql" class="headerlink" title="3.1 安装mysql"></a>3.1 安装mysql</h2><p>pdns对于mysql的版本和安装方式并没有什么特殊的要求，个人推荐版本在5.7+或者8.0+都可以，这里使用yum安装8.0版本的mysql。</p><p>最新版的mysql的repo文件我们可以直接前往官网下载：<code>https://dev.mysql.com/downloads/repo/yum/</code></p><blockquote><p>如果需要使用5.7的版本可以到这里下载</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://repo.mysql.com/mysql<span class="hljs-number">57</span>-community-release-el<span class="hljs-number">7</span>-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tinychen-server /root]<span class="hljs-comment"># rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br>[root@tinychen-server /root]<span class="hljs-comment"># yum update</span><br>[root@tinychen-server /root]<span class="hljs-comment"># yum install mysql-server</span><br>[root@tinychen-server /root]<span class="hljs-comment"># mysqladmin --version</span><br>mysqladmin  Ver 8.0.23 <span class="hljs-keyword">for</span> Linux on x86_64 (MySQL Community Server - GPL)<br><br><span class="hljs-comment"># MYSQL8的初始密码可以在log中查看</span><br>[root@tinychen-server /root]<span class="hljs-comment"># grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br>[root@tinychen-server /root]<span class="hljs-comment"># mysql -u root -p</span><br></code></pre></div></td></tr></table></figure><h2 id="3-2-创建用户"><a href="#3-2-创建用户" class="headerlink" title="3.2 创建用户"></a>3.2 创建用户</h2><p>接下来需要进行基本的数据库操作，给pdns创建对应的数据库和用户并简单设置相关权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">-- 修改密码<br>ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的新密码&#x27;;<br>-- 注意这里的&#x27;localhost&#x27;也有可能是别的参数，具体可以通过下面这条命令来进行查询：<br>select user, host, authentication_string, plugin from mysql.user;<br><br>-- 创建一个mysql的用户名为powerdns，只能本机登录<br>-- 创建一个mysql的数据库名为powerdns，并允许powerdns用户访问<br>CREATE USER &#x27;powerdns&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的新密码&#x27;;<br>CREATE DATABASE powerdns;<br>GRANT ALL ON powerdns.* TO &#x27;powerdns&#x27;@&#x27;localhost&#x27;;<br>FLUSH PRIVILEGES;<br><br>-- 对于MYSQL8需要额外指定加密方式避免ERROR 2059 (HY000)的问题<br>ALTER USER &#x27;powerdns&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;你的新密码&#x27;;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-创建数据表"><a href="#3-3-创建数据表" class="headerlink" title="3.3 创建数据表"></a>3.3 创建数据表</h2><p>创建数据表的操作完全按照<a href="https://doc.powerdns.com/authoritative/backends/generic-mysql.html#default-schema">官方的文档</a>进行，有特殊需要的也可以根据实际情况进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE domains (<br>  id                    INT AUTO_INCREMENT,<br>  name                  VARCHAR(255) NOT NULL,<br>  master                VARCHAR(128) DEFAULT NULL,<br>  last_check            INT DEFAULT NULL,<br>  type                  VARCHAR(6) NOT NULL,<br>  notified_serial       INT UNSIGNED DEFAULT NULL,<br>  account               VARCHAR(40) CHARACTER SET &#x27;utf8&#x27; DEFAULT NULL,<br>  PRIMARY KEY (id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE UNIQUE INDEX name_index ON domains(name);<br><br><br>CREATE TABLE records (<br>  id                    BIGINT AUTO_INCREMENT,<br>  domain_id             INT DEFAULT NULL,<br>  name                  VARCHAR(255) DEFAULT NULL,<br>  type                  VARCHAR(10) DEFAULT NULL,<br>  content               VARCHAR(64000) DEFAULT NULL,<br>  ttl                   INT DEFAULT NULL,<br>  prio                  INT DEFAULT NULL,<br>  disabled              TINYINT(1) DEFAULT 0,<br>  ordername             VARCHAR(255) BINARY DEFAULT NULL,<br>  auth                  TINYINT(1) DEFAULT 1,<br>  PRIMARY KEY (id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE INDEX nametype_index ON records(name,type);<br>CREATE INDEX domain_id ON records(domain_id);<br>CREATE INDEX ordername ON records (ordername);<br><br><br>CREATE TABLE supermasters (<br>  ip                    VARCHAR(64) NOT NULL,<br>  nameserver            VARCHAR(255) NOT NULL,<br>  account               VARCHAR(40) CHARACTER SET &#x27;utf8&#x27; NOT NULL,<br>  PRIMARY KEY (ip, nameserver)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br><br>CREATE TABLE comments (<br>  id                    INT AUTO_INCREMENT,<br>  domain_id             INT NOT NULL,<br>  name                  VARCHAR(255) NOT NULL,<br>  type                  VARCHAR(10) NOT NULL,<br>  modified_at           INT NOT NULL,<br>  account               VARCHAR(40) CHARACTER SET &#x27;utf8&#x27; DEFAULT NULL,<br>  comment               TEXT CHARACTER SET &#x27;utf8&#x27; NOT NULL,<br>  PRIMARY KEY (id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE INDEX comments_name_type_idx ON comments (name, type);<br>CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);<br><br><br>CREATE TABLE domainmetadata (<br>  id                    INT AUTO_INCREMENT,<br>  domain_id             INT NOT NULL,<br>  kind                  VARCHAR(32),<br>  content               TEXT,<br>  PRIMARY KEY (id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE INDEX domainmetadata_idx ON domainmetadata (domain_id, kind);<br><br><br>CREATE TABLE cryptokeys (<br>  id                    INT AUTO_INCREMENT,<br>  domain_id             INT NOT NULL,<br>  flags                 INT NOT NULL,<br>  active                BOOL,<br>  published             BOOL DEFAULT 1,<br>  content               TEXT,<br>  PRIMARY KEY(id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE INDEX domainidindex ON cryptokeys(domain_id);<br><br><br>CREATE TABLE tsigkeys (<br>  id                    INT AUTO_INCREMENT,<br>  name                  VARCHAR(255),<br>  algorithm             VARCHAR(50),<br>  secret                VARCHAR(255),<br>  PRIMARY KEY (id)<br>) Engine=InnoDB CHARACTER SET &#x27;latin1&#x27;;<br><br>CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);<br></code></pre></div></td></tr></table></figure><h1 id="4、pdns配置mysql"><a href="#4、pdns配置mysql" class="headerlink" title="4、pdns配置mysql"></a>4、pdns配置mysql</h1><h2 id="4-1-mysql-相关配置"><a href="#4-1-mysql-相关配置" class="headerlink" title="4.1 mysql 相关配置"></a>4.1 mysql 相关配置</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># gmysql-host</span><br><span class="hljs-comment"># 需要连接的mysql的IP地址，和gmysql-socket变量互斥</span><br><br><span class="hljs-comment"># gmysql-port</span><br><span class="hljs-comment"># 需要连接的mysql的端口号，默认是3306</span><br><br><span class="hljs-comment"># gmysql-socket</span><br><span class="hljs-comment"># 需要连接的mysql的UNIX socket地址，和gmysql-host互斥</span><br><br><span class="hljs-comment"># gmysql-dbname</span><br><span class="hljs-comment"># 需要连接的数据库，默认：powerdns</span><br><br><span class="hljs-comment"># gmysql-user</span><br><span class="hljs-comment"># 连接数据库的用户名，默认：powerdns</span><br><br><span class="hljs-comment"># gmysql-group</span><br><span class="hljs-comment"># 连接数据库的组，默认：client</span><br><br><span class="hljs-comment"># gmysql-password</span><br><span class="hljs-comment"># 连接数据库的用户的密码</span><br><br><span class="hljs-comment"># gmysql-dnssec</span><br><span class="hljs-comment"># 是否启用dnssec功能，默认：no</span><br><br><span class="hljs-comment"># gmysql-innodb-read-committed</span><br><span class="hljs-comment"># 使用InnoDB的READ-COMMITTED事务隔离，默认：yes</span><br><br><span class="hljs-comment"># gmysql-ssl</span><br><span class="hljs-comment"># 是否开启SSL支持，默认：no</span><br><br><span class="hljs-comment"># gmysql-timeout</span><br><span class="hljs-comment"># 尝试读取数据库的超时时间，0为禁用，默认：10</span><br><br><span class="hljs-comment"># gmysql-thread-cleanup</span><br><span class="hljs-comment"># 对于一些老旧版本的MySQL/MariaDB（比如RHEL7内置的版本）会出现内存泄露的问题，除非应用程序明确向该库报告每个线程的结束。启用gmysql-thread-cleanup告诉PowerDNS每当线程结束时就调用mysql_thread_end（）。</span><br><span class="hljs-comment"># 只有当确定自己需要开启这个功能的时候再开启，详情可以查看https://github.com/PowerDNS/pdns/issues/6231.</span><br></code></pre></div></td></tr></table></figure><h2 id="4-2-pdns-conf配置"><a href="#4-2-pdns-conf配置" class="headerlink" title="4.2 pdns.conf配置"></a>4.2 pdns.conf配置</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# cat /etc/pdns/pdns.conf<br>api=yes<br>api-key=你的API-KEY<br>config-dir=/etc/pdns<br>write-pid=yes<br><br>daemon=no<br>guardian=no<br><br>launch=gmysql<br>gmysql-host=localhost<br>gmysql-port=3306<br>gmysql-dbname=你的数据库名<br>gmysql-user=你的用户名<br>gmysql-password=你的密码<br><br>log-dns-details=yes<br>log-dns-queries=yes<br>log-timestamp=yes<br>loglevel=9<br>logging-facility=0<br>log-timestamp=yes<br><br>setgid=root<br>setuid=root<br><br>webserver=yes<br>webserver-address=192.168.100.100<br>webserver-loglevel=detailed<br>webserver-port=8081<br><span class="hljs-meta">#</span><span class="bash"> webserver-allow-from指定允许访问webserver和API的IP白名单，多个IP可以使用英文逗号隔开</span><br>webserver-allow-from=192.168.100.0/24<br><span class="hljs-meta">#</span><span class="bash"> pdns服务监听的地址，多个IP可以使用英文逗号隔开</span><br>local-address=192.168.100.100<br>query-local-address=192.168.100.100<br></code></pre></div></td></tr></table></figure><h2 id="4-3-pdns-rec配置"><a href="#4-3-pdns-rec配置" class="headerlink" title="4.3 pdns-rec配置"></a>4.3 pdns-rec配置</h2><p>pdns-rec的配置文件除了默认文件命名和少数特殊的配置项外，其他的绝大部分配置都和pdns-auth一致，这里不作赘述。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@tiny-cloud <span class="hljs-regexp">/etc/</span>pdns-recursor]<span class="hljs-comment"># realpath recursor.conf</span><br><span class="hljs-regexp">/etc/</span>pdns-recursor/recursor.conf<br></code></pre></div></td></tr></table></figure><h1 id="5、pdns日志处理"><a href="#5、pdns日志处理" class="headerlink" title="5、pdns日志处理"></a>5、pdns日志处理</h1><p>官网的相关文档可以点击<a href="https://doc.powerdns.com/authoritative/running.html#logging-to-syslog">这里</a>查看，debug阶段我们把日志级别调到了最高的9，为了避免错过重要信息，我们把日志按照不同的级别分别写入不同的文件中。</p><p>修改centos对应的rsyslog配置文件并且重启服务</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># mkdir -p /etc/pdns/logs</span><br><br><span class="hljs-comment"># cat /etc/rsyslog.conf | grep pdns</span><br>local0.info                       /etc/pdns/logs/pdns.info.log<br>local0.warn                       /etc/pdns/logs/pdns.warn.log<br>local0.err                        /etc/pdns/logs/pdns.err.log<br><br>systemctl restart rsyslog.service<br></code></pre></div></td></tr></table></figure><p>修改pdns的<code>systemd</code>的<code>unit</code>文件，将里面的禁用<code>syslog</code>参数去掉，同时将其他多余的控制选项也一并去除，统一将各类参数设置集中到<code>pdns.conf</code>文件中，方便后期的管理和运维。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /usr/lib/systemd/system/pdns.service<br><br><span class="hljs-comment"># 将原来的启动参数全部替换掉</span><br><span class="hljs-comment"># ExecStart=/usr/sbin/pdns_server --socket-dir=%t/pdns --guardian=no --daemon=no --disable-syslog --log-timestamp=no --write-pid=no</span><br><span class="hljs-comment"># 替换为</span><br>ExecStart=/usr/sbin/pdns_server --socket-dir=%t/pdns<br><br>systemctl daemon-reload<br></code></pre></div></td></tr></table></figure><h1 id="6、pdns-auth的API请求"><a href="#6、pdns-auth的API请求" class="headerlink" title="6、pdns-auth的API请求"></a>6、pdns-auth的API请求</h1><p>PDNS提供了API功能，请求的时候需要注意正确携带配置中的<code>api-key</code>，否则会无法返回正确的结果，而是显示<code>401 Unauthorized</code>错误。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# curl -v http://192.168.100.100:8081/api/v1/servers<br>*   Trying 192.168.100.100...<br>* TCP_NODELAY set<br>* Connected to 192.168.100.100 (192.168.100.100) port 8081 (#0)<br><span class="hljs-meta">&gt;</span><span class="bash"> GET /api/v1/servers HTTP/1.1</span><br><span class="hljs-meta">&gt;</span><span class="bash"> Host: 192.168.100.100:8081</span><br><span class="hljs-meta">&gt;</span><span class="bash"> User-Agent: curl/7.61.1</span><br><span class="hljs-meta">&gt;</span><span class="bash"> Accept: */*</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="bash">&lt; HTTP/1.1 401 Unauthorized</span><br>&lt; Connection: close<br>&lt; Content-Length: 12<br>&lt; Content-Type: text/plain; charset=utf-8<br>&lt; Server: PowerDNS/4.4.0<br>&lt; Www-Authenticate: X-API-Key realm=&quot;PowerDNS&quot;<br>&lt;<br>* Closing connection 0<br>Unauthorized<br></code></pre></div></td></tr></table></figure><p>请求正确的情况下会返回<code>json</code>格式的信息。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# curl -v -H &#x27;X-API-Key: 配置中的api-key&#x27; http://192.168.100.100:8081/api/v1/servers<br>*   Trying 192.168.100.100...<br>* TCP_NODELAY set<br>* Connected to 192.168.100.100 (192.168.100.100) port 8081 (#0)<br><span class="hljs-meta">&gt;</span><span class="bash"> GET /api/v1/servers HTTP/1.1</span><br><span class="hljs-meta">&gt;</span><span class="bash"> Host: 192.168.100.100:8081</span><br><span class="hljs-meta">&gt;</span><span class="bash"> User-Agent: curl/7.61.1</span><br><span class="hljs-meta">&gt;</span><span class="bash"> Accept: */*</span><br><span class="hljs-meta">&gt;</span><span class="bash"> X-API-Key: 配置中的api-key</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="bash">&lt; HTTP/1.1 200 OK</span><br>&lt; Access-Control-Allow-Origin: *<br>&lt; Connection: close<br>&lt; Content-Length: 249<br>&lt; Content-Security-Policy: default-src &#x27;self&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;<br>&lt; Content-Type: application/json<br>&lt; Server: PowerDNS/4.4.0<br>&lt; X-Content-Type-Options: nosniff<br>&lt; X-Frame-Options: deny<br>&lt; X-Permitted-Cross-Domain-Policies: none<br>&lt; X-Xss-Protection: 1; mode=block<br>&lt;<br>* Closing connection 0<br>[&#123;&quot;config_url&quot;: &quot;/api/v1/servers/localhost/config&#123;/config_setting&#125;&quot;, &quot;daemon_type&quot;: &quot;authoritative&quot;, &quot;id&quot;: &quot;localhost&quot;, &quot;type&quot;: &quot;Server&quot;, &quot;url&quot;: &quot;/api/v1/servers/localhost&quot;, &quot;version&quot;: &quot;4.4.0&quot;, &quot;zones_url&quot;: &quot;/api/v1/servers/localhost/zones&#123;/zone&#125;&quot;&#125;]<br></code></pre></div></td></tr></table></figure><h1 id="7、DNS解析"><a href="#7、DNS解析" class="headerlink" title="7、DNS解析"></a>7、DNS解析</h1><p>对于pdns-rec而言，是单纯的一个递归查询器（Recursor），会根据设置的缓存时间来缓存向上查询到的DNS记录。</p><p>理论上PDNS Auth只会查询自己已有的DNS记录，如果不存在则会直接返回空，而不是继续向上递归查询。这里我们使用轻量型的DNS服务器dnsmasq作为对比，两者都没有手动添加任何的DNS解析记录。</p><p><img src="https://resource.tinychen.com/20210126165523.png"></p><p>从上面的测试结果我们可以看出pdns auth只会返回自己的数据库中存在的记录。于是我们手动添加记录到pdns中再进行查询。</p><p>这里我们使用<code>pdnsutil</code>工具来简单测试，首先我们简单的创建一个关于example.org的zone，然后我们再创建关于example.org的一条A记录和MX记录，接着使用dig命令来进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server pdns]# pdnsutil create-zone example.org ns1.example.com<br>Feb 24 16:54:48 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>Feb 24 16:54:48 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>Creating empty zone &#x27;example.org&#x27;<br>Feb 24 16:54:48 No serial for &#x27;example.org&#x27; found - zone is missing?<br>Also adding one NS record<br><br>[root@tiny-server pdns]# pdnsutil list-all-zones<br>Feb 24 16:54:59 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>Feb 24 16:54:59 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>tinychen.com<br>example.org<br><br>[root@tiny-server pdns]#  pdnsutil add-record example.org &#x27;&#x27; MX &#x27;25 mail.example.org&#x27;<br>Feb 24 16:55:36 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>Feb 24 16:55:36 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>New rrset:<br>example.org. 3600 IN MX 25 mail.example.org<br><br>[root@tiny-server pdns]#  pdnsutil add-record example.org. www A 192.168.100.100<br>Feb 24 16:56:09 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>Feb 24 16:56:09 gmysql Connection successful. Connected to database &#x27;powerdns&#x27; on &#x27;localhost&#x27;.<br>New rrset:<br>www.example.org. 3600 IN A 192.168.100.100<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210224170528.png"></p><p>同样的我们对tinychen.com进行相同的操作，可以看到这时已经能够解析出对应的IP了。</p><p><img src="https://resource.tinychen.com/20210224171337.png"></p><p>从上图中我们可以看到对应的<code>tinychen.com</code>域名解析出来的记录是我们手动设定的IP值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍PowerDNS的主要特性和初始化安装的配置方法，侧重点是对复杂程度相对较高&lt;code&gt;PowerDNS Authoritative Server&lt;/code&gt;进行介绍，同时会夹杂部分&lt;code&gt;PowerDNS-Recursor&lt;/code&gt;的初始化安装和配置。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
    <category term="powerdns" scheme="https://tinychen.com/tags/powerdns/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus系列01-单机版二进制部署</title>
    <link href="https://tinychen.com/20210105-prometheus-01-binary-install/"/>
    <id>https://tinychen.com/20210105-prometheus-01-binary-install/</id>
    <published>2021-01-05T03:00:00.000Z</published>
    <updated>2021-01-05T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为 CNCF 中最成功的开源项目之一，<code>Prometheus</code> 已经成为了云原生监控的代名词，被广泛应用在 <code>Kubernetes</code>和<code>OpenShift</code> 等项目中，同时有很多第三方解决方案也会集成 <code>Prometheus</code>。随着 <code>Kubernetes</code> 在容器调度和管理上确定领头羊的地位，<code>Prometheus</code> 也成为<code>Kubernetes</code>容器监控的标配。</p><p>考虑到k8s系统的复杂性和上手难度较高，本文将从最简单最基础的部分开始循序渐进，主要介绍如何在CentOS8系统上直接使用二进制文件和<code>systemd</code>进行<code>Prometheus server</code>的单机版本部署，本文只涉及到最基础的<code>Prometheus server</code>、<code>node_exporter</code>和<code>Grafana</code>三个模块，暂未涉及<code>Pushgateway</code>和<code>Alertmanager</code>两个模块。</p><p>一般来说，<code>Prometheus server</code>是用于作为服务端来存储各类<code>exporter</code>在被监控节点上面采集的数据，而<code>Grafana</code>则负责将<code>Prometheus server</code>上的数据可视化，因此<code>Prometheus server</code>和<code>Grafana</code>不一定要部署在同一台机器上面，只需要部署两者的机器能够互相通信即可，同理，各类<code>exporter</code>应该部署在需要被监控的节点机器上。这里由于机器数量有限且只作为测试，会将三者都部署在同一台机器上。</p><span id="more"></span><p>Prometheus最初起源于SoundCloud构建的监控系统和告警工具，是Google BorgMon监控系统的开源版本。它基于Go语言且自带时序型数据库，这也就意味着DevOps工程师在部署Prometheus监控系统的时候无需再额外搭建数据库，当然如果有更高的需求也可以自行搭建其他的时序性数据库（TSDB）。</p><p>Prometheus的基本原理是通过 HTTP周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口并且符合 Prometheus 定义的数据格式，就可以接入Prometheus监控。此外，使用Grafana 的Prometheus的数据可视化程度非常高，告警规则也十分多样，还支持传统服务器监控以及云原生监控，可以称为是监控系统中的“瑞士军刀”。</p><p><img src="https://resource.tinychen.com/20210106101153.png"></p><h1 id="1、部署prometheus"><a href="#1、部署prometheus" class="headerlink" title="1、部署prometheus"></a>1、部署prometheus</h1><p>我们去<a href="https://prometheus.io/download/">官网</a>选择合适的二进制版本进行下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://github.com/prometheus/prometheus/releases/download/v2.23.0/prometheus-2.23.0.linux-amd64.tar.gz<br>tar -zxvf prometheus-2.23.0.linux-amd64.tar.gz<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210105113202.png"></p><p>为了方便管理，我们需要创建一个单独的<code>prometheus</code>用户来运行<code>prometheus</code>，同时要保证安全，创建的用户只用来运行<code>prometheus</code>而不能使用<code>shell</code>登录。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd prometheus<br>useradd -g prometheus -s /sbin/nologin prometheus<br>chown -R prometheus.prometheus /home/prometheus<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210105113159.png"></p><p>为了方便管理，我们可以配置使用<code>systemd</code>对进程进行管理</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /usr/lib/systemd/system/prometheus.service<br><br>[Unit]<br>Description=Prometheus<br>Documentation=https://prometheus.io/<br>After=network.target<br><br>[Service]<br><span class="hljs-meta">#</span><span class="bash"> Type设置为notify时，服务会不断重启</span><br>Type=simple<br>User=prometheus<br><span class="hljs-meta">#</span><span class="bash"> --storage.tsdb.path是可选项，默认数据目录在运行目录的./dada目录中</span><br>ExecStart=/home/prometheus/prometheus --config.file=/home/prometheus/prometheus.yml --storage.tsdb.path=/home/prometheus<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br><br><br>chown prometheus.prometheus /usr/lib/systemd/system/prometheus.service<br>systemctl daemon-reload<br>systemctl enable prometheus.service<br>systemctl start prometheus.service<br>systemctl status prometheus.service<br></code></pre></div></td></tr></table></figure><p>如无意外应该已经可以正常运行了，同时访问服务器的<code>9090</code>端口可以查看到简单的UI界面</p><p><img src="https://resource.tinychen.com/20210105141141.png"></p><p><img src="https://resource.tinychen.com/20210105141138.png"></p><h1 id="2、部署node-exporter"><a href="#2、部署node-exporter" class="headerlink" title="2、部署node_exporter"></a>2、部署node_exporter</h1><p>我们去<a href="https://prometheus.io/download/">官网</a>选择合适的二进制版本进行下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz<br>tar -zxvf node_exporter-1.0.1.linux-amd64.tar.gz<br>mv node_exporter-1.0.1.linux-amd64 node_exporter<br>chown -R prometheus.prometheus /home/node_exporter<br></code></pre></div></td></tr></table></figure><p>同样的我们使用<code>systemd</code>进行管理</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /usr/lib/systemd/system/node_exporter.service<br><br>[Unit]<br>Description=Prometheus-node_exporter<br>Documentation=https://prometheus.io/<br>After=network.target<br><span class="hljs-comment"># 注意下面这两项参数是CentOS8的systemd才支持的</span><br>StartLimitBurst=1<br>StartLimitIntervalSec=15s<br><br>[Service]<br>Type=simple<br>User=prometheus<br>ExecStart=/home/node_exporter/node_exporter<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br><br>chown prometheus.prometheus /usr/lib/systemd/system/node_exporter.service<br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> node_exporter.service<br>systemctl start node_exporter.service<br>systemctl status node_exporter.service<br></code></pre></div></td></tr></table></figure><p>如果顺利的话，<code>node_exporter</code>应该就正常运行在默认的<code>9100</code>端口了，再查看<code>9090</code>端口的<code>prometheus</code>的web页面种的<code>Status</code>里面的<code>Targets</code>应该就能够看到已经运行起来的监控了。</p><p><img src="https://resource.tinychen.com/20210105143839.png"></p><p>接着我们需要修改<code>Prometheus</code>的配置文件<code>/home/prometheus/prometheus.yml</code>，添加对应的<code>job</code>，使其监听对应IP的<code>9100</code>端口获取信息并重启<code>Prometheus</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;192.168.100.100:9090&#x27;</span>]<br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;tiny-server&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;192.168.100.100:9100&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20210105172732.png"></p><h1 id="3、部署grafana"><a href="#3、部署grafana" class="headerlink" title="3、部署grafana"></a>3、部署grafana</h1><p>官网给出了多种版本系统的<a href="https://grafana.com/grafana/download">安装教程</a>，我们这里使用的是CentOS，可以直接下载对应的RPM包然后直接安装，对应的操作如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://dl.grafana.com/oss/release/grafana-7.3.6-1.x86_64.rpm<br>sudo yum install grafana-7.3.6-1.x86_64.rpm<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> grafana-server.service<br>systemctl start grafana-server.service<br>systemctl status grafana-server.service<br></code></pre></div></td></tr></table></figure><p>对应的配置文件位于<code>/etc/grafana/grafana.ini</code>，如果有需要可以进行更改，然后重启服务。</p><p>默认情况下我们直接访问对应服务器的<code>3000</code>端口，然后使用初始的用户名和密码<code>admin/admin</code>进行登录并且修改初始密码。</p><p><img src="https://resource.tinychen.com/20210105152614.png"></p><p>随后我们开始添加数据源</p><p><img src="https://resource.tinychen.com/20210105185605.png"></p><p><img src="https://resource.tinychen.com/20210105185600.png"></p><p>接下来在配置中填入相应的网址和端口即可，一般如果没有进行特殊修改，使用默认的配置即可读取到相应的数据源</p><p><img src="https://resource.tinychen.com/20210105185550.png"></p><p>前面我们已经部署了<code>node_exporter</code>，它会采集相应的数据到部署的机器的<code>9100</code>端口，我们这里再到<code>Grafana</code>中添加对应的<code>dashboard</code>就可以看到对应的图表数据了。<code>Grafana</code>官方提供的<a href="https://grafana.com/grafana/dashboards">dashboard</a>非常多，对应<code>node_exporter</code>的可以进行搜索下载，然后再上传到<code>Grafana</code>中，当然如果网络正常的话，我们也可以直接在导入面板中输入对应的ID编号就可以直接导入，由于我们的版本足够新，所以这里我们使用中文版本的<code>node_exporter</code>的<code>dashboard</code>，可以点击<a href="https://grafana.com/grafana/dashboards/8919">这里</a>查看详情。</p><p><img src="https://resource.tinychen.com/20210105185538.png"></p><p>部分效果展示如下：</p><p><img src="https://resource.tinychen.com/20210107093532.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为 CNCF 中最成功的开源项目之一，&lt;code&gt;Prometheus&lt;/code&gt; 已经成为了云原生监控的代名词，被广泛应用在 &lt;code&gt;Kubernetes&lt;/code&gt;和&lt;code&gt;OpenShift&lt;/code&gt; 等项目中，同时有很多第三方解决方案也会集成 &lt;code&gt;Prometheus&lt;/code&gt;。随着 &lt;code&gt;Kubernetes&lt;/code&gt; 在容器调度和管理上确定领头羊的地位，&lt;code&gt;Prometheus&lt;/code&gt; 也成为&lt;code&gt;Kubernetes&lt;/code&gt;容器监控的标配。&lt;/p&gt;
&lt;p&gt;考虑到k8s系统的复杂性和上手难度较高，本文将从最简单最基础的部分开始循序渐进，主要介绍如何在CentOS8系统上直接使用二进制文件和&lt;code&gt;systemd&lt;/code&gt;进行&lt;code&gt;Prometheus server&lt;/code&gt;的单机版本部署，本文只涉及到最基础的&lt;code&gt;Prometheus server&lt;/code&gt;、&lt;code&gt;node_exporter&lt;/code&gt;和&lt;code&gt;Grafana&lt;/code&gt;三个模块，暂未涉及&lt;code&gt;Pushgateway&lt;/code&gt;和&lt;code&gt;Alertmanager&lt;/code&gt;两个模块。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;code&gt;Prometheus server&lt;/code&gt;是用于作为服务端来存储各类&lt;code&gt;exporter&lt;/code&gt;在被监控节点上面采集的数据，而&lt;code&gt;Grafana&lt;/code&gt;则负责将&lt;code&gt;Prometheus server&lt;/code&gt;上的数据可视化，因此&lt;code&gt;Prometheus server&lt;/code&gt;和&lt;code&gt;Grafana&lt;/code&gt;不一定要部署在同一台机器上面，只需要部署两者的机器能够互相通信即可，同理，各类&lt;code&gt;exporter&lt;/code&gt;应该部署在需要被监控的节点机器上。这里由于机器数量有限且只作为测试，会将三者都部署在同一台机器上。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="monitor" scheme="https://tinychen.com/tags/monitor/"/>
    
    <category term="prometheus" scheme="https://tinychen.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>给ssh服务添加fail2ban安全认证</title>
    <link href="https://tinychen.com/20201222-centos8-install-fail2ban/"/>
    <id>https://tinychen.com/20201222-centos8-install-fail2ban/</id>
    <published>2020-12-22T03:00:00.000Z</published>
    <updated>2020-12-22T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解在<code>centos8</code>系统中安装<code>fail2ban</code>服务来提供ssh服务的安全性。</p><p>本文<a href="https://www.xmodulo.com/how-to-protect-ssh-server-from-brute-force-attacks-using-fail2ban.html">参考链接</a>。</p><span id="more"></span><p>fail2ban用来保护ssh的原理非常简单，主要就是通过检测ssh的日志，记录下频繁登录失败的IP，然后使用iptables来直接禁用掉这个IP对应的请求即可实现ssh的防暴力破解。</p><h1 id="1、安装fail2ban"><a href="#1、安装fail2ban" class="headerlink" title="1、安装fail2ban"></a>1、安装fail2ban</h1><p>centos中可以直接启用epel源来直接进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> epel-release<br>yum <span class="hljs-keyword">install</span> fail2ban<br></code></pre></div></td></tr></table></figure><h1 id="2、配置fail2ban"><a href="#2、配置fail2ban" class="headerlink" title="2、配置fail2ban"></a>2、配置fail2ban</h1><p><code>fail2ban</code>的主要配置目录位于<code>/etc/fail2ban</code></p><p><img src="https://resource.tinychen.com/20201222151327.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server fail2ban]# cat jail.local<br>[DEFAULT]<br><span class="hljs-meta">#</span><span class="bash"> 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名</span><br><span class="hljs-meta">#</span><span class="bash"> 用于指定哪些地址可以忽略 fail2ban 防御</span><br>ignoreip = 192.168.0.0/24<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 客户端主机被禁止的时长（秒）</span><br>bantime = 8640000<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 客户端主机被禁止前允许失败的次数</span><br>maxretry = 3<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查找失败次数的时长（秒）</span><br>findtime = 600<br><br>mta = sendmail<br><br>[ssh-iptables]<br>enabled = true<br>filter = sshd<br>action = iptables[name=SSH, port=ssh, protocol=tcp]<br>sendmail-whois[name=SSH-Fail2ban, dest=example@mail.com, sender=fail2ban@email.com]<br><span class="hljs-meta">#</span><span class="bash"> Red Hat 系的发行版</span><br>logpath = /var/log/secure<br><span class="hljs-meta">#</span><span class="bash"> ssh 服务的最大尝试次数</span><br>maxretry = 3<br></code></pre></div></td></tr></table></figure><h1 id="3、重启服务"><a href="#3、重启服务" class="headerlink" title="3、重启服务"></a>3、重启服务</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tiny-server jail.d]<span class="hljs-comment"># sudo systemctl restart fail2ban</span><br>[root@tiny-server jail.d]<span class="hljs-comment"># sudo systemctl status fail2ban</span><br>● fail2ban.service - Fail2Ban Service<br>   Loaded: loaded (/usr/lib/systemd/system/fail2ban.service; disabled; vendor preset: disabled)<br>   Active: active (running) since Tue 2020-12-22 16:01:45 +08; 5s ago<br>     Docs: man:fail2ban(1)<br>  Process: 46536 ExecStartPre=/bin/mkdir -p /run/fail2ban (code=exited, status=0/SUCCESS)<br> Main PID: 46539 (f2b/server)<br>    Tasks: 5 (<span class="hljs-built_in">limit</span>: 408286)<br>   Memory: 13.4M<br>   CGroup: /system.slice/fail2ban.service<br>           └─46539 /usr/bin/python3.6 -s /usr/bin/fail2ban-server -xf start<br><br>Dec 22 16:01:45 tiny-server systemd[1]: Starting Fail2Ban Service...<br>Dec 22 16:01:45 tiny-server systemd[1]: Started Fail2Ban Service.<br>Dec 22 16:01:45 tiny-server fail2ban-server[46539]: Server ready<br><br><span class="hljs-comment"># 测试是否正常运行</span><br>[root@tiny-server jail.d]<span class="hljs-comment"># sudo fail2ban-client ping</span><br>Server replied: pong<br><br><span class="hljs-comment"># 添加服务开机启动</span><br>[root@tiny-server jail.d]<span class="hljs-comment"># sudo systemctl enable fail2ban</span><br>Created symlink /etc/systemd/system/multi-user.target.wants/fail2ban.service → /usr/lib/systemd/system/fail2ban.service.<br><br><span class="hljs-comment"># 查看fail2ban的日志</span><br>[root@tiny-server fail2ban]<span class="hljs-comment"># tail -f /var/log/fail2ban.log</span><br><br><span class="hljs-comment"># 查看fail2ban状态</span><br>[root@tiny-server fail2ban]<span class="hljs-comment"># fail2ban-client status</span><br>Status<br>|- Number of jail:      1<br>`- Jail list:   ssh-iptables<br>[root@tiny-server fail2ban]<span class="hljs-comment"># fail2ban-client status ssh-iptables</span><br>Status <span class="hljs-keyword">for</span> the jail: ssh-iptables<br>|- Filter<br>|  |- Currently failed: 0<br>|  |- Total failed:     0<br>|  `- File list:        /var/<span class="hljs-built_in">log</span>/secure<br>`- Actions<br>   |- Currently banned: 0<br>   |- Total banned:     0<br>   `- Banned IP list:<br><br><span class="hljs-comment"># 查看iptables的禁用情况</span><br>sudo iptables --list -n<br>    <br><span class="hljs-comment"># 解禁一个特定IP</span><br>fail2ban-client <span class="hljs-built_in">set</span> ssh-iptables unbanip 192.168.1.8<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要讲解在&lt;code&gt;centos8&lt;/code&gt;系统中安装&lt;code&gt;fail2ban&lt;/code&gt;服务来提供ssh服务的安全性。&lt;/p&gt;
&lt;p&gt;本文&lt;a href=&quot;https://www.xmodulo.com/how-to-protect-ssh-server-from-brute-force-attacks-using-fail2ban.html&quot;&gt;参考链接&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
    <category term="fail2ban" scheme="https://tinychen.com/tags/fail2ban/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu20.04初始化的部分操作</title>
    <link href="https://tinychen.com/20201220-ubuntu2004-init/"/>
    <id>https://tinychen.com/20201220-ubuntu2004-init/</id>
    <published>2020-12-20T03:00:00.000Z</published>
    <updated>2020-12-20T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解在<code>ubuntu20.04</code>系统安装后需要进行的一些初始化事项。</p><span id="more"></span><h1 id="1、安装ssh服务"><a href="#1、安装ssh服务" class="headerlink" title="1、安装ssh服务"></a>1、安装ssh服务</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># ubuntu默认情况下需要自己安装ssh服务</span><br>sudo apt install openssl-server<br></code></pre></div></td></tr></table></figure><h1 id="2、更换镜像源（清华）"><a href="#2、更换镜像源（清华）" class="headerlink" title="2、更换镜像源（清华）"></a>2、更换镜像源（清华）</h1><p>参考的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">官方链接</a>，Ubuntu 的软件源配置文件是 <code>/etc/apt/sources.list</code>。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><br><span class="hljs-comment"># 预发布软件源，不建议启用</span><br><span class="hljs-comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></code></pre></div></td></tr></table></figure><h1 id="3、防火墙"><a href="#3、防火墙" class="headerlink" title="3、防火墙"></a>3、防火墙</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 禁用防火墙</span><br>tinychen@tiny-server:~$ sudo ufw <span class="hljs-built_in">disable</span><br>Firewall stopped and disabled on system startup<br></code></pre></div></td></tr></table></figure><h1 id="4、禁用IPv6"><a href="#4、禁用IPv6" class="headerlink" title="4、禁用IPv6"></a>4、禁用IPv6</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.all.disable_ipv6=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.default.disable_ipv6=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.lo.disable_ipv6=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sudo sysctl -p<br></code></pre></div></td></tr></table></figure><h1 id="5、安装nvidia显卡驱动"><a href="#5、安装nvidia显卡驱动" class="headerlink" title="5、安装nvidia显卡驱动"></a>5、安装nvidia显卡驱动</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看显卡型号和推荐安装的驱动</span><br>tinychen@tiny-server:~$ ubuntu-drivers devices<br>== /sys/devices/pci0000:00/0000:00:1c.7/0000:08:00.0 ==<br>modalias : pci:v000010DEd00000A66sv00001B0Asd00009060bc03sc00i00<br>vendor   : NVIDIA Corporation<br>model    : GT218 [GeForce 310]<br>driver   : nvidia-340 - distro non-free recommended<br>driver   : xserver-xorg-video-nouveau - distro free <span class="hljs-built_in">builtin</span><br><br><span class="hljs-comment"># 自动安装默认推荐的驱动</span><br>tinychen@tiny-server:~$ sudo ubuntu-drivers autoinstall<br>[sudo] password <span class="hljs-keyword">for</span> tinychen:<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要讲解在&lt;code&gt;ubuntu20.04&lt;/code&gt;系统安装后需要进行的一些初始化事项。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>给ssh服务添加谷歌双重认证</title>
    <link href="https://tinychen.com/20201203-ssh-add-google-authenticator/"/>
    <id>https://tinychen.com/20201203-ssh-add-google-authenticator/</id>
    <published>2020-12-03T03:00:00.000Z</published>
    <updated>2020-12-03T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解在centos7系统中添加谷歌验证器来开启ssh的双重认证从而提高ssh服务在使用密码登录的时候的安全性。</p><span id="more"></span><p><a href="https://linux.cn/article-3725-1.html">本文参考链接。</a></p><h1 id="1、Linux上安装google验证器"><a href="#1、Linux上安装google验证器" class="headerlink" title="1、Linux上安装google验证器"></a>1、Linux上安装google验证器</h1><p>首先我们需要启用epel仓库</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install epel-release<br></code></pre></div></td></tr></table></figure><p>然后我们需要安装相关依赖库</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install pam-devel<br></code></pre></div></td></tr></table></figure><p>接着直接安装google验证器</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本信息</span><br>yum list google-authenticator<br><span class="hljs-comment"># 直接安装</span><br>yum install google-authenticator<br></code></pre></div></td></tr></table></figure><p>安装完成之后进行初始化配置，直接运行下面命令开始初始化配置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">google-authenticator<br></code></pre></div></td></tr></table></figure><p>初始化过程中生成二维码需要通过手机端的<code>google身份验证器</code>这个软件来扫描然后就可以添加到一个30s变化一次的动态密码；</p><p>另外还有一个生成的<code>emergency scratch codes</code>记得自己小心保存起来，这个是当手机丢失的时候用来紧急登录的；</p><p>其他的选项根据自己的需求进行选择，不知道的话就默认选择<code>y</code>即可。</p><h1 id="2、给ssh启用google验证"><a href="#2、给ssh启用google验证" class="headerlink" title="2、给ssh启用google验证"></a>2、给ssh启用google验证</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;auth required pam_google_authenticator.so&quot;</span> &gt;&gt; /etc/pam.d/sshd <br></code></pre></div></td></tr></table></figure><p>修改ssh的配置文件<code>/etc/ssh/sshd_config</code>，将下列参数调整为<code>yes</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ChallengeResponseAuthentication yes<br></code></pre></div></td></tr></table></figure><p>最后我们重启ssh服务即可</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl restart sshd<br></code></pre></div></td></tr></table></figure><h1 id="3、效果"><a href="#3、效果" class="headerlink" title="3、效果"></a>3、效果</h1><p>重启之后需要再次使用密码进行ssh登录的时候就需要先输入前面的谷歌验证码才能再输入密码登录。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Verification code:</span><br><span class="hljs-attr">Password:</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要讲解在centos7系统中添加谷歌验证器来开启ssh的双重认证从而提高ssh服务在使用密码登录的时候的安全性。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>对KVM虚拟机添加ttyS0实现console操作</title>
    <link href="https://tinychen.com/20201129-add-kvm-console-ttys0/"/>
    <id>https://tinychen.com/20201129-add-kvm-console-ttys0/</id>
    <published>2020-11-29T03:00:00.000Z</published>
    <updated>2020-11-29T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何给KVM虚拟机添加ttyS0终端实现宿主机的console操作。</p><span id="more"></span><p>一般来说直接创建的虚拟机是没办法在宿主机上直接通过console命令来操作，在使用console命令的时候会卡在下列界面</p><p><img src="https://resource.tinychen.com/20201130101109.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加到securetty中允许登录</span><br>grep ttyS0 /etc/securetty || echo &quot;ttyS0&quot; &gt;&gt; /etc/securetty<br><span class="hljs-meta">#</span><span class="bash"> 使用grubby在内核参数中添加ttyS0</span><br>grubby --update-kernel=ALL --args=console=ttyS0<br><span class="hljs-meta">#</span><span class="bash"> 添加到inittab中实现开机初始化tty</span><br>grep ttyS0 /etc/inittab || echo &quot;S0:12345:respawn:/sbin/agetty ttyS0 115200&quot; &gt;&gt; /etc/inittab<br><span class="hljs-meta">#</span><span class="bash"> 重启生效</span><br>reboot<br></code></pre></div></td></tr></table></figure><blockquote><p> <code>/etc/inittab</code>文件中的配置按照以下格式进行书写</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>：runlevels：action：process<br></code></pre></div></td></tr></table></figure><ul><li>id：它是每个登记项的标识符，用于唯一标识每个登记项，不能重复</li><li>runlevels：系统的运行级别，表示process的action要在哪个级别下运行，该段中可以定义多个运行级别，各级别之间直接写不用分隔符；如果为空，表示在所有的运行级别运行</li><li>action：表示对应登记项的process在一定条件下所要执行的动作</li><li>process：表示启动哪个程序或脚本或执行哪个命令等</li></ul></blockquote><p>之后再次尝试就可以正常操作了</p><p><img src="https://resource.tinychen.com/20201130101844.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何给KVM虚拟机添加ttyS0终端实现宿主机的console操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="kvm" scheme="https://tinychen.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>给cp和mv命令添加进度条</title>
    <link href="https://tinychen.com/20201128-add-progess-bar-in-cp-mv/"/>
    <id>https://tinychen.com/20201128-add-progess-bar-in-cp-mv/</id>
    <published>2020-11-28T03:00:00.000Z</published>
    <updated>2020-11-28T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用github上的开源项目<a href="https://github.com/jarun/advcpmv">advcpmv</a>来实现Linux中的<strong>cp</strong>和<strong>mv</strong>命令的进度条。</p><span id="more"></span><p>由于<code>cp</code>和<code>mv</code>命令都是属于<code>coreutils</code>工具包下的，因此我们的主要操作就是在编译<code>coreutils</code>的时候加入补丁从而实现进度条功能</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意尽量不要使用root用户操作</span><br>[tinychen@tiny-server ~]$ pwd<br>/home/tinychen<br><span class="hljs-meta">#</span><span class="bash"> 下载coreutils</span><br>[tinychen@tiny-server ~]$ wget http://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.xz<br>[tinychen@tiny-server ~]$ tar -xJf coreutils-8.32.tar.xz<br>[tinychen@tiny-server ~]$ cd coreutils-8.32/<br><span class="hljs-meta">#</span><span class="bash"> 下载github上的补丁</span><br>[tinychen@tiny-server coreutils-8.32]$ wget https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-8.32.patch<br><span class="hljs-meta">#</span><span class="bash"> 打补丁，实现进度条显示</span><br>[tinychen@tiny-server coreutils-8.32]$ patch -p1 -i advcpmv-0.8-8.32.patch<br>patching file src/copy.c<br>patching file src/copy.h<br>patching file src/cp.c<br>patching file src/mv.c<br><span class="hljs-meta">#</span><span class="bash"> 编译安装</span><br>[tinychen@tiny-server coreutils-8.32]$ ./configure<br>[tinychen@tiny-server coreutils-8.32]$ make<br><span class="hljs-meta">#</span><span class="bash"> 将打补丁生成的cp和mv命令的二进制文件复制到bin目录下</span><br>[tinychen@tiny-server coreutils-8.32]$ sudo cp src/cp /usr/local/bin/cp<br>[tinychen@tiny-server coreutils-8.32]$ sudo cp src/mv /usr/local/bin/mv<br></code></pre></div></td></tr></table></figure><p>接着我们只需要在使用<code>cp</code>和<code>mv</code>命令的时候加上<code>-g</code>参数就可以显示进度条了，为了方便起见我们可以在<code>.bashrc</code>文件中设置<code>alias</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> cp=<span class="hljs-string">&#x27;cp -ig&#x27;</span><br><span class="hljs-built_in">alias</span> mv=<span class="hljs-string">&#x27;mv -ig&#x27;</span><br></code></pre></div></td></tr></table></figure><p>试一下实际效果，复制一个大文件夹的时候可以显示总进度和当前文件复制进度，以及在复制完成之后还可以显示复制的过程中的平均速度。</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">[root@tiny-server ~]# cp -r <span class="hljs-regexp">/samba/</span>Elements02<span class="hljs-regexp">/kvm/</span>* <span class="hljs-regexp">/kvm/</span><br><br><span class="hljs-number">0</span> files copied so far...                                                                                                                                     <span class="hljs-number">1.6</span> GiB /  <span class="hljs-number">67.2</span> GiB<br>[===&gt;                                                                                                                                                                   ]  <span class="hljs-number">2.4</span> %<br>Copying at <span class="hljs-number">178.4</span> MiB/s (about <span class="hljs-number">0</span>h <span class="hljs-number">6</span>m <span class="hljs-number">45</span>s remaining)<br><span class="hljs-regexp">/samba/</span>Elements02<span class="hljs-regexp">/kvm/i</span>so<span class="hljs-regexp">/CentOS-6.10-x86_64-bin-DVD1.iso                                                                                                    1.6 GiB /</span>   <span class="hljs-number">3.7</span> GiB<br>[========================================================================&gt;                                                                                              ] <span class="hljs-number">43.4</span> %<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20201130093041.png"></p><p><img src="https://resource.tinychen.com/20201130093045.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用github上的开源项目&lt;a href=&quot;https://github.com/jarun/advcpmv&quot;&gt;advcpmv&lt;/a&gt;来实现Linux中的&lt;strong&gt;cp&lt;/strong&gt;和&lt;strong&gt;mv&lt;/strong&gt;命令的进度条。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh工具申请let&#39;s encrypt的泛域名证书</title>
    <link href="https://tinychen.com/20201127-use-acme-letsencrypt-ecc-certs/"/>
    <id>https://tinychen.com/20201127-use-acme-letsencrypt-ecc-certs/</id>
    <published>2020-11-27T03:00:00.000Z</published>
    <updated>2020-11-27T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>工具来申请let’s encrypt的泛域名证书。</p><span id="more"></span><h1 id="1、安装acme-sh"><a href="#1、安装acme-sh" class="headerlink" title="1、安装acme.sh"></a>1、安装acme.sh</h1><p>安装acme.sh之前我们需要先安装必要的工具和依赖</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install socat curl -y<br></code></pre></div></td></tr></table></figure><p>接着我们安装acme.sh，过程比较简单，只需要执行下列操作即可自动安装。对于安装的用户，官方声称可以使用root用户或者普通用户，这里我们使用root用户进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">curl https://get.acme.sh | sh<br></code></pre></div></td></tr></table></figure><p>安装的过程比较简单，会在目录下创建一个隐藏目录，所有的相关文件都会存放在这里，同时还会创建一个crontab来定时执行任务检测证书。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@aliyun /root]# pwd<br>/root<br>[root@aliyun /root]# curl  https://get.acme.sh | sh<br><span class="hljs-meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100   775    0   775    0     0    963      0 --:--:-- --:--:-- --:--:--   962<br><span class="hljs-meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  201k  100  201k    0     0  47150      0  0:00:04  0:00:04 --:--:-- 47156<br>[Fri Nov 27 09:50:57 CST 2020] Installing from online archive.<br>[Fri Nov 27 09:50:57 CST 2020] Downloading https://github.com/acmesh-official/acme.sh/archive/master.tar.gz<br>[Fri Nov 27 09:51:00 CST 2020] Extracting master.tar.gz<br>[Fri Nov 27 09:51:00 CST 2020] Installing to /root/.acme.sh<br>[Fri Nov 27 09:51:00 CST 2020] Installed to /root/.acme.sh/acme.sh<br>[Fri Nov 27 09:51:00 CST 2020] Installing alias to &#x27;/root/.bashrc&#x27;<br>[Fri Nov 27 09:51:00 CST 2020] OK, Close and reopen your terminal to start using acme.sh<br>[Fri Nov 27 09:51:00 CST 2020] Installing alias to &#x27;/root/.cshrc&#x27;<br>[Fri Nov 27 09:51:00 CST 2020] Installing alias to &#x27;/root/.tcshrc&#x27;<br>[Fri Nov 27 09:51:00 CST 2020] Installing cron job<br>21 0 * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null<br>[Fri Nov 27 09:51:00 CST 2020] Good, bash is found, so change the shebang to use bash as preferred.<br>[Fri Nov 27 09:51:01 CST 2020] OK<br>[Fri Nov 27 09:51:01 CST 2020] Install success!<br>[root@aliyun /root]# crontab -l<br>21 0 * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null<br>[root@aliyun /root]# ll -A | grep acme<br>drwx------  5 root root 4.0K Nov 27 09:51 .acme.sh<br></code></pre></div></td></tr></table></figure><h1 id="2、配置阿里云DNS解析"><a href="#2、配置阿里云DNS解析" class="headerlink" title="2、配置阿里云DNS解析"></a>2、配置阿里云DNS解析</h1><p>由于泛域名证书申请的时候需要使用DNS解析作为认证，为了保证自动申请证书成功，我们需要申请一个Access_Key来进行操作，这里以阿里云为例</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@aliyun <span class="hljs-regexp">/root/</span>.acme.sh/dnsapi]<span class="hljs-comment"># pwd dns_ali.sh</span><br><span class="hljs-regexp">/root/</span>.acme.sh/dnsapi<br></code></pre></div></td></tr></table></figure><p>在里面找到<code>Ali_Key</code>和<code>Ali_Secret</code>两个字段，将申请到的阿里云<code>access_key</code>填入里面，注意在阿里云中创建了子用户之后，需要授予对应的权限才能对DNS解析进行操作</p><p><img src="https://resource.tinychen.com/20201127123003.png" alt="image-20201127101024377"></p><h1 id="3、生成证书"><a href="#3、生成证书" class="headerlink" title="3、生成证书"></a>3、生成证书</h1><p>我们以阿里云DNS申请泛域名证书为例，执行下列命令则可以生成对应的证书</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./acme.sh</span> <span class="hljs-params">--issue</span> <span class="hljs-params">--dns</span> dns_ali -d tinychen.com -d *<span class="hljs-string">.tinychen.com</span><br></code></pre></div></td></tr></table></figure><p>对于ecc证书，我们只需要在后面加上<code>--keylength ec-256</code></p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./acme.sh</span> <span class="hljs-params">--issue</span> <span class="hljs-params">--dns</span> dns_ali -d tinychen.com -d *<span class="hljs-string">.tinychen.com</span> <span class="hljs-params">--keylength</span> ec-256<br></code></pre></div></td></tr></table></figure><p>对于生成的证书，证书链和公钥是分开的，在nginx中，为了保证证书的完整性，我们一般使用带有证书链的公钥，也就是对应这里生成的<code>fullchain.cer</code>文件就包含了公钥和证书链，我们可以直接使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用&lt;a href=&quot;https://github.com/acmesh-official/acme.sh&quot;&gt;acme.sh&lt;/a&gt;工具来申请let’s encrypt的泛域名证书。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="tls" scheme="https://tinychen.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>k8s系列01-什么是kubernetes？</title>
    <link href="https://tinychen.com/20201120-k8s-01-what-is-kubernetes/"/>
    <id>https://tinychen.com/20201120-k8s-01-what-is-kubernetes/</id>
    <published>2020-11-20T03:00:00.000Z</published>
    <updated>2020-11-20T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍什么是k8s以及k8s的基本架构和相关基础概念。</p><p><strong>Kubernetes</strong> 一词源于希腊语，意为“舵手”或“飞行员”，作为一个可移植、可扩展的开源平台，k8s可以使用声明式配置来管理编排容器服务并且提高自动化水平和效率。同时，得益于庞大且仍不断在增长的生态系统支撑，k8s拥有海量可用的周边服务、工具和生态支持。</p><span id="more"></span><p><a href="https://kubernetes.io/">kubernetes官网</a>上给出的定义如下：Kubernetes是用于自动部署，扩展和管理容器化应用程序的开源系统。（Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.）它将组成应用程序的容器组合成逻辑单元（pod），以便于管理和服务发现。Kubernetes 源自Google 15 年生产环境的运维经验，同时凝聚了社区的最佳创意和实践。</p><h1 id="1、软件部署的迭代进程"><a href="#1、软件部署的迭代进程" class="headerlink" title="1、软件部署的迭代进程"></a>1、软件部署的迭代进程</h1><p>一般来说，我们可以把软件部分分为三个阶段：<strong>传统部署、虚拟化部署、容器化部署</strong>。</p><blockquote><p>注意容器化虽然也属于虚拟化的一种，但是这里所指的虚拟化部署指的是通过KVM等虚拟化方式创建的虚拟机来部署应用。</p></blockquote><p><img src="https://resource.tinychen.com/20210111092521.png"></p><ul><li><p><strong>传统部署</strong></p><p>在传统部署时代，所有的应用都运行在同一台物理机上面。这给资源的隔离带来了很大的困扰，不同的应用会因为争夺系统资源而降低性能表现，也有可能会出现一个应用占用了大部分资源而另一个应用无资源可用的情况。同时，运维人员维护如此多的运行不同应用的物理机也是相当麻烦的。</p></li><li><p><strong>虚拟化部署</strong></p><p>在虚拟化部署时代，通过在操作系统中加入了Hypervisor，以及CPU等硬件的更新迭代支持，可以在一台物理机上面通过虚拟化的方式创建多台虚拟机Virtual Machines (VMs)。每台虚拟机都是一个独立的操作系统，拥有自己的文件系统和各种资源以及虚拟化的硬件。运维人员只需要维护各种虚拟机镜像镜像即可。</p></li><li><p><strong>容器化部署</strong></p><p>前面我们说过容器化严格来说也是虚拟化的一种，只不过容器化更进一步，通过容器运行时（Container Runtime），可以让不同的容器共享底层宿主机的操作系统，因为容器化被视为是一种轻量的虚拟化技术。同时，和虚拟机一样，容器也有自己的文件系统、CPU、内存、进程空间等资源。而且由于容器和底层的操作系统分离，一个容器可以运行在不同操作系统和云环境上。容器化技术的一些特点如下：</p><ul><li><p><strong>解耦了应用的创建和部署过程</strong>：对比虚拟机，可以提供更高的易用性和效率</p></li><li><p><strong>持续开发、集成、部署（CI/CD）</strong>：得益于容器镜像的不变性，容器化技术可以高效快速地频繁创建高质量的容器镜像用于部署和回滚</p></li><li><p><strong>开发和运维分离</strong>：创建应用容器镜像和部署应用的时空连续性被打断，创建之后不需要立即部署，而是使用容器作为中介将其保存起来，从而使得应用和底层的基础架构解耦</p></li><li><p><strong>出色的可观察性</strong>：不仅仅是系统层面的指标信息，包括应用的健康状态和其他变量也能够展示出来</p></li><li><p><strong>环境一致性</strong>：开发、测试和生产环境只要使用同样的镜像，就可以保证环境的一致性</p></li><li><p><strong>跨云和操作系统</strong>：容器可以运行在各种云环境和不同的操作系统上</p></li><li><p><strong>以应用为中心进行管理</strong>：容器的抽象层级上升到了应用级别，因此可以从应用的逻辑资源层面进行调度分配和管理</p></li><li><p><strong>松散耦合、分布式、弹性、解放的微服务</strong>：应用程序被分解成较小的独立部分， 并且可以动态部署和管理，而不是在一台大型的物理机或虚拟机上整体运行</p></li><li><p><strong>资源隔离</strong>：可预测的应用程序性能</p></li><li><p><strong>资源利用</strong>：高效率和高密度</p></li></ul></li></ul><h1 id="2、k8s的优势"><a href="#2、k8s的优势" class="headerlink" title="2、k8s的优势"></a>2、k8s的优势</h1><p>容器无疑是一种运行和管理应用的良方。在生产环境中，我们需要保证每一个容器服务都正常运行，如果某个容器宕掉了，需要重启一个新的容器来进行替补。如果上述的操作能够被某个系统自动实现呢？这时候k8s的优势就展现出来了。k8s提供了一个弹性的分布式系统框架，它照顾到了应用扩容、故障转移和部署模式等多个方面。k8s的一些主要特性有：</p><ul><li><p><strong>服务发现和负载均衡</strong>：k8s可以通过DNS或者是IP地址来暴露容器中的服务。如果某个容器的流量/请求特别高，k8s能够主动实现负载均衡来降低该容器的流量/请求从而保证容器的稳定运行</p></li><li><p><strong>存储编排</strong>：k8s允许我们根据自己的实际需求和选择来挂载存储系统，支持但不限于本地存储、云存储等各种方式</p></li><li><p><strong>自动部署和回滚</strong>：我们可以使用k8s来声明已经部署的容器的期望状态，它可以以受控的速率将实际状态切换到期望状态。例如我们可以声明某个容器的运行数量的期望值为10，k8s会自动将容器的数量调整到该期望状态；我们还可以使用自动化 Kubernetes 来为部署创建新容器， 删除现有容器并将它们的所有资源用于新容器</p></li><li><p><strong>自动装箱计算</strong>：我们可以在k8s中指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，k8s会根据每个node节点的状态和每个容器所需要的资源来进行智能调度，确保资源的最大化利用</p></li><li><p><strong>自我修复</strong></p><p>k8s能够自动重启运行失败的容器、替换容器、杀死不响应 <code>用户定义的运行状况检查</code>的容器，并且在准备好服务之前不将其通告给客户端，从而保证客户端的请求不会被分发到有问题的容器中</p></li><li><p><strong>密钥与配置管理</strong></p><p>k8s允许我们存储和管理如密码、OAuth 令牌和 ssh 密钥等敏感信息，我们可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也不需要在配置中暴露密钥等敏感信息</p></li></ul><h1 id="3、k8s不是什么"><a href="#3、k8s不是什么" class="headerlink" title="3、k8s不是什么"></a>3、k8s不是什么</h1><p>官方一直在强调这个观点：<strong>k8s并不是一个传统的包罗万象的PaaS平台，</strong>它的设计思想是提供最核心的基础框架和必要的核心功能，而在其他的选择上尽可能保证多样的兼容性和灵活性。尽管因为操作在容器级别层面而不是硬件层面，使得k8s提供了一些如部署、扩容、负载均衡等和PaaS平台类似的特性，但是对于日志、存储、报警、监控、CI/CD等其他诸多方面，k8s选择了将选择权交给使用者，这也是构建k8s丰富的生态中的重要一环。</p><ul><li><p>k8s不限制支持的应用类型：包括无状态（nginx等）、有状态（数据库等）和数据处理（AI、大数据、深度学习等）各种各样的应用类型，基本上能在容器中运行的应用都能在k8s中运行，而事实上绝大多数应用都能在容器中运行，因此绝大多数应用都能在k8s中运行</p></li><li><p>不负责部署源代码、不构建程序、没有CI/CD：k8s并不涉及这些部分，使用者可以根据自己的偏好来选择合适的解决方案</p></li><li><p>不提供应用级别的服务：不提供中间件、数据库、数据存储集群等作为内置服务，但是它们都能够很好地运行在k8s中，也能通过各种方式将服务暴露出去使用</p></li><li><p>不提供日志、监控和报警等解决方案，但是提供了一些概念和指标数据等用于收集导出机制</p></li><li><p>不提供或不要求配置语言/系统（例如 jsonnet），它提供了可以由任意形式的声明性规范所构成的声明性 API</p></li><li><p>不提供也不采用任何全面的机器配置、维护、管理或自我修复系统</p></li><li><p>此外，Kubernetes 不仅仅是一个编排系统，实际上它消除了编排的需要。 编排的技术定义是执行已定义的工作流程：首先执行 A，然后执行 B，再执行 C。 相比之下，Kubernetes 包含一组独立的、可组合的控制过程， 这些过程连续地将当前状态驱动到所提供的所需状态。 如何从 A 到 C 的方式无关紧要，也不需要集中控制，这使得系统更易于使用 且功能更强大、系统更健壮、更为弹性和可扩展。</p></li></ul><h1 id="4、k8s基本架构"><a href="#4、k8s基本架构" class="headerlink" title="4、k8s基本架构"></a>4、k8s基本架构</h1><p>我们先来看看官方给出的基本架构图。下图只包含了非常基础的k8s架构组件。我们先从这里开始。</p><p><img src="https://resource.tinychen.com/20201216164907.png" alt="image-20201216164905461"></p><p>首先上图灰色区域表示的是一整个k8s集群，整个k8s的架构其实和我们常见的master-worker模型非常相似，只不过由于这是分布式的集群，要更复杂一些。</p><h2 id="4-1-Control-Plane"><a href="#4-1-Control-Plane" class="headerlink" title="4.1 Control Plane"></a>4.1 Control Plane</h2><p>首先我们看到蓝色框内的<code>Control Plane</code>，这个是整个集群的<strong>控制平面</strong>，相当于是master进程的加强版。k8s中的<code>Control Plane</code>一般都会运行在Master节点上面。<strong>在默认情况下</strong>，Master节点并不会运行应用工作负载，所有的应用工作负载都交由Node节点负责。</p><p><strong>控制平面</strong>中的Master节点主要运行控制平面的各种组件，它们主要的作用就是维持整个k8s集群的正常工作、存储集群的相关信息，同时为集群提供故障转移、负载均衡、任务调度和高可用等功能。对于Master节点一般有多个用于保证高可用，而控制平面中的各个组件均以容器的Pod形式运行在Master节点中，大部分的组件需要在每个Master节点上都运行，少数如<code>DNS</code>服务等组件则只需要保证足够数量的高可用即可。</p><h3 id="4-1-1-kube-apiserver"><a href="#4-1-1-kube-apiserver" class="headerlink" title="4.1.1 kube-apiserver"></a>4.1.1 kube-apiserver</h3><p>k8s集群的控制平面的核心是API服务器，而API服务器主要就是由<code>kube-apiserver</code>组件实现的，它被设计为可水平扩展，即通过部署不同数量的实例来进行缩放从而适应不同的流量。API服务器作为整个k8s控制平面的前端，负责提供 HTTP API，以供用户、集群中的不同部分组件和集群外部组件相互通信。</p><p>并且kubernetes api在设计的时候是遵循REST思想的，我们可以通过kubeadm或者kubectl这类的CLI工具来操控API从而控制整个k8s集群，也可以通过其他的Web UI来进行操控。</p><h3 id="4-1-2-kube-scheduler"><a href="#4-1-2-kube-scheduler" class="headerlink" title="4.1.2 kube-scheduler"></a>4.1.2 kube-scheduler</h3><p>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</p><p>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p><h3 id="4-1-3-kube-controller-manager"><a href="#4-1-3-kube-controller-manager" class="headerlink" title="4.1.3 kube-controller-manager"></a>4.1.3 kube-controller-manager</h3><p>在主节点上运行 <code>控制器</code> 的组件。</p><p>从逻辑上讲，每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p><p>这些控制器包括:</p><ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li><li>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</li></ul><h3 id="4-1-4-etcd"><a href="#4-1-4-etcd" class="headerlink" title="4.1.4 etcd"></a>4.1.4 etcd</h3><p><code>etcd</code> 是兼具一致性和高可用性的键值<code>key-value</code>数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库，负责保存Kubernetes Cluster的配置信息和各种资源的状态信息，当数据发生变化时，etcd 会快速地通知Kubernetes相关组件。</p><p>Kubernetes 集群的 etcd 数据库通常需要有个备份计划。此外还有一种k8s集群部署的高可用方案是将etcd数据库从容器中抽离出来，单独作为一个高可用数据库部署，从而为k8s提供稳定可靠的高可用数据库存储。</p><h3 id="4-1-5-cloud-controller-manager"><a href="#4-1-5-cloud-controller-manager" class="headerlink" title="4.1.5 cloud-controller-manager"></a>4.1.5 cloud-controller-manager</h3><p><code>cloud-controller-manager</code> <strong>仅运行特定于云平台的控制回路</strong>。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。<strong>因此可以将其理解为云服务厂商专用的kube-controller-manager</strong>，这里不作赘述。</p><h3 id="4-1-6-DNS"><a href="#4-1-6-DNS" class="headerlink" title="4.1.6 DNS"></a>4.1.6 DNS</h3><p>DNS虽然在k8s的官方文档被划分为插件部分，但是从k8s的原理中我们不难看出其重要性，因此几乎所有 Kubernetes 集群都应该有<a href="https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/">集群 DNS</a>， 因为很多示例都需要 DNS 服务。</p><p>集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。</p><p>k8s默认使用的是coreDNS组件。</p><h2 id="4-2-Worker-Node"><a href="#4-2-Worker-Node" class="headerlink" title="4.2 Worker Node"></a>4.2 Worker Node</h2><p><code>Worker Node</code>的概念是和前面的<code>Control Plane</code>相对立的，集群中的节点基本都可以分为控制节点（<code>Control Plane</code>/<code>master</code>）和工作节点(<code>Worker Node</code>/<code>worker</code>)两大类。一般来说集群中的主要工作负载都是运行在<code>Worker Node</code>上面的，Master节点默认情况下不参与工作负载，但是可以手动设置为允许参与工作负载。</p><h3 id="4-3-1-Pod"><a href="#4-3-1-Pod" class="headerlink" title="4.3.1 Pod"></a>4.3.1 Pod</h3><p>Pod是k8s集群中最小的工作单元，和docker里面的单个运行的容器不同，Pod中可以包含多个容器，它们共享相同的计算、网络和存储等资源（相当于在一台机器上运行多个应用）</p><h3 id="4-3-2-kubelet"><a href="#4-3-2-kubelet" class="headerlink" title="4.3.2 kubelet"></a>4.3.2 kubelet</h3><p>kubelet是k8s集群中的每个节点上（包括master节点）都会运行的代理。 它能够保证容器都运行在 Pod 中。kubelet 只会管理由 Kubernetes 创建的容器。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 当Scheduler确定在某个Node上运行Pod后，会将Pod的具体配置信息（image、volume等）发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向Master报告运行状态。</p><h3 id="4-3-3-kube-proxy"><a href="#4-3-3-kube-proxy" class="headerlink" title="4.3.3 kube-proxy"></a>4.3.3 kube-proxy</h3><p><a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a> 是集群中每个节点上运行的网络代理， kube-proxy通过维护主机上的网络规则并执行连接转发，实现了Kubernetes服务抽象。</p><p>service在逻辑上代表了后端的多个Pod，外界通过service访问Pod。service接收到的请求就是通过kube-proxy转发到Pod上的，kube-proxy服务负责将访问service的TCP/UDP数据流转发到后端的容器。<strong>如果有多个副本，kube-proxy会实现负载均衡。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍什么是k8s以及k8s的基本架构和相关基础概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 一词源于希腊语，意为“舵手”或“飞行员”，作为一个可移植、可扩展的开源平台，k8s可以使用声明式配置来管理编排容器服务并且提高自动化水平和效率。同时，得益于庞大且仍不断在增长的生态系统支撑，k8s拥有海量可用的周边服务、工具和生态支持。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>centos8使用grubby修改内核启动参数</title>
    <link href="https://tinychen.com/20201118-centos8-use-grubby-modify-kernel/"/>
    <id>https://tinychen.com/20201118-centos8-use-grubby-modify-kernel/</id>
    <published>2020-11-18T03:00:00.000Z</published>
    <updated>2020-11-18T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>grubby是一个用于更新和显示有关各种体系结构特定的引导程序的配置文件信息的命令行工具。 它主要设计用于安装新内核并需要查找有关当前引导环境的信息的脚本，同时也可以对启动内核的各项信息参数进行修改。</p><p>本文主要介绍如何在centos8中使用grubby工具来对系统的内核启动参数和启动顺序进行调整。</p><span id="more"></span><p>使用yum或者dnf可以直接安装grubby工具。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# yum install grubby<br>Last metadata expiration check: 1:29:38 ago on Wed 18 Nov 2020 09:44:26 AM +08.<br>Package grubby-8.40-38.el8.x86_64 is already installed.<br>Dependencies resolved.<br>Nothing to do.<br>Complete!<br></code></pre></div></td></tr></table></figure><p>查看当前的默认启动内核：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# grubby --default-kernel<br>/boot/vmlinuz-4.18.0-193.28.1.el8_2.x86_64<br></code></pre></div></td></tr></table></figure><p>查看系统安装的全部内核：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# grubby --info=ALL<br>index=0<br>kernel=&quot;/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on $tuned_params&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-5.9.1-1.el8.elrepo.x86_64.img $tuned_initrd&quot;<br>title=&quot;Red Hat Enterprise Linux (5.9.1-1.el8.elrepo.x86_64) 8.2 (Ootpa)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-5.9.1-1.el8.elrepo.x86_64&quot;<br>index=1<br>kernel=&quot;/boot/vmlinuz-4.18.0-193.28.1.el8_2.x86_64&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on $tuned_params&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-4.18.0-193.28.1.el8_2.x86_64.img $tuned_initrd&quot;<br>title=&quot;CentOS Linux (4.18.0-193.28.1.el8_2.x86_64) 8 (Core)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-4.18.0-193.28.1.el8_2.x86_64&quot;<br>index=2<br>kernel=&quot;/boot/vmlinuz-4.18.0-193.19.1.el8_2.x86_64&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on $tuned_params&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-4.18.0-193.19.1.el8_2.x86_64.img $tuned_initrd&quot;<br>title=&quot;CentOS Linux (4.18.0-193.19.1.el8_2.x86_64) 8 (Core)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-4.18.0-193.19.1.el8_2.x86_64&quot;<br>index=3<br>kernel=&quot;/boot/vmlinuz-4.18.0-193.el8.x86_64&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on $tuned_params&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-4.18.0-193.el8.x86_64.img $tuned_initrd&quot;<br>title=&quot;CentOS Linux (4.18.0-193.el8.x86_64) 8 (Core)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-4.18.0-193.el8.x86_64&quot;<br>index=4<br>kernel=&quot;/boot/vmlinuz-0-rescue-12ab47b22fef4c02bcdc88b340d5f706&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-0-rescue-12ab47b22fef4c02bcdc88b340d5f706.img&quot;<br>title=&quot;CentOS Linux (0-rescue-12ab47b22fef4c02bcdc88b340d5f706) 8 (Core)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-0-rescue&quot;<br></code></pre></div></td></tr></table></figure><p>设置新的默认启动内核：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用路径来指定内核，可以使用--set-default=kernel-path</span><br>[root@tiny-server ~]# grubby --set-default=/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64<br>The default is /boot/loader/entries/12ab47b22fef4c02bcdc88b340d5f706-5.9.1-1.el8.elrepo.x86_64.conf with index 0 and kernel /boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64<br>[root@tiny-server ~]# grubby --default-kernel<br>/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用index来指定内核，则使用--set-default-index=entry-index</span><br>[root@tiny-server ~]# grubby --set-default-index=1<br>The default is /boot/loader/entries/12ab47b22fef4c02bcdc88b340d5f706-4.18.0-193.28.1.el8_2.x86_64.conf with index 1 and kernel /boot/vmlinuz-4.18.0-193.28.1.el8_2.x86_64<br>[root@tiny-server ~]# grubby --default-kernel<br>/boot/vmlinuz-4.18.0-193.28.1.el8_2.x86_64<br></code></pre></div></td></tr></table></figure><p>添加/删除内核启动参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对所有的内核都删除某个参数</span>  <br>[root@tiny-server ~]# grubby --update-kernel=ALL --remove-args=intel_iommu=on<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 对所有的内核都添加某个参数</span>  <br>[root@tiny-server ~]# grubby --update-kernel=ALL --args=intel_iommu=on<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 对某个的内核添加启动参数</span>  <br>[root@tiny-server ~]# grubby --update-kernel=/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64 --args=intel_iommu=on<br><br></code></pre></div></td></tr></table></figure><p>查看特定内核的具体信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# grubby --info=/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64<br>index=0<br>kernel=&quot;/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64&quot;<br>args=&quot;ro crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet intel_iommu=on $tuned_params&quot;<br>root=&quot;/dev/mapper/cl-root&quot;<br>initrd=&quot;/boot/initramfs-5.9.1-1.el8.elrepo.x86_64.img $tuned_initrd&quot;<br>title=&quot;Red Hat Enterprise Linux (5.9.1-1.el8.elrepo.x86_64) 8.2 (Ootpa)&quot;<br>id=&quot;12ab47b22fef4c02bcdc88b340d5f706-5.9.1-1.el8.elrepo.x86_64&quot;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;grubby是一个用于更新和显示有关各种体系结构特定的引导程序的配置文件信息的命令行工具。 它主要设计用于安装新内核并需要查找有关当前引导环境的信息的脚本，同时也可以对启动内核的各项信息参数进行修改。&lt;/p&gt;
&lt;p&gt;本文主要介绍如何在centos8中使用grubby工具来对系统的内核启动参数和启动顺序进行调整。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>linux中设置ssh登录时显示的banner</title>
    <link href="https://tinychen.com/20201116-linux-modify-ssh-login-banner/"/>
    <id>https://tinychen.com/20201116-linux-modify-ssh-login-banner/</id>
    <published>2020-11-16T03:00:00.000Z</published>
    <updated>2020-11-16T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在linux系统下对ssh的配置文件进行修改从而自定义ssh登录显示的banner横幅提示语。</p><span id="more"></span><p>在ssh的配置文件中找到banner字段，如没有则手动添加，然后指定一个文件，文件的内容就是到时候登录显示的内容</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# grep Banner /etc/ssh/sshd_config<br><span class="hljs-meta">#</span><span class="bash">Banner none</span><br>Banner /etc/ssh/my_banner<br></code></pre></div></td></tr></table></figure><p>对于centos8而言，除了自定义的banner，<code>/etc/motd</code>和<code>/etc/motd.d/*</code>也会在ssh登录的时候显示。</p><p>对于banner的自定义，可以使用各种字符工具，例如<code>figlet</code>、<code>cowsay</code>等等，都可以使用yum直接安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server ~]# figlet tiny-server &gt;&gt; /etc/ssh/my_banner<br>[root@tiny-server ~]# cat /etc/redhat-release | cowsay -f turtle &gt;&gt; /etc/ssh/my_banner<br></code></pre></div></td></tr></table></figure><p>最后效果</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/root]#</span><span class="bash"> ssh tiny-server</span><br><br> _   _<br>| |_(_)_ __  _   _       ___  ___ _ ____   _____ _ __<br>| __| | &#x27;_ \| | | |_____/ __|/ _ \ &#x27;__\ \ / / _ \ &#x27;__|<br>| |_| | | | | |_| |_____\__ \  __/ |   \ V /  __/ |<br> \__|_|_| |_|\__, |     |___/\___|_|    \_/ \___|_|<br>             |___/<br><br> ---------------------------------------<br>&lt; CentOS Linux release 8.2.2004 (Core)  &gt;<br> ---------------------------------------<br>    \                                  ___-------___<br>     \                             _-~~             ~~-_<br>      \                         _-~                    /~-_<br>             /^\__/^\         /~  \                   /    \<br>           /|  O|| O|        /      \_______________/        \<br>          | |___||__|      /       /                \          \<br>          |          \    /      /                    \          \<br>          |   (_______) /______/                        \_________ \<br>          |         / /         \                      /            \<br>           \         \^\\         \                  /               \     /<br>             \         ||           \______________/      _-_       //\__//<br>               \       ||------_-~~-_ ------------- \ --/~   ~\    || __/<br>                 ~-----||====/~     |==================|       |/~~~~~<br>                  (_(__/  ./     /                    \_\      \.<br>                         (_(___/                         \_____)_)<br><br>Last login: Wed Nov 18 14:50:10 2020 from 0.0.0.0<br><br>[root@tiny-server ~]#<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在linux系统下对ssh的配置文件进行修改从而自定义ssh登录显示的banner横幅提示语。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>DPDK在DPVS中的应用及原理分析</title>
    <link href="https://tinychen.com/20201112-dpdk-in-dpvs-principle-analysis/"/>
    <id>https://tinychen.com/20201112-dpdk-in-dpvs-principle-analysis/</id>
    <published>2020-11-12T07:00:00.000Z</published>
    <updated>2020-11-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tinychen.com/20201103-dpvs-deploy-in-centos7/">上一篇文章</a>中我们已经介绍了DPVS的特点和部署方式，本文主要是用于介绍DPVS是如何实现前面所说的特点，或者说是如何提高性能的。</p><p>下图是爱奇艺的DPVS开发团队给出的DPVS在提高性能方面的操作，我们这里换一个角度，自底向上，从底层的CPU、内存、网卡来看这些操作是如何实现的。</p><blockquote><p>（本文涉及到较多的计算机组织架构和操作系统原理的知识点，由于篇幅原因没办法一一详解，因此有一定的理解门槛，如果有看不懂的知识点可以在文章下面留言，有机会我会写一些文章详细介绍一下相关内容）</p></blockquote><span id="more"></span><p><img src="https://resource.tinychen.com/20210115174935.png"></p><p>这里需要额外解释一下<code>Share Nothing</code>和<code>Batching</code>。</p><p><strong>Shared nothing架构（Shared Nothing Architecture，SNA）这里的<code>Share Nothing</code>指的是一种设计模式而不是某种具体的技术，这种架构设计的思想是通过牺牲整体的横向扩展能力来提升纵向性能。</strong>作为一种分布式计算架构，它的每一个节点（ node）都是独立、自给的，而且整个系统中没有单点竞争，没有资源的竞争就不需要加锁，也不需要上下文切换。</p><p><strong><code>Batching</code>在这里指的<code>批处理</code>，主要还是依靠DPDK的SIMD（Single Instruction Multiple Data，单指令流多数据流）编码思想以及处理器本身的SIMD指令集来实现。</strong>SIMD是一种采用一个<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%99%A8">控制器</a>来控制多个<a href="https://zh.wikipedia.org/wiki/%E5%A4%84%E7%90%86%E5%99%A8">处理器</a>，同时对一组数据（又称“<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E5%90%91%E9%87%8F&action=edit&redlink=1">数据向量</a>”）中的每一个分别执行<strong>相同</strong>的操作从而实现空间上的<a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E8%A1%8C">并行</a>性的技术。在<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8">微处理器</a>中，单指令流多数据流技术则是一个<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%99%A8">控制器</a>控制多个平行的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%A4%84%E7%90%86%E5%BE%AE%E5%85%83&action=edit&redlink=1">处理微元</a>，例如<a href="https://zh.wikipedia.org/wiki/Intel">Intel</a>的<a href="https://zh.wikipedia.org/wiki/MMX">MMX</a>或<a href="https://zh.wikipedia.org/wiki/SSE">SSE</a>，以及<a href="https://zh.wikipedia.org/wiki/AMD">AMD</a>的<a href="https://zh.wikipedia.org/wiki/3D_Now!">3D Now!</a>指令集。</p><h1 id="1、From-NIC-drivers"><a href="#1、From-NIC-drivers" class="headerlink" title="1、From NIC drivers"></a>1、From NIC drivers</h1><h2 id="PMD-（Poll-Mode-Driver）"><a href="#PMD-（Poll-Mode-Driver）" class="headerlink" title="PMD （Poll Mode Driver）"></a>PMD （Poll Mode Driver）</h2><p><img src="https://resource.tinychen.com/20201112135143.png"></p><p>使用top命令查看系统资源占用，我们会发现在dpvs中对网卡收发队列进行了一一绑定的CPU核心占用率会一直维持在100%，并且是用户态的100%占用，并且无论是否有流量在所属的dpdk网卡上经过，都会一直维持在100%的状态。这是dpdk的一个特性，称之为**<a href="http://doc.dpdk.org/guides/prog_guide/poll_mode_drv.html">PMD（Poll Mode Driver）</a>**。前面在安装dpdk的时候，我们需要使用dpdk给对应的网卡来安装特定的网卡驱动，比如我们这里用于测试使用的82599网卡使用的是UIO驱动，这些都是属于PMD驱动。目前DPDK支持1G、10G、40G以及半虚拟化的virtio网卡的PMD驱动。</p><p>对于运行着dpdk的机器，我们查看内核模块和对应的dpdk网卡驱动，可以发现uio模块和PMD驱动的踪迹，其中04:00.1是dpdk的网卡，而04:00.0则是普通状态下的网卡</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># lsmod | grep uio</span><br><span class="hljs-string">igb_uio</span>                <span class="hljs-number">13414</span>  <span class="hljs-number">1</span><br><span class="hljs-string">uio</span>                    <span class="hljs-number">19338</span>  <span class="hljs-number">3</span> <span class="hljs-string">igb_uio</span><br><br><span class="hljs-number">04</span><span class="hljs-string">:00.0</span> <span class="hljs-string">Ethernet</span> <span class="hljs-string">controller</span> [<span class="hljs-number">0200</span>]<span class="hljs-string">:</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Corporation</span> <span class="hljs-string">82599ES</span> <span class="hljs-number">10</span><span class="hljs-string">-Gigabit</span> <span class="hljs-string">SFI/SFP+</span> <span class="hljs-string">Network</span> <span class="hljs-string">Connection</span> [<span class="hljs-number">8086</span><span class="hljs-string">:10fb</span>] <span class="hljs-string">(rev</span> <span class="hljs-number">01</span><span class="hljs-string">)</span><br>        <span class="hljs-attr">Subsystem:</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Corporation</span> <span class="hljs-string">Ethernet</span> <span class="hljs-string">Server</span> <span class="hljs-string">Adapter</span> <span class="hljs-string">X520-2</span> [<span class="hljs-number">8086</span><span class="hljs-string">:000c</span>]<br>        <span class="hljs-attr">Kernel driver in use:</span> <span class="hljs-string">ixgbe</span><br>        <span class="hljs-attr">Kernel modules:</span> <span class="hljs-string">ixgbe</span><br><span class="hljs-number">04</span><span class="hljs-string">:00.1</span> <span class="hljs-string">Ethernet</span> <span class="hljs-string">controller</span> [<span class="hljs-number">0200</span>]<span class="hljs-string">:</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Corporation</span> <span class="hljs-string">82599ES</span> <span class="hljs-number">10</span><span class="hljs-string">-Gigabit</span> <span class="hljs-string">SFI/SFP+</span> <span class="hljs-string">Network</span> <span class="hljs-string">Connection</span> [<span class="hljs-number">8086</span><span class="hljs-string">:10fb</span>] <span class="hljs-string">(rev</span> <span class="hljs-number">01</span><span class="hljs-string">)</span><br>        <span class="hljs-attr">Subsystem:</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Corporation</span> <span class="hljs-string">Ethernet</span> <span class="hljs-string">Server</span> <span class="hljs-string">Adapter</span> <span class="hljs-string">X520-2</span> [<span class="hljs-number">8086</span><span class="hljs-string">:000c</span>]<br>        <span class="hljs-attr">Kernel driver in use:</span> <span class="hljs-string">igb_uio</span><br>        <span class="hljs-attr">Kernel modules:</span> <span class="hljs-string">ixgbe</span><br></code></pre></div></td></tr></table></figure><p>PMD驱动包含了各种API，并且提供了在用户态运行的BSD驱动，用于配置网卡和网卡的收发队列。此外，PWD驱动最大的优势就是无需任何中断操作就可以直接访问网卡队列中的RX/TX描述符（除了网卡的链接状态变化），借助这个优势，就可以绕过内核和同样运行在用户态的应用程序快速地进行数据传输。我们可以通过下图来对比传统的应用程序和网卡通信的方式以及使用PMD驱动后和网卡通信的方式。</p><p><img src="D:\tinychen\Desktop\20201112135138.jpeg"></p><p>传统模式下，应用程序如nginx等运行在用户态（User Space），网卡（NIC）属于硬件设备，是归属于内核管理，网卡驱动运行在内核态中（Kernel Space）。那么当应用程序需要和网卡交换数据的时候，需要进行一轮用户态到内核态之间的切换，再经过内核中的TCP/IP协议栈，才能和网卡驱动通信，而网卡驱动和网卡之间的通信是通过硬件中断的方式来实现的，也就是<strong>传统模式下存在着用户态/内核态切换和两个非常耗时耗资源的操作</strong>。</p><p>DPDK的处理方式非常简单粗暴，首先<strong>将网卡驱动从内核态移动到用户态运行</strong>，这样应用程序和PMD网卡驱动之间进行数据交换就不需要进行内核态/用户态的切换，避免了上下文切换，且由于都是在用户态，不需要将数据拷贝到内核态，也实现了零拷贝<code>zero copy</code>，同时还绕过了内核中的TCP/IP网络栈，极大地缩短APP到Driver之间的传输时间。</p><p>当然这种绕过系统内核的做法最直接的代价就是<strong>驱动程序必须一直通过轮询poll的操作来保证能够及时接收到网卡的信息和数据，导致对应的cpu核心会一直处于100%的占用状态</strong>。同时这个时候网卡已经不再归于系统内核管理，常规的ip和ifconfig等命令已经没办法查看网卡的详细信息，需要使用dpip工具来对网卡进行管理。</p><p>这里就是dpvs宣称的<code>内核旁路</code>（<code>kernel bypass</code>）、轮询（polling）、<code>零拷贝</code>（<code>zero copy</code>）等特性的实现原理。</p><blockquote><p>注意这种PMD驱动并不适用于一般的应用场景，因为需要有专门的CPU给PMD一直做轮询操作，对应的CPU就会一直占用100%，可能严重影响了其他任务的运行。</p><p>当网络处于空闲状态的时候，CPU占用100%的问题会带来额外的不必要的功耗，因此dpdk还推出了一个interrupt dpdk模式，即当网卡中没有数据包处理的时候进入类似睡眠模式的状态，然后改为传统的中断方式通知，这个时候被100%占用的核心利用率就会降低，可以和其他的进程共享，<strong>但是DPDK仍然拥有高优先级</strong>，而当有数据包进来的时候还是可以优先处理。</p><p><img src="https://resource.tinychen.com/20201112135131.png"></p></blockquote><h1 id="2、From-CPU"><a href="#2、From-CPU" class="headerlink" title="2、From CPU"></a>2、From CPU</h1><h2 id="NUMA-Awareness"><a href="#NUMA-Awareness" class="headerlink" title="NUMA Awareness"></a>NUMA Awareness</h2><blockquote><p><strong>1.从系统架构来看，目前的商用服务器大体可以分为三类</strong></p><ul><li>对称多处理器结构(SMP：Symmetric Multi-Processor)</li><li>非一致存储访问结构(NUMA：Non-Uniform Memory Access)</li><li>海量并行处理结构(MPP：Massive Parallel Processing)</li></ul><p><strong>2.共享存储型多处理机有两种模型</strong></p><ul><li>均匀存储器存取（Uniform Memory Access，简称UMA）模型</li><li>非均匀存储器存取（Nonuniform Memory Access，简称NUMA）模型</li></ul></blockquote><p>前面我们在安装dpvs的时候，特别需要注意的就是需要在BIOS中开启NUMA，这里主要涉及到的就是对于多路服务器（往往多颗CPU在一块主板上）的内存调度优化问题。以我们的测试服务器为例来进行举例说明：这台普通的R630服务器一共有两颗CPU，128G内存，其中内存是均匀分布在两颗CPU上的，即每颗CPU的内存总线都对应连接着64G的内存。那么NUMA打开和关闭的区别在哪里呢？</p><p>对于关闭NUMA的机器，在Linux系统中查看的时候只有一个NUMA节点，系统会以为只有一颗CPU，那么这128G内存就都是这一颗CPU的，这样的好处是在应用程序可以通过操作系统<strong>跨NUMA节点调度另外一颗CPU的内存</strong>，虽然一颗CPU只有64G内存的，但是在这个CPU上面运行的程序可以调用128G的内存，实在不够了再调用SWAP内存。对于一般的应用程序来说，即使是使用了另外一颗CPU的内存会带来较高的延时，但是性能也远比swap内存强多了。</p><blockquote><p>关于是否开启处理器的超线程技术，主要分析如下：</p><p>超线程（Hyper-Threading）在一个处理器中提供两个逻辑执行线程，逻辑线程共享流水线、执行单元和缓存。<strong>该技术的本质是复用单处理器中的超标量流水线的多路执行单元，降低多路执行单元中因指令依赖造成的执行单元闲置。</strong>对于每个逻辑线程，拥有完整独立的寄存器集合和本地中断逻辑，从软件的角度，与单线程物理核并没有差异。例如，8核心的处理器使用超线程技术之后，可以得到16个逻辑线程。采用超线程，在单核上可以同时进行多线程处理，使整体性能得到一定程度提升。但由于其毕竟是共享执行单元的，对IPC（每周期执行指令数）越高的应用，带来的帮助越有限。<strong>DPDK是一种I/O集中的负载，对于这类负载，IPC相对不是特别高，所以超线程技术会有一定程度的帮助。</strong></p></blockquote><p>对于打开NUMA的机器，在本身的CPU内存用尽的情况下，不会去跨NUMA节点调度另外一颗CPU的内存，而是<strong>直接调用swap内存</strong>。对于DPDK程序来说，这样的好处就是尽可能地降低内存的延迟，提高性能表现。由于DPDK广泛的使用了大页内存（HugePage），可以有效地控制内存的超用问题，不会涉及到swap内存的调用。</p><h2 id="RSS（Receive-Side-Scaling）"><a href="#RSS（Receive-Side-Scaling）" class="headerlink" title="RSS（Receive Side Scaling）"></a>RSS（Receive Side Scaling）</h2><p>同样的除了内存之外，问题还存在于网卡设备上。一般来说网卡设备是通过PCIe总线和CPU连接，不同CPU之间跨NUMA节点调用PCIe设备带来的性能损耗实际上并没有内存那么大，因为PCIe总线并没有内存总线距离CPU那么“近”，而且两者的带宽也不是在一个数量级上。</p><p>还是前面用到的那张网卡，我们使用lspci命令查看pci设备信息的时候我们可以看到对应的NIC设备的信息（截取部分）：</p><ul><li><p>这里可以看到5GT/s对应的是PCIe2.0，x8则表示带宽，这里使用的是一个PCIe2.0x8的双口万兆网卡82599ES</p><p>GT/s是PCIe设备用来表示带宽的单位，具体对应速度转换可以查看下面的这个表格</p><p><img src="https://resource.tinychen.com/20201112171900.png"></p></li><li><p>NUMA node表示这块PCIe网卡插在的插槽是哪一颗CPU对应的PCIe总线</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">04</span>:<span class="hljs-number">00</span>.<span class="hljs-number">1</span> Ethernet controller: Intel Corporation <span class="hljs-number">82599</span>ES <span class="hljs-number">10</span>-Gigabit SFI/SFP+ Network Connection (rev <span class="hljs-number">01</span>)<br>        <span class="hljs-attribute">Subsystem</span>: Intel Corporation Ethernet Server Adapter X<span class="hljs-number">520</span>-<span class="hljs-number">2</span><br>        <span class="hljs-attribute">NUMA</span> node: <span class="hljs-number">0</span><br>                <span class="hljs-attribute">LnkCap</span>: Port #<span class="hljs-number">0</span>, Speed <span class="hljs-number">5</span>GT/s, Width x<span class="hljs-number">8</span>, ASPM L<span class="hljs-number">0</span>s, Exit Latency L<span class="hljs-number">0</span>s &lt;<span class="hljs-number">1</span>us, L<span class="hljs-number">1</span> &lt;<span class="hljs-number">8</span>us<br>                        <span class="hljs-attribute">ClockPM</span>- Surprise- LLActRep- BwNot- ASPMOptComp-<br>        <span class="hljs-attribute">Kernel</span> driver in use: igb_uio<br>        <span class="hljs-attribute">Kernel</span> modules: ixgbe<br></code></pre></div></td></tr></table></figure><p>RSS（Receive Side Scaling）功能的实现其实和网卡以及CPU都有关系，但是这里放到CPU的部分来分析，主要是需要前面提及的技术作为支撑。关于RSS的一些说明我们可以参考Linux内核的<a href="https://www.kernel.org/doc/Documentation/networking/scaling.txt">官网文档</a>，此外微软的官方文档也有不错的图文解释。</p><blockquote><p>RSS，接收方缩放（直译起来略显晦涩生硬），使用搜索引擎的时候建议搜全名Receive Side Scaling，搜缩写RSS容易搜到<code>Really Simple Syndication</code>，中文译作<strong>简易信息聚合</strong>，也称<strong>聚合内容</strong>，是一种<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E4%BE%86%E6%BA%90">消息来源</a>格式规范，用以<strong>聚合经常发布更新资料的网站</strong>，例如<a href="https://zh.wikipedia.org/wiki/%E9%83%A8%E8%90%BD%E6%A0%BC">博客</a>文章、新闻、<a href="https://zh.wikipedia.org/wiki/%E9%9F%B3%E8%A8%8A">音频</a>或<a href="https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A8%8A">视频</a>的网摘。</p></blockquote><p>现在的网卡基本都支持多队列(multi-queue)技术，而队列是分为收和发两种的。在接收数据包的时候，网卡可以把数据包发往不同的消息队列（一般通过哈希算法），不同的消息队列对应不同的CPU，这样就可以做到并行处理数据。典型的RSS配置是：如果设备支持足够的队列，则每个CPU有一个接收队列（一般多网卡机器上网卡的总队列数会超过CPU核心数，因此CPU核心数和网卡队列数一一对应即可），否则，每个内存域（如一个NUMA节点）至少有一个接收队列。</p><p>基于这些特性，DPVS可以在配置中设定worker进程、CPU核心和网卡收发队列的一一绑定，最好的情况下就是全部都是在一颗物理CPU上，这样带来的性能提升最明显。</p><p>这是DPVS宣传的<code>NUMA Awareness</code>和<code>RX steering&amp;CPU</code>的技术原理。</p><h1 id="3、From-memory"><a href="#3、From-memory" class="headerlink" title="3、From memory"></a>3、From memory</h1><h2 id="Huge-page大页内存"><a href="#Huge-page大页内存" class="headerlink" title="Huge page大页内存"></a>Huge page大页内存</h2><p>DPDK广泛使用了大页内存（2M或者1G）机制（对于DPVS来说，主要使用的是2MB的大页内存），以Linux系统为例，1G的大页一般不能在系统加载后动态分配，所以一般会在内核加载的时候设置好需要用到的大页。例如，增加内核启动参数<code>default_hugepagesz=1G hugepagesz=1G hugepages=8</code>来配置好8个1G的大页。在Linux系统上，可以通过命令<code>cat /proc/meminfo</code>来查看系统加载后的内存状况和大页内存的分配状况。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># cat /proc/meminfo | grep Huge</span><br><span class="hljs-attr">AnonHugePages:</span>    <span class="hljs-number">243712</span> <span class="hljs-string">kB</span><br><span class="hljs-attr">HugePages_Total:</span>   <span class="hljs-number">16384</span><br><span class="hljs-attr">HugePages_Free:</span>        <span class="hljs-number">0</span><br><span class="hljs-attr">HugePages_Rsvd:</span>        <span class="hljs-number">0</span><br><span class="hljs-attr">HugePages_Surp:</span>        <span class="hljs-number">0</span><br><span class="hljs-attr">Hugepagesize:</span>       <span class="hljs-number">2048 </span><span class="hljs-string">kB</span><br></code></pre></div></td></tr></table></figure><p>注意上面的<code>AnonHugePages</code>和我们这里要讲的<code>Hugepages</code>不是一类东西，建议忽略。同时<code>Hugepages</code>不会备注大小，上面的<code>Hugepagesize</code>表明使用的是2MB的大页内存，而<code>HugePages_Total</code>表明有<code>16384</code>个这么大的大页内存，所以这里一共是32GB的大页内存。</p><p>在继续后面的内容之前我们需要了解一下TLB是什么。</p><p>首先，我们知道<strong>MMU(Memory Management Unit)的作用是把虚拟内存地址转换成物理内存地址</strong>。虚拟地址和物理地址的映射关系存储在页表中，而现在页表又是分级的。64位系统一般都是3~5级。常见的配置是4级页表，就以4级页表为例说明。分别是PGD、PUD、PMD、PTE四级页表。</p><p>在硬件上会有一个叫做页表基地址寄存器，它存储PGD页表的首地址。MMU就是根据页表基地址寄存器从PGD页表一路查到PTE，最终找到物理地址(PTE页表中存储物理地址)。四级页表查找过程需要四次内存访问。延时可想而知，非常影响性能。（下图来自<a href="https://zhuanlan.zhihu.com/p/108425561">知乎</a>）</p><p><img src="https://resource.tinychen.com/20201112165225.jpg"></p><p>TLB的本质其实就是一块高速缓存。数据cache缓存地址(虚拟地址或者物理地址)和数据。<strong>TLB缓存虚拟地址和其映射的物理地址。</strong>TLB根据虚拟地址查找cache，它没得选，只能根据虚拟地址查找。所以TLB是一个虚拟高速缓存。<strong>硬件存在TLB后，虚拟地址到物理地址的转换过程发生了变化。虚拟地址首先发往TLB确认是否命中cache，如果cache hit直接可以得到物理地址。否则，一级一级查找页表获取物理地址。并将虚拟地址和物理地址的映射关系缓存到TLB中。</strong></p><p>默认下Linux系统的内存采用4KB为一页，页越小且内存越大则页表的开销越大，页表的内存占用也越大。CPU使用的TLB（Translation Lookaside Buffer）制作成本很高，所以一般大小并不大，因此一般就只能存放几百到上千个页表项。如果进程要使用64G内存，则64G/4KB=16000000（一千六百万）页，每页在页表项中占用16000000*4B=62MB。如果用HugePage采用2MB作为一页，只需64G/2MB=2000，数量不在同个级别。</p><p>而DPDK采用HugePage，在×86-64下支持2MB、1GB的页大小，几何级的降低了页表项的大小，从而减少TLB-Miss，并提供了内存池（Mempool）、MBuf、无锁环（Ring）、Bitmap等基础库。</p><p>而且对于普通应用程序而言，根本不会调用到大页内存，且大页内存分配之后立刻就会在系统的可用内存中划去，不管dpdk程序是否使用，都不会被其他程序占用，在只运行了dpdk程序的机器上，划分出的大页内存区域就是该dpdk程序独享的VIP区。</p><p>这里就是DPVS宣传的<code>mempool</code>和<code>HugePage</code>特性的实现原理。</p><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>稍加深入分析之后我们不难发现DPVS的高性能实现基本都是依靠特定硬件和DPDK来实现的，那么DPVS的优势在哪里呢？</p><p>实际上DPDK作为一套开发套件，本身并不是特别的完善，由于它的PMD驱动绕过了内核的网络栈，因此想要实现DPDK+LVS的核心难度在于如何在用户态实现一套轻量级的网络协议栈（L4LB不需要完整的网络栈），这也是DPVS的最核心难点之一。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://tinychen.com/20201103-dpvs-deploy-in-centos7/&quot;&gt;上一篇文章&lt;/a&gt;中我们已经介绍了DPVS的特点和部署方式，本文主要是用于介绍DPVS是如何实现前面所说的特点，或者说是如何提高性能的。&lt;/p&gt;
&lt;p&gt;下图是爱奇艺的DPVS开发团队给出的DPVS在提高性能方面的操作，我们这里换一个角度，自底向上，从底层的CPU、内存、网卡来看这些操作是如何实现的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（本文涉及到较多的计算机组织架构和操作系统原理的知识点，由于篇幅原因没办法一一详解，因此有一定的理解门槛，如果有看不懂的知识点可以在文章下面留言，有机会我会写一些文章详细介绍一下相关内容）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
    <category term="dpdk" scheme="https://tinychen.com/tags/dpdk/"/>
    
    <category term="dpvs" scheme="https://tinychen.com/tags/dpvs/"/>
    
  </entry>
  
  <entry>
    <title>DPVS简介与部署</title>
    <link href="https://tinychen.com/20201103-dpvs-deploy-in-centos7/"/>
    <id>https://tinychen.com/20201103-dpvs-deploy-in-centos7/</id>
    <published>2020-11-03T03:00:00.000Z</published>
    <updated>2020-11-03T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对DPVS进行简单的介绍和在centos7的物理机上部署dpvs负载均衡系统。</p><span id="more"></span><h1 id="0、DPVS简介"><a href="#0、DPVS简介" class="headerlink" title="0、DPVS简介"></a>0、DPVS简介</h1><h2 id="DPVS架构"><a href="#DPVS架构" class="headerlink" title="DPVS架构"></a>DPVS架构</h2><p><a href="https://github.com/iqiyi/dpvs">DPVS</a>是一个基于<a href="https://www.dpdk.org/">DPDK</a>的<strong>高性能四层负载均衡器（Layer-4 load balancer）</strong>，DPVS的名字来源于<strong>DP</strong>DK+L<strong>VS</strong>，注意这里的LVS是<a href="https://github.com/alibaba/LVS">阿里巴巴改进版的LVS</a>。下图是爱奇艺官方给出的一个DPVS架构以及主要特点：</p><p><img src="https://resource.tinychen.com/20210114110453.png"></p><h2 id="用户态实现"><a href="#用户态实现" class="headerlink" title="用户态实现"></a>用户态实现</h2><p>DPVS主要的任务都是在用户态完成的，可以极大地提高效率。<em>官方声称DPVS的包处理速度，1个工作线程可以达到 2.3Mpps，6个工作线程可以达到万兆网卡小包的转发线速（约 12Mpps)。</em>这主要是<strong>因为DPVS绕过了内核复杂的协议栈</strong>，并采用轮询的方式收发数据包，避免了锁、内核中断、上下文切换、内核态和用户态数据拷贝产生的性能开销。</p><p><img src="https://resource.tinychen.com/20210114110500.png"></p><p><strong>实际上四层负载均衡并不需要完整的协议栈，但是需要基本的网络组件</strong>，以便完成和周围设备的交互（ARP/NS/NA）、确定分组走向 （Route）、回应 Ping 请求、健全性检查（分组完整性，Checksum校验）、以及 IP 地址管理等基本工作。使用 DPDK 提高了收发包性能，但也绕过了内核协议栈，DPVS 依赖的协议栈需要自己实现。</p><p><img src="https://resource.tinychen.com/20210114110945.png"></p><h2 id="Master-Worker模型"><a href="#Master-Worker模型" class="headerlink" title="Master/Worker模型"></a>Master/Worker模型</h2><p>这一点和nginx一样，使用M/S模型，Master 处理控制平面，比如参数配置、统计获取等；Worker 实现核心负载均衡、调度、数据转发功能。</p><p>另外，DPVS 使用多线程模型，每个线程绑定到一个 CPU 物理核心上，并且禁止这些 CPU 被调度。这些 CPU 只运行 DPVS 的 Master 或者某个 Worker，以此避免上下文切换，别的进程不会被调度到这些 CPU，Worker 也不会迁移到其他 CPU 造成缓存失效。</p><p><img src="https://resource.tinychen.com/20210114110515.png"></p><h2 id="网卡队列-CPU绑定"><a href="#网卡队列-CPU绑定" class="headerlink" title="网卡队列/CPU绑定"></a>网卡队列/CPU绑定</h2><p>现在的服务器网卡绝大多数都是<strong>多队列网卡</strong>，支持多个队列同时收发数据，让不同的 CPU 处理不同的网卡队列的流量，分摊工作量，DPVS将其和CPU进行绑定，<strong>利用DPDK 的 API 实现一个网卡的一个收发队列对应一个CPU核心和一个Worker进程</strong>，实现一一对应和绑定，从而实现了处理能力随CPU核心、网卡队列数的增加而线性增长，并且很好地实现了<strong>并行处理</strong>和线性扩展。</p><p><img src="https://resource.tinychen.com/20210114110521.png"></p><h2 id="关键数据无锁化"><a href="#关键数据无锁化" class="headerlink" title="关键数据无锁化"></a>关键数据无锁化</h2><p><strong>内核性能问题的一大原因就是资源共享和锁。</strong>所以，被频繁访问的关键数据需要尽可能的实现无锁化，其中一个方法是将数据做到 per-cpu 化，<strong>即每个CPU核心只处理自己本地的数据，不需要访问其他CPU的数据，这样就可以避免加锁</strong>。对于DPVS而言，<code>连接表</code>，<code>邻居表</code>，<code>路由表</code>等频繁修改或者频繁查找的数据，都做到了 per-cpu 化。但是在具体 per-cpu 的实现上，连接表和邻居表、路由表两者的实现方式并不相同。</p><p><strong>连接表在高并发的情况下会被频繁的CRUD</strong>。DPVS中每个CPU核心维护的是不相同的连接表，不同的网络数据流（TCP/UDP/ICMP）按照 N 元组被定向到不同的CPU核心，在此特定的CPU核心上创建、查找、转发、销毁。同一个数据流的包，只会出现在某个CPU核心上，不会落到其他的CPU核心上。这样就可以做到不同的CPU核心只维护自己本地的表，无需加锁。</p><p>对于邻居表和路由表这种每个CPU核心都要使用的全局级别的操作系统数据，默认情况下是使用”全局表+锁保护“的方式。<strong>DPVS通过让每个CPU核心有同样的视图，也就是每个CPU核心需要维护同样的表，从而做到了<code>per-cpu</code>。</strong>对于这两个表，虽然在具体实现上有小的差别（路由表是直接传递信息，邻居是克隆数据并传递分组给别的 CPU），但是<strong>本质上都是通过跨CPU通信来实现的跨CPU无锁同步</strong>，从而将表的变化同步到每个CPU，最后实现了无锁化。</p><h2 id="跨CPU无锁通信"><a href="#跨CPU无锁通信" class="headerlink" title="跨CPU无锁通信"></a>跨CPU无锁通信</h2><p>上面的关键数据无锁化和这一点实际上是殊途同归的。首先，虽然采用了关键数据 per-cpu等优化，但跨CPU还是需要通信的，比如:</p><ul><li>Master 获取各个 Worker 的各种统计信息</li><li>Master 将路由、黑名单等配置同步到各个 Worker</li><li>Master 将来自DPVS的KNI网卡的数据发送到 Worker（只有 Worker 能操作DPDK网卡接口来发送数据）</li></ul><p>既然需要通信，就不能存在互相影响、相互等待的情况，因为那会影响性能。<strong>DPVS的无锁通信还是主要依靠DPDK提供的无锁<code>rte_ring</code>库实现的</strong>，从底层保证通信是无锁的，并且我们在此之上封装一层消息机制来支持一对一，一对多，同步或异步的消息。</p><h2 id="丰富的功能"><a href="#丰富的功能" class="headerlink" title="丰富的功能"></a>丰富的功能</h2><p><strong>从转发模式上看</strong>：DPVS 支持 DirectRouting（DR）、NAT、Tunnel、Full-NAT、SNAT五种转发模式，可以灵活适配各种网络应用场景</p><p><strong>从协议支持上看</strong>：DPVS 支持 IPv4和 IPv6 协议、且最新版本增加了 NAT64的转发功能，实现了用户从 IPv6网络访问 IPv4服务</p><p><strong>从设备支持上看</strong>：DPVS支持主流的硬件网卡设备，同时还支持了<code>Bonding（mode 0 and 4 ）</code>, <code>VLAN</code>, <code>kni</code>, <code>ipip</code>/<code>GRE</code>等虚拟设备</p><p><strong>从管理工具上看</strong>：可以使用包括 ipvsadm、keepalived、dpip等工具对DPVS进行配置和管理，也支持使用进行 quagga 集群化部署</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从上面列出的几个DPVS的主要特点我们不难发现，<strong>DPVS的主要设计思路就是通过减少各种切换和避免加锁来提高性能</strong>，具体的实现上则主要依赖了DPDK的许多功能特性以及使用了常用的几个开源负载均衡软件（ipvsadm、keepalived、dpip等），结合用户态的轻量级网络协议栈（只保留了四层负载均衡所必须的），就实现了超强性能的四层负载均衡系统。</p><p><img src="D:\tinychen\Desktop\20210114110527.png"></p><h1 id="1、机器配置"><a href="#1、机器配置" class="headerlink" title="1、机器配置"></a>1、机器配置</h1><p>DPVS由于引入了DPDK套件作为底层的支撑，因此想要最大化发挥它的性能，需要对硬件有一定的要求，dpdk官方给出了一份<a href="http://core.dpdk.org/supported/">支持列表</a>，虽然支持性列表上面的平台支持得很广泛，但是实际上兼容性和表现最好的似乎还是要Intel的硬件平台。网卡的兼容性方面，主流的Intel网卡几乎都支持，需要注意的是不同型号的网卡在<code>flow-director</code>功能和网卡的收发数据包支持的队列数可能会有不同。</p><h2 id="机器参数"><a href="#机器参数" class="headerlink" title="机器参数"></a>机器参数</h2><ul><li><p>CPU：两颗 <code>Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz</code> </p></li><li><p>内存：16G*8 DDR4-2400 MT/s，每个CPU64G，共计128G</p></li><li><p>网卡：两张双口的<code>Intel Corporation 82599ES 10-Gigabit SFI/SFP+ Network Connection (rev 01)</code></p></li><li><p>系统：<code>Red Hat Enterprise Linux Server release 7.6 (Maipo)</code></p></li><li><p>内核：<code>3.10.0-1127.19.1.el7.x86_64</code></p></li></ul><h2 id="关闭超线程和启用NUMA策略"><a href="#关闭超线程和启用NUMA策略" class="headerlink" title="关闭超线程和启用NUMA策略"></a>关闭超线程和启用NUMA策略</h2><p>关闭超线程最好的办法是在BIOS中找到相关的超线程设置并且将其禁用，而NUMA策略也是一样，最好在BIOS中直接打开。</p><p>打开超线程技术的时候我们可以看到<code>Thread(s) per core</code>是2，也就是每个物理核心对应有2个逻辑核心，而<code>Core(s) per socket</code>表示每个<code>socket</code>有10个物理核心（一般一个CPU对应一个<code>socket</code>），<code>Socket(s)</code>表示当前服务器有两个CPU，也就是常说的<code>双路</code>。</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif">$ lscpu<br><span class="hljs-attribute">Architecture</span>:          x86_64<br><span class="hljs-attribute">CPU op-mode(s)</span>:        32-bit, 64-bit<br><span class="hljs-attribute">Byte Order</span>:            Little Endian<br><span class="hljs-attribute">CPU(s)</span>:                40<br><span class="hljs-attribute">On-line CPU(s) list</span>:   0-39<br><span class="hljs-attribute">Thread(s) per core</span>:    2<br><span class="hljs-attribute">Core(s) per socket</span>:    10<br><span class="hljs-attribute">Socket(s)</span>:             2<br><span class="hljs-attribute">NUMA node(s)</span>:          2<br><span class="hljs-attribute">Vendor ID</span>:             GenuineIntel<br><span class="hljs-attribute">CPU family</span>:            6<br><span class="hljs-attribute">Model</span>:                 79<br><span class="hljs-attribute">Model name</span>:            Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz<br><span class="hljs-attribute">Stepping</span>:              1<br><span class="hljs-attribute">CPU MHz</span>:               2669.567<br><span class="hljs-attribute">CPU max MHz</span>:           3100.0000<br><span class="hljs-attribute">CPU min MHz</span>:           1200.0000<br><span class="hljs-attribute">BogoMIPS</span>:              4399.75<br><span class="hljs-attribute">Virtualization</span>:        VT-x<br><span class="hljs-attribute">L1d cache</span>:             32K<br><span class="hljs-attribute">L1i cache</span>:             32K<br><span class="hljs-attribute">L2 cache</span>:              256K<br><span class="hljs-attribute">L3 cache</span>:              25600K<br><span class="hljs-attribute">NUMA node0 CPU(s)</span>:     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38<br><span class="hljs-attribute">NUMA node1 CPU(s)</span>:     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39<br><span class="hljs-comment"># 当硬件的超线程设置打开的时候，显示为1，表明硬件启用了超线程</span><br>$ cat /sys/devices/system/cpu/smt/active<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute"># 当然较高版本的内核也可以通过smt.control参数来从操作系统层面控制超线程技术</span><br><span class="hljs-attribute">$ cat /sys/devices/system/cpu/smt/control</span><br><span class="hljs-attribute">on</span><br></code></pre></div></td></tr></table></figure><p>关闭超线程技术之后的时候我们可以看到<code>Thread(s) per core</code>是1，也就是每个物理核心对应有1个逻辑核心。这时候<code>CPU(s)</code>的数值和CPU的物理核心数值应该相等。</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif">$ lscpu<br><span class="hljs-attribute">Architecture</span>:          x86_64<br><span class="hljs-attribute">CPU op-mode(s)</span>:        32-bit, 64-bit<br><span class="hljs-attribute">Byte Order</span>:            Little Endian<br><span class="hljs-attribute">CPU(s)</span>:                20<br><span class="hljs-attribute">On-line CPU(s) list</span>:   0-19<br><span class="hljs-attribute">Thread(s) per core</span>:    1<br><span class="hljs-attribute">Core(s) per socket</span>:    10<br><span class="hljs-attribute">Socket(s)</span>:             2<br><span class="hljs-attribute">NUMA node(s)</span>:          2<br><span class="hljs-attribute">Vendor ID</span>:             GenuineIntel<br><span class="hljs-attribute">CPU family</span>:            6<br><span class="hljs-attribute">Model</span>:                 79<br><span class="hljs-attribute">Model name</span>:            Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz<br><span class="hljs-attribute">Stepping</span>:              1<br><span class="hljs-attribute">CPU MHz</span>:               1200.036<br><span class="hljs-attribute">CPU max MHz</span>:           3100.0000<br><span class="hljs-attribute">CPU min MHz</span>:           1200.0000<br><span class="hljs-attribute">BogoMIPS</span>:              4400.07<br><span class="hljs-attribute">Virtualization</span>:        VT-x<br><span class="hljs-attribute">L1d cache</span>:             32K<br><span class="hljs-attribute">L1i cache</span>:             32K<br><span class="hljs-attribute">L2 cache</span>:              256K<br><span class="hljs-attribute">L3 cache</span>:              25600K<br><span class="hljs-attribute">NUMA node0 CPU(s)</span>:     0,2,4,6,8,10,12,14,16,18<br><span class="hljs-attribute">NUMA node1 CPU(s)</span>:     1,3,5,7,9,11,13,15,17,19<br>$ cat /sys/devices/system/cpu/smt/active<br><span class="hljs-attribute">0</span><br></code></pre></div></td></tr></table></figure><p>使用<code>numastat</code>命令可以看到有两个node，表明已经打开NUMA策略，同样的还可以使用<code>lscpu</code>命令查看<code>NUMA node(s)</code>的数量。</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">$ numastat<br>                           node0           node1<br>numa_hit              <span class="hljs-number"> 654623151 </span>       11334196<br>numa_miss                     <span class="hljs-number"> 0 </span>              0<br>numa_foreign                  <span class="hljs-number"> 0 </span>              0<br>interleave_hit            <span class="hljs-number"> 34599 </span>          34359<br>local_node            <span class="hljs-number"> 654619810 </span>       11281809<br>other_node                 <span class="hljs-number"> 3341 </span>          52387<br></code></pre></div></td></tr></table></figure><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><p>开始之前我们需要使用yum安装一些编译安装的时候需要使用的工具和软件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum group install <span class="hljs-string">&quot;Development Tools&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> yum install patch libnuma* numactl numactl-devel kernel-devel openssl* popt* -y</span><br><span class="hljs-meta">#</span><span class="bash"> 2021-0722更新，centos7.9系统需要安装</span><br><span class="hljs-meta">$</span><span class="bash"> yum install libpcap-devel -y</span><br><span class="hljs-meta">#</span><span class="bash"> 2021-0722更新，需要支持ipv6需要安装libnl3-devel</span><br><span class="hljs-meta">#</span><span class="bash"> *** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</span><br><span class="hljs-meta">$</span><span class="bash"> yum install libnl3-devel -y</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意kernel以及相应的kernel组件的版本需要和现在使用的kernel版本相对应</span><br><span class="hljs-meta">$</span><span class="bash"> rpm -qa | grep kernel | grep <span class="hljs-string">&quot;3.10.0-1127.19.1&quot;</span> | sort</span><br>kernel-3.10.0-1127.19.1.el7.x86_64<br>kernel-debug-devel-3.10.0-1127.19.1.el7.x86_64<br>kernel-devel-3.10.0-1127.19.1.el7.x86_64<br>kernel-headers-3.10.0-1127.19.1.el7.x86_64<br>kernel-tools-3.10.0-1127.19.1.el7.x86_64<br>kernel-tools-libs-3.10.0-1127.19.1.el7.x86_64<br><span class="hljs-meta">$</span><span class="bash"> uname -r</span><br>3.10.0-1127.19.1.el7.x86_64<br></code></pre></div></td></tr></table></figure><p>这时候需要机器能够连接外网（互联网），直接从github将dpvs项目clone下来，同时还需要下载特定版本的dpdk，无法联网的机器也可以直接下载之后传输到服务器中，后续的安装过程并不需要联网</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们从GitHub上面把dpvs整个项目<span class="hljs-built_in">clone</span>下来</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/iqiyi/dpvs.git</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs</span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们下载特定版本的dpdk并解压</span><br><span class="hljs-meta">$</span><span class="bash"> wget https://fast.dpdk.org/rel/dpdk-17.11.2.tar.xz</span><br><span class="hljs-meta">$</span><span class="bash"> tar vxf dpdk-17.11.2.tar.xz</span><br></code></pre></div></td></tr></table></figure><p>接下来需要对dpdk进行打补丁，<strong>注意这里的补丁并不是必须的</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs</span><br><span class="hljs-meta">$</span><span class="bash"> cp patch/dpdk-stable-17.11.2/*.patch dpdk-stable-17.11.2/</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> dpdk-stable-17.11.2/</span><br><span class="hljs-meta">#</span><span class="bash"> 0001号补丁主要是用于在kni网卡上开启硬件多播功能，比如在kni设备上启动ospfd</span><br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0001-kni-use-netlink-event-for-multicast-driver-part.patch</span><br><span class="hljs-meta">#</span><span class="bash"> patching file lib/librte_eal/linuxapp/kni/kni_net.c</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 0002号补丁主要是使用dpvs的UOA模块的时候需要用到</span><br><span class="hljs-meta">$</span><span class="bash"> patch -p 1 &lt; 0002-net-support-variable-IP-header-len-for-checksum-API.patch</span><br><span class="hljs-meta">#</span><span class="bash"> patching file lib/librte_net/rte_ip.h</span><br></code></pre></div></td></tr></table></figure><h2 id="编译dpdk"><a href="#编译dpdk" class="headerlink" title="编译dpdk"></a>编译dpdk</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs/dpdk-stable-17.11.2</span><br><span class="hljs-meta">$</span><span class="bash"> make config T=x86_64-native-linuxapp-gcc</span><br><span class="hljs-meta">#</span><span class="bash"> Configuration <span class="hljs-keyword">done</span> using x86_64-native-linuxapp-gcc</span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br></code></pre></div></td></tr></table></figure><p>如果出现下面的问题</p><p><img src="https://resource.tinychen.com//20201109144502.png"></p><p>我们需要手动更改文件，解决方案参考<a href="https://github.com/F-Stack/f-stack/issues/238">这里</a>：</p><blockquote><p>用find / -name netdevice.h 查找内核中的头文件，找到struct net_device_ops 中的 ndo_change_mtu，</p><p>会看到ndo_change_mtu被替换成对应版本的ndo_change_mtu_rhXX,比如 ndo_change_mtu_rh75 将 /kni_net.c:704:2 中 ndo_change_mtu 用 ndo_change_mtu_rh75 替换试试？</p></blockquote><p>查看对应内核中的文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> find / -name netdevice.h</span><br>/usr/include/linux/netdevice.h<br>/usr/src/kernels/3.10.0-1127.19.1.el7.x86_64.debug/include/linux/netdevice.h<br>/usr/src/kernels/3.10.0-1127.19.1.el7.x86_64.debug/include/uapi/linux/netdevice.h<br>/usr/src/kernels/3.10.0-1127.19.1.el7.x86_64/include/linux/netdevice.h<br>/usr/src/kernels/3.10.0-1127.19.1.el7.x86_64/include/uapi/linux/netdevice.h<br><span class="hljs-meta">$</span><span class="bash"> grep ndo_change_mtu /usr/src/kernels/3.10.0-1127.19.1.el7.x86_64/include/linux/netdevice.h</span><br> * int (*ndo_change_mtu)(struct net_device *dev, int new_mtu);<br>        int                     (*ndo_change_mtu)(struct net_device *dev,<br> * int (*ndo_change_mtu)(struct net_device *dev, int new_mtu);<br>        RH_KABI_RENAME(int      (*ndo_change_mtu),<br>                       int      (*ndo_change_mtu_rh74))(struct net_device *dev,<br> *              .ndo_change_mtu_rh74 handler is *not* provided.<br> * both .extended.ndo_change_mtu() as well as .ndo_change_mtu_rh74() are<br><span class="hljs-meta">$</span><span class="bash"> grep ndo_change_mtu /home/dpvs/dpdk-stable-17.11.2/lib/librte_eal/linuxapp/kni/kni_net.c</span><br>        .ndo_change_mtu = kni_net_change_mtu,<br></code></pre></div></td></tr></table></figure><p>或者对于<code>CentOS7.5</code>之后的版本可以直接执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sed -i &#x27;s/ndo_change_mtu/ndo_change_mtu_rh74/g&#x27; /home/dpvs/dpdk-stable-17.11.2/lib/librte_eal/linuxapp/kni/kni_net.c<br></code></pre></div></td></tr></table></figure><p>然后我们重新执行make操作</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> make clean</span><br><span class="hljs-meta">$</span><span class="bash"> make</span> <br><span class="hljs-meta">#</span><span class="bash"> 出现下面字段说明make成功</span><br><span class="hljs-meta">#</span><span class="bash"> Build complete [x86_64-native-linuxapp-gcc]</span><br><span class="hljs-meta">#</span><span class="bash"> 接着设置变量</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RTE_SDK=<span class="hljs-variable">$PWD</span></span><br></code></pre></div></td></tr></table></figure><h2 id="配置hugepage"><a href="#配置hugepage" class="headerlink" title="配置hugepage"></a>配置hugepage</h2><p>和其他的一般程序不同，dpvs使用的dpdk并不是从操作系统中索要内存，而是直接使用大页内存（hugepage），极大地提高了内存分配的效率。</p><p>官方的配置过程中使用的是2MB的大页内存，这里的8192指的是分配了8192个2MB的大页内存，也就是一个node对应16GB的内存，一共分配了32GB的内存，这里的内存可以根据机器的大小来自行调整。但是如果小于1GB可能会导致启动报错。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> NUMA machine</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> 8192 &gt; /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> 8192 &gt; /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> mkdir /mnt/huge</span><br><span class="hljs-meta">$</span><span class="bash"> mount -t hugetlbfs nodev /mnt/huge</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 需要开机自动挂载的话可以在</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nodev /mnt/huge hugetlbfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br></code></pre></div></td></tr></table></figure><h2 id="挂载驱动模块"><a href="#挂载驱动模块" class="headerlink" title="挂载驱动模块"></a>挂载驱动模块</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> modprobe uio</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs/dpdk-stable-17.11.2</span><br><span class="hljs-meta">$</span><span class="bash"> insmod /home/dpvs/dpdk-stable-17.11.2/build/kmod/igb_uio.ko</span><br><span class="hljs-meta">$</span><span class="bash"> insmod /home/dpvs/dpdk-stable-17.11.2/build/kmod/rte_kni.ko</span><br></code></pre></div></td></tr></table></figure><p>使用脚本查看目前机器和dpvs兼容的设备，这里我们只截取部分重点内容</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py --status</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py --status</span><br><br>Network devices using DPDK-compatible driver<br>============================================<br>&lt;none&gt;<br><br>Network devices using kernel driver<br>===================================<br>0000:01:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth0 drv=ixgbe unused=igb_uio<br>0000:01:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth1 drv=ixgbe unused=igb_uio<br>0000:04:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth4 drv=ixgbe unused=igb_uio *Active*<br>0000:04:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth5 drv=ixgbe unused=igb_uio *Active*<br>0000:08:00.0 &#x27;I350 Gigabit Network Connection 1521&#x27; if=eth2 drv=igb unused=igb_uio<br>0000:08:00.1 &#x27;I350 Gigabit Network Connection 1521&#x27; if=eth3 drv=igb unused=igb_uio<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 对需要使用dpvs的网卡加载特定的驱动</span><br><span class="hljs-meta">$</span><span class="bash"> ifconfig eth5 down</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py -b igb_uio 0000:04:00.1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 再次检查是否加载成功</span><br><span class="hljs-meta">$</span><span class="bash"> ./usertools/dpdk-devbind.py --status</span><br><br>Network devices using DPDK-compatible driver<br>============================================<br>0000:04:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; drv=igb_uio unused=ixgbe<br><br>Network devices using kernel driver<br>===================================<br>0000:01:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth0 drv=ixgbe unused=igb_uio<br>0000:01:00.1 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth1 drv=ixgbe unused=igb_uio<br>0000:04:00.0 &#x27;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#x27; if=eth4 drv=ixgbe unused=igb_uio *Active*<br>0000:08:00.0 &#x27;I350 Gigabit Network Connection 1521&#x27; if=eth2 drv=igb unused=igb_uio<br>0000:08:00.1 &#x27;I350 Gigabit Network Connection 1521&#x27; if=eth3 drv=igb unused=igb_uio<br></code></pre></div></td></tr></table></figure><h2 id="编译安装dpvs"><a href="#编译安装dpvs" class="headerlink" title="编译安装dpvs"></a>编译安装dpvs</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs/dpdk-stable-17.11.2/</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RTE_SDK=<span class="hljs-variable">$PWD</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs/</span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br><span class="hljs-meta">$</span><span class="bash"> make install</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> bin/</span><br><span class="hljs-meta">$</span><span class="bash"> ls</span><br>dpip  dpvs  ipvsadm  keepalived<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> cp conf/dpvs.conf.single-nic.sample /etc/dpvs.conf</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/dpvs/bin/</span><br><span class="hljs-meta">$</span><span class="bash"> ./dpvs &amp;</span><br><span class="hljs-meta">#</span><span class="bash"> 如果安装成功并且成功运行了，执行命令就可以看到</span><br><span class="hljs-meta">$</span><span class="bash"> ./dpip link show</span><br>1: dpdk0: socket 0 mtu 1500 rx-queue 8 tx-queue 8<br>    UP 10000 Mbps full-duplex auto-nego<br>    addr 00:1B:21:BE:EA:C2 OF_RX_IP_CSUM OF_TX_IP_CSUM OF_TX_TCP_CSUM OF_TX_UDP_CSUM<br></code></pre></div></td></tr></table></figure><p>为了方便管理可以将相关的操作命令软链接到/sbin下方便全局执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln -s /home/dpvs/bin/dpvs /sbin/dpvs<br>ln -s /home/dpvs/bin/dpip /sbin/dpip<br>ln -s /home/dpvs/bin/ipvsadm /sbin/ipvsadm<br>ln -s /home/dpvs/bin/keepalived /sbin/keepalived<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对DPVS进行简单的介绍和在centos7的物理机上部署dpvs负载均衡系统。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
    <category term="dpdk" scheme="https://tinychen.com/tags/dpdk/"/>
    
    <category term="dpvs" scheme="https://tinychen.com/tags/dpvs/"/>
    
  </entry>
  
  <entry>
    <title>centos7/8修改网卡名称</title>
    <link href="https://tinychen.com/20201024-centos8-modify-eth-name/"/>
    <id>https://tinychen.com/20201024-centos8-modify-eth-name/</id>
    <published>2020-10-25T07:00:00.000Z</published>
    <updated>2020-10-25T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍将centos7/8中引入的新网卡命名方式修改为传统的ethx命名的方法。</p><span id="more"></span><p>默认情况下的网卡名称会根据网卡的型号和连接方式，如USB网卡、PCIe网卡等各种方式不同而显示出不同的名称，例如这里就显示为eno1：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-server network-scripts]# nmcli connection show<br>NAME      UUID                                  TYPE      DEVICE<br>eno1      03043370-9378-4a22-9396-b8f7c83142d5  ethernet  eno1<br>virbr0    821ce0c2-56cb-42ce-93c5-4933b9b56841  bridge    virbr0<br></code></pre></div></td></tr></table></figure><p>修改内核参数并重新生成grub引导文件，然后重新启动系统</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在内核启动参数中的rhgb前添加net.ifnames=0</span><br>sed -i &#x27;s/rhgb/net.ifnames=0 &amp;/&#x27; /etc/default/grub<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改前</span><br>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet&quot;<br><span class="hljs-meta">#</span><span class="bash"> 修改后</span><br>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap net.ifnames=0 rhgb quiet&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重新生成引导文件，注意BIOS引导和EFI引导的启动文件目录会不一样</span><br>grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg<br></code></pre></div></td></tr></table></figure><p>或者也可以直接使用<code>grubby</code>工具</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grubby --update-kernel=ALL --args=net.ifnames=0<br></code></pre></div></td></tr></table></figure><p>重启系统之后原来的网卡已经失效无法使用，此时无法正常连接网络，因此我们需要使用nmcli工具新建网卡</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 其中con-name为新建的网卡名称，而后面的ifname为已有的硬件网卡名称</span><br><span class="hljs-meta">#</span><span class="bash"> nmcli connection add <span class="hljs-built_in">type</span> ethernet con-name eth0 ifname eth0</span><br><span class="hljs-meta">#</span><span class="bash"> 新建后查看如下</span><br>[root@tiny-server ~]# nmcli connection show<br>NAME        UUID                                  TYPE      DEVICE<br>eth1        363bd12e-34aa-435d-83db-2e966c50854b  ethernet  eth1<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍将centos7/8中引入的新网卡命名方式修改为传统的ethx命名的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>限制wsl2占用过多内存</title>
    <link href="https://tinychen.com/20200924-wsl2-limit-memory/"/>
    <id>https://tinychen.com/20200924-wsl2-limit-memory/</id>
    <published>2020-09-24T02:00:00.000Z</published>
    <updated>2020-09-24T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录使用wsl2长时间开启后占用过多系统内存的解决办法。</p><span id="more"></span><h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>前几天笔记本一直没有关机，后面发现系统内存已经被占满了，我的笔记本扣掉核显内存占用之后可用容量大概还有15G多一点，用任务管理器里面查看发现是<code>Vmmem</code>这个进程占用了大量的内存，这个就是<code>wsl</code>对应的虚拟机进程。</p><p><img src="https://resource.tinychen.com//20200924093325.png"></p><p>查询了相关资料发现这并不是个例，wsl2本身的机制似乎会不断地拿宿主机的内存来给自己当cache使用，并且拿了还不还，之前使用台式机的时候有关机的习惯因此并不会太明显，现在使用笔记本长时间不关机就触发了这个问题。目前来说主要有以下几个解决方案：</p><ul><li>重启wsl2</li><li>使用.wslconfig文件限制资源</li><li>调整内核参数定期释放cache内存</li></ul><h1 id="2、重启wsl2"><a href="#2、重启wsl2" class="headerlink" title="2、重启wsl2"></a>2、重启wsl2</h1><p>如果我们直接关闭<code>wsl2</code>的窗口并不会关闭该<code>wsl2</code>的虚拟机，它依旧会在后台运行，需要关闭wsl2的话我们可以打开<code>powershell</code>，在里面使用<code>wsl --shutdown</code>命令就可以关闭全部的<code>wsl2</code>虚拟机了。之后再随意打开一个wsl2的窗口就会再次开启虚拟机。</p><p>这种方式释放内存最彻底，效果和物理机内存不足卡死然后直接重启是一样的。</p><p><img src="https://resource.tinychen.com//20200924094350.png"></p><h1 id="3、限制wsl2内存使用"><a href="#3、限制wsl2内存使用" class="headerlink" title="3、限制wsl2内存使用"></a>3、限制wsl2内存使用</h1><p>这个解决方案来自<a href="https://github.com/microsoft/WSL/issues/4166">github</a>，简单来说就是创建一个<code>%UserProfile%\.wslconfig</code>文件来限制wsl使用的内存总量。比如说我在Windows中使用的用户是tinychen，那么我就在<code>C:\Users\tinychen</code>中创建了一个<code>.wslconfig</code>文件，在里面加入以下内容来限制wsl2的内存总大小：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[wsl2]</span><br><span class="hljs-attr">processors</span>=<span class="hljs-number">8</span><br><span class="hljs-attr">memory</span>=<span class="hljs-number">8</span>GB<br><span class="hljs-attr">swap</span>=<span class="hljs-number">8</span>GB<br><span class="hljs-attr">localhostForwarding</span>=<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>注意修改完成之后需要重启wsl2才能生效。更多详细的配置可以查看<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config#configure-global-options-with-wslconfig">官方文档</a>。</p><p><img src="https://resource.tinychen.com//20200924095936.png"></p><h1 id="4、定期释放cache内存"><a href="#4、定期释放cache内存" class="headerlink" title="4、定期释放cache内存"></a>4、定期释放cache内存</h1><p>Linux内核中有一个参数<code>/proc/sys/vm/drop_caches</code>，是可以用来手动释放Linux中的cache缓存，如果发现wsl2的cache过大影响到宿主机正常运行了，可以手动执行以下命令来释放cache：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">echo <span class="hljs-number">3</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/vm/</span>drop_caches<br></code></pre></div></td></tr></table></figure><p>当然也可以设置成定时任务，每隔一段时间释放一次。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录使用wsl2长时间开启后占用过多系统内存的解决办法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="wsl" scheme="https://tinychen.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>ssh常用配置</title>
    <link href="https://tinychen.com/20200912-ssh-config-introduction/"/>
    <id>https://tinychen.com/20200912-ssh-config-introduction/</id>
    <published>2020-09-12T02:00:00.000Z</published>
    <updated>2020-09-12T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了一些Linux系统下使用ssh指令的技巧和ssh的config文件简化ssh操作的过程。</p><span id="more"></span><h1 id="1、设置权限"><a href="#1、设置权限" class="headerlink" title="1、设置权限"></a>1、设置权限</h1><p>一般来说，每个用户都会在对应的家目录下生成一个<code>.ssh</code>文件夹，如<code>tinychen</code>用户则为<code>/home/tinychen/.ssh</code>，而<code>root</code>用户则为<code>/root/.ssh</code>。如果是手动创建的<code>.ssh</code>文件夹，还需要注意权限问题。一般来说<code>.ssh</code>文件夹的权限为700，私钥为600，公钥为644。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">[/home/tinychen]#</span><span class="bash"> ls -lA | grep ssh</span><br>drwx------ 2 tinychen tinychen 4096 Sep 11 15:48 .ssh<br>[/home/tinychen/.ssh]# ls -l<br>total 8<br>-rw------- 1 tinychen tinychen 2610 Sep 11 15:48 id_rsa<br>-rw-r--r-- 1 tinychen tinychen  575 Sep 11 15:48 id_rsa.pub<br></code></pre></div></td></tr></table></figure><h1 id="2、指定密钥"><a href="#2、指定密钥" class="headerlink" title="2、指定密钥"></a>2、指定密钥</h1><p>对于密钥而言，一个用户可能会有多个密钥，如果需要在建立ssh连接的时候需要指定某个密钥可以使用<code>-i</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh -i /home/tinychen/.ssh/id_rsa tinychen@192.168.1.1<br></code></pre></div></td></tr></table></figure><h1 id="3、指定端口"><a href="#3、指定端口" class="headerlink" title="3、指定端口"></a>3、指定端口</h1><p>如果ssh服务器的端口不是默认的22端口，则在连接的时候需要使用<code>-p</code>参数手动指定端口</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -p <span class="hljs-number">23333</span> tinychen@<span class="hljs-number">192.168.1.1</span><br></code></pre></div></td></tr></table></figure><h1 id="4、多路复用"><a href="#4、多路复用" class="headerlink" title="4、多路复用"></a>4、多路复用</h1><p>多路复用这个功能并不算是罕见的新功能，对于ssh也可以实现ssh连接的多路复用，即在和一台主机建立ssh连接之后，再次与这台主机建立连接的时候直接复用已有的ssh连接，就不需要再重复进行密码验证等各种操作，这种操作在ssh里面称之为<code>ControlMaster</code>。配置的方法很简单，我们只需要在每个用户对应的<code>~/.ssh/</code>目录下面新建一个<code>config</code>文件，再添加对应的配置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Host *<br><span class="hljs-meta">#</span><span class="bash"> Host变量主要用于控制哪些主机会使用下面的配置</span><br>    ControlMaster auto<br>    # ControlMaster变量用于控制是否开启ssh的多路复用功能<br>    ControlPersist 600s<br>    # ControlPersist变量主要用于控制保持连接的时间，这里600s即为600秒（10分钟）<br>    ControlPath ~/.ssh/%r@%h:%p.socket<br>    # ControlPath变量用于存放复用连接所产生的socket文件的路径和命名方式<br></code></pre></div></td></tr></table></figure><h1 id="5、代理转发"><a href="#5、代理转发" class="headerlink" title="5、代理转发"></a>5、代理转发</h1><p>ssh中的<strong>代理转发</strong>功能，名为<code>agent forwarding</code>，主要作用如下：</p><p>假设当前有两台服务器A和B，你从自己的电脑远程登录到服务器A，这时候想直接在服务器A上面登录到服务器B，但是服务器A上面没有能够登录到服务器B的key，此时只要开启代理转发功能，将自己电脑的key跟随ssh过程一起发送到服务器A，就可以从服务器A登录到服务器B了。</p><p>如何验证自己的配置是否生效呢？我们可以通过<code>ssh-add -L</code>命令来查看当前主机所拥有的key。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Host *<br>    ForwardAgent yes<br></code></pre></div></td></tr></table></figure><h1 id="6、保持连接"><a href="#6、保持连接" class="headerlink" title="6、保持连接"></a>6、保持连接</h1><p>有些ssh服务端为了安全，在一定的时间内没有接收到来自客户端的操作，就会主动断开连接。想要延长这个时间我们可以设置客户端每隔一段时间就向服务器发送数据包来保持连接：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">ServerAliveCountMax</span> <span class="hljs-number">60</span><br></code></pre></div></td></tr></table></figure><p>同样地，我们也可以在服务器端添加相关的配置，一般都是在<code>/etc/ssh/sshd_config</code>文件中</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ClientAliveInterval</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">ClientAliveCountMax</span> <span class="hljs-number">60</span><br></code></pre></div></td></tr></table></figure><p>其中<code>ServerAliveInterval</code>和<code>ClientAliveInterval</code>表示间隔时间，每隔60s发送一次；<code>ServerAliveCountMax</code>和<code>ClientAliveCountMax</code>则表示发送的最大次数，最多发送60次。即在服务器端和客户端之间没有操作的时候重复发送60次，一共60次*60秒共计1小时后断开连接。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录了一些Linux系统下使用ssh指令的技巧和ssh的config文件简化ssh操作的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Windows NT对应版本</title>
    <link href="https://tinychen.com/20200907-windows-nt-version/"/>
    <id>https://tinychen.com/20200907-windows-nt-version/</id>
    <published>2020-09-07T07:00:00.000Z</published>
    <updated>2020-09-07T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录各个Windows NT版本对应的Windows版本。原维基百科链接可以点击<a href="https://en.wikipedia.org/wiki/Windows_NT">这里</a>查看。</p><span id="more"></span><p>Windows NT，新技术视窗操作系统（Windows New Technology）的简称，是美国微软公司1993年推出的纯32位操作系统核心。其基于OS/2 NT的基础构造。OS/2是由微软和IBM联合研制，分为微软的Microsoft OS/2 NT与IBM的IBM OS/2。由于双方在协作后来不欢而散，IBM继续向市场提供先前的OS/2版本；而微软则把OS/2 NT改名为Windows NT，并在1988年11月开始了对于“WinNT”（即第一代的Windows NT 3.1）的产品研发。在研发初期，Windows NT曾一度被认为将会是原先OS/2的3.0版本，但面世之后的Windows NT是一种纯32位操作系统，采用NT核心技术。后期更新的Windows NT支持32与64位两种版本。</p><table><thead><tr><th align="center">NT版本</th><th align="center">市场名称</th><th align="center">版本</th><th align="center">发行日期</th></tr></thead><tbody><tr><td align="center">NT 3.1</td><td align="center">Windows NT 3.1</td><td align="center">Workstation（仅被命名为“Windows NT”）、Advanced Server</td><td align="center">1993年7月27日</td></tr><tr><td align="center">NT 3.5</td><td align="center">Windows NT 3.5</td><td align="center">Workstation、Advanced Server</td><td align="center">1994年9月5日</td></tr><tr><td align="center">NT 3.51</td><td align="center">Windows NT 3.51</td><td align="center">Workstation、服务器版</td><td align="center">1995年5月30日</td></tr><tr><td align="center">NT 4.0</td><td align="center">Windows NT 4.0</td><td align="center">Workstation、服务器版、Server Enterprise Edition, Terminal Server、Embedded</td><td align="center">1996年7月29日</td></tr><tr><td align="center">NT 5.0</td><td align="center">Windows 2000</td><td align="center">专业版、服务器版、Advanced Server、DataCenter Server</td><td align="center">2000年2月17日</td></tr><tr><td align="center">NT 5.1</td><td align="center">Windows XP</td><td align="center">家庭版、专业版、Media Center、Tablet PC、入门版、Embedded、N</td><td align="center">2001年10月25日</td></tr><tr><td align="center">NT 5.2</td><td align="center">Windows XP</td><td align="center">64-bit Edition Version 2003（For IA64）、专业版 x64 Edition（For AMD64）</td><td align="center">IA64: 2003年3月28日x64: 2005年4月25日</td></tr><tr><td align="center">Windows Server 2003</td><td align="center">Standard、企业版、DataCenter、Web、Small Business Server</td><td align="center">2003年4月24日</td><td align="center"></td></tr><tr><td align="center">Windows Server 2003 R2</td><td align="center">Standard、企业版、DataCenter、Web、Small Business Server</td><td align="center">2005年12月6日</td><td align="center"></td></tr><tr><td align="center">NT 6.0</td><td align="center">Windows Vista</td><td align="center">入门版、家庭普通版、家庭高级版、商业版、企业版、旗舰版</td><td align="center">2007年1月30日</td></tr><tr><td align="center">Windows Server 2008</td><td align="center">Foundation、Standard、企业版、Datacenter、Web Server、HPC Server、Itanium-Based Systems</td><td align="center">2008年8月27日</td><td align="center">6001（RTM）6002（SP2）</td></tr><tr><td align="center">NT 6.1</td><td align="center">Windows 7</td><td align="center">入门版、家庭普通版、家庭高级版、专业版、企业版、旗舰版</td><td align="center">2009年10月22日</td></tr><tr><td align="center">Windows Server 2008 R2</td><td align="center">Foundation、Standard、企业版、Datacenter、Web Server、HPC Server、Itanium-Based Systems</td><td align="center">2009年10月22日</td><td align="center">7600（RTM）7601（SP1）</td></tr><tr><td align="center">NT 6.2</td><td align="center">Windows 8</td><td align="center">Windows 8、专业版、企业版、Windows RT</td><td align="center">2012年10月26日</td></tr><tr><td align="center">Windows Phone 8</td><td align="center">不适用</td><td align="center">2012年10月30日</td><td align="center">9200</td></tr><tr><td align="center">Windows Server 2012</td><td align="center">Foundation、Essentials、Standard、Datacenter</td><td align="center">2012年9月4日</td><td align="center">9200</td></tr><tr><td align="center">NT 6.3</td><td align="center">Windows 8.1</td><td align="center">Windows 8.1、专业版、企业版、Windows RT 8.1</td><td align="center">2013年10月18日</td></tr><tr><td align="center">Windows Server 2012 R2</td><td align="center">Essentials、Standard、Datacenter</td><td align="center">2013年10月18日</td><td align="center">9600</td></tr><tr><td align="center">NT 10.0</td><td align="center">Windows 10</td><td align="center">个人使用：家庭版（包括S模式的家庭版）[7]、专业版（包括S模式的专业版）[7]、专业工作站版商用：企业版、教育版、专业教育版（包括S模式的专业教育版）[7]移动设备：移动版、移动企业版物联网设备：Windows 10 IoT</td><td align="center">2015年7月29日</td></tr><tr><td align="center">Windows Server 2016</td><td align="center">Essentials、Standard、Datacenter</td><td align="center">2016年9月26日</td><td align="center">14393（RS1） 16299（RS3） 17134（RS4）</td></tr><tr><td align="center">Windows Server 2019</td><td align="center">Essentials、Standard、Datacenter</td><td align="center">2018年10月2日</td><td align="center">17763</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录各个Windows NT版本对应的Windows版本。原维基百科链接可以点击&lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_NT&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>xrags命令的常见用法</title>
    <link href="https://tinychen.com/20200903-linux-xargs-command-introduction/"/>
    <id>https://tinychen.com/20200903-linux-xargs-command-introduction/</id>
    <published>2020-09-03T07:00:00.000Z</published>
    <updated>2020-09-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在xrags命令的一些参数和常见的使用方法。</p><span id="more"></span><p>使用Linux命令的时候，我们经常使用管道符号<code>|</code>来进行命令之间的输入输出的传递，例如</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat example.txt | grep uuid | sort<br></code></pre></div></td></tr></table></figure><p>这一条命令就可以将example.txt这个文件的内容全部打印到屏幕上，然后使用grep来查找带有uuid字符的行，接着使用sort命令来进行排序，当然我们也可以直接这样：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep uuid example.txt | sort<br></code></pre></div></td></tr></table></figure><p>两者的效果是一样的，但是对于很多命令来说管道符号<code>|</code>却不一定能用</p><p>例如我们需要查找所有进程中带有nginx关键字的进程并且将其全部kill掉，我们可以这样获取到对应的进程ID信息</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"># <span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><span class="hljs-number">12245</span><br><span class="hljs-number">29913</span><br></code></pre></div></td></tr></table></figure><p>理论上我们只需要将对应的PID全部kill掉就可以完成操作，但是却不能直接使用管道符号，因为kill命令没办法接收这样的输入信息</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"># 这样操作是不行的<br># <span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | kill -<span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><p>这个时候我们就可以使用xargs命令来进行操作，xargs命令会将前面命令的输入结果逐个传递给后面的kill命令</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">ps -ef | <span class="hljs-keyword">grep</span> nginx | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><p>接着我们来查看一下xargs命令的使用说明：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">[/root]# xargs --<span class="hljs-keyword">help</span><br>Usage: xargs [OPTION]... COMMAND [INITIAL-<span class="hljs-keyword">ARGS</span>]...<br><span class="hljs-keyword">Run</span> COMMAND with arguments INITIAL-<span class="hljs-keyword">ARGS</span> and <span class="hljs-keyword">more</span> arguments <span class="hljs-keyword">read</span> from <span class="hljs-keyword">input</span>.<br><br>Mandatory and optional arguments to long options are also<br>mandatory or optional <span class="hljs-keyword">for</span> the corresponding short option.<br>  -0, --null                   items are separated <span class="hljs-keyword">by</span> a null, not whitespace;<br>                                 disables quote and backslash processing and<br>                                 logical EOF processing<br>  -a, --arg-<span class="hljs-keyword">file</span>=<span class="hljs-keyword">FILE</span>          <span class="hljs-keyword">read</span> arguments from <span class="hljs-keyword">FILE</span>, not standard <span class="hljs-keyword">input</span><br>  -<span class="hljs-keyword">d</span>, --delimiter=CHARACTER    items <span class="hljs-keyword">in</span> <span class="hljs-keyword">input</span> stream are separated <span class="hljs-keyword">by</span> CHARACTER,<br>                                 not <span class="hljs-keyword">by</span> whitespace; disables quote and backslash<br>                                 processing and logical EOF processing<br>  -<span class="hljs-keyword">E</span> END                       <span class="hljs-keyword">set</span> logical EOF string; <span class="hljs-keyword">if</span> END occurs <span class="hljs-keyword">as</span> a <span class="hljs-keyword">line</span><br>                                 of <span class="hljs-keyword">input</span>, the rest of the <span class="hljs-keyword">input</span> is ignored<br>                                 (ignored <span class="hljs-keyword">if</span> -0 or -<span class="hljs-keyword">d</span> was specified)<br>  -<span class="hljs-keyword">e</span>, --eof[=END]              equivalent to -<span class="hljs-keyword">E</span> END <span class="hljs-keyword">if</span> END is specified;<br>                                 otherwise, there is <span class="hljs-keyword">no</span> end-of-<span class="hljs-keyword">file</span> string<br>  -I R                         same <span class="hljs-keyword">as</span> --<span class="hljs-keyword">replace</span>=R<br>  -i, --<span class="hljs-keyword">replace</span>[=R]            <span class="hljs-keyword">replace</span> R <span class="hljs-keyword">in</span> INITIAL-<span class="hljs-keyword">ARGS</span> with names <span class="hljs-keyword">read</span><br>                                 from standard <span class="hljs-keyword">input</span>; <span class="hljs-keyword">if</span> R is unspecified,<br>                                 assume &#123;&#125;<br>  -<span class="hljs-keyword">L</span>, --max-lines=MAX-LINES    <span class="hljs-keyword">use</span> at most MAX-LINES non-blank <span class="hljs-keyword">input</span> lines per<br>                                 command <span class="hljs-keyword">line</span><br>  -<span class="hljs-keyword">l</span>[MAX-LINES]                similar to -<span class="hljs-keyword">L</span> but defaults to at most <span class="hljs-keyword">one</span> non-<br>                                 blank <span class="hljs-keyword">input</span> <span class="hljs-keyword">line</span> <span class="hljs-keyword">if</span> MAX-LINES is not specified<br>  -<span class="hljs-keyword">n</span>, --max-<span class="hljs-keyword">args</span>=MAX-<span class="hljs-keyword">ARGS</span>      <span class="hljs-keyword">use</span> at most MAX-<span class="hljs-keyword">ARGS</span> arguments per command <span class="hljs-keyword">line</span><br>  -P, --max-procs=MAX-PROCS    <span class="hljs-keyword">run</span> at most MAX-PROCS processes at a time<br>  -p, --interactive            prompt before running commands<br>      --process-slot-<span class="hljs-keyword">var</span>=<span class="hljs-keyword">VAR</span>   <span class="hljs-keyword">set</span> environment variable <span class="hljs-keyword">VAR</span> <span class="hljs-keyword">in</span> child processes<br>  -r, --<span class="hljs-keyword">no</span>-<span class="hljs-keyword">run</span>-<span class="hljs-keyword">if</span>-empty        <span class="hljs-keyword">if</span> there are <span class="hljs-keyword">no</span> arguments, then <span class="hljs-keyword">do</span> not <span class="hljs-keyword">run</span> COMMAND;<br>                                 <span class="hljs-keyword">if</span> this option is not given, COMMAND will be<br>                                 <span class="hljs-keyword">run</span> at least once<br>  -s, --max-chars=MAX-CHARS    limit length of command <span class="hljs-keyword">line</span> to MAX-CHARS<br>      --show-limits            show limits <span class="hljs-keyword">on</span> command-<span class="hljs-keyword">line</span> length<br>  -t, --verbose                <span class="hljs-keyword">print</span> commands before executing them<br>  -x, --<span class="hljs-keyword">exit</span>                   <span class="hljs-keyword">exit</span> <span class="hljs-keyword">if</span> the size (see -s) is exceeded<br>      --<span class="hljs-keyword">help</span>                   <span class="hljs-keyword">display</span> this <span class="hljs-keyword">help</span> and <span class="hljs-keyword">exit</span><br>      --<span class="hljs-keyword">version</span>                output <span class="hljs-keyword">version</span> information and <span class="hljs-keyword">exit</span><br><br><span class="hljs-keyword">Report</span> bugs to &lt;bug-findutils@gnu.org&gt;.<br></code></pre></div></td></tr></table></figure><p>这里着重说明几个参数</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-t</td><td>在执行对应的命令之前先将其打印出来</td></tr><tr><td>-a</td><td>从指定的文件中读取变量运行命令而不是标准的输入</td></tr><tr><td>-i</td><td>使用{}可以替换对应的变量</td></tr></tbody></table><p>对于<code>-i</code>参数的使用可能不太能理解，我们举例进行说明：</p><p>假设我们需要对当前目录下的所有txt文件进行查找，对于文件中含有tinychen关键字的文件名全部添加一个own的后缀</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep tinychen *.log 2&gt;/dev/null | awk -F : &#x27;&#123;print $1&#125;&#x27; | sort | uniq | xargs -t -i mv &#123;&#125; &#123;&#125;.own<br></code></pre></div></td></tr></table></figure><p>对于上面的这个命令中使用了<code>-i</code>参数之后，会将前面读取到的输入与<code>&#123;&#125;</code>相关联，对于使用像mv这样的需要输入不止一个变量的命令的时候特别有用。</p><p>再举个例子，假设我们需要查找当前目录下面的txt文件，将所有带有<code>192.168.192.168</code>字段的行注释掉</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat *.txt 2&gt;/dev/null | grep 192.168.192.168 | xargs -t -i sed -i &#x27;s/&#123;&#125;/#&#123;&#125;/g&#x27; *.txt<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在xrags命令的一些参数和常见的使用方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Megacli常用命令整理</title>
    <link href="https://tinychen.com/20200902-megacli-command-introduction/"/>
    <id>https://tinychen.com/20200902-megacli-command-introduction/</id>
    <published>2020-09-02T07:00:00.000Z</published>
    <updated>2020-09-02T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Megacli工具的常用命令</p><span id="more"></span><p>MegaCli 是LSI公司官方提供的SCSI卡管理工具软件，后来经过一系列的收购合并等操作，现在的LSI属于博通公司旗下的产品，因此如果需要下载MegaCli的话可以前往博通官网下载。</p><p>MegaCli工具一般在<code>/opt/MegaRAID/MegaCli/MegaCli64</code>，当然也可以直接使用<code>MegaCli</code>，一般来说两者是一样的</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDInfo -Lall -aALL<br><span class="hljs-comment"># 查看所有阵列卡的所有阵列逻辑卷的所有信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDInfo -Lall -a0 | grep -i <span class="hljs-string">&quot;Virtual Disk&quot;</span><br><span class="hljs-comment"># 查看第1张阵列卡上一共有多少个raid阵列组（默认从0开始计数）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDInfo -L0 -a0<br><span class="hljs-comment"># 查看第1张阵列卡上的第0个raid阵列组的信息（默认从0开始计数）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDPdInfo -aAll<br><span class="hljs-comment"># 查看所有阵列卡的所有阵列逻辑卷的所有信息（包括阵列逻辑卷对应的物理硬盘）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpAllInfo -aALL<br><span class="hljs-comment"># 显示所有阵列卡信息,可以查看机器上一共有多少张阵列卡以及每张卡的详细信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDList -aALL<br><span class="hljs-comment"># 查看所有阵列卡上的所有物理硬盘信息，包括型号、接口、SN码、部分SMART信息等</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -CfgLdAdd -r5 [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>,<span class="hljs-number">32</span>:<span class="hljs-number">3</span>,<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] WB Direct -Hsp[<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] -a0<br><span class="hljs-comment"># 在第1张阵列卡上创建一个 raid5 阵列，由物理盘 1,2,3 构成，该阵列的热备盘是物理盘 4</span><br><span class="hljs-comment"># 注意这里的32:2指的是使用eID和slot ID对一个阵列卡下的硬盘进行定位（默认从0开始计数）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -CfgLdAdd -r5 [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>,<span class="hljs-number">32</span>:<span class="hljs-number">3</span>,<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] WB Direct -a0<br><span class="hljs-comment"># 同上，创建一个 raid5 阵列，但是不指定热备盘</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDRecon -Start -r5 -Add -PhysDrv[<span class="hljs-number">32</span>:<span class="hljs-number">5</span>] -L1 -a0<br><span class="hljs-comment"># 在线添加物理硬盘到某个阵列中</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -CfgLdDel -L1 -a0<br><span class="hljs-comment"># 删除第1张阵列卡上的第2个raid阵列（默认从0开始计数）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDInit -ShowProg -LALL -aALL<br><span class="hljs-comment"># 阵列创建完后，会有一个初始化同步块的过程，可以看看其进度</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDInit -ProgDsply -LALL -aALL<br><span class="hljs-comment"># 同上，但是以动态可视化文字界面显示进度信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDBI -ShowProg -LALL -aALL<br><span class="hljs-comment"># 查看阵列后台初始化进度</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -LDBI -ProgDsply -LALL -aALL<br><span class="hljs-comment"># 同上，以动态可视化文字界面显示</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDHSP -Set [-EnclAffinity] [-nonRevertible] -PhysDrv[<span class="hljs-number">32</span>:<span class="hljs-number">7</span>] -a0<br><span class="hljs-comment"># 指定第1张阵列卡的第8块盘作为全局热备 （默认从0开始计数）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDHSP -Set [-Dedicated [-Array1]] [-EnclAffinity] [-nonRevertible] -PhysDrv[<span class="hljs-number">32</span>:<span class="hljs-number">7</span>] -a0<br><span class="hljs-comment"># 同上，指定为某个阵列的专用热备</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDHSP -Rmv -PhysDrv[<span class="hljs-number">32</span>:<span class="hljs-number">7</span>] -a0<br><span class="hljs-comment"># 删除全局热备盘</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDOffline -PhysDrv [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>] -a0<br><span class="hljs-comment"># 将某块物理盘下线（offline）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDOnline -PhysDrv [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>] -a0<br><span class="hljs-comment"># 将某块物理盘下线（online）</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDRbld -ShowProg -PhysDrv [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>] -a0<br><span class="hljs-comment"># 换盘后查看物理磁盘重建进度</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -PDRbld -ProgDsply -PhysDrv [<span class="hljs-number">32</span>:<span class="hljs-number">2</span>] -a0<br><span class="hljs-comment"># 以动态可视化界面查看物理磁盘重建进度</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -FwTermLog -Dsply -aALL<br><span class="hljs-comment"># 查看raid卡日志，注意日志的输出量可能较大，阵列卡对应的组建阵列等操作的详细信息都可以在日志中查看</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -cfgdsply -aALL<br><span class="hljs-comment"># 显示Raid卡型号，Raid设置，Disk相关信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -adpCount<br><span class="hljs-comment"># 显示适配器个数，只能查看机器上一共有多少张阵列卡，不能查看详细信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpGetTime –aALL<br><span class="hljs-comment"># 显示适配器时间</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpBbuCmd -aAll<br><span class="hljs-comment"># 查看BBU的详细信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpBbuCmd -GetBbuStatus - aALL |grep <span class="hljs-string">&#x27;Charger Status&#x27;</span> <br><span class="hljs-comment"># 查看BBU电池的充电状态</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpBbuCmd -GetBbuStatus -aALL<br><span class="hljs-comment"># 显示BBU状态信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpBbuCmd -GetBbuCapacityInfo -aALL<br><span class="hljs-comment"># 显示BBU容量信息</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span> MegaCli64 -AdpBbuCmd -GetBbuDesignInfo -aALL<br><span class="hljs-comment"># 显示BBU设计参数</span><br><br><span class="hljs-regexp">/opt/</span>MegaRAID<span class="hljs-regexp">/MegaCli/</span>MegaCli64 -AdpBbuCmd -GetBbuProperties -aALL<br><span class="hljs-comment"># 显示当前BBU属性</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍Megacli工具的常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
    <category term="harddisk" scheme="https://tinychen.com/tags/harddisk/"/>
    
  </entry>
  
  <entry>
    <title>使用nginx-quic支持HTTP/3</title>
    <link href="https://tinychen.com/20200821-nginx-quic-compile-to-implement-http3/"/>
    <id>https://tinychen.com/20200821-nginx-quic-compile-to-implement-http3/</id>
    <published>2020-08-21T07:00:00.000Z</published>
    <updated>2020-08-21T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用nginx-quic和boringssl项目来对服务器进行升级支持HTTP/3协议。</p><span id="more"></span><h1 id="1、背景介绍"><a href="#1、背景介绍" class="headerlink" title="1、背景介绍"></a>1、背景介绍</h1><p>nginx官方从1.19版本开始，新建立了一个分支，专门用来对QUIC进行支持，官网的链接<a href="https://quic.nginx.org/">点这里</a>。注意该项目还处于早期的alpha版本，非常不建议用于生产环境。</p><blockquote><p>The code is at an early alpha level of quality and should not be used in production.</p></blockquote><p>nginx-quic的安装包可以在下面这里找到，由于还处于开发阶段，项目更新得非常快。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hg.nginx.org<span class="hljs-regexp">/nginx-quic/</span>shortlog/quic<br></code></pre></div></td></tr></table></figure><p>从官网的readme文件我们可以了解到，<strong>截止到2020年8月21日，nginx-quic项目目前只支持<code>h3-27</code>、<code>h3-28</code>、<code>h3-29</code>三个版本</strong>，再早期的草案版本并不支持，不过目前更新的速度非常快，变动也很大。</p><blockquote><p>Currently we support IETF-QUIC draft-27, draft-28, draft-29.<br>Earlier drafts are NOT supported as they have incompatible wire format.</p></blockquote><p>考虑到浏览器的兼容性，接下来我们主要基于h3-27版本进行测试。</p><p>同时需要注意的是openssl官方版本<a href="https://www.openssl.org/blog/blog/2020/02/17/QUIC-and-OpenSSL/">目前并不支持quic协议</a>，官方于2020年2月给出的原因是目前quic并不稳定，还有很多版本需要迭代确定，它们需要优先把精力放在openssl3.0版本的开发上，等到openssl3.0版本开发完成了再来进行quic的支持。</p><blockquote><p>So in conclusion; QUIC is on our minds, but it will not be included in the OpenSSL 3.0 release. We expect more tangible action to happen after we’ve released OpenSSL 3.0.</p></blockquote><p>所以<strong>我们这里需要用到谷歌自己使用的openssl分支版本boringssl</strong>，这是谷歌对应的<a href="https://github.com/google/boringssl">开源的自用的openssl版本</a>，谷歌官方表示boringssl这个项目虽然开源了，但是并不建议大家在生产环境上广泛使用，因为它是根据谷歌自身的需求进行调整的，有些API可能并不稳定。</p><h1 id="2、编译安装nginx-quic"><a href="#2、编译安装nginx-quic" class="headerlink" title="2、编译安装nginx-quic"></a>2、编译安装nginx-quic</h1><p>这里我们使用了<strong>CentOS7</strong>来进行编译安装</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">[root@TINY-DESKTOP /root]# lsb_release -a<br>LSB Version:    :core<span class="hljs-string">-4</span>.1-amd64:core<span class="hljs-string">-4</span>.1-noarch:cxx<span class="hljs-string">-4</span>.1-amd64:cxx<span class="hljs-string">-4</span>.1-noarch:desktop<span class="hljs-string">-4</span>.1-amd64:desktop<span class="hljs-string">-4</span>.1-noarch:languages<span class="hljs-string">-4</span>.1-amd64:languages<span class="hljs-string">-4</span>.1-noarch:printing<span class="hljs-string">-4</span>.1-amd64:printing<span class="hljs-string">-4</span>.1-noarch<br>Distributor ID: CentOS<br>Description:    CentOS Linux release 7.8.2003 (Core)<br>Release:        7.8.2003<br>Codename:       Core<br></code></pre></div></td></tr></table></figure><p>首先我们在系统中使用yum安装基本的编译工具，注意此次使用的很多软件工具和依赖都是需要较新版本的，因此后面会进行大量的编译安装，<strong>请确保机器拥有足够的性能（可能需要编译gcc）和良好的网络</strong>。主要需要使用到的工具软件的安装步骤如下：</p><h2 id="2-1-yum安装依赖"><a href="#2-1-yum安装依赖" class="headerlink" title="2.1 yum安装依赖"></a>2.1 yum安装依赖</h2><p>需要注意的是这里安装所需要的软件很多，这里并不能全部列出来，但是除了列出来的软件对新版本有要求外，别的都可以直接使用yum进行安装，当然也可以自己根据需要编译安装新版本。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> <span class="hljs-string">&quot;Development Tools&quot;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>需要注意的是网上有部分教程会让我们去安装<code>build-essential</code>，而这个套件在centos中是不存在的，我们直接安装Development Tools套件即可</p></blockquote><h2 id="2-2-编译安装cmake"><a href="#2-2-编译安装cmake" class="headerlink" title="2.2 编译安装cmake"></a>2.2 编译安装cmake</h2><p>cmake的版本必须要在3.0以上，cmake可以到这里下载<code>https://cmake.org/download/</code>。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Kitware/</span>CMake<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.18.2/</span>cmake-<span class="hljs-number">3.18</span>.<span class="hljs-number">2</span>.tar.gz<br>tar -zxvf cmake-<span class="hljs-number">3.18</span>.<span class="hljs-number">2</span>.tar.gz<br>./bootstrap<br>gmake<br>make<br>make install<br><br>cmake --version<br></code></pre></div></td></tr></table></figure><h2 id="2-3-编译安装perl"><a href="#2-3-编译安装perl" class="headerlink" title="2.3 编译安装perl"></a>2.3 编译安装perl</h2><p>perl的安装包可以从这里<code>www.cpan.org/src</code>下载。perl的版本需要尽可能新，否则可能会出现问题，这里使用的是5.32.0的稳定版本（截止2020-08-21）</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>www.cpan.org<span class="hljs-regexp">/src/</span><span class="hljs-number">5.0</span>/perl-<span class="hljs-number">5.32</span>.<span class="hljs-number">0</span>.tar.gz<br>tar -zxvf perl-<span class="hljs-number">5.32</span>.<span class="hljs-number">0</span>.tar.gz<br>cd perl-<span class="hljs-number">5.32</span>.<span class="hljs-number">0</span>/<br>.<span class="hljs-regexp">/Configure -des -Dprefix=/u</span>sr<span class="hljs-regexp">/local/</span>perl<br>make -j8<br>make test<br>make install<br><br><span class="hljs-comment"># 注意最后检查一下系统默认的perl是否为我们新安装的perl</span><br>perl -v<br><br><span class="hljs-comment"># 如果不是则需要进行修改</span><br><span class="hljs-comment"># 查看默认的perl</span><br>which perl | xargs file<br><br><span class="hljs-comment"># 替换新安装的perl和原来的perl</span><br>mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/perl /u</span>sr<span class="hljs-regexp">/bin/</span>perl.<span class="hljs-number">5.16</span>.<span class="hljs-number">3</span><br><span class="hljs-comment"># 需要注意新安装的perl目录要根据前面编译的时候指定的目录来确定</span><br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/perl/</span>bin<span class="hljs-regexp">/perl /u</span>sr<span class="hljs-regexp">/bin/</span>perl<br><span class="hljs-comment"># 再次检查</span><br>perl -v<br></code></pre></div></td></tr></table></figure><h2 id="2-4-安装golang"><a href="#2-4-安装golang" class="headerlink" title="2.4 安装golang"></a>2.4 安装golang</h2><p>golang的安装配置比较简单，我们从<code>https://golang.org/dl</code>直接下载最新的稳定版本即可。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//g</span>olang.org<span class="hljs-regexp">/dl/g</span>o1.<span class="hljs-number">15</span>.linux-amd64.tar.gz<br>tar -zxvf go1.<span class="hljs-number">15</span>.linux-amd64.tar.gz -C <span class="hljs-regexp">/usr/</span>local<br><span class="hljs-comment"># 修改系统默认的go文件</span><br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/go/</span>bin<span class="hljs-regexp">/go /u</span>sr<span class="hljs-regexp">/bin/g</span>o<br></code></pre></div></td></tr></table></figure><p>接下来的go环境变量同学们可以根据自己的实际需求进行配置。对于我个人而言，我直接在<code>/etc/profile</code>中添加下面的配置然后source生效即可。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOBIN</span>=<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$GOBIN<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPATH</span>=/home/gopath<br></code></pre></div></td></tr></table></figure><h2 id="2-5-编译安装gcc"><a href="#2-5-编译安装gcc" class="headerlink" title="2.5 编译安装gcc"></a>2.5 编译安装gcc</h2><p>CentOS7默认的gcc的版本太久了，编译boringssl的时候会报错，我们手动编译安装新版本的gcc，这里使用的是10.2.0的版本。gcc的版本可以在这里下载<code>http://ftp.gnu.org/gnu/gcc/</code>。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>ftp.gnu.org<span class="hljs-regexp">/gnu/g</span>cc<span class="hljs-regexp">/gcc-10.2.0/g</span>cc-<span class="hljs-number">10.2</span>.<span class="hljs-number">0</span>.tar.gz<br>tar -zxvf gcc-<span class="hljs-number">10.2</span>.<span class="hljs-number">0</span>.tar.gz<br>cd gcc-<span class="hljs-number">10.2</span>.<span class="hljs-number">0</span>/<br><span class="hljs-comment"># 解压完成后需要下载四个依赖，我们执行脚本即可直接下载，服务器网络不好的同学也可以手动下载</span><br>.<span class="hljs-regexp">/contrib/</span>download_prerequisites<br><span class="hljs-comment"># 创建一个专门用来编译的目录</span><br>mkdir gcc-build-<span class="hljs-number">10.2</span>.<span class="hljs-number">0</span><br>cd gcc-build-<span class="hljs-number">10.2</span>.<span class="hljs-number">0</span>/<br><span class="hljs-comment"># 这里需要对c和c++进行支持，为了节省时间禁用掉了交叉编译</span><br>. ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib<br><span class="hljs-comment"># 接下来这里需要很久</span><br>make -j8<br>make install<br><br><span class="hljs-comment"># 安装完成之后我们需要替换原来的cc文件和c++文件，确保它们的版本都是最新的版本</span><br><span class="hljs-comment"># 一般来说原来系统的cc文件和c++文件都在/usr/bin/目录下，而我们编译安装的cc文件和c++文件在/usr/local/bin/</span><br>cd <span class="hljs-regexp">/usr/</span>bin/<br>mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/cc /u</span>sr<span class="hljs-regexp">/bin/</span>cc.<span class="hljs-number">4.8</span>.<span class="hljs-number">5</span><br>mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/c++ /u</span>sr<span class="hljs-regexp">/bin/</span>c++.<span class="hljs-number">4.8</span>.<span class="hljs-number">5</span><br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>cc <span class="hljs-regexp">/usr/</span>bin/cc<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>c++ <span class="hljs-regexp">/usr/</span>bin/c++<br><span class="hljs-comment"># 最后检查版本</span><br><span class="hljs-regexp">/usr/</span>bin/cc -v<br><span class="hljs-regexp">/usr/</span>bin/c++ -v<br></code></pre></div></td></tr></table></figure><blockquote><p>gcc下载的依赖内容如下，有需要的同学自取</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">[root<span class="hljs-variable">@TINY</span>-DESKTOP /home/gcc<span class="hljs-number">-10.2</span>.0]<span class="hljs-comment"># ./contrib/download_prerequisites</span><br><span class="hljs-number">2020</span>-08<span class="hljs-number">-21</span> <span class="hljs-number">21</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:</span><span class="hljs-number">24</span> <span class="hljs-symbol">URL:</span><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gcc.gnu.org/pub</span><span class="hljs-regexp">/gcc/infrastructure</span><span class="hljs-regexp">/gmp-6.1.0.tar.bz2 [2383840/</span><span class="hljs-number">2383840</span>] -&gt; <span class="hljs-string">&quot;./gmp-6.1.0.tar.bz2&quot;</span> [<span class="hljs-number">1</span>]<br><span class="hljs-number">2020</span>-08<span class="hljs-number">-21</span> <span class="hljs-number">21</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:</span><span class="hljs-number">26</span> <span class="hljs-symbol">URL:</span><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gcc.gnu.org/pub</span><span class="hljs-regexp">/gcc/infrastructure</span><span class="hljs-regexp">/mpfr-3.1.4.tar.bz2 [1279284/</span><span class="hljs-number">1279284</span>] -&gt; <span class="hljs-string">&quot;./mpfr-3.1.4.tar.bz2&quot;</span> [<span class="hljs-number">1</span>]<br><span class="hljs-number">2020</span>-08<span class="hljs-number">-21</span> <span class="hljs-number">21</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span> <span class="hljs-symbol">URL:</span><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gcc.gnu.org/pub</span><span class="hljs-regexp">/gcc/infrastructure</span><span class="hljs-regexp">/mpc-1.0.3.tar.gz [669925/</span><span class="hljs-number">669925</span>] -&gt; <span class="hljs-string">&quot;./mpc-1.0.3.tar.gz&quot;</span> [<span class="hljs-number">1</span>]<br><span class="hljs-number">2020</span>-08<span class="hljs-number">-21</span> <span class="hljs-number">21</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:</span><span class="hljs-number">30</span> <span class="hljs-symbol">URL:</span><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gcc.gnu.org/pub</span><span class="hljs-regexp">/gcc/infrastructure</span><span class="hljs-regexp">/isl-0.18.tar.bz2 [1658291/</span><span class="hljs-number">1658291</span>] -&gt; <span class="hljs-string">&quot;./isl-0.18.tar.bz2&quot;</span> [<span class="hljs-number">1</span>]<br>gmp<span class="hljs-number">-6.1</span>.0.<span class="hljs-symbol">tar.bz2:</span> OK<br>mpfr<span class="hljs-number">-3.1</span>.<span class="hljs-number">4</span>.<span class="hljs-symbol">tar.bz2:</span> OK<br>mpc<span class="hljs-number">-1.0</span>.<span class="hljs-number">3</span>.<span class="hljs-symbol">tar.gz:</span> OK<br>isl-0.<span class="hljs-number">18</span>.<span class="hljs-symbol">tar.bz2:</span> OK<br>All prerequisites downloaded successfully.<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="2-6-编译安装boringssl"><a href="#2-6-编译安装boringssl" class="headerlink" title="2.6 编译安装boringssl"></a>2.6 编译安装boringssl</h2><p>谷歌官方建议我们使用<code>ninja</code>来编译安装boringssl，因此我们需要先安装一个<code>ninja</code>。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ninja-build/</span>ninja<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.10.1/</span>ninja-linux.zip<br>unzip ninja-linux.zip<br>cp -r ninja <span class="hljs-regexp">/usr/</span>bin/<br>which ninja<br></code></pre></div></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 注意这里的git仓库很大，大概在250MB左右，请确保编译安装服务器的网络良好</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/google/</span>boringssl.git<br>cd boringssl/<br><span class="hljs-comment"># 建立一个专门用于编译的文件夹</span><br>mkdir build<br>cd build<br>cmake -GNinja ..<br>ninja<br></code></pre></div></td></tr></table></figure><blockquote><p>注意在执行cmake这一步的时候正常情况下检测到的gcc文件和perl库版本应该是我们之前编译安装好的新版本，如果不对的话需要再次检查</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># cmake -GNinja ..<br><span class="hljs-comment">-- The C compiler identification is GNU 10.2.0</span><br><span class="hljs-comment">-- Detecting C compiler ABI info</span><br><span class="hljs-comment">-- Detecting C compiler ABI info - done</span><br><span class="hljs-comment">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="hljs-comment">-- Detecting C compile features</span><br><span class="hljs-comment">-- Detecting C compile features - done</span><br><span class="hljs-comment">-- The CXX compiler identification is GNU 10.2.0</span><br><span class="hljs-comment">-- Detecting CXX compiler ABI info</span><br><span class="hljs-comment">-- Detecting CXX compiler ABI info - done</span><br><span class="hljs-comment">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="hljs-comment">-- Detecting CXX compile features</span><br><span class="hljs-comment">-- Detecting CXX compile features - done</span><br><span class="hljs-comment">-- Found Perl: /usr/bin/perl (found version &quot;5.32.0&quot;)</span><br><span class="hljs-comment">-- Checking for module &#x27;libunwind-generic&#x27;</span><br><span class="hljs-comment">--   No package &#x27;libunwind-generic&#x27; found</span><br>libunwind <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span>. Disabling unwind tests.<br><span class="hljs-comment">-- The ASM compiler identification is GNU</span><br><span class="hljs-comment">-- Found assembler: /usr/bin/cc</span><br><span class="hljs-comment">-- Configuring done</span><br><span class="hljs-comment">-- Generating done</span><br><span class="hljs-comment">-- Build files have been written to: /root/boringssl/build</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="2-7-编译nginx"><a href="#2-7-编译nginx" class="headerlink" title="2.7 编译nginx"></a>2.7 编译nginx</h2><p>剩下的nginx的编译安装步骤就和正常的nginx编译安装一致，这里不再赘述，模块可以根据自己的需求进行安装，开启HTTP/3模块需要使用<code>--with-http_v3_module --with-cc-opt=&quot;-I../boringssl-master/include&quot; --with-ld-opt=&quot;-L../boringssl-master/build/ssl -L../boringssl-master/build/crypto&quot;</code>参数。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> nginx-quic/<br><span class="hljs-string">./auto/configure</span> <span class="hljs-params">--prefix=/home/nginx</span> <span class="hljs-params">--with-http_ssl_module</span> <span class="hljs-params">--with-http_v2_module</span> <span class="hljs-params">--with-http_v3_module</span> <span class="hljs-params">--with-cc-opt=</span><span class="hljs-string">&quot;-I../boringssl-master/include&quot;</span> <span class="hljs-params">--with-ld-opt=</span><span class="hljs-string">&quot;-L../boringssl-master/build/ssl -L../boringssl-master/build/crypto&quot;</span><br>make <br>make install<br></code></pre></div></td></tr></table></figure><p>安装完成后我们检测nginx的参数：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># nginx -V</span><br><span class="hljs-attribute">nginx</span> version: nginx/<span class="hljs-number">1</span>.<span class="hljs-number">19</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">built</span> by gcc <span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> (GCC)<br><span class="hljs-attribute">built</span> with OpenSSL <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> (compatible; BoringSSL) (running with BoringSSL)<br><span class="hljs-attribute">TLS</span> SNI support enabled<br><span class="hljs-attribute">configure</span> arguments: --prefix=/home/nginx --with-http_ssl_module --with-http_v<span class="hljs-number">2</span>_module --with-debug --with-http_v<span class="hljs-number">3</span>_module --with-cc-opt=-I../boringssl/include --with-ld-opt=&#x27;-L../boringssl/build/ssl -L../boringssl/build/crypto&#x27;<br></code></pre></div></td></tr></table></figure><h1 id="3、配置nginx-quic"><a href="#3、配置nginx-quic" class="headerlink" title="3、配置nginx-quic"></a>3、配置nginx-quic</h1><ul><li>由于HTTP/3需要使用udp协议端口，请注意开放对应的防火墙</li><li>http2监听的是443的tcp端口，而http3监听的是udp端口</li><li>nginx中添加了<code>$http3</code>和<code>$quic</code>变量，可以添加到日志中，这样就可以看到是否使用了HTTP/3来进行访问了</li><li>如果有多个server_name，在不指定IP的情况下，只需要在任意一个配置了<code>listen 443 http3 quic reuseport;</code>那么其他所有server_name都会开启HTTP3，并且不需要再添加该配置否则会报错（不知道后续会不会把报错去掉），如果需要部分server_name开启HTTP/3，请指定监听IP。</li><li>http3增加了<code>http3_max_field_size</code>、<code>http3_max_table_capacity</code>、<code>http3_max_blocked_streams</code>、<code>http3_max_concurrent_pushes</code>、 <code>http3_push</code>、<code>http3_push_preload</code>这六个变量来控制http3的性能</li></ul><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> http3 quic reuseport;<br>        <span class="hljs-comment"># UDP listener for QUIC+HTTP/3</span><br><br>        <span class="hljs-attribute">server_name</span> tinychen.com www.tinychen.com;<br><br>        <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=63072000; includeSubDomains; preload&quot;</span>;<br><br>        <span class="hljs-attribute">resolver</span> <span class="hljs-number">127.0.0.1</span>;<br>        <br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">ssl_ecdh_curve</span> X25519:P-<span class="hljs-number">256</span>:P-<span class="hljs-number">384</span>;<br>        <span class="hljs-attribute">ssl_ciphers</span> TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="hljs-number">256</span>-GCM-SHA384:TLS13-AES-<span class="hljs-number">128</span>-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:EECDH+CHACHA20:EECDH+AES128;<br><br>        <span class="hljs-comment"># 该选项用于开启address validation，但是会和0-RTT冲突</span><br>        <span class="hljs-comment">#quic_retry on;</span><br><br>        <span class="hljs-comment"># 开启 TLS 1.3 0-RTT</span><br>        <span class="hljs-attribute">ssl_early_data</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-comment"># 添加 Early-Data 头告知后端, 防止重放攻击</span><br>        <span class="hljs-attribute">proxy_set_header</span> Early-Data $ssl_early_data;<br><br>        <span class="hljs-comment"># 参考nginx官方目前支持的http3版本，我们添加对应的header</span><br>        <span class="hljs-attribute">add_header</span> Alt-Svc <span class="hljs-string">&#x27;h3-27=&quot;:443&quot;; h3-28=&quot;:443&quot;; h3-29=&quot;:443&quot;; ma=86400; quic=&quot;:443&quot;&#x27;</span>;<br><br>......<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h1><p>目前的主流浏览器只有Firefox和Chrome支持了HTTP/3协议。并且两者支持程度并不高，Firefox是默认禁用，Chrome是默认开启部分，因此配置起来有点麻烦。</p><h2 id="4-1-HTTP-3-CHECK"><a href="#4-1-HTTP-3-CHECK" class="headerlink" title="4.1 HTTP/3 CHECK"></a>4.1 HTTP/3 CHECK</h2><p><code>http3check.net</code>网站提供了网站的<code>HTTP/3</code>支持检测</p><p><img src="https://resource.tinychen.com/20200824172016.png"></p><h2 id="4-2-Firefox开启HTTP-3"><a href="#4-2-Firefox开启HTTP-3" class="headerlink" title="4.2 Firefox开启HTTP/3"></a>4.2 Firefox开启HTTP/3</h2><p>对于firefox要求版本在75+，我们直接使用最新版本进行测试：</p><p><img src="https://resource.tinychen.com/20200824172013.png"></p><p>在firefox中开启http3比较简单，我们直接在地址栏中输入<code>about:config</code>,然后搜索<code>http3</code>，将<code>network.http.http3.enabled</code>设置为<code>true</code>，接着重启浏览器。</p><p><img src="https://resource.tinychen.com/20200824172009.png"></p><p>再次访问tinychen.com就可以看到使用了HTTP/3协议进行访问，在后台的日志中也能看到对应的请求使用了<code>quic</code>和<code>h3-27</code>。（日志中的IP地址已做脱敏处理）。</p><p><img src="https://resource.tinychen.com/20200824172003.png"></p><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">0.0.0.0 |<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET / HTTP/3 </span>|<span class="hljs-string"> - </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /css/main.css HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/font-awesome/css/font-awesome.min.css HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/pace/pace-theme-material.min.css HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/pace/pace.min.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/canvas-nest/canvas-nest.min.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/anime.min.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/velocity/velocity.min.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/velocity/velocity.ui.min.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /js/utils.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /js/motion.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /js/schemes/pisces.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /js/next-boot.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.000 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /js/local-search.js HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/ </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.011 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br><span class="hljs-string">0.0.0.0 </span>|<span class="hljs-string"> [24/Aug/2020:14:40:47 +0800] </span>|<span class="hljs-string"> 200 </span>|<span class="hljs-string"> tinychen.com </span>|<span class="hljs-string"> GET /lib/font-awesome/fonts/fontawesome-webfont.woff2?v=4.7.0 HTTP/3 </span>|<span class="hljs-string"> https://tinychen.com/lib/font-awesome/css/font-awesome.min.css </span>|<span class="hljs-string"> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 </span>|<span class="hljs-string"> 0.014 </span>|<span class="hljs-string"> TLSv1.3 </span>|<span class="hljs-string"> TLS_AES_128_GCM_SHA256 </span>|<span class="hljs-string"> quic </span>|<span class="hljs-string"> h3-27</span><br></code></pre></div></td></tr></table></figure><h2 id="4-3-Chrome开启HTTP-3"><a href="#4-3-Chrome开启HTTP-3" class="headerlink" title="4.3 Chrome开启HTTP/3"></a>4.3 Chrome开启HTTP/3</h2><p>nginx的官网提示说Chrome需要<strong>83+版本</strong>才支持HTTP/3，实测在部分网站（如<code>google.com</code>）确实可以使用HTTP/3的某些草案版本，但是Chrome目前来说默认还是不支持<code>h3-27协议</code>，我们需要手动开启。对于windows系统而言，我们使用命令行+指定参数的方式开启<code>h3-27</code>的支持：</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">PS C:<span class="hljs-symbol">\P</span>rogram Files (x86)<span class="hljs-symbol">\G</span>oogle<span class="hljs-symbol">\C</span>hrome<span class="hljs-symbol">\A</span>pplication&gt; .<span class="hljs-symbol">\c</span>hrome.exe --enable-quic --quic-version=h3-27<br>PS C:<span class="hljs-symbol">\P</span>rogram Files (x86)<span class="hljs-symbol">\G</span>oogle<span class="hljs-symbol">\C</span>hrome<span class="hljs-symbol">\A</span>pplication&gt; .<span class="hljs-symbol">\c</span>hrome.exe --enable-quic --quic-version=h3-27 --origin-to-force-quic-on=tinychen.com:443<br></code></pre></div></td></tr></table></figure><p>上面使用了powershell来启动chrome，为了保证效果，还使用了<code>--origin-to-force-quic-on</code>来强行指定域名和端口。</p><p>本次测试的chrome版本如下：</p><p><img src="https://resource.tinychen.com/20200824171955.png"></p><p>测试效果如下：</p><p><img src="https://resource.tinychen.com/20200824171950.png"></p><p>除了本次的测试网站tinychen.com外，我们还可以看到谷歌的大部分网站也都开启了HTTP/3。</p><p>同样的我们在后台日志中也能看到对应的访问日志（日志中的IP地址已做脱敏处理）：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">3</span> | - | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/css/m</span>ain.css HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>font-awesome<span class="hljs-regexp">/css/</span>font-awesome.min.css HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>pace<span class="hljs-regexp">/pace-theme-material.min.css HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>pace<span class="hljs-regexp">/pace.min.js HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>canvas-nest<span class="hljs-regexp">/canvas-nest.min.js HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>anime.min.js HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>velocity<span class="hljs-regexp">/velocity.min.js HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>velocity<span class="hljs-regexp">/velocity.ui.min.js HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/js/u</span>tils.js HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/js/m</span>otion.js HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/js/</span>schemes<span class="hljs-regexp">/pisces.js HTTP/</span><span class="hljs-number">3</span> | https:<span class="hljs-regexp">//</span>tinychen.com<span class="hljs-regexp">/ | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/js/</span><span class="hljs-keyword">next</span>-boot.js HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/js/</span>local-search.js HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span> | Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/84.0.4147.135 Safari/</span><span class="hljs-number">537.36</span> | <span class="hljs-number">0.000</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> | [<span class="hljs-number">24</span><span class="hljs-regexp">/Aug/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0800</span>] | <span class="hljs-number">200</span> | tinychen.com | GET <span class="hljs-regexp">/lib/</span>font-awesome<span class="hljs-regexp">/fonts/</span>fontawesome-webfont.woff2?v=<span class="hljs-number">4.7</span>.<span class="hljs-number">0</span> HTTP<span class="hljs-regexp">/3 | https:/</span><span class="hljs-regexp">/tinychen.com/</span>lib<span class="hljs-regexp">/font-awesome/</span>css<span class="hljs-regexp">/font-awesome.min.css | Mozilla/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">84.0</span>.<span class="hljs-number">4147.135</span> Safari/<span class="hljs-number">537.36</span> | <span class="hljs-number">0.015</span> | TLSv1.<span class="hljs-number">3</span> | TLS_AES_128_GCM_SHA256 | quic | h3-<span class="hljs-number">27</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍使用nginx-quic和boringssl项目来对服务器进行升级支持HTTP/3协议。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>wsl access is denied</title>
    <link href="https://tinychen.com/20200718-wsl-access-is-denied/"/>
    <id>https://tinychen.com/20200718-wsl-access-is-denied/</id>
    <published>2020-07-18T03:00:00.000Z</published>
    <updated>2020-07-18T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了windows更新引起的wsl access is denied的问题解决方案。</p><span id="more"></span><p><img src="https://resource.tinychen.com/20200718172516.png"></p><p>这几天使用wsl的时候突然出现了拒绝访问的情况，只有在使用管理员权限打开powershell然后再打开wsl才能顺利切换到wsl，<a href="https://github.com/microsoft/WSL/issues/4920#issuecomment-658808564">上网查询了一下</a>发现是windows更新的一个补丁（KB4565503）引起的。</p><p><img src="https://resource.tinychen.com/20200718172723.png"></p><p>再查了一下更新记录发现确实最近几天安装了这个系统更新。然后果断将其卸载，然后关闭系统更新，接着重启，之后问题解决。</p><p><img src="https://resource.tinychen.com/20200718174039.png"></p><p>检测之后已经能够正常工作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了windows更新引起的wsl access is denied的问题解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="wsl" scheme="https://tinychen.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>常见的HTTP状态码</title>
    <link href="https://tinychen.com/20200717-http-code-introduction/"/>
    <id>https://tinychen.com/20200717-http-code-introduction/</id>
    <published>2020-07-17T03:00:00.000Z</published>
    <updated>2020-07-17T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了一些常见的HTTP状态码，内容参考<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">维基百科</a>。</p><span id="more"></span><h1 id="1、标准扩展码"><a href="#1、标准扩展码" class="headerlink" title="1、标准扩展码"></a>1、标准扩展码</h1><h2 id="1-1-1xx-Informational-信息化"><a href="#1-1-1xx-Informational-信息化" class="headerlink" title="1.1 1xx Informational 信息化"></a>1.1 1xx Informational 信息化</h2><ul><li><p>100 Continue 继续</p></li><li><p>101 Switching Protocols 交换协议</p></li><li><p>102 Processing 处理</p></li></ul><h2 id="1-2-2xx-Success-成功"><a href="#1-2-2xx-Success-成功" class="headerlink" title="1.2 2xx Success 成功"></a>1.2 2xx Success 成功</h2><ul><li><p>200 OK</p></li><li><p>201 Created 创建</p></li><li><p>202 Accepted 已接受</p></li><li><p>203 Non-Authoritative Information 非授权信息</p></li><li><p>204 No Content 无内容</p></li><li><p>205 Reset Content 重置内容</p></li><li><p>206 Partial Content 部分内容</p></li><li><p>207 Multi-Status 多状态</p></li><li><p>208 Already Reported 已报告</p></li><li><p>226 IMIM Used 使用的</p></li></ul><h2 id="1-3-3xx-Redirection-重定向"><a href="#1-3-3xx-Redirection-重定向" class="headerlink" title="1.3 3xx Redirection 重定向"></a>1.3 3xx Redirection 重定向</h2><ul><li><p>300 Multiple Choices 多种选择</p></li><li><p>301 Moved Permanently 永久移动</p></li><li><p>302 Found 发现</p></li><li><p>303 See Other 查看其它</p></li><li><p>304 Not Modified 未修改</p></li><li><p>305 Use Proxy 使用代理</p></li><li><p>306 Switch Proxy 开关代理</p></li><li><p>307 Temporary Redirect 临时重定向</p></li><li><p>308 Permanent Redirect 永久重定向</p></li></ul><h2 id="1-4-4xx-Client-Error-客户端错误"><a href="#1-4-4xx-Client-Error-客户端错误" class="headerlink" title="1.4 4xx Client Error 客户端错误"></a>1.4 4xx Client Error 客户端错误</h2><ul><li><p>400 Bad Request 错误的请求</p></li><li><p>401 Unauthorized 未授权</p></li><li><p>402 Payment Required 需要付费</p></li><li><p>403Forbidden 拒绝访问</p></li><li><p>404 Not Found 未找到</p></li><li><p>405 Method Not Allowed 不允许的方法</p></li><li><p>406 Not Acceptable 不可接受</p></li><li><p>407 Proxy Authentication Required 代理服务器需要身份验证</p></li><li><p>408 Request Timeout 请求超时</p></li><li><p>409 Conflict 冲突</p></li><li><p>410 Gone 完成</p></li><li><p>411 Length Required 需要长度</p></li><li><p>412 Precondition Failed 前提条件失败</p></li><li><p>413 Payload Too Large 负载过大</p></li><li><p>414 URI Too Long 太长</p></li><li><p>415 Unsupported Media Type 不支持的媒体类型</p></li><li><p>416 Range Not Satisfiable 的范围不合适</p></li><li><p>417 Expectation Failed 预期失败</p></li><li><p>418 I’m a teapot 我是一个茶壶</p></li><li><p>421 Misdirected Request 误导请求</p></li><li><p>422 Unprocessable Entity 无法处理的实体</p></li><li><p>423 Locked 锁定</p></li><li><p>424 Failed Dependency 失败的依赖</p></li><li><p>426 Upgrade Required 升级所需</p></li><li><p>428 Precondition Required 所需的先决条件</p></li><li><p>429 Too Many Requests 太多的请求</p></li><li><p>431 Request Header Fields Too Large 请求头字段太大</p></li><li><p>451 Unavailable For Legal Reasons 不可出于法律原因</p></li></ul><h2 id="1-5-5xx-Server-Error-服务器错误"><a href="#1-5-5xx-Server-Error-服务器错误" class="headerlink" title="1.5 5xx Server Error 服务器错误"></a>1.5 5xx Server Error 服务器错误</h2><ul><li><p>500 Internal Server Error 内部服务器错误</p></li><li><p>501 Not Implemented 未执行</p></li><li><p>502 Bad Gateway 错误的网关</p></li><li><p>503 Service Unavailable 服务不可用</p></li><li><p>504 Gateway Timeout 网关超时</p></li><li><p>505 HTTP Version Not Supported 不支持HTTP版本</p></li><li><p>506 Variant Also Negotiates 变体也进行协商</p></li><li><p>507 Insufficient Storage 存储空间不足</p></li><li><p>508 Loop Detected 检测到循环</p></li><li><p>510 Not Extended 不延长</p></li><li><p>511 Network Authentication Required 网络需要身份验证</p></li></ul><h1 id="2、非官方扩展码"><a href="#2、非官方扩展码" class="headerlink" title="2、非官方扩展码"></a>2、非官方扩展码</h1><ul><li>103 Checkpoint 检查点</li><li>420 Method Failure (Spring Framework) 故障的方法（Spring框架）</li><li>420 Enhance Your Calm (Twitter) 增强您的平静（微博）</li><li>450 Blocked by Windows Parental Controls (Microsoft) 被Windows阻止家长控制（微软）</li><li>498 Invalid Token (Esri) 无效的令牌（ESRI的）</li><li>499 Token Required (Esri) 令牌必需（ESRI的）</li><li>499 Request has been forbidden by antivirus 请求已被禁止反病毒</li><li>509 Bandwidth Limit Exceeded (Apache Web Server/cPanel) 超出带宽限制（Apache的Web服务器/的cPanel）</li><li>530 Site is frozen 网站被冻结</li></ul><h1 id="3、互联网信息服务扩展状态码"><a href="#3、互联网信息服务扩展状态码" class="headerlink" title="3、互联网信息服务扩展状态码"></a>3、互联网信息服务扩展状态码</h1><ul><li><p>440 Login Timeout 登录超时</p></li><li><p>449 Retry With 重新发送带</p></li><li><p>451 Redirect 重定向</p></li></ul><h1 id="4、NGINX-扩展状态码"><a href="#4、NGINX-扩展状态码" class="headerlink" title="4、NGINX 扩展状态码"></a>4、NGINX 扩展状态码</h1><ul><li><p>444 No Response 没有响应</p></li><li><p>495 SSL Certificate Error 证书错误</p></li><li><p>496 SSL Certificate Required证书要求</p></li><li><p>497 HTTP Request Sent to HTTPS Port 发送到HTTPS端口请求</p></li><li><p>499 Client Closed Request 客户端请求关闭</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录了一些常见的HTTP状态码，内容参考&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot;&gt;维基百科&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>匹配ipv4地址的正则表达式</title>
    <link href="https://tinychen.com/20200714-ipv4-address-re-match/"/>
    <id>https://tinychen.com/20200714-ipv4-address-re-match/</id>
    <published>2020-07-14T07:00:00.000Z</published>
    <updated>2020-07-14T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用正则表达式匹配ipv4地址。</p><span id="more"></span><h1 id="1、粗犷匹配"><a href="#1、粗犷匹配" class="headerlink" title="1、粗犷匹配"></a>1、粗犷匹配</h1><p>比较粗犷的匹配方法，直接匹配四组使用了<code>.</code>进行分隔的数字</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\d</span>+<span class="hljs-symbol">\.</span>&#123;3&#125;<span class="hljs-symbol">\d</span>+<br></code></pre></div></td></tr></table></figure><p>但是这样容易把不是ip的也匹配进去，比如说8888.888.88.8这样的也是符合规则的，所以想要尽可能的准确，我们就要进行精细的匹配。</p><h1 id="2、精准匹配所有ip"><a href="#2、精准匹配所有ip" class="headerlink" title="2、精准匹配所有ip"></a>2、精准匹配所有ip</h1><p>首先我们要确定ipv4地址的范围是<code>0.0.0.0</code>到<code>255.255.255.255</code>。然后就使用正则表达式逐个字进行匹配。</p><p>首先要匹配<code>0-255</code>这256个数字，由于正则表达式在这里不能直接使用数值大小进行匹配，并且需要尽可能地精确控制数值范围，所以我们将其分为<code>0-9</code>、<code>10-99</code>、<code>100-199</code>、<code>200-249</code>、<code>250-255</code>一共五个部分：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">?:   # 非获取匹配，只匹配但是不获取<br>(?:1[0-9][0-9]\.) # 100-199<br>(?:2[0-4][0-9]\.) # 200-249<br>(?:25[0-5]\.) # 250-255<br>(?:[1-9][0-9]\.) # 10-99<br>(?:[0-9]\.) # 0-9<br></code></pre></div></td></tr></table></figure><p>注意这五个分组都是或<code>|</code>关系,前面三个部分都是0-255加上一个点<code>.</code>，最后的是没有点的<code>.</code>，所以前面的执行三次匹配，最后再加上没有点<code>.</code>的一次，正好就能匹配所有的IP地址</p><figure class="highlight clojure"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clojure">(<span class="hljs-name">?:</span>(<span class="hljs-name">?:1</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]\.)|(<span class="hljs-name">?:2</span>[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]\.)|(<span class="hljs-name">?:25</span>[<span class="hljs-number">0</span><span class="hljs-number">-5</span>]\.)|(<span class="hljs-name">?:</span>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]\.)|(<span class="hljs-name">?:</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]\.))&#123;<span class="hljs-number">3</span>&#125;(<span class="hljs-name">?:</span>(<span class="hljs-name">?:1</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:2</span>[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:25</span>[<span class="hljs-number">0</span><span class="hljs-number">-5</span>])|(<span class="hljs-name">?:</span>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]))<br></code></pre></div></td></tr></table></figure><h1 id="3、匹配局域网IP地址"><a href="#3、匹配局域网IP地址" class="headerlink" title="3、匹配局域网IP地址"></a>3、匹配局域网IP地址</h1><p>局域网ip地址分为三个大的网段，分别是<code>10.x.x.x</code>、<code>172.16.0.0—172.31.255.254</code>和<code>192.168.x.x</code>，具体匹配思路和上面一样</p><h2 id="10-x-x-x"><a href="#10-x-x-x" class="headerlink" title="10.x.x.x"></a>10.x.x.x</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>(?:(?:\.<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(?:\.[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]))&#123;<span class="hljs-number">3</span>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="172-16-0-0—172-31-255-254"><a href="#172-16-0-0—172-31-255-254" class="headerlink" title="172.16.0.0—172.31.255.254"></a>172.16.0.0—172.31.255.254</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">172</span>(?:\.(?:<span class="hljs-number">1</span>[<span class="hljs-number">6</span>-<span class="hljs-number">9</span>])|(?:<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:<span class="hljs-number">3</span>[<span class="hljs-number">0</span>-<span class="hljs-number">1</span>]))(?:(?:\.<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(?:\.[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]))&#123;<span class="hljs-number">2</span>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="192-168-x-x"><a href="#192-168-x-x" class="headerlink" title="192.168.x.x"></a>192.168.x.x</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">192</span>\.<span class="hljs-number">168</span>(?:(?:\.<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(?:\.[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|(?:\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]))&#123;<span class="hljs-number">2</span>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="匹配所有局域网IP地址"><a href="#匹配所有局域网IP地址" class="headerlink" title="匹配所有局域网IP地址"></a>匹配所有局域网IP地址</h2><figure class="highlight clojure"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clojure">(<span class="hljs-name">?:</span>(<span class="hljs-name">?:10</span>(<span class="hljs-name">?:</span>(<span class="hljs-name">?:</span>\.1[<span class="hljs-number">0</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.2[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.25[<span class="hljs-number">0</span><span class="hljs-number">-5</span>])|(<span class="hljs-name">?:</span>\.[<span class="hljs-number">1</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.[<span class="hljs-number">0</span><span class="hljs-number">-9</span>])))|(<span class="hljs-name">?:172</span>(<span class="hljs-name">?:</span>\.(<span class="hljs-name">?:1</span>[<span class="hljs-number">6</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:2</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:3</span>[<span class="hljs-number">0</span><span class="hljs-number">-1</span>])))|(<span class="hljs-name">?:192</span>\.168))(<span class="hljs-name">?:</span>(<span class="hljs-name">?:</span>\.1[<span class="hljs-number">0</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.2[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.25[<span class="hljs-number">0</span><span class="hljs-number">-5</span>])|(<span class="hljs-name">?:</span>\.[<span class="hljs-number">1</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>])|(<span class="hljs-name">?:</span>\.[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]))&#123;<span class="hljs-number">2</span>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍使用正则表达式匹配ipv4地址。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>使用gpg来对下载的文件进行校验</title>
    <link href="https://tinychen.com/20200713-gpg-check-file/"/>
    <id>https://tinychen.com/20200713-gpg-check-file/</id>
    <published>2020-07-13T07:00:00.000Z</published>
    <updated>2020-07-13T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用gpg来对下载的文件进行完整性校验</p><span id="more"></span><p>以在nginx官网下载nginx为例，我们可以获取到nginx的压缩包和一个对应的<code>asc格式</code>的gpg签名文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@TINY-DESKTOP /mnt/c/Users/tinychen/Downloads/http2]# ll nginx*<br>-rwxrwxrwx 1 root root 1047223 Jul 13 13:11 nginx-1.19.1.tar.gz<br>-rwxrwxrwx 1 root root     455 Jul 13 13:52 nginx-1.19.1.tar.gz.asc<br></code></pre></div></td></tr></table></figure><p>使用gpg命令需要先安装<code>gnupg</code>工具</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install gnupg<br></code></pre></div></td></tr></table></figure><p>一般来说是使用<code>gpg --verify</code>来校验文件，一般来说可能会出现没有公钥的情况，这个时候可以根据显示的RSA key来导入公钥，然后再进行验证即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> gpg --verify gpg签名文件 待校验文件</span><br><span class="hljs-meta">#</span><span class="bash"> gpg --receive-keys RSA_key</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200713141302.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍使用gpg来对下载的文件进行完整性校验&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在bash中开启显示完整路径</title>
    <link href="https://tinychen.com/20200701-bash-show-pwd/"/>
    <id>https://tinychen.com/20200701-bash-show-pwd/</id>
    <published>2020-07-01T07:00:00.000Z</published>
    <updated>2020-07-01T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在bash中开启显示完整路径。</p><span id="more"></span><p>只需要修改对应的环境变量，然后重新登录即可实现：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo echo &quot;export PS1=&#x27;[\u@\h \$PWD]# &#x27;&quot; &gt;&gt; /etc/profile<br><br>&#x27;\[\e]2;\u@\H:\w\a\]\n($LOGNAME@$HOSTNAME) \t\n[$PWD]: &#x27;<br><span class="hljs-meta">#</span><span class="bash"> 注意在$符号之后一般会留有一个空格，主要是为了输入命令的时候可以和前面的路径信息隔离开来</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200701170852.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">\u 显示当前用户账号<br>\v BASH的版本信息<br><br>\H 完整的主机名称。例如：hostname为aliyun.alibaba.clound，则这个名称就是aliyun.alibaba.clound<br>\h 仅取主机的第一个名字，例如：hostname为aliyun.alibaba.clound，则这个名称就是aliyun<br><br>\W 只显示当前路径最后一个目录<br>\w 显示当前绝对路径（当前用户目录会以 ~代替）<br><br>\t 显示时间为24小时格式,如：14:19:34<br>\T 显示时间为12小时格式,如：02:19:34<br>\A 显示时间为24小时格式但是不带秒,如：14:19<br>\d 代表日期，格式为weekday month date，例如：&quot;Mon Aug1&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash">PWD 显示当前全路径</span><br>\# 显示命令行提示符号，一般使用&#x27;$&#x27;或者&#x27;#&#x27;<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo echo &quot;export PS1=&#x27;[\u@\h \w]# &#x27;&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta">#</span><span class="bash"> 如果想要在用户家目录的时候显示为~则可以将<span class="hljs-variable">$PWD</span>换为\w</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200701171739.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@aliyun /root]# hostname<br>aliyun.alibaba.clound<br>[root@aliyun /root]# tail -1 /etc/profile<br>export PS1=&#x27;[\u@\h $PWD]# &#x27;<br><br>[root@aliyun.alibaba.clound /root]# hostname<br>aliyun.alibaba.clound<br>[root@aliyun.alibaba.clound /root]# tail -1 /etc/profile<br>export PS1=&#x27;[\u@\H $PWD]# &#x27;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在bash中开启显示完整路径。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>RHEL/CentOS修改hostname</title>
    <link href="https://tinychen.com/20200616-centos-modify-hostname/"/>
    <id>https://tinychen.com/20200616-centos-modify-hostname/</id>
    <published>2020-06-16T07:00:00.000Z</published>
    <updated>2020-06-16T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在RHEL/CentOS/6/7/8中如何修改主机的hostname。</p><span id="more"></span><h1 id="1、CentOS6-RHEL6"><a href="#1、CentOS6-RHEL6" class="headerlink" title="1、CentOS6/RHEL6"></a>1、CentOS6/RHEL6</h1><p>对于6系的红帽Linux，修改hostname较为麻烦，如果只是需要临时修改hostname，只需要使用hostname命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostname your-new-temp-hostname<br></code></pre></div></td></tr></table></figure><p>如果需要永久修改hostname，则需要修改两个地方：</p><p>首先是<code>/etc/hosts</code>文件中，需要添加<code>IP</code>和<code>hostname</code>的映射关系，如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1your-new-perm-hostname<br></code></pre></div></td></tr></table></figure><p>然后在<code>/etc/sysconfig/network</code>文件中修改对应的<code>HOSTNAME=</code>参数为新的hostname</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">HOSTNAME=your-new-perm-hostname<br></code></pre></div></td></tr></table></figure><p>注意两处地方需要同时修改，否则会报错，最后需要重启系统才会生效。</p><h1 id="2、CentOS7、8-RHEL7、8"><a href="#2、CentOS7、8-RHEL7、8" class="headerlink" title="2、CentOS7、8/RHEL7、8"></a>2、CentOS7、8/RHEL7、8</h1><p>对于7系及之后的红帽Linux，只需要直接修改<code>/etc/hostname</code>文件然后重启就可以完成永久修改</p><p>如果不想重启，可以使用新的<code>hostnamectl</code>工具来进行永久修改</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname your-new-perm-hostname<br></code></pre></div></td></tr></table></figure><h1 id="3、使用脚本自动执行"><a href="#3、使用脚本自动执行" class="headerlink" title="3、使用脚本自动执行"></a>3、使用脚本自动执行</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> Determine  whether executor is root or not</span><br>if [ $(whoami) != &quot;root&quot; ]; then<br>    echo &quot;please exec this shell script with sudo or in root mode&quot;<br>    exit 1<br>fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Determine <span class="hljs-keyword">if</span> there is a new hostname</span><br>if [ -z &quot;$1&quot; ]; then<br>    echo &quot;please input the new hostname&quot;<br>    exit 1<br>fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> get the release version</span><br>version=$(cat /etc/redhat-release | awk -F &#x27;release&#x27; &#x27;&#123;print $2&#125;&#x27; | cut -c -2)<br><br>if [ $version -ne 6 ] &amp;&amp; [ $version -ne 7 ] &amp;&amp; [ $version -ne 8 ]; then<br>    echo &quot;This script do not suit your system, Bye!&quot;<br>    exit 1<br>fi<br><br>echo &quot;your hostname will be change to $1&quot;<br><br>if [ $version == 6 ]; then<br>    # get hostname from /etc/sysconfig/network<br>    hostnameCurrent=$(cat /etc/sysconfig/network | grep HOSTNAME | awk -F &#x27;=&#x27; &#x27;&#123; print $NF &#125;&#x27;)<br>    # echo &quot;your hostname now is $hostnameCurrent&quot;<br>    # modify the tmp hostname<br>    hostname $1<br>    # Determine if there is a field about $hostnameCurrent in /etc/hosts<br>    # if yes, use awk to replace it<br>    # if no, echo a new line aboout new hostname<br>    cat /etc/hosts | grep $hostnameCurrent<br>    if [ $? -ne 0 ]; then<br>        echo &quot;127.0.0.1     $1&quot; &gt;&gt;/etc/hosts<br>    else<br>        sed -i &quot;s/$hostnameCurrent/$1/g&quot; /etc/hosts<br>    fi<br>    # modify the hostname in /etc/sysconfig/network<br>    sed -i &quot;s/$hostnameCurrent/$1/g&quot; /etc/sysconfig/network<br>else<br>    if [ $version == 7 ] || [ $version == 8 ]; then<br>        hostnamectl set-hostname $1<br>    fi<br>fi<br><br>echo &quot;Hostname modification is done !&quot;<br>echo &quot;A restart might be better for apply the change&quot;<br></code></pre></div></td></tr></table></figure><p>将上述的代码保存为脚本再加上需要修改的hostname直接执行就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在RHEL/CentOS/6/7/8中如何修改主机的hostname。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>HTTP2的特性解析</title>
    <link href="https://tinychen.com/20200608-http2-introduction/"/>
    <id>https://tinychen.com/20200608-http2-introduction/</id>
    <published>2020-06-08T02:00:00.000Z</published>
    <updated>2020-06-08T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了HTTP2相对于HTTP1.1的一些改进和新特性。</p><span id="more"></span><h1 id="1、HTTP1-1的不足"><a href="#1、HTTP1-1的不足" class="headerlink" title="1、HTTP1.1的不足"></a>1、HTTP1.1的不足</h1><p>HTTP协议采用“request-response”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）。对于一个复杂的页面，一般都会有多个资源需要获取。如果是每个资源都单独建立一个TCP连接去获取，每次都需要进行三次握手建立连接来通信，这是十分耗费资源的。</p><p>随后出现了<code>Keep-Alive</code>，<code>Keep-Alive</code>解决的核心问题是一定时间内，同一域名多次请求数据，只建立一次HTTP请求，其他请求可复用每一次建立的连接通道，以达到提高请求效率的问题。这里面所说的<strong>一定时间</strong>一般是可以自行配置的。当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><p>在<code>HTTP1.1</code>中是默认开启了<code>Keep-Alive</code>，虽然解决了多次连接的问题，但是依然有两个比较严重的问题：</p><ul><li><strong>串行传输</strong>：在单通道传输的前提下，假设要传输10个文件，那么只能依次逐个传输，传输完第一个再传输第二个，以此类推；</li><li><strong>连接数问题</strong>：HTTP/1.1 虽然默认开启<code>keep-alive</code>可以复用一部分连接，但域名分片等情况下仍然需要建立多个connection，耗费资源，给服务器带来性能压力。</li></ul><blockquote><p>作为 HTTP/1.x 的连接，请求是序列化的，哪怕本来是无序的，在没有足够庞大可用的带宽时，也无从优化。一个解决方案是，浏览器为每个域名建立多个连接，以实现并发请求。曾经默认的连接数量为 2 到 3 个，现在比较常用的并发连接数已经增加到 6 条。如果尝试大于这个数字，就有触发服务器 DoS 保护的风险。如果服务器端想要更快速的响应网站或应用程序的应答，它可以迫使客户端建立更多的连接。例如，不要在同一个域名下获取所有资源，假设有个域名是 <code>www.example.com</code>，我们可以把它拆分成好几个域名：<code>www1.example.com</code>、<code>www2.example.com</code>、<code>www3.example.com</code>。所有这些域名都指向同一台服务器，浏览器会同时为每个域名建立 6 条连接(在我们这个例子中，连接数会达到 18 条)。这一技术被称作<strong>域名分片</strong>。</p></blockquote><p><strong>HTTP1.1中的数据传输是基于文本来进行传输的，这就需要保证在传输的过程中必须是按照文本原有的顺序进行传输。</strong>按照顺序传输的一大弊端就是没办法进行并行传输，例如一句<code>Hello</code>就只能按照字母顺序逐个传输，如果并行传输，字母到达的先后顺序是不一定和在文本中的顺序一样的，而字母本身又没有顺序标号，就没有办法对其进行排序，很有可能就会导致内容错乱，<code>Hello</code>就可能变成<code>leloH</code>。</p><h1 id="2、HTTP2的特性"><a href="#2、HTTP2的特性" class="headerlink" title="2、HTTP2的特性"></a>2、HTTP2的特性</h1><h2 id="2-1-二进制分帧"><a href="#2-1-二进制分帧" class="headerlink" title="2.1 二进制分帧"></a>2.1 二进制分帧</h2><p><strong>http2</strong>采用<strong>二进制格式</strong>传输数据，而<strong>非 HTTP 1.x 的文本格式</strong>，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。<strong>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</strong>。HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p><ul><li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；</li><li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。</li><li>帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等</li></ul><p>HTTP/2引入的<code>二进制数据帧</code>和<code>流</code>的概念，其中帧对数据进行顺序标识，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是<code>流</code>所做的事情。</p><p>我们可以从下面的两张图来对其进行了解：</p><p><img src="https://resource.tinychen.com/HTTP1.1_text.jpg"></p><p><img src="https://resource.tinychen.com/HTTP2_frame.jpg"></p><h2 id="多路复用-（multiplexing）"><a href="#多路复用-（multiplexing）" class="headerlink" title="多路复用 （multiplexing）"></a>多路复用 （multiplexing）</h2><p><img src="https://resource.tinychen.com/HTTP1.1_connection-1591562306871.jpg"></p><p>在HTTP/2 协议中， <code>Connection</code> 和 <code>Keep-Alive</code> 是被忽略的；主要使用了多路复用来进行连接管理。在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 连接去实现多流并行了，在 HTTP/2 中</p><ul><li>同域名下所有通信都在单个连接上完成</li><li>单个连接可以承载任意数量的双向数据流</li><li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li></ul><p>这一特性，使性能有了极大提升：</p><ul><li>同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,消除了因多个 TCP 连接而带来的延时和内存消耗</li><li>并行交错地发送多个请求和响应，两两之间互不影响</li><li>在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</li></ul><p><img src="https://resource.tinychen.com/HTTP2_connection-1591562284381.jpg"></p><p>使用浏览器的开发者模式查看相关资源的加载情况，可以看到对应的http2的资源在加载的时候会使用多路复用，客户端可以同时请求多个资源；而下方的http1.1则在请求资源的时候出现了等待的情况。</p><p><img src="https://resource.tinychen.com/image-20200605154932686.png"></p><h2 id="2-2-首部压缩（header-compression）"><a href="#2-2-首部压缩（header-compression）" class="headerlink" title="2.2 首部压缩（header compression）"></a>2.2 首部压缩（header compression）</h2><p>在同一个HTTP页面中，许多资源的Header是高度相似的，但是在HTTP2之前都是不会对其进行压缩的，这使得在多次传输中白白浪费了资源来进行重复无谓的操作。</p><p>在HTTP中，首部字段是一个键值对，所有的首部字段组成首部字段列表。在HTTP/1.x中，首部字段都被表示为字符串，一行一行的首部字段字符串组成首部字段列表。而在HTTP/2的首部压缩<code>HPACK</code>算法中，则有着不同的表示方法。</p><blockquote><p>HPACK算法的具体细节可以参考<a href="https://tools.ietf.org/html/rfc7541">RFC7541</a></p></blockquote><p>HPACK算法表示的对象，主要有原始数据类型的整型值和字符串，头部字段，以及头部字段列表。</p><p><img src="https://resource.tinychen.com/hpack-header-compression.png"></p><p>头部压缩需要在支持 HTTP/2 的浏览器和服务端之间：</p><ul><li><strong>维护一份相同的<a href="https://httpwg.org/specs/rfc7541.html#static.table.definition">静态字典</a>（Static Table），包含常见的头部名称，以及特别常见的头部名称与值的组合。</strong>其主要作用有两个：对于完全匹配的头部键值对，例如 <code>:method: GET</code>，可以直接使用一个字符表示；对于头部名称可以匹配的键值对，例如 <code>cookie: xxxxxxx</code>，可以将<code>名称cookie</code>使用一个字符表示。</li><li><strong>维护一份相同的动态字典（Dynamic Table），可以动态地添加内容。</strong>对于<code>cookie: xxxxxxx</code> 这样的内容，可以将其添加到动态字典中，之后整个键值对只使用字段中替代的字符来表示即可。需要注意的是，动态字典上下文有关，需要为每个 HTTP/2 连接维护不同的字典。</li><li>支持基于静态哈夫曼码表的哈夫曼编码（Huffman Coding）；</li></ul><p>使用字典可以极大地提升压缩效果，其中静态字典在首次请求中就可以使用。对于静态、动态字典中不存在的内容，还可以使用哈夫曼编码来减小体积。HTTP/2 使用了一份<a href="https://httpwg.github.io/specs/rfc7541.html#huffman.code">静态哈夫曼码表</a>，也需要内置在客户端和服务端之中。</p><p>下面的表格截取了部分静态字典的内容：</p><p><img src="https://resource.tinychen.com/image-20200608052741835.png"></p><h2 id="2-3-服务器推送（server-push）"><a href="#2-3-服务器推送（server-push）" class="headerlink" title="2.3 服务器推送（server push）"></a>2.3 服务器推送（server push）</h2><p><code>Server Push</code> 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。这个新特性是有些颠覆了传统的HTTP模式的，因为传统的HTTP模式是客户端请求（request）资源，然后服务器才会返回（response）对应的资源，而<code>Server Push</code>的方式是服务器主动将资源推送到客户端。</p><p><img src="https://resource.tinychen.com/2019-03-06-6.png"></p><p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。</p><p>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。实际上服务器应该避免推送已经被客户端缓存了的资源，一般可以通过判断请求中的缓存相关字段来确定是否需要推送。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p><p>还可以使用server push可以提前将需要加载的资源推送到客户端，这样还可以有效提升页面的加载速度：</p><p><img src="https://resource.tinychen.com/image-20200605165305709.png"></p><p><img src="https://resource.tinychen.com/image-20200605165158159.png"></p><p>从上面两张图片的对比中我们可以看到一个大小为50KB左右的<code>main.css</code>文件在使用了服务器推送功能之后的加载时间从原来的<code>73.98ms</code>变为<code>19.54ms</code>。</p><h1 id="3、HTTP2协商机制"><a href="#3、HTTP2协商机制" class="headerlink" title="3、HTTP2协商机制"></a>3、HTTP2协商机制</h1><p>由于目前并不是所有的客户端和服务器都支持HTTP2，因此在建立HTTP连接的过程中必然会存在一个协商的过程，具体的协商流程如下：</p><p><img src="https://resource.tinychen.com/HTTP2_Negotiation-1591563270203.jpg"></p><h1 id="4、HTTP2的不足"><a href="#4、HTTP2的不足" class="headerlink" title="4、HTTP2的不足"></a>4、HTTP2的不足</h1><p>HTTP2在我个人看来在协议的设计方面应该已经是发挥了目前的全部性能，除非有什么惊人的压缩算法之类的出现，否则很难再有极大的改进（实际上HTTP2对比HTTP1.1在实际应用上的性能提升也并不算特别大）。但是由于HTTP协议的传输层还是使用的TCP，这就导致了可能会出现TCP的一些问题。</p><p>例如在多路复用的情况下， 一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，TCP的特性会需要重新传输，也就是需要把所有的请求都重新传输一次，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1.1 了。因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。这种情况和<strong>队头堵塞</strong>情况有些类似，但是HTTP2的这种情况一般会出现在网络较差的情况下，也就是说HTTP2会有一种<code>快的更快，慢的更慢</code>的倾向。</p><blockquote><p><strong>Head-Of-Line Blocking（HOLB）</strong>：导致带宽无法被充分利用，以及后续健康请求被阻塞。<a href="http://stackoverflow.com/questions/25221954/spdy-head-of-line-blocking">HOLB</a><br>是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了HTTP2相对于HTTP1.1的一些改进和新特性。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>SSL/TLS、对称加密和非对称加密和TLSv1.3</title>
    <link href="https://tinychen.com/20200602-encryption-intro/"/>
    <id>https://tinychen.com/20200602-encryption-intro/</id>
    <published>2020-06-02T02:00:00.000Z</published>
    <updated>2020-06-02T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对对称加密和非对称加密的原理以及过程进行分析，同时还会简单介绍一下TLS/SSL的一些相关内容，并且对比TLSv1.2和TLSv1.3的不同。</p><span id="more"></span><h1 id="1、SSL和TLS的历史"><a href="#1、SSL和TLS的历史" class="headerlink" title="1、SSL和TLS的历史"></a>1、SSL和TLS的历史</h1><p>其实早期的互联网协议基本都是不加密进行传输的，如HTTP、FTP、telnet.等协议的</p><p><strong>传输层安全性协议</strong>（英语：<strong>T</strong>ransport <strong>L</strong>ayer <strong>S</strong>ecurity，缩写：<strong>TLS</strong>）及其前身<strong>安全套接层</strong>（英语：<strong>S</strong>ecure <strong>S</strong>ockets <strong>L</strong>ayer，缩写：<strong>SSL</strong>）的历史进程如下表所示：</p><table><thead><tr><th align="center">协议</th><th align="center">发布时间</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">SSL 1.0</td><td align="center">未公布</td><td align="center">未公布</td></tr><tr><td align="center">SSL 2.0</td><td align="center">1995年</td><td align="center">已于2011年弃用</td></tr><tr><td align="center">SSL 3.0</td><td align="center">1996年</td><td align="center">已于2015年弃用</td></tr><tr><td align="center">TLS 1.0</td><td align="center">1999年</td><td align="center">已于2020年弃用</td></tr><tr><td align="center">TLS 1.1</td><td align="center">2006年</td><td align="center">已于2020年弃用</td></tr><tr><td align="center">TLS 1.2</td><td align="center">2008年</td><td align="center"></td></tr><tr><td align="center">TLS 1.3</td><td align="center">2018年</td><td align="center"></td></tr></tbody></table><blockquote><ul><li>TLS 1.0 于1999年发布为<a href="https://www.rfc-editor.org/info/rfc2246">RFC 2246</a></li><li>TLS 1.1 于2006年作为<a href="https://www.rfc-editor.org/info/rfc4346">RFC 4346</a>发布</li><li>TLS 1.2 于2008年发布为<a href="https://www.rfc-editor.org/info/rfc5246">RFC 5246</a></li><li>TLS 1.3 于2018年8月作为建议标准在<a href="https://tools.ietf.org/html/rfc8446">RFC 8446</a>发布</li></ul></blockquote><p>SSL（Secure Sockets Layer）是网景公司（Netscape）设计的主要用于Web的安全传输协议，这种协议在Web上获得了广泛的应用。SSL1.0没有被公开发布过，1995 网景公司发布SSL2.0，但是由于SSL2.0有严重的安全漏洞，因此1996年又发布了SSL3.0。</p><blockquote><p>但是在2014年10月，Google发布在SSL 3.0中发现设计缺陷，建议禁用此一协议。攻击者可以向TLS发送虚假错误提示，然后将安全连接强行降级到过时且不安全的SSL 3.0，然后就可以利用其中的设计漏洞窃取敏感信息。Google在自己公司相关产品中陆续禁止回溯兼容，强制使用TLS协议。Mozilla也在11月25日发布的Firefox 34中彻底禁用了SSL 3.0。微软同样发出了安全通告。<strong>这就是SSL3.0在2015年被弃用的原因。</strong>但是由于SSL存在的时间太长了，人们以及习惯用SSL这个名词来指代加密的安全传输协议，因此我们要知道现在说的SSL绝大多数都是说的TLS加密。</p></blockquote><p>众所周知当年的浏览器大战微软战胜了网景，而后网景将SSL协议的管理权交给了标准化组织IETF（Internet Engineering Task Force）。<strong>1999年</strong>，IETF在SSL3.0的基础上进行发布了TLS协议的1.0版本，需要注意的是TLS1.0版本和SSL3.0版本的区别很小，并且TLS1.0是可以降级到SSL3.0来使用的，之所以换名字主要是为了避免一些版权和法律的问题。这也就导致了后来谷歌禁止TLS回溯兼容SSL协议从而避免安全事故的发送。注意其实所有TLS版本在<strong>2011年3月</strong>发布的<a href="https://tools.ietf.org/html/rfc6176">RFC 6176</a>中删除了对SSL2.0的兼容，这样TLS会话将永远无法协商使用的SSL 2.0以避免安全问题。<strong>但是还是可以降级协商到SSL3.0的。</strong></p><blockquote><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">RFC <span class="hljs-number">6176</span>的原文摘要如下：<br>   This document requires that <span class="hljs-keyword">when</span> Transport Layer <span class="hljs-keyword">Security</span> (TLS)<br>   clients <span class="hljs-keyword">and</span> servers establish connections, they never negotiate the<br>   use <span class="hljs-keyword">of</span> Secure Sockets Layer (SSL) <span class="hljs-keyword">version</span> <span class="hljs-number">2.0</span>.  This document updates<br>   the backward compatibility sections <span class="hljs-built_in">found</span> <span class="hljs-keyword">in</span> the Transport Layer<br>   <span class="hljs-keyword">Security</span> (TLS).<br></code></pre></div></td></tr></table></figure></blockquote><p>TLS 1.1在 <a href="https://tools.ietf.org/html/rfc4346">RFC 4346</a> 中定义，于2006年4月发表。TLS 1.2在 <a href="https://tools.ietf.org/html/rfc5246">RFC 5246</a> 中定义，于2008年8月发表。TLS 1.3在 <a href="https://tools.ietf.org/html/rfc8446">RFC 8446</a> 中定义，于2018年8月发表。实际上现代的浏览器已经基本不使用 SSL，使用的都是 TLS，而目前主流使用的加密协议版本是TLS1.2和TLS1.3。</p><h1 id="2、SSL-TLS属于哪一层"><a href="#2、SSL-TLS属于哪一层" class="headerlink" title="2、SSL/TLS属于哪一层"></a>2、SSL/TLS属于哪一层</h1><p>这个问题十分有意思，从前面的发展历史中我们不难知道，TLS可以视为是SSL的高级版本（主要体现在更加安全上），而从TLS的名字（传输层安全性协议）就会觉得它应该是传输层的协议，当然这可能就望文生义了，实际上在网上有不少的文章在讨论TLS/SSL属于应用层还是传输层，实际上的情况要更为复杂一些，我们先来搞清楚在不同的网络模型中对于不同层的划分。</p><p>首先我们需要知道一般说的七层协议指的是在OSI模型协议，而在TCP/IP模型中网络被划分为四层，我们直接来看下面的示意图：</p><p><img src="https://resource.tinychen.com/image-20200518143710872.png"></p><p>原始版本的OSI模型划分得太细，TCP/IP模型又划分得太粗，于是人们把两者结合，将OSI模型中的5、6、7三层统一为应用层，就得到了一个升级版的五层网络模型。</p><p>首先我们对SSL/TLS的作用进行分析：SSL/TLS最初是为了给HTTP协议加密使用，也就是HTTPS协议，通常来说我们可以认为<code>HTTP+SSL/TLS=HTTPS</code>，而实际上现在我们的很多其他应用层协议都可以使用SSL/TLS，比如SSH、FTPS、POP3S、IMAPS等等。再以HTTPS为例，一个HTTPS建立连接需要经过TCP握手建立连接这一步骤的，也就是说HTTPS还是基于TCP的，而TCP属于传输层这是毫无争论的。也就是说从划分最细的OSI七层参考模型来看，SSL/TLS应该是在传输层和应用层之间。</p><p>实际上从SSL/TLS的功能来分析：</p><p><img src="https://resource.tinychen.com/image-20200518185915178.png"></p><ul><li>SSL Record Protocol（SSL记录协议），它建立在可靠的传输协议（如TCP）之上，SSL/TLS使用了双向字节流传输（全双工），为高层协议提供数据封装、压缩、加密等基本功能的支持，从功能上看这应该是OSI的L6（表示层）</li><li>SSL Handshake Protocol（SSL握手协议）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等，从功能上看这应该是OSI的L5（会话层）</li></ul><blockquote><p> 首先，SSL协议分为SSL握手协议和SSL记录协议。记录协议工作在TCP之上，握手协议工作在记录协议之上。 </p><p>而与之相对应的七层结构中，传输层之上是会话层，会话层之上是表示层。 </p><p>一、会话层负责建立和位置会话，很明显SSL握手协议就是干这个事的。 </p><p>二、表示层对统一传输方式，并对数据进行加密之类的前置处理。这个应该是SSL记录协议要做的事情。</p><p> 所以如果真要说对应关系，应该是SSL握手协议对应会话层， SSL记录协议对应表示层，但是这又与SSL握手协议在SSL记录协议之上相违背。</p></blockquote><p>那么我们就可以得出结论：<strong>OSI七层模型并不适用于SSL/TLS协议，这个人为设计的理论参考模型并不能完美地套用在每一个网络协议上，</strong>可能这也是OSI模型被弃用的原因之一吧。</p><p>那么对应五层的网络模型呢？由于OSI模型中的L5、L6、L7都合并成了应用层，所以SSL/TLS应该是属于传输层和应用层了。</p><h1 id="3、对称加密和非对称加密"><a href="#3、对称加密和非对称加密" class="headerlink" title="3、对称加密和非对称加密"></a>3、对称加密和非对称加密</h1><p>讲到加密，必然需要理解加密算法，而加密算法一般来说可以分为<strong>对称加密</strong>和<strong>非对称加密</strong>两种。</p><p><img src="https://resource.tinychen.com/image-20200518124623154.png"></p><p>这里的对称和非对称是针对加密和解密这两个操作而言的，一般来说是消息发送方发送消息时需要加密，消息接收方在接收消息后需要进行解密。<strong>如果加密和解密用的密钥是相同的，则是对称加密；如果不同则是非对称加密。</strong></p><h2 id="3-1-对称加密"><a href="#3-1-对称加密" class="headerlink" title="3.1 对称加密"></a>3.1 对称加密</h2><p><strong>对称加密算法的特点是算法公开、计算量小、加密速度快、加密效率高。</strong>常见的对称加密算法有AES、DES等。</p><p><strong>对称加密最大的问题在于密钥的传输</strong>：因为如果信息的发送方和接收方是通过网络来进行通信的，而在网络中使用明文通信是不安全的，想要安全通信必须使用密钥加密，同时要保证密钥只有通信双方知道，但是在传输密钥之前双方并没有一个安全可靠双方都知道的密钥。如果最开始的密钥传输过程使用明文，就可能会被别有用心的人截获密钥，之后的加密就毫无意义。最保险的方法就是线下传输密钥然后再线上通信，可以参考谍战片中的特务舍生取义护送密码本，但是这在互联网时代显然不靠谱。</p><h2 id="3-2-非对称加密"><a href="#3-2-非对称加密" class="headerlink" title="3.2 非对称加密"></a>3.2 非对称加密</h2><p>这时候非对称加密就出现了，<strong>非对称加密最大的特点就是把密钥进行分离，将其分成公钥和私钥两个部分，常见的非对称加密算法主要有 RSA 、 DSA 、ECC等</strong>。</p><p>顾名思义，公钥是可以用在互联网中随意传播的，而私钥则是需要自己小心保存避免泄露的。消息的发送方只需要知道消息接受方的公钥，即可将明文通过公钥加密然后通过网络传输给消息接收方。消息接收方收到密文后，通过非对称加密算法，使用自己的私钥进行解密，即可获取消息内容。</p><p><img src="https://resource.tinychen.com/image-20200518131644845.png"></p><p>这里面有几个点需要额外关注一下：</p><ul><li>公钥是所有人都可以获取的，因此想要给接收方发送消息只需要获取公钥即可，所以公钥可以用明文直接传输，因为即使是在传输过程中泄露了公钥，由于解密只能使用私钥，因此整个数据传输也还是安全的</li><li>在通信过程中一般两边都涉及到消息的发送和接收，因此在通信过程中一般会有两套密钥对</li><li>可以根据私钥生成公钥，反之不行</li><li>消息发送方是无法对发送出去的密文解密的，它只能读取自己保存的明文来了解之前发送过的消息</li></ul><h2 id="3-3-数字证书"><a href="#3-3-数字证书" class="headerlink" title="3.3 数字证书"></a>3.3 数字证书</h2><p><strong>在通信的过程中，我们使用公钥加密，私钥解密，因为私钥是自己才有的，而传输的信息是不安全的可能被别人截获的，但是只要对其进行加密，然后保证自己才能解密，就可以认为传输信息是安全的。</strong>这就好比使用了一个很安全的保险箱来存放重要资料再快递到别的地方去，只要保证只有自己能够解锁保险箱，那么运输过程中保险箱会被谁接触到都不重要，只要保险箱送到目的地就可以了。</p><p>即便是非对称加密，也存在一个公钥传输的问题。基本上存在着两种方案，一种是直接把公钥放到网上，然后让需要使用的用户去下载，另一种就是在通信传输过程中，由服务器直接发送给客户端。这两种方法都存在一个问题就是无法保证公钥传输的安全性，虽然公钥是可以给任何人知道的，但是在通信过程中使用的公钥必须是通信双方的公钥，否则如果出现中间人劫持了通信并且将公钥替换为中间人自己的公钥，那么中间人就可以获取到通信内容。</p><p>这个时候就需要数字证书了，基于非对称加密公私钥分离的特性，我们就可以对公钥进行单独操作，用于数字证书，也叫数字认证（digital certificate），即相当于现实生活中的签名，用于证实身份。</p><p>数字证书是部署HTTPS认证的网站的必需品，我们在访问一个网站的时候，一般点击浏览器地址栏旁边的小锁就可以看到这时候正在使用的数字证书：</p><p><img src="https://resource.tinychen.com/tinychencerts.png"></p><p>点击进去就可以看到相关的证书信息。证书中包含着十分多的信息，首先最重要的当然是对应的域名和公钥，其他的还有证书的生效时间，使用的加密算法、签名算法等各种相关信息。</p><p><img src="https://resource.tinychen.com/image-20200602095500926.png"></p><p>签发证书的机构被称为 CA（ Certificate Authority），理论上每个人都可以成为CA，因为每个人都可以自己签发证书，但是只有极少数的权威CA颁发的证书才会被承认，这几大权威CA的称为ROOT CA，他们的证书一般都会内置在操作系统中，浏览器默认是信任这些ROOT CA的证书的，而这些ROOT CA下属还有其他的CA，这些下属的CA可以为各种网站颁发证书，根据层层信任的原则，浏览器也会信任这些CA下发的证书，最终就保证了通信中公钥传输的安全。</p><p><img src="https://resource.tinychen.com/image-20200602100807932.png"></p><p>早期的证书是需要收费的，但是到了近几年加密通信的需求增加，很多网站的运营者并没有那么多钱来购买证书（证书过期了续费也是要钱的），这时候就出现了以Encryption Everywhere、 Let’s Encrypt等为首的CA开始大量普及免费的数字证书，如今国内的很多云厂商也提供了各种免费的数字证书，从而很好的推动了加密通信的发展。不过这些免费的数字证书在安全性上并没有企业级的收费证书那么高，大多数都只是DV证书，如果对安全性有很高的追求，还是建议购买收费的证书。</p><p>一般来说数字证书可以按照安全程度分为以下三类：</p><ul><li>EV：**EV证书(Extended Validation Certificate)**是一种根据一系列特定标准颁发的X.509电子证书，根据要求，在颁发证书之前，证书颁发机构(CA)必须验证申请者的身份。不同机构根据证书标准发行的扩展验证证书并无太大差异，但是有时候根据一些具体的要求，特定机构发行的证书可以被特定的软件识别</li><li>OV：**OV证书(Organization Validation SSL)**，指需要验证网站所有单位的真实身份的标准型SSL证书，此类证书不仅能够起到网站信息加密的作用，而且能向用户证明网站的真实身份</li><li>DV：**DV证书(Domain Validation SSL)**，指需要验证域名的有效性。该类证书只提供基本的加密保障，不能提供域名所有者的信息</li></ul><h1 id="4、TLS加密的握手过程"><a href="#4、TLS加密的握手过程" class="headerlink" title="4、TLS加密的握手过程"></a>4、TLS加密的握手过程</h1><p>TLS本身是一个混合加密系统，也就是说它使用了对称加密和非对称加密两种方式，<strong>首先是使用非对称加密来传输在这次会话过程中生成的用于生成对称加密的密钥（ pre-master key），结合明文传输的随机数和算法生成堆成加密的密钥之后再使用对称加密进行通信。</strong>这样通信的原因是因为非对称加密虽然很安全，但是效率实在是太低了（比对称加密慢几个数量级），因此只用来传输对称加密的密钥，之后就使用效率更高的对称加密来通信。</p><p>TLS支持多种密钥交换算法（key exchange algorithms） 和加密算法（ciphersuites），不同的客户端和服务器之间支持的也各不相同，因此在加密通信之间就需要进行协商，<strong>客户端和服务端需要协商清楚使用何种算法，使用何种加密方式，使用什么密钥等等问题，这一个过程称为握手过程（handshake）。</strong>就好像TCP连接在建立前需要进行三次握手一样，所有的TLS通信在开始之前都需要进行握手（handshake）。当客户端和服务器完成TCP三次握手建立TCP连接之后，就开始进行TLS的握手过程，具体的流程如下：</p><ul><li>首先由客户端发送Client Hello 消息到服务器，消息中主要包含了客户端支持的<code>ciphersuites</code>， TLS 版本信息和客户端随机数。<strong>注意此时是明文传输</strong></li><li>服务器接收到消息后，返回自己支持的<code>ciphersuites</code>， TLS 版本，自己的数字证书和服务器端生成的随机数。<strong>注意此时是明文传输</strong></li><li>客户端开始验证数字证书，可能会不断往上追溯 CA、CA 的 CA、CA 的 CA 的 CA，直到一个授信的 CA。验证完证书之后生成一个新的<code>pre-master key</code>，再使用证书中的公钥来对<code>pre-master key</code>进行加密，然后发送给服务器。<strong>注意此时是非对称加密传输</strong></li><li>服务器接收到客户端发送过来的非对称加密的密文，使用自己的私钥进行解密，获得了<code>pre-master key</code>。<strong>注意此时是非对称加密传输</strong></li><li>到这里为止，服务器和客户端都有三组数字，<strong>分别是客户端的随机数、服务器的随机数和pre-master key。</strong>其中由于客户端的随机数和服务器的随机数都是使用明文传输，所以这两个数字是有被暴露的风险的，但是由于<code>pre-master key</code>是使用非对称加密传输，十分安全，所以将这三者结合，使用之前协商好的特定的算法就可以生成一个密钥，这个密钥称为<code>shared secert</code>。也就是之后用来对称加密的密钥。</li><li>客户端在计算出对称加密的密钥之后，使用该密钥进行对称加密通信，告知服务器之后都使用该密钥进行对称加密。<strong>注意此时是对称加密传输</strong></li><li>服务器接收到密文后，使用之前计算出的密钥来进行对称解密，解密成功之后，再使用该密钥进行对称加密通信。告知客户端密钥确认无误，可以使用该密钥进行通信。<strong>注意此时是对称加密传输</strong></li><li>至此，整个TLS的握手过程完整，之后就可以开始对称加密的通信了。</li></ul><p>全过程如下图所示：</p><p><img src="https://resource.tinychen.com/TLSv1.2-handshake.png"></p><p>在<a href="https://tools.ietf.org/html/rfc5246#page-35">RFC5246</a>文档中我们也可以看到对应的简单图示</p><p><img src="https://resource.tinychen.com/image-20200607165105117.png"></p><p>整体流程和上面的基本相同，都是需要进行两个RTT操作。</p><h1 id="5、TLS1-2的问题"><a href="#5、TLS1-2的问题" class="headerlink" title="5、TLS1.2的问题"></a>5、TLS1.2的问题</h1><p>纵观整个SSL/TLS协议的发展史，我们可以发现整个SSL/TLS协议就是不断地填坑的一个过程，不断地对旧版本的协议中的各种漏洞进行修补迭代更新，然后发布新的版本，直到TLSv1.2版本才算是一个不错的可用的加密协议版本。即便如此，对应TLSv1.2来说还是有着太多的历史包袱和兼容性的问题，尽管在功能实现上的漏洞可以通过补丁来进行修补，但是在协议设计之初就存在的问题是没有办法修复的，只能推倒重来，于是就出现了后面的TLSv1.3。这里我们先了解一下TLSv1.2版本中的一些主要的问题：</p><h2 id="5-1-安全问题"><a href="#5-1-安全问题" class="headerlink" title="5.1 安全问题"></a>5.1 安全问题</h2><p>作为一个提供安全通信的协议，安全问题是首要的也是致命的问题。TLS发展到1.2以来，已经被很多机构和学者曝出有各种各样的安全漏洞，包括密钥交换算法（key exchange algorithms）、加密套件（ciphersuites）和数字签名（digital signatures）各个方面都存在安全问题，很多都是由于历史原因兼容问题而遗留下来的问题。</p><p>还有一些则是设计协议本身就存在的问题如TLS重新协议（renegotiation）可以让心怀不轨的人将高版本的TLS协议重新协商降级到低版本的不安全的协议然后进行攻击。又或者是SNI的不加密问题，TLS1.2及之前的协议都不对SNI进行加密，这也存在了很大的风险。</p><h2 id="5-2-性能问题"><a href="#5-2-性能问题" class="headerlink" title="5.2 性能问题"></a>5.2 性能问题</h2><p>互联网上一直存在着加密传输对性能有很大损耗的说法，实际上了解了上面的TLSv1.2握手过程之后，我们可以知道加密传输对性能确实有损耗，但是远没有到很多人鼓吹的那么严重的程度。而且在后面也加入了很多诸如OCSP、HSTS等技术来提高其性能表现，但是即便如此，整个TLSv1.2的握手过程也需要2-RTT，也就是在客户端和服务器之间来回两次才能顺利建立TLS传输，这还是在一切都进行顺利的情况下。</p><h1 id="6、TLS1-3的改进"><a href="#6、TLS1-3的改进" class="headerlink" title="6、TLS1.3的改进"></a>6、TLS1.3的改进</h1><p>TLSv1.3是TLS协议更新中变化非常大的一个版本，加入了许多新的特性和性能优化，并且不完全前向兼容，因此也有些人认为应该称为TLSv2.0，不过最后还是命名为TLSv1.3。</p><p>针对TLSv1.2中存在的安全和性能问题，TLSv1.3在设计的时候就放弃了前向兼容性，不再对之前的版本进行兼容，同时禁用了大量不安全的算法，使用了少量安全的算法来设计协议，这样的好处就是可以简化握手过程中的操作，使得握手过程从2-RTT变为1-RTT，同时有效提高安全性和性能。</p><h2 id="6-1-TLS1-3和TLS1-2的主要不同"><a href="#6-1-TLS1-3和TLS1-2的主要不同" class="headerlink" title="6.1 TLS1.3和TLS1.2的主要不同"></a>6.1 TLS1.3和TLS1.2的主要不同</h2><ul><li>部分新的密码套件（ciphersuite）只能在TLSv1.3中工作，并且TLSv1.3不支持之前在TLSv1.2前用的旧的密码套件<code>ciphersuites</code>。也就是说<strong>如果需要使用TLSv1.3就必须要添加新的只能在TLSv1.3中使用的密码套件</strong></li><li>新的密码套件（<code>ciphersuites</code>）和之前的密码套件定义不同，并不需要指定对应的证书类型(e.g. RSA, DSA, ECDSA) 或者是密钥交换机制 (e.g. DHE or ECHDE)</li><li>TLSv1.3不再支持DSA证书</li><li>TLS1.3中不再支持重新协商（Renegotiation），即不可能像TLSv1.2之前那样通过重新协商来回退到更早的更不安全的版本</li><li>TLS1.3中更多的握手过程都被加密了（Server Hello之后都会进行加密）</li><li>TLSv1.3支持更多的的消息类型，即对自定义的扩展API和认证传输有更好的扩展性</li><li>客户端在TLS握手阶段发送ClientHello数据包的时候需要提供支持的密码套件（ciphersuite）和密钥共享（key_share）从而提高速度，<strong>如果client发送的<code>keyshare</code>类型是server不支持，那就不是1-RTT。</strong></li><li>sessions会话在TLS握手完成之后才会建立，所以在session和TLS握手之间可能会有空隙（即不是连续的）</li></ul><h2 id="6-2-TLS1-3中的密钥交换算法"><a href="#6-2-TLS1-3中的密钥交换算法" class="headerlink" title="6.2 TLS1.3中的密钥交换算法"></a>6.2 TLS1.3中的密钥交换算法</h2><p>TLS 1.3的核心宗旨是简单性。在新版本中，除去了<em>Diffie-Hellman</em>（DH）密钥交换以外的所有密钥交换算法。TLS 1.3还定义了一组经过测试的DH参数，无需与服务器协商参数。由于只有一个密钥交换算法（具有内置参数）和少数支持的密码，因此设置TLS 1.3通道所需的绝对带宽比早期版本要少得多。</p><p>我们来看DH算法交换密钥的步骤。假设客户端和服务器双方需要传递密钥，他们之间可以这么做：</p><ol><li>客户端首选选择一个素数<code>p</code>，例如509，底数<code>g</code>，任选，例如5，随机数<code>a</code>，例如123，然后计算<code>A=g^a mod p</code>，结果是215，然后，客户端发送<code>p＝509</code>，<code>g=5</code>，<code>A=215</code>给服务器；</li><li>服务器收到后，也选择一个随机数<code>b</code>，例如，456，然后计算<code>B=g^b mod p</code>，结果是181，服务器再同时计算<code>s=A^b mod p</code>，结果是121；</li><li>服务器把计算的<code>B=181</code>发给客户端，客户端计算<code>s＝B^a mod p</code>的余数，计算结果与服务器算出的结果一样，都是121。</li></ol><p>所以最终双方协商出的密钥<code>s</code>是121。注意到这个密钥<code>s</code>并没有在网络上传输。而通过网络传输的<code>p</code>，<code>g</code>，<code>A</code>和<code>B</code>是无法推算出<code>s</code>的，因为实际算法选择的素数是非常大的。所以，更确切地说，DH算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p><h2 id="6-3-TLS1-3握手过程"><a href="#6-3-TLS1-3握手过程" class="headerlink" title="6.3 TLS1.3握手过程"></a>6.3 TLS1.3握手过程</h2><p><img src="https://resource.tinychen.com/TLSv1.3-handshake-1591540910347.png"></p><p>整个流程的目的和TLS 1.2是相似的，TLS握手过程就是为了让双方能够得到一个安全的可用于对称加密的密钥。和之前不一样的就是，无非就是客户端提前把所有的公钥计算了一遍，发给server，server再挑选。</p><h1 id="7、wireshark抓包"><a href="#7、wireshark抓包" class="headerlink" title="7、wireshark抓包"></a>7、wireshark抓包</h1><p>使用wireshark对TLSv1.3握手过程进行抓包，未解密的情况如下图。我们可以看到在<code>Server Hello</code>阶段之后的数据就已经被加密了，无法查看具体的数据情况，均显示为Application Data</p><p><img src="https://resource.tinychen.com/image-20200607034300317.png"></p><p>对其进行解密操作之后就可以看到其中的数据情况，其中的Encrypted Extensions就是对SNI部分进行了加密。</p><p><img src="https://resource.tinychen.com/image-20200607034403684.png"></p><p>解密前的TLSv1.2握手过程，可以看到直到Change Cipher Spec阶段都是没有进行加密的。</p><p><img src="https://resource.tinychen.com/image-20200607025947398.png"></p><p>解密后的TLSv1.2握手过程，我们可以看到被加密的部分也就是Encrypted Handshake Message实际上就是Finished消息，用于检验对称加密的密钥是可以正常工作的。</p><p><img src="https://resource.tinychen.com/image-20200607030111002.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要对对称加密和非对称加密的原理以及过程进行分析，同时还会简单介绍一下TLS/SSL的一些相关内容，并且对比TLSv1.2和TLSv1.3的不同。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="tls" scheme="https://tinychen.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>nginx篇07-启用HTTP2和TLSv1.3</title>
    <link href="https://tinychen.com/20200519-nginx-07-enable-http2-tls13/"/>
    <id>https://tinychen.com/20200519-nginx-07-enable-http2-tls13/</id>
    <published>2020-05-19T02:00:00.000Z</published>
    <updated>2020-05-19T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用编译的方式升级openssl库和nginx用于支持HTTP2和TLSv1.3并且介绍了一些简单的提高nginx安全性的配置。</p><span id="more"></span><h1 id="1、编译安装openssl"><a href="#1、编译安装openssl" class="headerlink" title="1、编译安装openssl"></a>1、编译安装openssl</h1><p>考虑到Linux系统中有许多组件都需要使用openssl库，而现在默认使用的openssl库绝大多数都没到达能够支持TLS1.3的openssl1.1.1版本以上，因此个人建议不要直接修改系统已有的默认openssl库而是另外使用一个新目录来编译安装新版本的openssl。</p><p>具体的支持信息可以查看<a href="https://wiki.openssl.org/index.php/TLS1.3">openssl官网的TLSv1.3部分</a>。</p><p>解压下载的稳定版openssl1.1.1g进行编译安装，注意使用<code>--prefix=</code>指定安装目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz<br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -zxvf openssl-1.1.1g.tar.gz<br><span class="hljs-meta">#</span><span class="bash"> 配置、编译</span><br>./config  --prefix=/home/openssl<br>make<br><span class="hljs-meta">#</span><span class="bash"> 检查是否出错</span><br>make test<br><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>make install<br></code></pre></div></td></tr></table></figure><p>安装完成后检查链接库是否正常，将缺少的文件直接软链接到系统的<code>/usr/lib64</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln -s /home/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1<br>ln -s /home/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1<br></code></pre></div></td></tr></table></figure><p>最后检查系统使用的openssl的版本是否为新版以及系统的库指向是否正确</p><p><img src="https://resource.tinychen.com/image-20200526134022033.png"></p><h1 id="2、编译安装nginx"><a href="#2、编译安装nginx" class="headerlink" title="2、编译安装nginx"></a>2、编译安装nginx</h1><h2 id="2-1-nginx的TLS1-3和HTTP2"><a href="#2-1-nginx的TLS1-3和HTTP2" class="headerlink" title="2.1 nginx的TLS1.3和HTTP2"></a>2.1 nginx的TLS1.3和HTTP2</h2><p>想要在nginx中开启TLS1.3的支持，<strong>只需要使用支持TLS1.3的openssl库来进行编译</strong>即可。</p><p>查看nginx的版本更新说明我们可以知道<strong>nginx从1.9.5版本开始支持HTTP2：</strong></p><p><img src="https://resource.tinychen.com/image-20200520093003858.png"></p><p>从1.13版本开始支持TLS1.3</p><p><img src="https://resource.tinychen.com/image-20200520093151328.png"></p><h2 id="2-2-指定openssl目录进行nginx编译安装"><a href="#2-2-指定openssl目录进行nginx编译安装" class="headerlink" title="2.2 指定openssl目录进行nginx编译安装"></a>2.2 指定openssl目录进行nginx编译安装</h2><p>nginx的编译安装此前已经介绍过了，有需要的同学可以点击<a href="https://tinychen.com/20200317-nginx01-base-conf-static-web/">这里</a>回顾。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget http://nginx.org/download/nginx-1.18.0.tar.gz<br></code></pre></div></td></tr></table></figure><p>这次我们使用的是截止<code>2020年5月19号</code>最新的稳定版本<code>nginx1.18.0</code>，一些注意的事项如下：</p><ul><li><code>--with-http_v2_module</code>和<code>--with-http_ssl_module</code>用于支持HTTP2和ssl加密，</li><li><code>--with-openssl=</code>用于指定openssl库的安装目录</li><li><code>--with-openssl-opt=enable-tls1_3</code>用于开启openssl库的tls1.3支持，但是现在的新版本已经默认开启，无需额外添加这个参数</li></ul><p>剩下的就和常规的编译安装无异，下面是此次编译的参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./configure --prefix=/home/nginx \<br>--sbin-path=/home/nginx/sbin/nginx \<br>--with-openssl-opt=enable-tls1_3 \<br>--with-openssl=/home/openssl \<br>--conf-path=/home/nginx/nginx.conf \<br>--error-log-path=/home/nginx/logs/error.log \<br>--http-log-path=/home/nginx/logs/access.log \<br>--pid-path=/home/nginx/nginx.pid \<br>--lock-path=/home/nginx/nginx.lock \<br>--http-client-body-temp-path=/home/nginx/cache/client_temp \<br>--http-proxy-temp-path=/home/nginx/cache/proxy_temp \<br>--http-fastcgi-temp-path=/home/nginx/cache/fastcgi_temp \<br>--http-uwsgi-temp-path=/home/nginx/cache/uwsgi_temp \<br>--http-scgi-temp-path=/home/nginx/cache/scgi_temp \<br>--user=nginx \<br>--group=nginx \<br>--with-compat \<br>--with-file-aio \<br>--with-threads \<br>--with-http_addition_module \<br>--with-http_auth_request_module \<br>--with-http_dav_module \<br>--with-http_flv_module \<br>--with-http_gunzip_module \<br>--with-http_gzip_static_module \<br>--with-http_mp4_module \<br>--with-http_random_index_module \<br>--with-http_realip_module \<br>--with-http_secure_link_module \<br>--with-http_slice_module \<br>--with-http_ssl_module \<br>--with-http_stub_status_module \<br>--with-http_sub_module \<br>--with-http_v2_module \<br>--with-stream<br></code></pre></div></td></tr></table></figure><p>编译的时候出现报错：</p><p><img src="https://resource.tinychen.com/image-20200520102345707.png"></p><p>修改nginx源码目录中<code>auto/lib/openssl/conf</code>中的openssl路径参数，在40行左右的位置对应四个参数中的<code>.openssl</code>去掉，修改后的内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">39             CORE_INCS=&quot;$CORE_INCS $OPENSSL/include&quot;<br>40             CORE_DEPS=&quot;$CORE_DEPS $OPENSSL/include/openssl/ssl.h&quot;<br>41             CORE_LIBS=&quot;$CORE_LIBS $OPENSSL/lib/libssl.a&quot;<br>42             CORE_LIBS=&quot;$CORE_LIBS $OPENSSL/lib/libcrypto.a&quot;<br></code></pre></div></td></tr></table></figure><p>然后重新编译安装。</p><p><img src="https://resource.tinychen.com/image-20200526114531995.png"></p><h2 id="2-3-nginx配置修改"><a href="#2-3-nginx配置修改" class="headerlink" title="2.3 nginx配置修改"></a>2.3 nginx配置修改</h2><p>安装完成之后将原来的配置文件和html文件全部迁移到新的nginx目录下并进行相应的修改就可以正常的启用nginx了。如果此前的nginx是直接使用yum安装并且使用systemd进行守护进程的控制，我们可以将对应的systemd unit文件中的目录进行修改，一般来说只需要修改相关路径的参数即可：</p><p><img src="https://resource.tinychen.com/image-20200520095720093.png"></p><p>首先我们停止服务，然后修改文件，接着重启服务即可：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 停止nginx</span><br>systemctl stop nginx<br><span class="hljs-meta">#</span><span class="bash"> 修改配置文件</span><br>vim /usr/lib/systemd/system/nginx.service<br><br>[Unit]<br>Description=nginx - high performance web server<br>Documentation=http://nginx.org/en/docs/<br>After=network-online.target remote-fs.target nss-lookup.target<br>Wants=network-online.target<br><br>[Service]<br>Type=forking<br>PIDFile=/home/nginx/nginx.pid<br>ExecStart=/home/nginx/sbin/nginx -c /home/nginx/nginx.conf<br>ExecReload=/bin/kill -s HUP $MAINPID<br>ExecStop=/bin/kill -s TERM $MAINPID<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启daemon进程</span><br>systemctl daemon-reload<br></code></pre></div></td></tr></table></figure><p>如果还想使用全局命令nginx的话，可以先把原来的yum安装的移除再将编译安装的新版本指向系统目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">使用<span class="hljs-built_in">which</span> nginx查看nginx的指向</span><br>[root@aliyun bin]# which nginx<br>/usr/sbin/nginx<br>[root@aliyun bin]# mv /usr/sbin/nginx /usr/sbin/nginx.bak<br>[root@aliyun bin]# ln -s /home/nginx/sbin/nginx /usr/sbin/nginx<br></code></pre></div></td></tr></table></figure><p>最后我们查看nginx版本信息：</p><p><img src="https://resource.tinychen.com/image-20200526135856527.png"></p><h1 id="3、配置http2和tls1-3"><a href="#3、配置http2和tls1-3" class="headerlink" title="3、配置http2和tls1.3"></a>3、配置http2和tls1.3</h1><h2 id="3-1-nginx配置"><a href="#3-1-nginx配置" class="headerlink" title="3.1 nginx配置"></a>3.1 nginx配置</h2><p>nginx中开启http2和tls1.3十分简单，这里配置如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>    server_name tinychen.com www.tinychen.com;<br><br>    <span class="hljs-keyword">if</span> ($server_port = <span class="hljs-number">80</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> https://$host$<span class="pgsql">request_uri;</span><br><span class="pgsql">    &#125;</span><br><span class="pgsql">&#125;</span><br><span class="pgsql"></span><br><span class="pgsql"><span class="hljs-keyword">server</span>&#123;</span><br><span class="pgsql">    <span class="hljs-keyword">listen</span> <span class="hljs-number">443</span> ssl http2 default_server;</span><br><span class="pgsql">    server_name tinychen.com www.tinychen.com;</span><br><span class="pgsql"></span><br><span class="pgsql">    add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=63072000; includeSubDomains; preload&quot;;</span><br><span class="pgsql"></span><br><span class="pgsql">    ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES<span class="hljs-number">-256</span>-GCM-SHA384:TLS13-AES<span class="hljs-number">-128</span>-GCM-SHA256:EECDH+CHACHA20:EECDH+AESGCM:EECDH+AES;</span><br><span class="pgsql">    #ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_128_CCM_8_SHA256:TLS_AES_128_CCM_SHA256;</span><br><span class="pgsql">    ssl_protocols TLSv1<span class="hljs-number">.2</span> TLSv1<span class="hljs-number">.3</span>;</span><br><span class="pgsql">    ssl_stapling <span class="hljs-keyword">on</span>;</span><br><span class="pgsql">    ssl_stapling_verify <span class="hljs-keyword">on</span>;</span><br><span class="pgsql">    ssl_trusted_certificate certs/tinychen.com.pem;</span><br><span class="pgsql">    ssl_prefer_server_ciphers <span class="hljs-keyword">on</span>;</span><br><span class="pgsql">    ssl_certificate certs/tinychen.com.pem;</span><br><span class="pgsql">    ssl_certificate_key certs/tinychen.com.key;</span><br><span class="pgsql">    ssl_session_cache shared:SSL:<span class="hljs-number">1</span>m;</span><br><span class="pgsql">    ssl_verify_depth <span class="hljs-number">10</span>;</span><br><span class="pgsql">    ssl_session_timeout <span class="hljs-number">30</span>m;</span><br><span class="pgsql"></span><br><span class="pgsql">    <span class="hljs-keyword">location</span> / &#123;</span><br><span class="pgsql">        root html/;</span><br><span class="pgsql">        <span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;</span><br><span class="pgsql">    &#125;</span><br><span class="pgsql"></span><br><span class="pgsql">&#125;</span><br></code></pre></div></td></tr></table></figure><ul><li>由于http2默认需要使用加密，因此直接在nginx对应的ssl监听端口上加上<code>http2</code>字段即可</li><li>TLS1.3则只需要在<code>ssl_protocols</code>指令中加上<code>TLSv1.3</code></li><li><code>ssl_ciphers</code>这里的配置采用了比较激进的配置，由于前面协议只启用了TLSv1.2和TLSv1.3，因此这里对应的<code>ssl_ciphers</code>也直接弃用了大量旧的和弱的加密套件</li><li><code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;</code>这个字段头用于开启HSTS避免在进行301跳转的时候被中间人攻击，添加了<code>preload</code>字段还需要在<a href="https://hstspreload.org/">HSTS的官网</a>添加自己的网址，注意HSTS不应该添加在HTTP请求的网站上，所以上面将80端口和443端口分为两个server块</li><li><code>ssl_stapling on</code>用于开启OCSP（Online Certificate Status Protocol），可以减缓网络和客户端资源负担</li><li><code>ssl_stapling_verify on</code>用于开启OCSP Stapling（OCSP装订），这是TLS证书状态查询扩展，服务器在TLS握手时发送事先缓存的OCSP响应，用户只要验证该响应的时效性而不用再向数字证书认证机构(CA)发送请求，可以加快握手速度</li></ul><h2 id="3-2-检测"><a href="#3-2-检测" class="headerlink" title="3.2 检测"></a>3.2 检测</h2><p>使用<a href="https://myssl.com/">myssl</a>进行检测，可以看到很顺利地显示已经支持了HTTP2和TLS1.3协议。</p><p><img src="https://resource.tinychen.com/image-20200526153241345.png"></p><p>同时可以看到由于关闭了TLS1.2以下的加密协议支持并且强制启用了https之后很多旧浏览器已经不再支持了：</p><p><img src="https://resource.tinychen.com/image-20200526153141135.png"></p><p>在不考虑旧版浏览器的兼容之后可以很轻松获得A+评分并且上榜：</p><p><img src="https://resource.tinychen.com/image-20200526160107947.png"></p><p>同样的我们可以使用<a href="https://www.ssllabs.com/ssltest/">ssllab</a>来进行测试，测试结果也是大同小异：</p><p><img src="https://resource.tinychen.com/image-20200526160349729.png"></p><p><img src="https://resource.tinychen.com/image-20200526160303067.png"></p><h2 id="3-3-主流网站测试"><a href="#3-3-主流网站测试" class="headerlink" title="3.3 主流网站测试"></a>3.3 主流网站测试</h2><p>下表是截止2020年6月6日使用Chrome（83.0.4103.97（正式版本））对一些主要的网站首页进行的简单测试</p><table><thead><tr><th align="center">简称</th><th align="center">网站</th><th align="center">HTTP</th><th align="center">TLS</th></tr></thead><tbody><tr><td align="center">谷歌</td><td align="center">google.com/</td><td align="center">H2+quic/46</td><td align="center">TLS1.3</td></tr><tr><td align="center">苹果</td><td align="center">apple.com.cn/</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">GitHub</td><td align="center">github.com/</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">维基百科</td><td align="center">en.wikipedia.org/</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">k8s</td><td align="center">kubernetes.io/</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">nginx商业版</td><td align="center">nginx.com/</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">阿里CDN</td><td align="center">*.alicdn.com</td><td align="center">H2</td><td align="center">TLS1.3</td></tr><tr><td align="center">163首页</td><td align="center">163.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.3</td></tr><tr><td align="center">ssllab</td><td align="center">ssllabs.com/index.html</td><td align="center">HTTP1.1</td><td align="center">TLS1.3</td></tr><tr><td align="center">微软</td><td align="center">microsoft.com/zh-cn/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">docker</td><td align="center">docker.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">微信</td><td align="center">weixin.qq.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">严选</td><td align="center">you.163.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">淘宝</td><td align="center">taobao.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">天猫</td><td align="center">tmall.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">阿里巴巴</td><td align="center">alibaba.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">csdn</td><td align="center">csdn.net/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">腾讯云</td><td align="center">cloud.tencent.com/</td><td align="center">H2</td><td align="center">TLS1.2</td></tr><tr><td align="center">亚马逊</td><td align="center">amazon.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">QQ</td><td align="center">qq.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">B站</td><td align="center">bilibili.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">百度</td><td align="center">baidu.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">今日头条</td><td align="center">toutiao.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">小米</td><td align="center">mi.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">拼多多</td><td align="center">pinduoduo.com/</td><td align="center">H2+HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">美团</td><td align="center">meituan.com/</td><td align="center">HTTP1.1+H2(极少)</td><td align="center">TLS1.2</td></tr><tr><td align="center">网易企业邮</td><td align="center">qiye.163.com/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">126邮箱</td><td align="center">126.com/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">myssl</td><td align="center">myssl.com/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">openssl</td><td align="center">openssl.org/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">nginx开源版</td><td align="center">nginx.org/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr><tr><td align="center">华为</td><td align="center">huawei.com/cn/</td><td align="center">HTTP1.1</td><td align="center">TLS1.2</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用编译的方式升级openssl库和nginx用于支持HTTP2和TLSv1.3并且介绍了一些简单的提高nginx安全性的配置。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
    <category term="tls" scheme="https://tinychen.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark对IMAP抓包分析</title>
    <link href="https://tinychen.com/20200513-wireshark-analysis-imap/"/>
    <id>https://tinychen.com/20200513-wireshark-analysis-imap/</id>
    <published>2020-05-13T02:00:00.000Z</published>
    <updated>2020-05-13T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要使用Wireshark对邮件客户端使用IMAP协议接收邮件的过程进行抓包分析并使用telnet命令进行简单操作。</p><span id="more"></span><h1 id="1、IMAP简介"><a href="#1、IMAP简介" class="headerlink" title="1、IMAP简介"></a>1、IMAP简介</h1><p>IMAP和POP3两个协议基本上是目前支持和使用最广泛的邮件接收协议，IMAP和POP3相比有着许多优点，参考<a href="https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91%E4%BF%A1%E6%81%AF%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE">wiki</a>和后面的抓包结果进行分析，这里列出一些后面抓包的时候可以验证的优点：</p><ul><li><p><strong>支持连接和断开两种操作模式</strong></p><p>和POP3协议在接收完邮件之后就和服务器断开连接不同，IMAP协议可以一直和服务器保持连接从而使得接收新邮件的延迟大大降低。</p></li><li><p><strong>支持多个客户同时连接到一个邮箱</strong></p><p>POP3协议假定邮箱当前的连接是唯一的连接。相反，IMAP4协议允许多个用户同时访问邮箱同时提供一种机制让客户能够感知其他当前连接到这个邮箱的用户所做的操作。</p></li><li><p><strong>支持在服务器保留消息状态信息</strong></p><p>通过使用在IMAP4协议中定义的标志客户端可以跟踪消息状态，例如邮件是否被读取，回复，或者删除。这些标识存储在服务器，所以多个客户在不同时间访问一个邮箱可以感知其他用户所做的操作。</p></li><li><p><strong>支持在服务器上访问多个邮箱</strong></p><p>IMAP4客户端可以在服务器上创建，重命名，或删除邮箱（通常以文件夹形式显现给用户）。支持多个邮箱还允许服务器提供对于共享和公共文件夹的访问。</p></li><li><p><strong>支持访问消息中的<a href="https://zh.wikipedia.org/wiki/MIME">MIME</a>部分和部分获取。</strong></p><p>几乎所有的Internet邮件都是以MIME格式传输的。MIME允许消息包含一个树型结构，这个树型结构的叶子节点都是单一内容类型而非叶子节点都是多块类型的组合。IMAP4协议允许客户端获取任何独立的MIME部分和获取信息的一部分或者全部。这些机制使得用户无需下载附件就可以浏览消息内容或者在获取内容的同时浏览。</p></li></ul><h1 id="2、抓包分析"><a href="#2、抓包分析" class="headerlink" title="2、抓包分析"></a>2、抓包分析</h1><p>MUA中的设置如下，同样不使用加密协议方便分析数据。</p><p><img src="https://resource.tinychen.com/image-20200513153605340.png"></p><p>配置完成开始抓包之后发现邮箱大师有多线程并发收件的操作，这也算是利用了IMAP协议的能够允许多个客户端连接到同一个服务器的特点，但是显然不利于我们分析串行模式下单个连接收件的完整过程，不过也可以对比多个连接之间的差异。</p><p>由于建立IMAP通信连接必须要登录，所以我们只需要查看报文就可以知道一共并行发起了多少个连接，在这次的报文中一共发现了有三个LOGIN的请求报文，因此可以判断应该一共先后发起了三个连接，其中第三个连接是在第一个连接结束之后发起的，具体分析如下：</p><p>可以看到最开始几乎同时发起了两个IMAP连接：</p><p><img src="https://resource.tinychen.com/image-20200513175632166.png"></p><h2 id="2-1-第一个连接"><a href="#2-1-第一个连接" class="headerlink" title="2.1 第一个连接"></a>2.1 第一个连接</h2><p>我们先来对第一个连接进行分析：</p><p><img src="https://resource.tinychen.com/image-20200513154801579.png"></p><p>首先我们可以确定IMAP的传输层协议也是使用的TCP协议，同样这里略去TCP三握四挥的分析，直接看IMAP相关部分的报文：</p><p><img src="https://resource.tinychen.com/image-20200513154645248.png"></p><ul><li><p>客户端与IMAP服务器在TCP三次握手之后建立连接</p></li><li><p>IMAP服务器返回OK信息，并说明自身邮件系统的类型为coremail</p></li><li><p>客户端发送CAPABILITY命令查询可用的命令，这个和POP3中的CAPA命令功能相同</p></li><li><p>IMAP服务器返回可以执行的命令</p></li><li><p>客户端发送ID命令，附带了MUA和OS的相关信息</p></li><li><p>IMAP服务器返回ID字符串，同样附带了邮件服务器的相关信息</p></li><li><p>客户端发送LOGIN命令进行登录，双引号内的为邮箱账号，后面加一个空格然后紧跟着的是密码</p></li><li><p>IMAP服务器返回OK指令提示登录成功</p></li><li><p>客户端发送LIST命令查询该账号内的邮件信息，但是可能命令的格式不对，并没有查询到任何有用的信息</p></li><li><p>IMAP服务器返回查询结果为空：</p><p>如果把查询命令换为<code>LIST &quot;&quot; &quot;*&quot;</code>则可以查询到该账号的所有邮箱文件夹：</p></li></ul><p><img src="https://resource.tinychen.com/image-20200514104230070.png"></p><ul><li><p>客户端发送NOOP指令，与之前的POP3协议类似，NOOP指令的作用应该是用于保持连接，默认相当于无操作，但是在此次连接还没使用过SELECT命令并且是第一次发送NOOP指令的时候，IMAP服务器会返回该账号下所有目录的邮件总数</p></li><li><p>IMAP服务器返回OK指令并且返回了邮件总数、</p></li><li><p>客户端使用SELECT指令，并且选中了INBOX文件夹（一般对应收件箱），相当于在数据库中选中了一个数据表</p></li><li><p>然后连接就莫名没了</p></li></ul><h2 id="2-2-第二个连接"><a href="#2-2-第二个连接" class="headerlink" title="2.2 第二个连接"></a>2.2 第二个连接</h2><p>第二次连接的数据包较长，我们截取部分客户端发送的请求：</p><p><img src="https://resource.tinychen.com/image-20200515173802081.png"></p><p>对比第一次连接，主要有以下不同点：</p><ul><li>使用了<code>XLIST &quot;&quot; &quot;*&quot;</code>查询到了邮件账号下的所有文件夹（收件箱、发件箱、草稿箱、垃圾箱、垃圾邮件等）</li><li>依次使用<code>SELECT</code>命令和<code>UID SEARCH UID </code>命令来对每个文件夹进行操作，进而获取到该账号对应的文件夹下的<strong>所有邮件的总数和对应的UID</strong></li></ul><h2 id="2-3-第三个连接"><a href="#2-3-第三个连接" class="headerlink" title="2.3 第三个连接"></a>2.3 第三个连接</h2><p>从wireshark上对数据包标记的序号来看，第三个连接是在第一个连接结束之后才发起的。对应的客户端主要操作如下：</p><p><img src="https://resource.tinychen.com/image-20200515174121534.png"></p><p>上面的内容重复操作较多，主要就是对每个文件夹都进行SELECT，然后获取里面的邮件具体内容，主要的核心操作有以下两个</p><ul><li><code>UID FETCH 1557156839:1557156846 (UID FLAGS RFC822.SIZE BODYSTRUCTURE INTERNALDATE BODY.PEEK[HEADER.FIELDS (Date Subject From Sender Reply-To To Cc Bcc Message-ID References In-Reply-To X-MailMaster-ShowOneRcpt X-CUSTOM-MAIL-MASTER-SENT-ID Disposition-Notification-To X-CM-CTRLMSGS)])</code></li><li><code>UID FETCH 1557156844 BODY.PEEK[1]</code></li></ul><p>上面两个请求命令中的<code>1557156844</code>就是在第一个连接中使用UID SEARCH命令查询到的邮件的UID，这里使用了<code>UID FETCH</code>命令来获取邮件的对应内容。由于前面我们提到邮件的格式是符合MIME标准的，而IMAP协议又是允许MUA下载符合MIME标准的部分邮件内容，因此这两条UID命令就是<strong>用于获取对应的邮件的特定部分的内容</strong>。</p><h2 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h2><p>在换了另一个测试账号进行同样的抓包操作之后我发现两次的数据请求操作几乎是一模一样的，都是有三个连接，操作也和上面相同。由此可以分析IMAP协议的可操作性要比POP3强很多，因此在具体的功能实现上对于不同的MUA而言也有不同。</p><h1 id="3、telnet操作"><a href="#3、telnet操作" class="headerlink" title="3、telnet操作"></a>3、telnet操作</h1><p>同样的我们也可以telnet到邮件服务器的143端口来进行命令操作：</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">[root@www coremail]<span class="hljs-meta"># telnet localhost 143</span><br>Trying <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>...<br>Connected <span class="hljs-keyword">to</span> localhost.<br>Escape character is <span class="hljs-string">&#x27;^]&#x27;</span>.<br>* OK Coremail System IMap Server Ready(<span class="hljs-number">126</span>com[c92b4e18679ada4069d0bde6e2528ad1])<br>C1 LOGIN <span class="hljs-string">&quot;test02@coremail.cn&quot;</span> password<br>C1 OK LOGIN completed<br>C2 <span class="hljs-built_in">LIST</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;&quot;</span><br>* <span class="hljs-built_in">LIST</span> (\Noselect) <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;&quot;</span><br>C2 OK <span class="hljs-built_in">LIST</span> Completed<br>C3 <span class="hljs-built_in">LIST</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;*&quot;</span><br>* <span class="hljs-built_in">LIST</span> () <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;INBOX&quot;</span><br>* <span class="hljs-built_in">LIST</span> (\Drafts) <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;Drafts&quot;</span><br>* <span class="hljs-built_in">LIST</span> (\Sent) <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;Sent Items&quot;</span><br>* <span class="hljs-built_in">LIST</span> (\Trash) <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;Trash&quot;</span><br>* <span class="hljs-built_in">LIST</span> (\Junk) <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;Junk E-mail&quot;</span><br>* <span class="hljs-built_in">LIST</span> () <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;Virus Items&quot;</span><br>C3 OK <span class="hljs-built_in">LIST</span> Completed<br>C4 <span class="hljs-built_in">SELECT</span> INBOX<br>* <span class="hljs-number">8</span> EXISTS<br>* <span class="hljs-number">0</span> RECENT<br>* OK [UIDVALIDITY <span class="hljs-number">1</span>] UIDs valid<br>* FLAGS (\Answered \Seen \Deleted \Draft \Flagged)<br>* OK [PERMANENTFLAGS (\Answered \Seen \Deleted \Draft \Flagged)] Limited<br>C4 OK [READ-WRITE] <span class="hljs-built_in">SELECT</span> completed<br>C5 UID SEARCH <span class="hljs-number">1</span>:*<br>* SEARCH <span class="hljs-number">1557156839</span> <span class="hljs-number">1557156840</span> <span class="hljs-number">1557156841</span> <span class="hljs-number">1557156842</span> <span class="hljs-number">1557156843</span> <span class="hljs-number">1557156844</span> <span class="hljs-number">1557156845</span> <span class="hljs-number">1557156846</span><br>C5 OK SEARCH completed<br>C6 UID FETCH <span class="hljs-number">1557156839</span><br>C6 BAD Parse command error<br>C7 UID FETCH <span class="hljs-number">1557156839</span> FULL<br>* <span class="hljs-number">1</span> FETCH (UID <span class="hljs-number">1557156839</span> INTERNALDATE <span class="hljs-string">&quot; 6-May-2019 23:33:59 +0800&quot;</span> FLAGS (\Seen) ENVELOPE (<span class="hljs-string">&quot;Mon, 6 May 2019 23:33:59 +0800 (GMT+08:00)&quot;</span> <span class="hljs-string">&quot;=?UTF-8?B?5qyi6L+O5L2/55SoQ29yZW1haWznlLXlrZDpgq7ku7bns7vnu58vV2VsY29tZSB0byB0aGUgQ29yZW1haWwgZS1tYWlsIHN5c3RlbQ==?=&quot;</span> ((<span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;postmaster&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;postmaster&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;postmaster&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test02&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;&lt;1106604853.1.1557156839490@www.example.com&gt;&quot;</span>) BODY ((<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-string">&quot;html&quot;</span> (<span class="hljs-string">&quot;charset&quot;</span> <span class="hljs-string">&quot;UTF-8&quot;</span>) <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;quoted-printable&quot;</span> <span class="hljs-number">7274</span> <span class="hljs-number">152</span>) <span class="hljs-string">&quot;related&quot;</span>) RFC822.<span class="hljs-built_in">SIZE</span> <span class="hljs-number">7959</span>)<br>C7 OK Fetch completed<br>C8 UID FETCH <span class="hljs-number">1557156846</span> FULL<br>* <span class="hljs-number">8</span> FETCH (UID <span class="hljs-number">1557156846</span> INTERNALDATE <span class="hljs-string">&quot; 8-May-2019 09:43:11 +0800&quot;</span> FLAGS (\Seen) ENVELOPE (<span class="hljs-string">&quot;Wed, 8 May 2019 09:43:11 +0800 (CST)&quot;</span> <span class="hljs-string">&quot;=?UTF-8?B?dGVsbmV0IHRlc3QgbWFpbCBBdXRoZW50aWNhdGVk?=&quot;</span> ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMiI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test02&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;&lt;5CD2342F.000006.02460@coremail.cn&gt;&quot;</span>) BODY (<span class="hljs-string">&quot;TEXT&quot;</span> <span class="hljs-string">&quot;PLAIN&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;7BIT&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>) RFC822.<span class="hljs-built_in">SIZE</span> <span class="hljs-number">656</span>)<br>C8 OK Fetch completed<br>C9 UID FETCH <span class="hljs-number">1557156844</span> FULL<br>* <span class="hljs-number">6</span> FETCH (UID <span class="hljs-number">1557156844</span> INTERNALDATE <span class="hljs-string">&quot; 8-May-2019 16:59:38 +0800&quot;</span> FLAGS (\Seen) ENVELOPE (<span class="hljs-string">&quot;Wed, 8 May 2019 16:59:38 +0800 (CST)&quot;</span> <span class="hljs-string">&quot;=?UTF-8?B?dGVsbmV0IHRlc3QgbWFpbA==?=&quot;</span> ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMSI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test01&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) ((<span class="hljs-string">&quot;=?UTF-8?B?InRlc3QwMiI=?=&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;test02&quot;</span> <span class="hljs-string">&quot;coremail.cn&quot;</span>)) <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;&lt;5CD29A7A.000004.02460@coremail.cn&gt;&quot;</span>) BODY (<span class="hljs-string">&quot;TEXT&quot;</span> <span class="hljs-string">&quot;PLAIN&quot;</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-literal">NIL</span> <span class="hljs-string">&quot;7BIT&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>) RFC822.<span class="hljs-built_in">SIZE</span> <span class="hljs-number">642</span>)<br>C9 OK Fetch completed<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要使用Wireshark对邮件客户端使用IMAP协议接收邮件的过程进行抓包分析并使用telnet命令进行简单操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="wireshark" scheme="https://tinychen.com/tags/wireshark/"/>
    
    <category term="mail" scheme="https://tinychen.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal + WSL2 + CENTOS 配置Windows命令终端</title>
    <link href="https://tinychen.com/20200512-windows-terminal-wsl2-centos-installation/"/>
    <id>https://tinychen.com/20200512-windows-terminal-wsl2-centos-installation/</id>
    <published>2020-05-12T02:00:00.000Z</published>
    <updated>2020-05-12T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要用于记录在Windows上使用WSL2和centos系统打造一个免费高效的shell终端的配置过程以及界面优化过程。</p><span id="more"></span><h1 id="1、选型分析"><a href="#1、选型分析" class="headerlink" title="1、选型分析"></a>1、选型分析</h1><p>之前一直都是使用termius和windows来进行ssh管理，但是最近termius要过期了（没钱续费），不用盗版（版权意识），ssh的Agent Forwarding功能是个人刚需且为termius的付费版才有的功能，所以开始研究windows上免费的ssh客户端管理工具或者是方式。</p><p>（mac系统用户可以跳过这篇文章）首先考虑到了mac，因为mac系统是类unix系统，在命令行终端操作上要比windows好太多，但是没钱买mac，所以pass</p><p>然后如果直接使用linux系统的话虽然shell的问题很容易解决，但是其他的办公软件无法使用或者很难用；如果用虚拟机跑linux，启动麻烦，耗费性能，文件管理也十分麻烦；所以pass</p><p>还有就是各种windows上的各种免费第三方工具，如powershell、GitBash、cmder等等，能实现一定的Linux命令和shell功能，但是相比原生linux还是功能残缺。</p><p><strong>但是如果只要管理各种ssh客户端的话很多免费工具已经足够优秀了，</strong>而笔者本次除了管理ssh之外还想要实现一定的shell功能，因此最后锁定Windows10上面的2004版本的wsl2工具，用它来运行一个linux系统，虽然是残缺的Linux，但是在shell功能和ssh功能上和直接运行Linux并无差异。唯一需要注意的就是windows的版本要比较新。</p><p><img src="https://resource.tinychen.com/image-20200512173616462.png"></p><blockquote><p>WSL 2 is only available in Windows 10 builds 18917 or higher</p></blockquote><h1 id="2、安装wsl"><a href="#2、安装wsl" class="headerlink" title="2、安装wsl"></a>2、安装wsl</h1><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">windows官网的安装教程</a>比较详细，并且wsl的安装启用比较简单，我们可以直接使用管理员模式的powershell通过命令行来启用：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart<br>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart<br></code></pre></div></td></tr></table></figure><p>命令顺利执行完后需要重启，这时候输入<code>wsl --help</code>就可以看到wsl已经安装成功。</p><h1 id="3、安装centos"><a href="#3、安装centos" class="headerlink" title="3、安装centos"></a>3、安装centos</h1><p>Windows的应用商店中有一些不错的linux发行版，包括很多同学都很喜欢的ubuntu，但是个人比较熟悉使用centos，而应用商店中的centos是要收费的，不过好在github上面有CENTOS官方开源的安装包，我们这里使用github上的安装包进行安装。</p><p>如果使用应用商店中的发行版直接点击安装即可。随后便可以跳过下面的centos的安装部分。</p><p>首先我们去<a href="https://github.com/CentOS/sig-cloud-instance-images/">centos的GitHub页面</a>下载对应的安装包：</p><p><img src="https://resource.tinychen.com/image-20200512165547180.png"></p><p>注意这里要切换分支进行下载，以<code>centos7-x86.64</code>为例，这里对应的就是最新的<code>centos7.8</code>系统，我们只需要下载对应的<code>tar.xz</code>压缩包即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://github.com/CentOS/sig-cloud-instance-images/blob/CentOS-7-x86_64/docker/centos-7-x86_64-docker.tar.xz<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image-20200512165727475.png"></p><p>接着我们以管理员身份打开一个powershell窗口：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装 Chocolatey</span><br>Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))<br><span class="hljs-meta">#</span><span class="bash"> 安装 LxRunOffline</span><br>choco install lxrunoffline<br></code></pre></div></td></tr></table></figure><p>注意这里安装完成之后需要重启powershell来进行下一步的安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">LxRunOffline install -n 自定义系统名称 -d 安装目录路径 -f tar.xz安装包路径<br><span class="hljs-meta">#</span><span class="bash"> 注意windows系统命令行中的文件路径和linux系统差别很大</span><br><span class="hljs-meta">#</span><span class="bash"> 比如我这里的安装命令就是</span><br>LxRunOffline.exe install -n centos -d D:/centos -f .\centos-7-x86_64-docker.tar.xz<br><span class="hljs-meta">#</span><span class="bash"> 将centos安装到D盘的centos文件夹下，并且命名为centos</span><br></code></pre></div></td></tr></table></figure><p>接下来就可以使用下述两种方式尝试启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">LxRunOffline run -n 自定义系统名称<br>wsl -d 自定义系统名称<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image-20200512165903786.png"></p><h1 id="4、升级centos为wsl2"><a href="#4、升级centos为wsl2" class="headerlink" title="4、升级centos为wsl2"></a>4、升级centos为wsl2</h1><p><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install">windows官网教程</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出已经安装的wsl的信息</span><br>wsl -l -v<br><span class="hljs-meta">#</span><span class="bash"> 将对应的wsl设为wsl2，注意&lt;Distro&gt;要和上面查询到的信息一致</span><br>wsl --set-version &lt;Distro&gt; 2<br><span class="hljs-meta">#</span><span class="bash"> 设置默认使用的发行版</span><br>wsl -s &lt;Distro&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image-20200512163823071.png"></p><h1 id="5、配置windows-terminal"><a href="#5、配置windows-terminal" class="headerlink" title="5、配置windows terminal"></a>5、配置windows terminal</h1><p>使用windows的cmd或者powershell都可以直接输入wsl命令进入到wsl系统中进行操作，但是由于这两者的界面比较丑，因此我们这里使用可以定制更多参数的windows terminal来进行替换。</p><p>不过windows terminal目前来说属于比较轻量级的产品，如果需要更多的功能可以考虑一下其他的软件，这里额外推荐一个免费的全平台终端<code>terminus</code>，<strong>注意比收费的termius要多一个字母n</strong>，也是<a href="https://github.com/Eugeny/terminus">github</a>上面的一个开源项目，免费高效且内置多种主题和少量还可以的插件。</p><h2 id="5-1-安装windows-terminal"><a href="#5-1-安装windows-terminal" class="headerlink" title="5.1 安装windows terminal"></a>5.1 安装windows terminal</h2><p>windows terminal直接使用win10自带的应用商店即可搜索下载安装。</p><h2 id="5-2-安装powerline-fonts"><a href="#5-2-安装powerline-fonts" class="headerlink" title="5.2 安装powerline/fonts"></a>5.2 安装powerline/fonts</h2><p>powerline/fonts是<a href="https://github.com/powerline/fonts">github</a>上面的一个项目，涵盖了较多的字体，windows本身内置的字体可能在shell中显示不太美观，所以这里我们需要在windows系统中和wsl中都安装字体。</p><p>首先在wsl中使用git拉取项目并且安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/powerline/fonts.git --depth=1<br>cd fonts<br>./install.sh<br></code></pre></div></td></tr></table></figure><p>在Windows中也需要安装该字体，以UbuntuMono为例，同样是下载之后进入到对应的文件夹中手动安装所有的ttf字体即可：</p><p><img src="https://resource.tinychen.com/image-20200512170313104.png"></p><p>（注意尽量以管理员身份为本机所有用户安装）</p><p><img src="https://resource.tinychen.com/image-20200512170408786.png"></p><h2 id="5-3-配置iTerm2-Color-Schemes"><a href="#5-3-配置iTerm2-Color-Schemes" class="headerlink" title="5.3 配置iTerm2-Color-Schemes"></a>5.3 配置iTerm2-Color-Schemes</h2><p>主题的效果我们可以在<a href="https://iterm2colorschemes.com/">官网</a>进行预览，配置参数我们可以在对应的<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">GitHub</a>中找到。需要注意的是要找到对应的<code>windows terminal</code>目录中的配置。</p><h2 id="5-4-配置setting-json"><a href="#5-4-配置setting-json" class="headerlink" title="5.4 配置setting.json"></a>5.4 配置setting.json</h2><p>setting.json的参数非常多，我们可以根据自己的习惯设定显示界面和快捷键等操作，并且还可以添加背景图片，自定义不同shell的图标icon和主题等用以区分不同的shell避免误操作。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span><br><span class="hljs-comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,<br><br>    <span class="hljs-attr">&quot;defaultProfile&quot;</span>: <span class="hljs-string">&quot;&#123;aabae64a-7cf7-5add-b5d6-744e54ab56d6&#125;&quot;</span>, <span class="hljs-comment">//设定默认启动使用的shell。这里使用后面对应的guid</span><br>    <span class="hljs-attr">&quot;initialRows&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-comment">//初始化窗口的行数</span><br>    <span class="hljs-attr">&quot;initialCols&quot;</span>: <span class="hljs-number">150</span>,<span class="hljs-comment">//初始化窗口的列数</span><br>    <span class="hljs-attr">&quot;alwaysShowTabs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;showTerminalTitleInTitlebar&quot;</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">&quot;profiles&quot;</span>:<br>    &#123;<br>        <span class="hljs-attr">&quot;defaults&quot;</span>:<br>        &#123;<br>            <span class="hljs-comment">// Put settings here that you want to apply to all profiles           </span><br>        &#125;,<br>        <span class="hljs-attr">&quot;list&quot;</span>:<br>        [<br>            &#123;<br>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;07b52e3e-de2c-5db4-bd2d-ba144ed6c273&#125;&quot;</span>,<br>                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ubuntu-20.04&quot;</span>,<br>                <span class="hljs-attr">&quot;source&quot;</span>: <span class="hljs-string">&quot;Windows.Terminal.Wsl&quot;</span>,<br>                <span class="hljs-attr">&quot;fontFace&quot;</span>: <span class="hljs-string">&quot;Fira Mono for Powerline&quot;</span>,<br>                <span class="hljs-attr">&quot;fontSize&quot;</span>: <span class="hljs-number">12</span>,<br>                <span class="hljs-attr">&quot;colorScheme&quot;</span>: <span class="hljs-string">&quot;Ubuntu&quot;</span>,  <span class="hljs-comment">//这里的color要和后面的schemes中的一致</span><br>                <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 是否启用窗口透明度，效果类似毛玻璃特效</span><br>                <span class="hljs-attr">&quot;acrylicOpacity&quot;</span> : <span class="hljs-number">0.6</span> <span class="hljs-comment">// 窗口透明度</span><br>            &#125;<br>            &#123;<br>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;aabae64a-7cf7-5add-b5d6-744e54ab56d6&#125;&quot;</span>,<br>                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;centos&quot;</span>,<br>                <span class="hljs-attr">&quot;source&quot;</span>: <span class="hljs-string">&quot;Windows.Terminal.Wsl&quot;</span>,<br>                <span class="hljs-attr">&quot;fontFace&quot;</span>: <span class="hljs-string">&quot;Fira Mono for Powerline&quot;</span>,<br>                <span class="hljs-attr">&quot;fontSize&quot;</span>: <span class="hljs-number">12</span>,<br>                <span class="hljs-attr">&quot;colorScheme&quot;</span>: <span class="hljs-string">&quot;Atom&quot;</span>,<br>                <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">true</span>,    <span class="hljs-comment">// 窗口透明度</span><br>                <span class="hljs-attr">&quot;acrylicOpacity&quot;</span> : <span class="hljs-number">0.8</span> <span class="hljs-comment">// 窗口透明度</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-comment">// Make changes here to the cmd.exe profile</span><br>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;cmd&quot;</span>,<br>                <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;cmd.exe&quot;</span>,<br>                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;fontSize&quot;</span>: <span class="hljs-number">12</span>,<br>                <span class="hljs-attr">&quot;colorScheme&quot;</span>: <span class="hljs-string">&quot;MaterialDark&quot;</span>,<br>                <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 窗口透明度</span><br>                <span class="hljs-attr">&quot;acrylicOpacity&quot;</span> : <span class="hljs-number">0.5</span> <span class="hljs-comment">// 窗口透明度</span><br>            &#125;<br>        ]<br>    &#125;,<br><br>    <span class="hljs-comment">// Add custom color schemes to this array</span><br>    <span class="hljs-attr">&quot;schemes&quot;</span>: [<br>        &#123;          <br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Atom&quot;</span>,<br>            <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>            <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#fd5ff1&quot;</span>,<br>            <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#87c38a&quot;</span>,<br>            <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#ffd7b1&quot;</span>,<br>            <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#85befd&quot;</span>,<br>            <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#b9b6fc&quot;</span>,<br>            <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#85befd&quot;</span>,<br>            <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#e0e0e0&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>            <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#fd5ff1&quot;</span>,<br>            <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#94fa36&quot;</span>,<br>            <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#f5ffa8&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#96cbfe&quot;</span>,<br>            <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#b9b6fc&quot;</span>,<br>            <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#85befd&quot;</span>,<br>            <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#e0e0e0&quot;</span>,<br>            <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#161719&quot;</span>,<br>            <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#c5c8c6&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-attr">&quot;keybindings&quot;</span>: [<span class="hljs-comment">//这里可以设置快捷键</span><br>        &#123;<br>            <span class="hljs-attr">&quot;command&quot;</span> : <span class="hljs-string">&quot;copy&quot;</span>,<br>            <span class="hljs-attr">&quot;keys&quot;</span> : <br>            [<br>                <span class="hljs-string">&quot;ctrl+c&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;command&quot;</span> : <span class="hljs-string">&quot;paste&quot;</span>,<br>            <span class="hljs-attr">&quot;keys&quot;</span> : <br>            [<br>                <span class="hljs-string">&quot;ctrl+v&quot;</span><br>            ]<br>        &#125;<br>    ]<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h2 id="5-5-ssh-config"><a href="#5-5-ssh-config" class="headerlink" title="5.5 ssh_config"></a>5.5 ssh_config</h2><p>最后我们再搭配ssh自带的ssh_config来添加各种自定义ssh参数，如果需要在这上面开启ssh的Agent Forwarding功能，个人习惯是单独创建一个脚本并且在bash中设置alias快捷操作。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 脚本内容示例</span><br><span class="hljs-meta">#</span><span class="bash"> 开启ssh Agent Forwarding</span><br>eval `ssh-agent`<br><span class="hljs-meta">#</span><span class="bash"> 将要使用的ssh key添加到ssh-add中</span><br><span class="hljs-meta">#</span><span class="bash"> 如果后面不指明文件则使用默认的~/.ssh/id_rsa</span><br><span class="hljs-meta">#</span><span class="bash"> 也可以一次添加多个</span><br>ssh-add ~/.ssh/id_rsa<br>ssh user@host<br></code></pre></div></td></tr></table></figure><p>然后在bashrc文件中添加alias即可快速操作，对应的ssh_config参数可以使用man ssh_config命令来查看。</p><p>这里贴出几个常用的参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Host example.host.com<br><span class="hljs-meta">#</span><span class="bash"> ssh远程客户端的别名，可以直接通过ssh example.host.com来进行连接</span><br>    HostName 192.168.1.1<br><span class="hljs-meta">#</span><span class="bash"> ssh远程客户端的ip地址</span><br>    User root<br><span class="hljs-meta">#</span><span class="bash"> ssh远程的用户</span><br>    Port 22<br><span class="hljs-meta">#</span><span class="bash"> ssh的端口</span><br>    IdentityFile ~/.ssh/id_rsa<br><span class="hljs-meta">#</span><span class="bash"> ssh的认证密钥</span><br>    ForwardAgent yes<br><span class="hljs-meta">#</span><span class="bash"> 是否开启Agent Forwarding，默认不开启</span><br>    AddKeysToAgent yes<br><span class="hljs-meta">#</span><span class="bash"> 是否自动将 key 加入到 ssh-agent，值可以为 no(default)/confirm/ask/yes</span><br><span class="hljs-meta">#</span><span class="bash"> 如果是 yes，key 和密码都将读取文件并以加入到 agent ，就像 ssh-add。其他分别是询问、确认、不加入的意思。添加到 ssh-agent 意味着将私钥和密码交给它管理，让它来进行身份认证。</span>    <br></code></pre></div></td></tr></table></figure><h1 id="6、效果展示"><a href="#6、效果展示" class="headerlink" title="6、效果展示"></a>6、效果展示</h1><p>wsl2使用的应该是windows定制的内核（目前我的系统内核是<code>4.19.84-microsoft-standard</code>），同时无法使用systemd工具，但是作为terminal来使用已经是绰绰有余了，命令的丰富程度也要远胜于powershell、gitbash和其他的第三方命令行，安装一些常用命令的方便程度也要远胜于cygwin等。windows系统的硬盘也会直接挂载在wsl中的<code>/mnt</code>目录下，可以直接使用Linux的sed、awk、paste等命令来对windows下的文本进行操作。</p><p><img src="https://resource.tinychen.com/image-20200512154515195.png"></p><blockquote><p>注意在默认情况下会把系统本身的硬盘也挂载到<code>/mnt</code>目录下，注意不要误操作rm命令</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要用于记录在Windows上使用WSL2和centos系统打造一个免费高效的shell终端的配置过程以及界面优化过程。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
    <category term="linux" scheme="https://tinychen.com/tags/linux/"/>
    
    <category term="wsl" scheme="https://tinychen.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark对pop3抓包分析</title>
    <link href="https://tinychen.com/20200511-wireshark-analysis-pop3/"/>
    <id>https://tinychen.com/20200511-wireshark-analysis-pop3/</id>
    <published>2020-05-11T02:00:00.000Z</published>
    <updated>2020-05-11T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要使用Wireshark对邮件客户端使用POP3协议收取邮件的过程进行抓包分析并使用telnet命令进行简单操作。</p><span id="more"></span><h1 id="1、POP3简介"><a href="#1、POP3简介" class="headerlink" title="1、POP3简介"></a>1、POP3简介</h1><p><strong>邮局协议</strong>（英语：<strong>P</strong>ost <strong>O</strong>ffice <strong>P</strong>rotocol，缩写：<strong>POP</strong>）属于TCP/IP协议族中的一员，由<em>RFC 1939</em>定义。<strong>此协议主要用于支持使用客户端远程管理在服务器上的电子邮件。</strong>最新版本为POP3，全名“<strong>Post Office Protocol - Version 3</strong>”，而提供了SSL加密的POP3协议被称为<strong>POP3S</strong>。</p><p>POP支持离线邮件处理。其具体过程是：发件人将邮件发送到服务器上，收件人客户端使用MUA以连接服务器，并下载所有未阅读的电子邮件。这种离线访问模式是一种存储转发服务，将邮件从邮件服务器端送到个人客户端上，可以是PC或者手机等多种设备。旧版的POP3协议在邮件被下载后，会删除掉邮件服务器上的邮件。改进的POP3协议可以在配置中选择可以“只下载邮件，服务器端并不删除”，也是目前POP3的主流操作方式。</p><h1 id="2、抓包环境"><a href="#2、抓包环境" class="headerlink" title="2、抓包环境"></a>2、抓包环境</h1><p>抓包工具还是使用的wireshark，测试的协议是POP3，默认端口110，同样地为了方便分析数据没有使用TLS/SSL加密，但是结果都问题不大。</p><p>测试的账号登录之后自动同步了收件箱中已有的5封邮件，然后我又给测试账号发了一封邮件，因此抓包的时候MUA客户端上应该是只有本地已缓存的5封已读邮件和服务器端尚未下载的1封未读邮件，这样比较符合实际的情况。</p><p>开启wireshark监听对应的网卡，设定Filter为邮件服务器的IP并且设定协议为pop基本就能抓取到需要的数据包，然后我们再Follow这条POP数据流对应的TCP stream就可以看到下面的完整信息。</p><p><img src="https://resource.tinychen.com/image-20200511131942318.png"></p><p>毫无意外地可以看到TCP的三握四挥，这里不作赘述。</p><h1 id="3、POP3数据包分析"><a href="#3、POP3数据包分析" class="headerlink" title="3、POP3数据包分析"></a>3、POP3数据包分析</h1><p>首先我们可以看到在客户端和服务端TCP三次握手建立连接后，服务端发送报文给客户端告知顺利和POP3服务器建立连接：</p><p><img src="https://resource.tinychen.com/image-20200512175133929.png"></p><p>接下来客户端发送了一个CAPA命令：</p><p><img src="https://resource.tinychen.com/image-20200512175211845.png"></p><p><a href="https://zh.wikipedia.org/wiki/%E9%83%B5%E5%B1%80%E5%8D%94%E5%AE%9A">wiki</a>里面有列出常用的POP3命令，但是却并没有CAPA这条命令，顺着下面的参考文档查了一下，在RFC的文档<a href="https://tools.ietf.org/rfc/rfc2449.txt">RFC2449</a>中找到了比较详细的定义：</p><blockquote><p>Section 3 describes the CAPA response using [ABNF].  When a<br>   capability response describes an optional command, the <capa-tag><br>   SHOULD be identical to the command keyword.  CAPA response tags are<br>   case-insensitive.</p><p>​        CAPA</p><p>​        Arguments:<br>​            none</p><p>​        Restrictions:<br>​            none</p><p>​        Discussion:<br>​            An -ERR response indicates the capability command is not<br>​            implemented and the client will have to probe for<br>​            capabilities as before.</p><p>​            An +OK response is followed by a list of capabilities, one<br>​            per line.  Each capability name MAY be followed by a single<br>​            space and a space-separated list of parameters.  Each<br>​            capability line is limited to 512 octets (including the<br>​            CRLF).  The capability list is terminated by a line<br>​            containing a termination octet (“.”) and a CRLF pair.</p><p>​         Possible Responses:<br>​             +OK -ERR</p></blockquote><p>也就是说客户端发送CAPA命令主要是用于获取POP3服务端可以执行的命令，然后POP3服务器果然就返回了对应的<code>+OK response</code>和<code>Capability list follows</code></p><p><img src="https://resource.tinychen.com/image-20200512175514439.png"></p><p>接下来客户端开始传输账号密码用于登录，可以看到在登录成功之后，POP3服务端返回了消息提示有6封邮件（6 messages）和邮件的总大小（25568 bytes），然后客户端发送UTF8命令指定编码方式，收到服务端返回的确认消息后再发送STAT命令来请求服务器发回关于邮箱的统计资料（此处为邮件总数和总字节数）。</p><p><img src="https://resource.tinychen.com/image-20200512175824004.png"></p><p>紧接着客户端继续发送UIDL命令，POP3服务器端返回邮件的唯一标识符，<strong>POP3会话的每个标识符都将是唯一的，并且是全局始终唯一</strong>。即同一封邮件在每次通信的时候的标识符都是不变的，这样就有利于MUA将本地存储的邮件和服务器端的邮件进行对比从而知道哪些邮件还没有被下载到本地。    </p><p>获取邮件标识符后，客户端会发送LIST命令查询邮件数量和每个邮件的大小，这里我们可以看到邮件的总数量和总大小是和上面的STAT命令查询的一致的。</p><p><img src="https://resource.tinychen.com/image-20200512180145244.png"></p><p>前面我们说过在抓包之前MUA中是存着5封邮件并且第6封邮件是未读的，因此这时客户端就会发送RETR请求获取第6封邮件的信息：</p><p><img src="https://resource.tinychen.com/image-20200513095810521.png"></p><p>服务器首先返回一条信息表示OK，并且说明这封邮件的大小是1199个字节，然后开始传输整封邮件的内容，整个邮件内容包含了标准的一些邮件信息（主题、正文、收发件人、时间等）和一些对应的邮件系统的专属信息。</p><p>最后邮件以<code>.</code>结束传输，客户端发送QUIT请求，服务端返回OK结束本次传输。</p><h1 id="4、telnet操作"><a href="#4、telnet操作" class="headerlink" title="4、telnet操作"></a>4、telnet操作</h1><p>和之前的SMTP一样，我们也可以使用telnet命令对服务器的110端口进行操作：</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">[root@www coremail]# telnet localhost <span class="hljs-number">110</span><br><span class="hljs-symbol">Trying</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>...<br><span class="hljs-symbol">Connected</span> to localhost.<br><span class="hljs-symbol">Escape</span> character is <span class="hljs-string">&#x27;^]&#x27;</span>.<br>+<span class="hljs-symbol">OK</span> <span class="hljs-symbol">Welcome</span> to coremail <span class="hljs-symbol">Mail</span> <span class="hljs-symbol">Pop3</span> <span class="hljs-symbol">Server</span> (<span class="hljs-number">126</span>coms[c92b4e18679ada4069d0bde6e2528ad1s])<br><span class="hljs-symbol">CAPA</span><br>+<span class="hljs-symbol">OK</span> <span class="hljs-symbol">Capability</span> list follows<br><span class="hljs-symbol">TOP</span><br><span class="hljs-symbol">USER</span><br><span class="hljs-symbol">PIPELINING</span><br><span class="hljs-symbol">UIDL</span><br><span class="hljs-symbol">LANG</span><br><span class="hljs-symbol">UTF8</span><br><span class="hljs-symbol">SASL</span> <span class="hljs-symbol">PLAIN</span><br><span class="hljs-symbol">STLS</span><br>.<br><span class="hljs-symbol">USER</span> test01@coremail.cn<br>+<span class="hljs-symbol">OK</span> core mail<br><span class="hljs-symbol">PASS</span> password<br>+<span class="hljs-symbol">OK</span> <span class="hljs-number">6</span> message(s) [<span class="hljs-number">25568</span> byte(s)]<br><span class="hljs-symbol">UTF8</span><br>+<span class="hljs-symbol">OK</span> <span class="hljs-symbol">UTF</span><span class="hljs-number">-8</span> <span class="hljs-symbol">OK</span><br><span class="hljs-symbol">STAT</span><br>+<span class="hljs-symbol">OK</span> <span class="hljs-number">6</span> <span class="hljs-number">25568</span><br><span class="hljs-symbol">UIDL</span><br>+<span class="hljs-symbol">OK</span> <span class="hljs-number">6</span> <span class="hljs-number">25568</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAAAsy<br><span class="hljs-number">2</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAACsw<br><span class="hljs-number">3</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAADsx<br><span class="hljs-number">4</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAAEs2<br><span class="hljs-number">5</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAAFs3<br><span class="hljs-number">6</span> <span class="hljs-number">1</span>tbiAQACE10Y3LsAAAAGs0<br>.<br><span class="hljs-symbol">LIST</span><br>+<span class="hljs-symbol">OK</span> <span class="hljs-number">6</span> <span class="hljs-number">25568</span><br><span class="hljs-number">1</span> <span class="hljs-number">7959</span><br><span class="hljs-number">2</span> <span class="hljs-number">1199</span><br><span class="hljs-number">3</span> <span class="hljs-number">6445</span><br><span class="hljs-number">4</span> <span class="hljs-number">6469</span><br><span class="hljs-number">5</span> <span class="hljs-number">2297</span><br><span class="hljs-number">6</span> <span class="hljs-number">1199</span><br>.<br></code></pre></div></td></tr></table></figure><p>到这里的操作是和之前一样的，实际上我们还可以使用RETR命令查看任意一封邮件的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">RETR</span> <span class="hljs-number">5</span><br><span class="hljs-string">+OK</span> <span class="hljs-number">2297 </span><span class="hljs-string">octets</span><br><span class="hljs-attr">Received:</span> <span class="hljs-string">from</span> <span class="hljs-string">TINYDESKTOP</span> <span class="hljs-string">(unknown</span> [<span class="hljs-number">10.228</span><span class="hljs-number">.12</span><span class="hljs-number">.149</span>]<span class="hljs-string">)</span><br>        <span class="hljs-string">by</span> <span class="hljs-string">www.example.com</span> <span class="hljs-string">(Coremail)</span> <span class="hljs-string">with</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">id</span> <span class="hljs-string">AQAAfwBXc7qLVrZeWAAAAA--.16S2;</span><br>        <span class="hljs-string">Sat,</span> <span class="hljs-number">09</span> <span class="hljs-string">May</span> <span class="hljs-number">2020 15:06:51</span> <span class="hljs-string">+0800</span> <span class="hljs-string">(CST)</span><br><span class="hljs-attr">From:</span> <span class="hljs-string">&quot;Microsoft Outlook&quot;</span> <span class="hljs-string">&lt;test01@coremail.cn&gt;</span><br><span class="hljs-attr">Sender:</span> <span class="hljs-string">test01@coremail.cn</span><br><span class="hljs-attr">To:</span> <span class="hljs-string">&lt;test01@coremail.cn&gt;</span><br><span class="hljs-attr">Subject:</span> <span class="hljs-string">=?utf-8?B?TWljcm9zb2Z0IE91dGxvb2sg5rWL6K+V5raI5oGv?=</span><br><span class="hljs-attr">MIME-Version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">multipart/alternative;</span><br>        <span class="hljs-string">boundary=&quot;----=_NextPart_000_0000_01D62613.778669A0&quot;</span><br><span class="hljs-string">X-CM-TRANSID:AQAAfwBXc7qLVrZeWAAAAA--.16S2</span><br><span class="hljs-string">Message-Id:&lt;5EB6568B.000001.04520@coremail.cn&gt;</span><br><span class="hljs-attr">X-Coremail-Antispam:</span> <span class="hljs-string">1UD129KBjDUn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73</span><br>        <span class="hljs-string">VFW2AGmfu7bjvjm3AaLaJ3UjIYCTnIWjp_UUUYK7AC8VAFwI0_Jr0_Gr1l1xkIjI8I6I8E</span><br>        <span class="hljs-string">6xAIw20EY4v20xvaj40_Wr0E3s1l1IIY67AEw4v_Jr0_Jr4l8cAvFVAK0II2c7xJM28Cjx</span><br>        <span class="hljs-string">kF64kEwVA0rcxSw2x7M28EF7xvwVC0I7IYx2IY67AKxVWUJVWUCwA2z4x0Y4vE2Ix0cI8I</span><br>        <span class="hljs-string">cVCY1x0267AKxVWUJVW8JwA2z4x0Y4vEx4A2jsIE14v26r1j6r4UM28EF7xvwVC2z280aV</span><br>        <span class="hljs-string">CY1x0267AKxVWUJVW8JwAac4AC62xK8xCEY4vEwIxC4wAS0I0E0xvYzxvE52x082IY62kv</span><br>        <span class="hljs-string">0487Mc02F40E4c8EcI0Er2xKeI8DMcIj6xIIjxv20xvE14v26r1j6r18McIj6I8E87Iv67</span><br>        <span class="hljs-string">AKxVWUJVW8JwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr41lF7I21c0EjII2zVCS</span><br>        <span class="hljs-string">5cI20VAGYxC7M4xvF2IEb7IF0Fy264kE64k0F24lw4CEF2IF47xS0VAv8wCF04k20xvY0x</span><br>        <span class="hljs-string">0EwIxGrwCF04k20xvE0xIIj40Ec7CjxwCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02</span><br>        <span class="hljs-string">F40E14v26r106r1rMI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jr0_Jr</span><br>        <span class="hljs-string">ylIxkGc2Ij64vIr41lIxAIcVC0I7IYx2IY67AKxVWUJVWUCwCI42IY6xIIjxv20xvEc7Cj</span><br>        <span class="hljs-string">xVAFwI0_Jr0_Gr1lIxAIcVCF04k26cxKx2IYs7xG6rW3Jr0E3s1lIxAIcVC2z280aVAFwI</span><br>        <span class="hljs-string">0_Jr0_Gr1lIxAIcVC2z280aVCY1x0267AKxVWUJVW8JbIYCTnIWIevJa73UjIFyTuYvjfU</span><br>        <span class="hljs-string">jiiSDUUUU</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Sat,</span> <span class="hljs-number">9</span> <span class="hljs-string">May</span> <span class="hljs-number">2020 15:06:51</span> <span class="hljs-string">+0800</span> <span class="hljs-string">(CST)</span><br><span class="hljs-attr">X-CM-SenderInfo:</span> <span class="hljs-string">hwhv3imr6f02phpdxzgofq/</span><br><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">multipart</span> <span class="hljs-string">message</span> <span class="hljs-string">in</span> <span class="hljs-string">MIME</span> <span class="hljs-string">format.</span><br><br><span class="hljs-string">------=_NextPart_000_0000_01D62613.778669A0</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/plain;</span><br>        <span class="hljs-string">charset=&quot;utf-8&quot;</span><br><span class="hljs-attr">Content-Transfer-Encoding:</span> <span class="hljs-string">base64</span><br><br><span class="hljs-string">6L+Z5piv5Zyo5rWL6K+V5L2g55qE5biQ5oi36K6+572u5pe2IE1pY3Jvc29mdCBPdXRsb29rIOiH</span><br><span class="hljs-string">quWKqOWPkemAgeeahOeUteWtkOmCruS7tuOAgg0K</span><br><br><span class="hljs-string">------=_NextPart_000_0000_01D62613.778669A0</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span><br>        <span class="hljs-string">charset=&quot;utf-8&quot;</span><br><span class="hljs-attr">Content-Transfer-Encoding:</span> <span class="hljs-string">base64</span><br><br><span class="hljs-string">PGh0bWw+PGJvZHk+PHA+6L+Z5piv5Zyo5rWL6K+V5L2g55qE5biQ5oi36K6+572u5pe2IE1pY3Jv</span><br><span class="hljs-string">c29mdCBPdXRsb29rIOiHquWKqOWPkemAgeeahOeUteWtkOmCruS7tuOAgg0KPC9wPjwvYm9keT48</span><br><span class="hljs-string">L2h0bWw+</span><br><br><span class="hljs-string">------=_NextPart_000_0000_01D62613.778669A0--</span><br><span class="hljs-string">.</span><br><span class="hljs-string">RETR</span> <span class="hljs-number">6</span><br><span class="hljs-string">+OK</span> <span class="hljs-number">1199 </span><span class="hljs-string">octets</span><br><span class="hljs-attr">Received:</span> <span class="hljs-string">by</span> <span class="hljs-string">ajax-webmail-www.example.com</span> <span class="hljs-string">(Coremail)</span> <span class="hljs-string">;</span> <span class="hljs-string">Sat,</span> <span class="hljs-number">9</span> <span class="hljs-string">May</span> <span class="hljs-number">2020</span><br> <span class="hljs-number">15</span><span class="hljs-string">:35:01</span> <span class="hljs-string">+0800</span> <span class="hljs-string">(GMT+08:00)</span><br><span class="hljs-attr">X-Originating-IP:</span> [<span class="hljs-number">10.228</span><span class="hljs-number">.12</span><span class="hljs-number">.149</span>]<br><span class="hljs-attr">Date:</span> <span class="hljs-string">Sat,</span> <span class="hljs-number">9</span> <span class="hljs-string">May</span> <span class="hljs-number">2020 15:35:01</span> <span class="hljs-string">+0800</span> <span class="hljs-string">(GMT+08:00)</span><br><span class="hljs-attr">X-CM-HeaderCharset:</span> <span class="hljs-string">UTF-8</span><br><span class="hljs-attr">From:</span> <span class="hljs-string">test02@coremail.cn</span><br><span class="hljs-attr">To:</span> <span class="hljs-string">test01@coremail.cn</span><br><span class="hljs-attr">Subject:</span> <span class="hljs-string">awesome</span> <span class="hljs-string">pop</span><br><span class="hljs-attr">X-Priority:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">X-Mailer:</span> <span class="hljs-string">Coremail</span> <span class="hljs-string">Webmail</span> <span class="hljs-string">Server</span> <span class="hljs-string">Version</span> <span class="hljs-string">XT5.0.8a</span> <span class="hljs-string">build</span> <span class="hljs-number">20190308</span><span class="hljs-string">(983496cf)</span><br> <span class="hljs-string">Copyright</span> <span class="hljs-string">(c)</span> <span class="hljs-number">2002</span><span class="hljs-number">-2020</span> <span class="hljs-string">www.mailtech.cn</span> <span class="hljs-string">126com</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">multipart/alternative;</span><br>        <span class="hljs-string">boundary=&quot;----=_Part_5_1271853342.1589009701828&quot;</span><br><span class="hljs-attr">MIME-Version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">Message-ID:</span> <span class="hljs-string">&lt;4d02717c.1.171f85bdbc6.Coremail.test02@coremail.cn&gt;</span><br><span class="hljs-attr">X-Coremail-Locale:</span> <span class="hljs-string">zh_CN</span><br><span class="hljs-string">X-CM-TRANSID:AQAAfwAXM7olXbZeXAAAAA--.0W</span><br><span class="hljs-attr">X-CM-SenderInfo:</span> <span class="hljs-string">hwhv3ims6f02phpdxzgofq/1tbiAQADCV0Y3LsAAwAIsi</span><br><span class="hljs-attr">X-Coremail-Antispam:</span> <span class="hljs-string">1Ur529EdanIXcx71UUUUU7IcSsGvfJ3GIAIbVAYFVCjjxCrMI</span><br>        <span class="hljs-string">AIbVAFxVCF77xC64kEw24lV2xY67C26IkvcIIF6IxKo4kEV4DvcSsGvfC2KfnxnUU==</span><br><br><span class="hljs-string">------=_Part_5_1271853342.1589009701828</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/plain;</span> <span class="hljs-string">charset=UTF-8</span><br><span class="hljs-attr">Content-Transfer-Encoding:</span> <span class="hljs-string">7bit</span><br><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">for</span> <span class="hljs-string">pop</span> <span class="hljs-string">test!</span><br><span class="hljs-string">------=_Part_5_1271853342.1589009701828</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=UTF-8</span><br><span class="hljs-attr">Content-Transfer-Encoding:</span> <span class="hljs-string">7bit</span><br><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">for</span> <span class="hljs-string">pop</span> <span class="hljs-string">test!</span><br><span class="hljs-string">------=_Part_5_1271853342.1589009701828--</span><br><span class="hljs-string">.</span><br><span class="hljs-string">RETR</span> <span class="hljs-number">4</span><br><span class="hljs-string">+OK</span> <span class="hljs-number">6469 </span><span class="hljs-string">octets</span><br><span class="hljs-attr">Received:</span> <span class="hljs-string">from</span> <span class="hljs-string">TINY-DESKTOP</span> <span class="hljs-string">(unknown</span> [<span class="hljs-number">10.228</span><span class="hljs-number">.12</span><span class="hljs-number">.149</span>]<span class="hljs-string">)</span><br>        <span class="hljs-string">by</span> <span class="hljs-string">www.example.com</span> <span class="hljs-string">(Coremail)</span> <span class="hljs-string">with</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">id</span> <span class="hljs-string">AQAAfwCngFa5lNFcYQAAAA--.16S2;</span><br>        <span class="hljs-string">Tue,</span> <span class="hljs-number">07</span> <span class="hljs-string">May</span> <span class="hljs-number">2019 22:22:50</span> <span class="hljs-string">+0800</span> <span class="hljs-string">(CST)</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">7</span> <span class="hljs-string">May</span> <span class="hljs-number">2020 14:22:46</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">From:</span> <span class="hljs-string">test02</span> <span class="hljs-string">&lt;test02@coremail.cn&gt;</span><br><span class="hljs-attr">To:</span> <span class="hljs-string">=?utf-8?Q?test01=40coremail.cn?=</span> <span class="hljs-string">&lt;test01@coremail.cn&gt;</span><br><span class="hljs-attr">Message-ID:</span> <span class="hljs-string">&lt;305443E1-9258-4260-AA18-1A5CDFBD60EE@coremail.cn&gt;</span><br><span class="hljs-attr">Subject:</span> <span class="hljs-string">smtp</span> <span class="hljs-string">test</span><br><span class="hljs-attr">X-Mailer:</span> <span class="hljs-string">MailMasterPC/4.14.1.1004</span> <span class="hljs-string">(Windows</span> <span class="hljs-number">10</span> <span class="hljs-string">RS5)</span><br><span class="hljs-attr">X-CUSTOM-MAIL-MASTER-SENT-ID:</span> <span class="hljs-string">710FAD56-B1F1-48B7-B72F-543A5E51C5F2</span><br><span class="hljs-attr">MIME-Version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=&quot;utf-8&quot;</span><br><span class="hljs-attr">Content-Transfer-Encoding:</span> <span class="hljs-string">base64</span><br><span class="hljs-string">X-CM-TRANSID:AQAAfwCngFa5lNFcYQAAAA--.16S2</span><br><span class="hljs-attr">X-Coremail-Antispam:</span> <span class="hljs-string">1UD129KBjDUn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73</span><br>        <span class="hljs-string">VFW2AGmfu7bjvjm3AaLaJ3UjIYCTnIWjp_UUUol7kC6x804xWl14x267AKxVWUJVW8JwAF</span><br>        <span class="hljs-string">c2x0x2IEx4CE42xK8VAvwI8IcIk0rVWUJVWUGwAFIxvE14AKwVWUJVWUGwA2jI8I6cxK62</span><br>        <span class="hljs-string">vIxIIY0VWkZVCq3wA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xII</span><br>        <span class="hljs-string">jxv20xvE14v26r1j6r1xM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26r1j6r4UM28EF7xvwV</span><br>        <span class="hljs-string">C2z280aVAFwI0_Jr0_Gr1l84ACjcxK6I8E87Iv6xkF7I0E14v26r1j6r4UM2vYz4IE04k2</span><br>        <span class="hljs-string">4VAvwVAKI4IrM2AIxVAIcxkEcVAq07x20xvEncxIr21l5I8CrVAqjxCE14ACF2xKxwAqx4</span><br>        <span class="hljs-string">xG6xAIxVCFxsxG0wAqx4xG6I80eVA0xI0YY7vIx2IE14AGzxvEb7x7Mc02F40Ex7xS62Iq</span><br>        <span class="hljs-string">YxC26I8Yz20kMcIj6xIIjxv20xvE14v26r1j6r18McIj6I8E87Iv67AKxVWUJVW8JwAm72</span><br>        <span class="hljs-string">CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IYc2Ij64vIr41lF7I21c0EjII2zVCS5cI20VAGYxC7</span><br>        <span class="hljs-string">M4xvF2IEb7IF0Fy264kE64k0F24lFcxC0VAqx4xG64AKrs4lw4CE7480Y4vE14AKx2xKxV</span><br>        <span class="hljs-string">C2ax8xMxAIw28IcxkI7VAKI48JMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAF</span><br>        <span class="hljs-string">wI0_JrI_JrWlx2IqxVCjr7xvwVAFwI0_Jr0_Jr4lx4CE17CEb7AF67AKxVWUJVWUXwCIc4</span><br>        <span class="hljs-string">0Y0x0EwIxGrwCI42IY6xIIjxv20xvE14v26r1j6r1xMIIF0xvE2Ix0cI8IcVCY1x0267AK</span><br>        <span class="hljs-string">xVWUJVW8JwCI42IY6xAIw20EY4v20xvaj40_Wr1j6rW3Jr1lIxAIcVC2z280aVAFwI0_Jr</span><br>        <span class="hljs-string">0_Gr1lIxAIcVC2z280aVCY1x0267AKxVWUJVW8JwCE64xvF2IEb7IF0Fy7YxBIdaVFxhVj</span><br>        <span class="hljs-string">vjDU0xZFpf9x0zEzBTiUUUUU=</span><br><span class="hljs-attr">X-CM-SenderInfo:</span> <span class="hljs-string">hwhv3ims6f02phpdxzgofq/</span><br><br><span class="hljs-string">PGh0bWw+DQo8aGVhZD4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSdDb250ZW50LVR5cGUnIGNvbnRl</span><br><span class="hljs-string">bnQ9J3RleHQvaHRtbDsgY2hhcnNldD1VVEYtOCc+DQo8L2hlYWQ+DQo8Ym9keT4NCjxzdHlsZT4N</span><br><span class="hljs-string">CiAgICBmb250ew0KICAgICAgICBsaW5lLWhlaWdodDogMS42Ow0KICAgIH0NCiAgICB1bCxvbHsN</span><br><span class="hljs-string">CiAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgICAgICBsaXN0LXN0eWxlLXBvc2l0aW9u</span><br><span class="hljs-string">OiBpbnNpZGU7DQogICAgfQ0KPC9zdHlsZT4NCjxkaXYgc3R5bGUgPSAnZm9udC1mYW1pbHk65b6u</span><br><span class="hljs-string">6L2v6ZuF6buRLFZlcmRhbmEsJnF1b3Q7TWljcm9zb2Z0IFlhaGVpJnF1b3Q7LFNpbVN1bixzYW5z</span><br><span class="hljs-string">LXNlcmlmO2ZvbnQtc2l6ZToxNHB4OyBsaW5lLWhlaWdodDoxLjY7Jz4NCiAgICA8ZGl2ID48L2Rp</span><br><span class="hljs-string">dj48ZGl2PgogICAgPGRpdj4KICAgICAgICA8c3Bhbj5zbXRwIHRlc3QKICAgICAgICA8L3NwYW4+</span><br><span class="hljs-string">PC9kaXY+CiAgICA8ZGl2PgogICAgICAgIDxzcGFuPgogICAgICAgICAgICA8YnI+CiAgICAgICAg</span><br><span class="hljs-string">PC9zcGFuPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJudGVzLXBjbWFjLXNpZ25hdHVyZSIgc3R5</span><br><span class="hljs-string">bGU9ImZvbnQtZmFtaWx5Oiflvq7ova/pm4Xpu5EnIj4KICAgICAKICAgIDxkaXYgc3R5bGU9ImZv</span><br><span class="hljs-string">bnQtc2l6ZToxNHB4OyBwYWRkaW5nOiAwOyAgbWFyZ2luOjA7bGluZS1oZWlnaHQ6MTRweDsiPgog</span><br><span class="hljs-string">ICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmctYm90dG9tOjZweDttYXJnaW4tYm90dG9tOjEwcHg7</span><br><span class="hljs-string">Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2U2ZTZlNjtkaXNwbGF5OmlubGluZS1ibG9jazsiPgog</span><br><span class="hljs-string">ICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbWFhcy5tYWlsLjE2My5jb20vZGFz</span><br><span class="hljs-string">aGktd2ViLWV4dGVuZC9odG1sL3Byb1NpZ25hdHVyZS5odG1sP2Z0bElkPTEmYW1wO25hbWU9dGVz</span><br><span class="hljs-string">dDAyJmFtcDt1aWQ9dGVzdDAyJTQwY29yZW1haWwuY24mYW1wO2ljb25Vcmw9aHR0cHMlM0ElMkYl</span><br><span class="hljs-string">MkZtYWlsLW9ubGluZS5ub3Nkbi4xMjcubmV0JTJGcWl5ZWxvZ28lMkZkZWZhdWx0QXZhdGFyLnBu</span><br><span class="hljs-string">ZyZhbXA7aXRlbXM9JTVCJTIydGVzdDAyJTQwY29yZW1haWwuY24lMjIlNUQiIHN0eWxlPSJkaXNw</span><br><span class="hljs-string">bGF5OmJsb2NrO2JhY2tncm91bmQ6I2ZmZjsgbWF4LXdpZHRoOiA0MDBweDsgX3dpZHRoOiA0MDBw</span><br><span class="hljs-string">eDtwYWRkaW5nOjE1cHggMCAxMHB4IDA7dGV4dC1kZWNvcmF0aW9uOiBub25lOyBvdXRsaW5lOm5v</span><br><span class="hljs-string">bmU7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtdGV4dC1z</span><br><span class="hljs-string">aXplLWFkanVzdDpub25lICFpbXBvcnRhbnQ7dGV4dC1zaXplLWFkanVzdDpub25lICFpbXBvcnRh</span><br><span class="hljs-string">bnQ7Ij4KICAgICAgICAgICAgPHRhYmxlIGNlbGxwYWRkaW5nPSIwIiBzdHlsZT0id2lkdGg6IDEw</span><br><span class="hljs-string">MCU7IG1heC13aWR0aDogMTAwJTsgdGFibGUtbGF5b3V0OiBmaXhlZDsgYm9yZGVyLWNvbGxhcHNl</span><br><span class="hljs-string">OiBjb2xsYXBzZTtjb2xvcjogIzliOWVhMTtmb250LXNpemU6IDE0cHg7bGluZS1oZWlnaHQ6MS4z</span><br><span class="hljs-string">Oy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDpub25lICFpbXBvcnRhbnQ7dGV4dC1zaXplLWFkanVz</span><br><span class="hljs-string">dDpub25lICFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgIDx0Ym9keSBzdHlsZT0iZm9udC1m</span><br><span class="hljs-string">YW1pbHk6ICdQaW5nRmFuZyBTQycsICdIaXJhZ2lubyBTYW5zIEdCJywnV2VuUXVhbllpIE1pY3Jv</span><br><span class="hljs-string">IEhlaScsICdNaWNyb3NvZnQgWWFoZWknLCAn5b6u6L2v6ZuF6buRJywgdmVyZGFuYSAhaW1wb3J0</span><br><span class="hljs-string">YW50OyB3b3JkLXdyYXA6YnJlYWstd29yZDsgd29yZC1icmVhazpicmVhay1hbGw7LXdlYmtpdC10</span><br><span class="hljs-string">ZXh0LXNpemUtYWRqdXN0Om5vbmUgIWltcG9ydGFudDt0ZXh0LXNpemUtYWRqdXN0Om5vbmUgIWlt</span><br><span class="hljs-string">cG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAg</span><br><span class="hljs-string">ICAgICAgIDx0ZCB3aWR0aD0iMzgiIHN0eWxlPSJwYWRkaW5nOjA7IGJveC1zaXppbmc6IGJvcmRl</span><br><span class="hljs-string">ci1ib3g7IHdpZHRoOiAzOHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlt</span><br><span class="hljs-string">ZyB3aWR0aD0iMzgiIGhlaWdodD0iMzgiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IHdp</span><br><span class="hljs-string">ZHRoOiAzOHB4OyBoZWlnaHQ6IDM4cHg7IGJvcmRlci1yYWRpdXM6NTAlOyIgc3JjPSJodHRwczov</span><br><span class="hljs-string">L21haWwtb25saW5lLm5vc2RuLjEyNy5uZXQvcWl5ZWxvZ28vZGVmYXVsdEF2YXRhci5wbmciPgog</span><br><span class="hljs-string">ICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAg</span><br><span class="hljs-string">ICAgIDx0ZCBzdHlsZT0icGFkZGluZzogMCAwIDAgMTBweDsgY29sb3I6ICMzMTM1M2I7Ij4KICAg</span><br><span class="hljs-string">ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJmb250LXNpemU6IDE2cHg7</span><br><span class="hljs-string">Zm9udC13ZWlnaHQ6Ym9sZDsgd2lkdGg6MTAwJTsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgb3ZlcmZs</span><br><span class="hljs-string">b3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyI+dGVzdDAyPC9kaXY+CiAgICAgICAg</span><br><span class="hljs-string">ICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAg</span><br><span class="hljs-string">ICAgICAgICAgICAgICAgICAgIDx0ciB3aWR0aD0iMTAwJSIgc3R5bGU9ImZvbnQtc2l6ZTogMTRw</span><br><span class="hljs-string">eCAhaW1wb3J0YW50OyB3aWR0aDogMTAwJTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg</span><br><span class="hljs-string">PHRkIGNvbHNwYW49IjIiIHN0eWxlPSJwYWRkaW5nOjEwcHggMCAwIDA7IGZvbnQtc2l6ZToxNHB4</span><br><span class="hljs-string">ICFpbXBvcnRhbnQ7IHdpZHRoOiAxMDAlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg</span><br><span class="hljs-string">ICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlO2ZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50</span><br><span class="hljs-string">O3dvcmQtd3JhcDpicmVhay13b3JkO3dvcmQtYnJlYWs6YnJlYWstYWxsOyI+dGVzdDAyQGNvcmVt</span><br><span class="hljs-string">YWlsLmNuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAg</span><br><span class="hljs-string">ICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAg</span><br><span class="hljs-string">PC90YWJsZT4KICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYg</span><br><span class="hljs-string">c3R5bGU9ImZvbnQtc2l6ZToxMnB4O2NvbG9yOiNiNWI5YmQ7bGluZS1oZWlnaHQ6MThweDsiPgog</span><br><span class="hljs-string">ICAgICAgIDxzcGFuPuetvuWQjeeUsTwvc3Bhbj4KICAgICAgICA8YSBzdHlsZT0idGV4dC1kZWNv</span><br><span class="hljs-string">cmF0aW9uOiBub25lO2NvbG9yOiM0MTk2ZmY7cGFkZGluZzowIDVweDsiIGhyZWY9Imh0dHBzOi8v</span><br><span class="hljs-string">bWFpbC4xNjMuY29tL2Rhc2hpL2RscHJvLmh0bWw/ZnJvbT1tYWlsODEiPue9keaYk+mCrueuseWk</span><br><span class="hljs-string">p+W4iDwvYT4KICAgICAgICA8c3Bhbj7lrprliLY8L3NwYW4+CiAgICA8L2Rpdj4KIDwvZGl2Pgo8</span><br><span class="hljs-string">L2Rpdj48IS0t8J+YgC0tPg0KPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+</span><br><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure><p>发送NOOP命令并无实际作用，主要是用于和服务器保持数据连接不要中断。</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">NOOP<br><span class="hljs-addition">+OK core mail</span><br></code></pre></div></td></tr></table></figure><p>我们还可以使用DELE命令来删除指定的邮件，删除后使用LIST查看效果：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">DELE</span> <span class="hljs-number">4</span><br><span class="hljs-string">+OK</span> <span class="hljs-string">core</span> <span class="hljs-string">mail</span><br><span class="hljs-string">LIST</span><br><span class="hljs-string">+OK</span> <span class="hljs-number">5</span> <span class="hljs-number">19099</span><br><span class="hljs-number">1</span> <span class="hljs-number">7959</span><br><span class="hljs-number">2</span> <span class="hljs-number">1199</span><br><span class="hljs-number">3</span> <span class="hljs-number">6445</span><br><span class="hljs-number">5</span> <span class="hljs-number">2297</span><br><span class="hljs-number">6</span> <span class="hljs-number">1199</span><br><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure><p>还可以使用RSET命令来进行撤销删除的操作并且使用LIST命令查看效果</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">RSET</span><br><span class="hljs-string">+OK</span> <span class="hljs-string">core</span> <span class="hljs-string">mail</span><br><span class="hljs-string">LIST</span><br><span class="hljs-string">+OK</span> <span class="hljs-number">6</span> <span class="hljs-number">25568</span><br><span class="hljs-number">1</span> <span class="hljs-number">7959</span><br><span class="hljs-number">2</span> <span class="hljs-number">1199</span><br><span class="hljs-number">3</span> <span class="hljs-number">6445</span><br><span class="hljs-number">4</span> <span class="hljs-number">6469</span><br><span class="hljs-number">5</span> <span class="hljs-number">2297</span><br><span class="hljs-number">6</span> <span class="hljs-number">1199</span><br><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure><p>最后使用QUIT命令断开连接退出系统：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">QUIT<br>+OK core mail<br><span class="hljs-keyword">Connection</span> closed <span class="hljs-keyword">by</span> <span class="hljs-keyword">foreign</span> host.<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要使用Wireshark对邮件客户端使用POP3协议收取邮件的过程进行抓包分析并使用telnet命令进行简单操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="wireshark" scheme="https://tinychen.com/tags/wireshark/"/>
    
    <category term="mail" scheme="https://tinychen.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>RFC8314文档中对465端口和587端口的阐述</title>
    <link href="https://tinychen.com/20200508-rfc8314-465-587-part-translation/"/>
    <id>https://tinychen.com/20200508-rfc8314-465-587-part-translation/</id>
    <published>2020-05-08T02:00:00.000Z</published>
    <updated>2020-05-08T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习SMTP的时候发现SMTP在使用加密传输的时候涉及到465和587两个端口，网上对两者之间的区别众说纷纭，后来查到了RFC官方文档中对于这个争论较久的问题的定义和详细说明，这里做转载和翻译用于记录。</p><span id="more"></span><h1 id="1、RFC8314原文"><a href="#1、RFC8314原文" class="headerlink" title="1、RFC8314原文"></a>1、RFC8314原文</h1><p>我们查看<a href="https://tools.ietf.org/html/rfc8314">RFC8314官方文档</a>中的相关叙述，和该问题相关的主要是3.3、4.2、5.5和7.3这四个部分，由于本文只讨论两个端口的作用和历史缘由，因此涉及到加密过程和原理的4.2、5.5两个部分不在这里提及，其余部分的原文内容如下：</p><blockquote><p><strong>3.3.  Implicit TLS for SMTP Submission</strong></p><p>   When a TCP connection is established for the “submissions” service<br>   (default port 465), a TLS handshake begins immediately.  Clients MUST<br>   implement the certificate validation mechanism described in<br>   [RFC7817].  Once the TLS session is established, Message Submission<br>   protocol data [RFC6409] is exchanged as TLS application data for the<br>   remainder of the TCP connection.  (Note: The “submissions” service<br>   name is defined in Section 7.3 of this document and follows the usual<br>   convention that the name of a service layered on top of Implicit TLS<br>   consists of the name of the service as used without TLS, with an “s”<br>   appended.)</p><p>   The STARTTLS mechanism on port 587 is relatively widely deployed due<br>   to the situation with port 465 (discussed in Section 7.3).  This<br>   differs from IMAP and POP services where Implicit TLS is more widely<br>   deployed on servers than STARTTLS.  It is desirable to migrate core<br>   protocols used by MUA software to Implicit TLS over time, for<br>   consistency as well as for the additional reasons discussed in<br>   Appendix A.  However, to maximize the use of encryption for<br>   submission, it is desirable to support both mechanisms for Message<br>   Submission over TLS for a transition period of several years.  As a<br>   result, clients and servers SHOULD implement both STARTTLS on<br>   port 587 and Implicit TLS on port 465 for this transition period.<br>   Note that there is no significant difference between the security<br>   properties of STARTTLS on port 587 and Implicit TLS on port 465 if<br>   the implementations are correct and if both the client and the server<br>   are configured to require successful negotiation of TLS prior to<br>   Message Submission.</p><p>   Note that the “submissions” port provides access to a Message<br>   Submission Agent (MSA) as defined in [RFC6409], so requirements and<br>   recommendations for MSAs in that document, including the requirement<br>   to implement SMTP AUTH [RFC4954] and the requirements of Email<br>   Submission Operations [RFC5068], also apply to the submissions port.</p><p>   See Sections 5.5 and 4.2 for additional information on client<br>   certificate authentication.  See Section 7.3 for port registration<br>   information.</p></blockquote><blockquote><p><strong>7.3.  Submissions Port Registration</strong></p><p>   IANA has assigned an alternate usage of TCP port 465 in addition to<br>   the current assignment using the following template [RFC6335]:</p><p>​     Service Name: submissions<br>​     Transport Protocol: TCP<br>​     Assignee: IESG <a href="mailto:&#105;&#x65;&#x73;&#x67;&#x40;&#x69;&#x65;&#x74;&#x66;&#x2e;&#x6f;&#114;&#x67;">&#105;&#x65;&#x73;&#x67;&#x40;&#x69;&#x65;&#x74;&#x66;&#x2e;&#x6f;&#114;&#x67;</a><br>​     Contact: IETF Chair <a href="mailto:&#99;&#x68;&#x61;&#x69;&#114;&#x40;&#x69;&#101;&#116;&#x66;&#x2e;&#x6f;&#x72;&#103;">&#99;&#x68;&#x61;&#x69;&#114;&#x40;&#x69;&#101;&#116;&#x66;&#x2e;&#x6f;&#x72;&#103;</a><br>​     Description: Message Submission over TLS protocol<br>​     Reference: RFC 8314<br>​     Port Number: 465</p><p>   This is a one-time procedural exception to the rules in [RFC6335].<br>   This requires explicit IESG approval and does not set a precedent.<br>   Note: Since the purpose of this alternate usage assignment is to<br>   align with widespread existing practice and there is no known usage<br>   of UDP port 465 for Message Submission over TLS, IANA has not<br>   assigned an alternate usage of UDP port 465.</p><p>   Historically, port 465 was briefly registered as the “smtps” port.<br>   This registration made no sense, as the SMTP transport MX<br>   infrastructure has no way to specify a port, so port 25 is always<br>   used.  As a result, the registration was revoked and was subsequently<br>   reassigned to a different service.  In hindsight, the “smtps”<br>   registration should have been renamed or reserved rather than<br>   revoked.  Unfortunately, some widely deployed mail software<br>   interpreted “smtps” as “submissions” [RFC6409] and used that port for<br>   email submission by default when an end user requested security<br>   during account setup.  If a new port is assigned for the submissions<br>   service, either (a) email software will continue with unregistered<br>   use of port 465 (leaving the port registry inaccurate relative to</p><p>   de facto practice and wasting a well-known port) or (b) confusion<br>   between the de facto and registered ports will cause harmful<br>   interoperability problems that will deter the use of TLS for Message<br>   Submission.  The authors of this document believe that both of these<br>   outcomes are less desirable than a “wart” in the registry documenting<br>   real-world usage of a port for two purposes.  Although STARTTLS on<br>   port 587 has been deployed, it has not replaced the deployed use of<br>   Implicit TLS submission on port 465.</p></blockquote><h1 id="2、个人理解"><a href="#2、个人理解" class="headerlink" title="2、个人理解"></a>2、个人理解</h1><p>将上面的几段原文阅读整合之后，个人的理解如下：</p><p><strong>首先要说明原文中多次出现的<code>submission</code>的意思实际上是指客户端使用SMTP协议来对服务端进行数据传输，下面提及的<code>SMTPS</code>等价于原文的<code>TLS submission</code>。</strong></p><p>当年IANA为TCP的465端口注册了用途，用于SMTP的TLS加密传输，且没有指定UDP的465端口用途，这就是465端口在历史上被用为SMTPS端口的由来。</p><p>为什么说是历史上呢，因为这个注册在不久之后就被撤销了，也就是说这个注册没用了，465端口要被回收拿去给其他的服务用了。而撤销的原因是<em>“这种注册没有意义，因为SMTP传输MX基础结构无法指定端口，因此始终使用端口25。（This registration made no sense, as the SMTP transport MX infrastructure has no way to specify a port, so port 25 is always used. ）”</em></p><p>但是后来又觉得当时<strong>应该把这个465的SMTPS（隐式TLS）端口保留或者是重命名而不是撤销</strong>，因为已经有许多邮件服务软件使用了465端口作为SMTPS（隐式TLS）的传输端口，如果为SMTPS（隐式TLS）服务分配了新端口，则已经使用被注销的465端口作为SMTPS服务端口的电子邮件软件相当于是使用了一个和实际SMTPS（隐式TLS）端口不匹配的端口，并且实际使用端口和理论注册端口的不同也有可能导致各种问题。</p><p>因此尽管已在端口587上部署了STARTTLS，但它尚未取代在端口465上部署的SMTPS（隐式TLS）的使用。</p><p>随着时间的推移，出于一致性以及其他原因，需要将MUA软件使用的核心协议迁移到隐式TLS。但是，为了最大程度地使用加密来进行提交，需要在几年的过渡期内支持两种通过TLS进行消息提交的机制。因此，在此过渡期间，客户端和服务器应在端口587上实施STARTTLS，并在端口465上实施隐式TLS。请注意，如果实施正确且客户端和服务器都配置为要求在消息提交之前成功协商TLS，则端口587上的STARTTLS和端口465上的隐式TLS的安全属性之间没有显着差异。</p><blockquote><p>A mail user agent (MUA) is a program that allows you to receive and send e-mail messages; it’s usually just called an e-mail program.</p><p>MUA软件即指我们平时使用的集收发读写邮件于一体的邮件客户端软件。</p></blockquote><p><strong>简而言之，465端口最开始被注册用于SMTPS，随后被撤销，但是因为已经被用了，现在又恢复了，并且还多增加了一个587端口用于STARTTLS加密传输，并且在配置正确的前提下两者一样安全。目前的主要任务是把邮件从明文传输迁移到加密传输，在迁移的过渡期间应当支持587端口的STARTTLS和465端口的隐式TLS。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习SMTP的时候发现SMTP在使用加密传输的时候涉及到465和587两个端口，网上对两者之间的区别众说纷纭，后来查到了RFC官方文档中对于这个争论较久的问题的定义和详细说明，这里做转载和翻译用于记录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mail" scheme="https://tinychen.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark对SMTP抓包分析</title>
    <link href="https://tinychen.com/20200507-wireshark-analysis-smtp/"/>
    <id>https://tinychen.com/20200507-wireshark-analysis-smtp/</id>
    <published>2020-05-07T02:00:00.000Z</published>
    <updated>2020-05-07T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要使用Wireshark对邮件客户端使用SMTP协议发送邮件的过程进行抓包分析并使用telnet命令进行简单操作。</p><span id="more"></span><h1 id="1、SMTP简介"><a href="#1、SMTP简介" class="headerlink" title="1、SMTP简介"></a>1、SMTP简介</h1><p><strong>简单邮件传输协议</strong>（英语：<strong>S</strong>imple <strong>M</strong>ail <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：<strong>SMTP</strong>）是一个在互联网上传输电子邮件的标准。</p><p>SMTP是一个相对简单的基于文本的协议。在其之上指定了一条消息的一个或多个接收者（在大多数情况下被确认是存在的），然后消息文本会被传输。可以很简单地通过telnet程序来测试一个SMTP服务器。SMTP使用TCP端口25。要为一个给定的域名决定一个SMTP服务器，需要使用DNS的MX记录。</p><p><strong>无论使用POP3还是IMAP4来获取消息，客户端均使用SMTP协议来发送消息。邮件客户端可能是POP客户端或者IMAP客户端，但都会使用SMTP。</strong></p><h1 id="2、Wireshark抓包分析"><a href="#2、Wireshark抓包分析" class="headerlink" title="2、Wireshark抓包分析"></a>2、Wireshark抓包分析</h1><p>由于大多数人平时接触到的程序除了邮件客户端在发件的时候会使用SMTP协议之外，其余的几乎不会用到，因此相关的抓包分析非常简单，只需要在Wireshark的Filter中设定抓取的协议为SMTP即可顺利过滤出绝大多数的包，如果担心过滤效果不佳可以再加上邮件服务器的IP地址。</p><p>点击开始抓包之后，我们使用配置了SMTP的邮件客户端来发送一封邮件即可抓取到全部的数据包。</p><p><img src="https://resource.tinychen.com/20200507155651.png"></p><h2 id="2-1-220"><a href="#2-1-220" class="headerlink" title="2.1 220"></a>2.1 220</h2><p>注意这里为了方便分析数据包内容并没有使用加密协议，抓取到的一个完整的SMTP发送过程如下：</p><p><img src="https://resource.tinychen.com/20200507155150.png"></p><p>需要注意的是这里筛掉了TCP协议，因此最开始的TCP三次握手建立连接在这里是看不到的，因此在图中的第一个包就是SMTP的服务器端发送给客户端的数据包：</p><p><img src="https://resource.tinychen.com/20200507170104.png"></p><p>响应代码220表示连接建立成功，后面的Anti-spam表明是该邮件系统的反垃圾邮件模块，即猜测在这里就有反垃圾邮件模块来抵挡垃圾邮件的攻击。</p><h2 id="2-2-EHLO-HELO"><a href="#2-2-EHLO-HELO" class="headerlink" title="2.2 EHLO/HELO"></a>2.2 EHLO/HELO</h2><p>服务端返回220代码之后，客户端继续发送请求，首先是发送EHLO命令：</p><p><img src="https://resource.tinychen.com/20200507171410.png"></p><p>一般来说客户端和SMTP服务端建立连接之后就需要发送EHLO或者是HELO命令，后面附带的参数是<domain>，即相当于客户端的主机域名或者是主机名，这一步的主要作用是声明身份，EHLO/HELO命令相当于是HELLO命令，两者之间的主要区别是EHLO带身份验证而HELO不带身份验证，因此EHLO要更加安全</p><p><img src="https://resource.tinychen.com/20200507171139.png"></p><p><img src="https://resource.tinychen.com/20200507171304.png"></p><p>在服务器上使用telnet命令可以很直接的看到两者之间的区别，EHLO会返回身份验证方式而HELO命令则直接返回<code>250 OK</code>代码。</p><h2 id="2-3-AUTH"><a href="#2-3-AUTH" class="headerlink" title="2.3 AUTH"></a>2.3 AUTH</h2><p>服务端接收到客户端的EHLO请求之后，返回了一个250代码并且附带了支持的身份验证方式：</p><p><img src="https://resource.tinychen.com/20200507173252.png"></p><p>客户端使用AUTH命令进行身份验证：</p><p><img src="https://resource.tinychen.com/20200507173422.png"></p><p>身份验证成功后会返回235的成功代码：<br><img src="https://resource.tinychen.com/20200507173605.png"></p><p>到这里就完成了和SMTP服务器建立连接和身份验证的步骤。</p><h2 id="2-4-MAIL-FROM"><a href="#2-4-MAIL-FROM" class="headerlink" title="2.4 MAIL FROM"></a>2.4 MAIL FROM</h2><p>接下来客户端发送<code>MAIL FROM</code>命令声明邮件的发件人：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/xjCEYf4Xvkcj.png"></p><p>服务器返回250代码确定操作成功：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/sRxGBH7GD0fY.png"></p><h2 id="2-5-RCPT-TO"><a href="#2-5-RCPT-TO" class="headerlink" title="2.5 RCPT TO"></a>2.5 RCPT TO</h2><p>然后客户端发送RCPT TO命令声明邮件的收件人：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/rQCKIjkrcLu3.png"></p><p>服务器返回250代码确定操作成功：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/sLA244UWvWWK.png"></p><h2 id="2-6-DATA"><a href="#2-6-DATA" class="headerlink" title="2.6 DATA"></a>2.6 DATA</h2><p>客户端使用DATA命令，告知服务器要开始传输邮件的正文内容：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/HP5J6t6jjWXj.png"></p><p>服务端返回354代码，告知邮件的内容结束以<code>&lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</code>为标记：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/gzyFRF2mYx7e.png"></p><blockquote><p>windows中的换行符标记为CRLF而Linux中的为LF，<code>&lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</code>即表明当服务器收到单独一行的<code>.</code>即完成本次邮件正文传输。</p></blockquote><p>客户端接收到254代码后，开始传输邮件内容：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/7IIh3IrxuBGX.png"></p><p>我们可以看到在上面的数据包中包含了SMTP和IMF两个部分，因为抓包发送的邮件内容都是文本，所以直接使用<a href="https://wiki.wireshark.org/IMF">IMF协议</a>就可以传输，而SMTP协议中的报文内容则是DATA命令的终止标志<code>.</code></p><h2 id="2-7-QUIT"><a href="#2-7-QUIT" class="headerlink" title="2.7 QUIT"></a>2.7 QUIT</h2><p>在客户端发送完邮件内容之后，还会接着发送一个QUIT命令来表示结束这次的SMTP传输：</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/OiBr10p82Nn6.png"></p><p>服务器在接受到数据之后会返回250代码表示接受成功并且再返回221代码表示结束本次SMTP传输。</p><p><img src="https://resource.tinychen.com/blogphotos/20200507/HrBlY8YAY7JE.png"></p><p><img src="https://resource.tinychen.com/blogphotos/20200507/T5t8Go18UFJ9.png"></p><h1 id="3、telnet测试SMTP"><a href="#3、telnet测试SMTP" class="headerlink" title="3、telnet测试SMTP"></a>3、telnet测试SMTP</h1><p>由于SMTP协议十分简单且没有加密，所以我们使用telnet命令连接到邮件服务器也可以执行同样的操作：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用telnet和服务器建立连接</span><br>telnet localhost 25<br><span class="hljs-meta">#</span><span class="bash"> 这里根据邮件系统的不同选择EHLO或者是HELO</span><br>HELO TINY-DESKTOP<br>EHLO TINY-DESKTOP<br><span class="hljs-meta">#</span><span class="bash"> 使用EHLO还可以进行身份验证</span><br><span class="hljs-meta">#</span><span class="bash"> 使用AUTH命令进行身份验证和登录</span><br><span class="hljs-meta">#</span><span class="bash"> 需要注意要将账号密码转码成base64编码的文本才可以成功登录</span><br>AUTH LOGIN<br><span class="hljs-meta">#</span><span class="bash"> 转码前的账号test01@coremail.cn</span><br>dGVzdDAxQGNvcmVtYWlsLmNu<br><span class="hljs-meta">#</span><span class="bash"> 转码前的密码password01</span><br>cGFzc3dvcmQwMQ==<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 确定发件人</span><br>MAIL FROM: &lt;test01@coremail.cn&gt;<br><span class="hljs-meta">#</span><span class="bash"> 确定收件人</span><br>RCPT TO: &lt;test02@coremail.cn&gt;<br><span class="hljs-meta">#</span><span class="bash"> 开始传输正文</span><br>DATA<br><br>Subject: telnet test mail<br>From:&quot;test01&quot;&lt;test01@coremail.cn&gt;<br>To:&quot;test02&quot;&lt;test02@coremail.cn&gt;<br><br>Hello,<br>This is a smtp test via telnet.<br>Goodbye.<br><br>.<br><span class="hljs-meta">#</span><span class="bash"> 结束传输并退出</span><br>QUIT<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image-20200508092826669.png"></p><p>如图中所示使用AUTH命令登录认证成功之后是会收到服务器返回的235代码的。我们操作完成之后查看邮箱确定收到了测试的邮件则说明操作成功。</p><p><img src="https://resource.tinychen.com/image-20200508093321223.png"></p><p>在使用AUTH认证的情况如下：</p><p><img src="https://resource.tinychen.com/image-20200508095204708.png"></p><p>实际上返回的334代码后面的<code>dXNlcm5hbWU6</code>和<code>UGFzc3dvcmQ6</code>就是base64编码的<code>username</code>和<code>Password</code>。</p><p>由于明文传输的不安全性，现在单纯的SMTP已经几乎没有使用了，使用的较多的都是它的加密版本SMTPS（465端口，SSL加密，不推荐使用）和STARTTLS（587端口，TLS加密，推荐使用）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要使用Wireshark对邮件客户端使用SMTP协议发送邮件的过程进行抓包分析并使用telnet命令进行简单操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="wireshark" scheme="https://tinychen.com/tags/wireshark/"/>
    
    <category term="mail" scheme="https://tinychen.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>IPv6网络配置LVS的DR模式</title>
    <link href="https://tinychen.com/20200505-lvs-deploy-dr-mode-in-ipv6/"/>
    <id>https://tinychen.com/20200505-lvs-deploy-dr-mode-in-ipv6/</id>
    <published>2020-05-05T02:00:00.000Z</published>
    <updated>2020-05-05T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括LVS DR模式在IPv4网络和IPv6网络下配置的一些差异对比。</p><span id="more"></span><h1 id="1、LVS-DR-via-IPv4"><a href="#1、LVS-DR-via-IPv4" class="headerlink" title="1、LVS DR via IPv4"></a>1、LVS DR via IPv4</h1><p>首先这里我们使用三台主机配置lvs集群，对应的系统和内核版本如下</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">[root@lvs81 ~]# lsb_release -a<br>LSB Version:    :base<span class="hljs-string">-4</span>.0-amd64:base<span class="hljs-string">-4</span>.0-noarch:core<span class="hljs-string">-4</span>.0-amd64:core<span class="hljs-string">-4</span>.0-noarch:graphics<span class="hljs-string">-4</span>.0-amd64:graphics<span class="hljs-string">-4</span>.0-noarch:printing<span class="hljs-string">-4</span>.0-amd64:printing<span class="hljs-string">-4</span>.0-noarch<br>Distributor ID: CentOS<br>Description:    CentOS release 6.10 (Final)<br>Release:        6.10<br>Codename:       Final<br>[root@lvs81 ~]# uname -r<br>2.6.32<span class="hljs-string">-754</span>.28.1.el6.x86_64<br></code></pre></div></td></tr></table></figure><p>对应的IP地址如下</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">80</span>  lvsipv<span class="hljs-number">4</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">81</span>  lvs<span class="hljs-number">81</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">82</span>  lvs<span class="hljs-number">82</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">83</span>  lvs<span class="hljs-number">83</span><br><br><span class="hljs-attribute">240e</span>:c<span class="hljs-number">331</span>:dead:beef::<span class="hljs-number">3</span>c<span class="hljs-number">80</span> lvsipv<span class="hljs-number">6</span><br><span class="hljs-attribute">240e</span>:c<span class="hljs-number">331</span>:dead:beef::<span class="hljs-number">3</span>c<span class="hljs-number">81</span> lvs<span class="hljs-number">81</span><br><span class="hljs-attribute">240e</span>:c<span class="hljs-number">331</span>:dead:beef::<span class="hljs-number">3</span>c<span class="hljs-number">82</span> lvs<span class="hljs-number">82</span><br><span class="hljs-attribute">240e</span>:c<span class="hljs-number">331</span>:dead:beef::<span class="hljs-number">3</span>c<span class="hljs-number">83</span> lvs<span class="hljs-number">83</span><br></code></pre></div></td></tr></table></figure><p><strong>其中lvs81对应为LB，lvs82和lvs83为RS，RS上部署nginx分别监听本机对应ipv4和ipv6地址的80端口用于测试。</strong></p><h2 id="1-1-LB配置"><a href="#1-1-LB配置" class="headerlink" title="1.1 LB配置"></a>1.1 LB配置</h2><p>此处略去ipvs模块的加载和ipvsadm的安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig eth1:1 192.168.100.80 broadcast 192.168.100.81 netmask 255.255.255.255 up<br>ipvsadm -A -t 192.168.100.80:80 -s rr <br>ipvsadm -a -t 192.168.100.80:80 -r 192.168.100.82 -g<br>ipvsadm -a -t 192.168.100.80:80 -r 192.168.100.83 -g   <br></code></pre></div></td></tr></table></figure><p>修改ip_vs模块对应的哈希表的大小</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;options ip_vs conn_tab_bits=20&#x27; &gt;/etc/modprobe.d/ipvs.conf<br></code></pre></div></td></tr></table></figure><h2 id="1-2-RS配置"><a href="#1-2-RS配置" class="headerlink" title="1.2 RS配置"></a>1.2 RS配置</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig lo:1 192.168.100.80 broadcast 192.168.100.80 netmask 255.255.255.255 up<br></code></pre></div></td></tr></table></figure><p>同时需要修改内核参数，修改ARP请求对应的响应限制</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">[root@lvs82 ~]# <span class="hljs-keyword">cat</span> /etc/sysctl.<span class="hljs-keyword">conf</span> | <span class="hljs-keyword">grep</span> arp<br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.arp_ignore=<span class="hljs-number">1</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">lo</span>.arp_ignore=<span class="hljs-number">1</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.arp_announce=<span class="hljs-number">2</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">lo</span>.arp_announce=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h2 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h2><p><img src="https://resource.tinychen.com/20200427142152.png"></p><p><img src="https://resource.tinychen.com/20200427142220.png"></p><p><img src="https://resource.tinychen.com/20200427142536.png"></p><h1 id="2、ipv6和ipv4的一些差别"><a href="#2、ipv6和ipv4的一些差别" class="headerlink" title="2、ipv6和ipv4的一些差别"></a>2、ipv6和ipv4的一些差别</h1><ul><li><p>ipv6中没有广播地址的概念</p><blockquote><p>在IPv4中广泛的使用单播、广播、组播的方式。而在IPv6的应用环境中，使用单播，组播、任意播的新方式。</p></blockquote></li><li><p>ipv6中没有ARP协议，使用了升级版本的<strong>邻居发现协议</strong>（NDR）协议</p><blockquote><p>邻居发现的这些功能主要通过邻居发现协议报文实现，邻居发现协议分组装载在ICMPv6分组内部。邻居发现协议中定义了五种ICMPv6分组类型，它们的名称和作用如下。</p><ul><li><strong>路由器请求（RS，Router Solicitation）报文</strong></li></ul><p>当主机的接口开始工作时，主机会发送路由器请求消息，请求可能存在的路由器答复，即是为了探寻与自己相连的路由器的情况。</p><ul><li><strong>路由器通告（RA，Router Advertisement）报文</strong></li></ul><p>路由器通告由路由器周期性地发送，也可作为收到的路由器请求（来自主机）的响应发送出去。每个路由器通告中还可能包含前缀信息、链路配置和IPv6协议参数等信息。路由器通告宣告着路由器的存在和一些自身配置。</p><ul><li><strong>邻居请求（NS，Neighbor Solicitation）报文</strong></li></ul><p>节点可以发送邻居请求用以解析另一个节点的链路层地址和验证另一个节点的可达性。邻居请求还用来验证一条特定链路上的地址是否是唯一的：当节点上产生了一个新地址时，会向整个链路上的其它节点发送邻居请求，询问该地址是否已经被占用。如果该地址已经被占用，那么占用该地址的节点会回复邻居通告，否则多次检测后没有收到回复，则该新地址生效。</p><ul><li><strong>邻居通告（NA，Neighbor Advertisement）报文</strong></li></ul><p>节点可以发送邻居通告来响应邻居请求分组，它还会发送未经请求的邻居通告，将节点的链路层地址变化通知其它节点。</p><ul><li><strong>重定向（Redirect）报文</strong></li></ul><p>路由器通过重定向报文通知主机，对于一条特定的路由，如果不是最佳路由，则通知主机最佳路由及下一跳。</p></blockquote><p>实际上在IPv6协议过程中使用NDP协议根据IP查找MAC的过程主要使用的是NS和NA两种报文，它们相当于ARP协议中的ARP Request和ARP Reply。</p></li></ul><h2 id="2-1-ipv6的地址分类"><a href="#2-1-ipv6的地址分类" class="headerlink" title="2.1 ipv6的地址分类"></a>2.1 ipv6的地址分类</h2><h3 id="2-1-1-ipv6的地址表示"><a href="#2-1-1-ipv6的地址表示" class="headerlink" title="2.1.1 ipv6的地址表示"></a>2.1.1 ipv6的地址表示</h3><p>IPv6地址的长度是IPv4（32位）的4倍，达到了128位，复杂程度大大提升，表达上使用了8组不区分大小写的16进制数来表示，每组由4个16进制数组成。IPv6地址一般使用“零缩法”来表示，主要限制如下：</p><ul><li>16位地址块中的前导0可以省略，如果16位全为0，可以只写一个0</li><li>当IPv6地址中有多个连续的，值为0的16位地址块时，可以用1个双冒号转换这 些连续的0，但双冒号在一个IPv6地址中只能出现一次，也就是在一个IPv6地址只 能用一个双冒号转换一个连续的、值为0的16位地址块</li><li>不能用双冒号转换属于16位地址块中一部分的0，即使是地址块中的最后一个16 进制数0</li></ul><h3 id="2-1-2-ipv6地址类型"><a href="#2-1-2-ipv6地址类型" class="headerlink" title="2.1.2 ipv6地址类型"></a>2.1.2 ipv6地址类型</h3><p>IPv6协议主要定义了三种地址类型：单播地址（Unicast Address）、组播地址 （Multicast Address）和任播地址（Anycast Address）。相比IPv4而言取消了广播地址，新增了任意播，而IPv4中的广播功能在IPv6中主要通过组播实现。由于两者的组播标准并无过多的改动，因此IPv6中的组播地址其实与IPv4中的组播地址是类似的。</p><ul><li>单播地址：用来唯一标识一个接口，类似于IPv4中的单播地址。发送到单播地址 的数据报文将被传送给此地址所标识的一个接口。 </li><li>组播地址：用来标识一组接口（通常这组接口属于不同的节点），类似于IPv4中的组播地址。发送到组播地址的数据报文被传送给此地址所标识的所有接口。 </li><li>任播地址：用来标识一组接口（通常这组接口属于不同的节点）。发送到任播地 址的数据报文被传送给此地址所标识的一组接口中距离源节点最近（根据使用的路 由协议进行度量）的一个接口。</li></ul><p><img src="https://resource.tinychen.com/20200428095049.png"></p><p>整个IPv6单播地址包括以下五个类型：全局单播地址、链路本地地址、站点本地地址、特殊地址、兼容性地址。由于篇幅有限，这里重点讲一下和LVS要用到的全局单播地址和链路本地地址。</p><p>全局单播地址等同于IPv4中的公网地址，可以在IPv6 Internet上进行全局路由和访问。</p><p>在IPv6中，本地单播地址就是指本地网络使用的单播地址，也就是IPV4地址中经常 所说的局域网专用地址。本地单播地址又有两种，分别是链路本地地址和站点本地 地址。每个接口上至少要有一个链路本地单播地址，另外还可分配任何类型（单 播、任播和组播）或范围的IPv6地址。</p><p>链路本地地址仅用于单个链路（注意，这里的“链路”就相当于IPv4中的子网）， 不能在不同子网中路由。结点使用链路本地地址与同一个链路上的相邻结点进行通 信。</p><p>链路本地地址等效于169.254.0.0/16网段的自动专用IP寻址（APIPA）IPv4地址 （在运行Windows系统的计算机上自动配置）。邻居发现过程要求使用链路本地地 址，该地址始终自动配置（也就是无须手工配置），即使所有其他单播地址都不存 在也是如此。</p><p><img src="https://resource.tinychen.com/20200428100632.png"></p><p>从图中可以看出，链路本地地址始终以“1111111010”（FE80）开头。后面紧跟着 的54位均为0，最后的64位是用来标识接口，称为接口ID。在IPv6单播地址中的接 口ID用来标识一个链路上的接口，不能在同一个链路上为不同结点分配相同的接口 ID。所以对于链路本地地址的前缀始终是FE80：/64。IPv6路由器永远不会将链路 本地通信转发出该链路。</p><h2 id="2-2-ipv6的NDP协议"><a href="#2-2-ipv6的NDP协议" class="headerlink" title="2.2 ipv6的NDP协议"></a>2.2 ipv6的NDP协议</h2><p>要理解IPv6的组播，首先需要明白三个关键点：</p><ul><li><p>任何节点都能够成为一个多播组成员也叫做组播组成员</p></li><li><p>源节点可以发送数据包到多播组</p></li><li><p>在一个多播组的节点都能收到发往该组播组的数据</p></li></ul><p>在IPv4环境的的ARP地址解析协议是使用目标地址为广播（255.255.255.255或者FFFF.FFFF.FFFF）将MAC地址请求消息发送到整个以太网链路上的所有主机，即便是LB（lvs81）主机请求RS（lvs82）主机的MAC，RS（lvs82）主机与RS（lvs83）主机是同样会收到这个请求广播，从性能与效率上讲这明显不科学。</p><p>所以在IPv6的环境中放弃了广播的的方式，而是采用组播方式将MAC地址的解析请求，以点对点的形式直接组播到lvs82主机的请求节点组播地址。而不再将请求消息发送到无关的lvs83主机，所以IPv6的节点请求的确是高效率去替代IPv4的ARP协议。总而言之就是使用点到点的方式去代替广播。</p><p><img src="https://resource.tinychen.com/20200428113025.png"></p><p>那么对于IPv6来说，发送组播数据包的时候，也是不知道目标IP主机的MAC地址的，这时候就要用到IPv6中对应的组播IP地址和组播MAC地址了：</p><p><img src="https://resource.tinychen.com/20200505225723.png"></p><p>从上图中我们可以看到，组播的IPv6地址是根据目标IPv6地址生成的，组播IPv6地址会取目标IPv6地址的低24位（2进制）来加上固定的前缀<code>FF02::1:FF</code>（16进制）从而生成对应的组播地址，而组播的MAC地址则是根据组播的IPv6地址的低32位（2进制）再加上固定前缀3333（16进制）生成。</p><p>由于在同一个局域网中，IPv6地址低24位相同的概率十分小，因此组播包发送出去之后，接受该组播包的客户端几乎只有一个，就无限接近于一对一的单播效果，从而有效地避免了ARP协议使用广播方式的诸多问题。</p><h1 id="3、LVS-DR-via-IPv6"><a href="#3、LVS-DR-via-IPv6" class="headerlink" title="3、LVS DR via IPv6"></a>3、LVS DR via IPv6</h1><p>同样还是使用上面的三台机器，由于IPv6中没有ARP的困扰，所以在配置的时候反而要比IPv4更加简单，我们只需要直接添加ip即可：</p><blockquote><p>IPv6模式下还使用了elrepo库中的lt版本的4.4.219-1内核进行测试，两者结果一致。均可直接正常工作。</p></blockquote><h2 id="3-1-LB配置"><a href="#3-1-LB配置" class="headerlink" title="3.1 LB配置"></a>3.1 LB配置</h2><p>不需要对内核参数进行任何修改，确认启用了ipv6网络即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig eth2 inet6 add 240e:c331:dead:beef::3c80/128<br>ipvsadm -A -t [240e:c331:dead:beef::3c80]:80 -s rr<br>ipvsadm -a -t [240e:c331:dead:beef::3c80]:80 -r [240e:c331:dead:beef::3c82]:80 -g<br>ipvsadm -a -t [240e:c331:dead:beef::3c80]:80 -r [240e:c331:dead:beef::3c83]:80 -g<br></code></pre></div></td></tr></table></figure><h2 id="3-2-RS配置"><a href="#3-2-RS配置" class="headerlink" title="3.2 RS配置"></a>3.2 RS配置</h2><p>不需要对内核参数进行任何修改，确认启用了ipv6网络即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig lo inet6 add 240e:c331:dead:beef::3c80/128<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200427143253.png"></p><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h2><p>使用客户端进行访问，可以看到返回的是ipv6的结果，并且产生了预设的轮询效果。</p><p><img src="https://resource.tinychen.com/20200427142630.png"></p><p>查看ipv6网络中的邻居表，可以看到对应的两个RS状态为可达（REACHABLE）,并且对应的MAC地址为RIP的ipv6地址所在的网卡。此外和IPv4中不同的是，对应的两台RS上面的Link-local地址在邻居表中的状态也显示为可达（REACHABLE）。</p><p><img src="https://resource.tinychen.com/Inkedimage-20200427142653585_LI.jpg"></p><p>查看LB上面的ipvsadm中的连接状态，我们可以看到连接已经建立并且确实转发到了后端的RS上。</p><p><img src="https://resource.tinychen.com/20200427142833.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括LVS DR模式在IPv4网络和IPv6网络下配置的一些差异对比。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
    <category term="ipv6" scheme="https://tinychen.com/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat篇04-部署和管理</title>
    <link href="https://tinychen.com/20200504-tomcat-04-deploy-manager-serverxml/"/>
    <id>https://tinychen.com/20200504-tomcat-04-deploy-manager-serverxml/</id>
    <published>2020-05-04T02:00:00.000Z</published>
    <updated>2020-05-04T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括tomcat服务器的web应用部署和管理，以及<code>server.xml</code>的主要配置。</p><span id="more"></span><h1 id="1、manager应用"><a href="#1、manager应用" class="headerlink" title="1、manager应用"></a>1、manager应用</h1><p>tomcat本身内置了两个web应用，专门用来管理tomcat，它们分别是host-manager（管理virtual host）和manager（管理web应用）。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/host-manager/</span>html<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/manager/</span>html<br></code></pre></div></td></tr></table></figure><p>在启动tomcat之后，我们访问上面的这两个网址可以发现被403了。因为我们还没有在配置文件中增加相关的用户，为了保证安全，这里的用户默认都是禁用的，我们需要自己创建。</p><p>我们编辑tomcat目录下的conf子目录中的<code>tomcat-users.xml</code>，添加对应的配置即可：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--admin对应的是host-manager的用户--&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the HTML GUI--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the text interface--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin‐script&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--manager对应的是manager的用户--&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the HTML GUI and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the text interface and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager‐script&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the JMX proxy and the status pages--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-jmx&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--allows access to the status pages only--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-status&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--我们这里添加一个用户，然后定义角色即可--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;tinychen&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tinychen#321&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;admin‐gui,manager-gui&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>Users with the <code>admin-gui</code> role should not be granted the <code>admin-script</code> role.</p><p>注意被授予<code>admin-gui</code>权限的用户不应该授予<code>admin-script</code>权限</p><p>Users with the <code>manager-gui</code> role should not be granted either the <code>manager-script</code> or <code>manager-jmx</code> roles.</p><p>注意被授予<code>manager-gui</code>权限的用户不应该授予<code>manager-script</code>或<code>manager-jmx</code>权限</p></blockquote><p>tomcat9中默认是只允许部署tomcat的机器访问manger和host-manager的页面的，因此我们需要修改tomcat目录下对应的web应用的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /home/tomcat9/webapps/host-manager/META-INF/context.xml <br>vim /home/tomcat9/webapps/manager/META-INF/context.xml<br></code></pre></div></td></tr></table></figure><p>然后修改里面限制的IP地址为全部或者自己的IP地址即可。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">antiResourceLocking</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">privileged</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">allow</span>=<span class="hljs-string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">sessionAttributeValueClassNameFilter</span>=<span class="hljs-string">&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)</span></span><br><span class="hljs-string"><span class="hljs-tag">|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br><br># 将allow参数改为<br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">allow</span>=<span class="hljs-string">&quot;^.*$&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后我们就可以访问web界面来查看tomcat服务器的运行状态了。</p><ul><li>manager的web界面</li></ul><p><img src="https://resource.tinychen.com/20200410100657.png"></p><ul><li>host-manager的web界面</li></ul><p><img src="https://resource.tinychen.com/20200410100810.png"></p><h1 id="2、Tomcat的容器架构"><a href="#2、Tomcat的容器架构" class="headerlink" title="2、Tomcat的容器架构"></a>2、Tomcat的容器架构</h1><p>Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器是父子关系， Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。</p><p><img src="https://resource.tinychen.com/20200403155129.png"></p><p>如上图所示，我们可以看到：</p><ul><li>一台机器上可以通过设置不同的CATALINA_BASE来运行多个tomcat实例，即可以运行<strong>多个</strong>server</li><li>一个server中只有<strong>一个</strong>Engine，而Engine就是实现了servlet规范的引擎，这里就是Catalina</li><li>一个engine中可以包含<strong>多个</strong>host，即和apache、nginx等服务器相同，可以配置多个virtual host站点</li><li>一个host中可以包含<strong>多个</strong>context，即可以包含多个web应用</li><li>一个warpper表示<strong>一个</strong>Servlet，wrapper 作为容器中的最底层，不能包含子容器</li></ul><p>Tomcat使用组合模式来管理这些容器，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象（最底层的Wrapper）和组合容器对象（Context、Host或者Engine）的使用具有一致性。</p><p>Tomcat 服务器的配置主要集中于 <code>tomcat/conf</code> 下的 <code>catalina.policy</code>、 <code>catalina.properties</code>、<code>context.xml</code>、<code>server.xml</code>、<code>tomcat-users.xml</code>、<code>web.xml</code> 文件。</p><p>Tomcat的这一设计思想在其配置文件<code>server.xml</code>中得到了很好的诠释，<code>server.xml</code> 是tomcat 服务器的核心配置文件，包含了Tomcat的 Servlet 容器 （Catalina）的所有配置。下面我们先来了解一下<code>server.xml</code>文件中的一些主要配置。</p><h1 id="3、server-xml"><a href="#3、server-xml" class="headerlink" title="3、server.xml"></a>3、server.xml</h1><h2 id="3-1-server-xml整体架构"><a href="#3-1-server-xml整体架构" class="headerlink" title="3.1 server.xml整体架构"></a>3.1 server.xml整体架构</h2><p>首先我们需要知道<code>server.xml</code>中的xml代码块分类，tomcat官网将其主要分为四类：</p><ul><li><strong>Top Level Elements</strong>：<code>server</code>块是整个配置文件的根元素，而<code>service</code>块代表与引擎关联的一组连接器（connector）。</li><li><strong>Connectors</strong> ：表示外部客户端向特定服务发送请求和接收响应的接口（比如我们之前提到的coyote连接器以及对应的NIO等IO模式都是整个范畴内的概念）。 </li><li><strong>Containers</strong>：容器（<code>Container</code>）负责处理传入的请求并创建相应的响应。<code>Engine</code>处理对Service的所有请求，<code>Host</code>处理对特定<code>virtual host</code>的所有请求，而<code>Context</code>处理对特定Web应用程序的所有请求。</li><li><strong>Nested Components</strong>：表示可以嵌套在<code>Container</code>元素内的元素。 注意一些元素可以嵌套在任何Container中，而另一些元素只能嵌套在<code>Context</code>中。</li></ul><h2 id="3-2-Top-Level-Elements"><a href="#3-2-Top-Level-Elements" class="headerlink" title="3.2 Top Level Elements"></a>3.2 Top Level Elements</h2><h3 id="3-2-1-Server块"><a href="#3-2-1-Server块" class="headerlink" title="3.2.1 Server块"></a>3.2.1 Server块</h3><p>Server块代表的是整个catalina servlet容器。因此，它必须是<code>conf/server.xml</code>配置文件中最外面的单个元素。它的属性代表了整个servlet容器的特征。Tomcat9中默认的配置文件中<code>Server</code>块内嵌的子元素为 <code>Listener</code>、<code>GlobalNamingResources</code>、<code>Service</code>（可以嵌套多个）。具体的每个属性参数我们可以查询<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/server.html">官网</a>，下面解释默认的参数配置。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8005&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">port ： Tomcat监听的关闭服务器的端口 </span><br><span class="hljs-comment">shutdown ： 关闭服务器的指令字符串</span><br><span class="hljs-comment"> --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 以日志形式输出服务器、操作系统、JVM的版本信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启动和停止APR。如果找不到APR库会输出日志但并不影响tomcat正常启动 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="hljs-attr">SSLEngine</span>=<span class="hljs-string">&quot;off&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        注意这里的SSLEngine默认是打开的（on）</span><br><span class="hljs-comment">        如果启用了apr作为连接器的协议</span><br><span class="hljs-comment">        但是只配置了http而没有配置https</span><br><span class="hljs-comment">        则会报错    </span><br><span class="hljs-comment">    --&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用于避免JRE内存泄漏问题 --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用户加载（服务器启动）和销毁（服务器停止）全局命名服务 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!-- 用于在Context停止时重建Executor池中的线程， 以避免ThreadLocal相关的内</span><br><span class="hljs-comment">存泄漏 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- GlobalNamingResources中定义了全局命名服务： --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Resource</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;UserDatabase&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;Container&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;User database that can be updated and saved&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">factory</span>=<span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">pathname</span>=<span class="hljs-string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span><br>              <span class="hljs-comment">&lt;!--这里定义的文件就是我们前面配置manager和host manager的用户的文件--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Service</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Service</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">Server</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-Service块"><a href="#3-2-2-Service块" class="headerlink" title="3.2.2 Service块"></a>3.2.2 Service块</h3><p> Service元素用于创建 Service 实例，默认使用 <code>org.apache.catalina.core.StandardService</code>。 默认情况下，Tomcat9中默认仅指定了Service的名称为<code>Catalina</code>。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">Service</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>Service</code> 可以内嵌的元素为 ： <code>Listener</code>、<code>Executor</code>、<code>Connector</code>、<code>Engine</code> ，详细的参数可以点击这里查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/service.html">官网</a></p><ul><li><code>Listener</code> 用于为<code>Service</code> 添加生命周期监听器</li><li><code>Executor</code> 用于配置<code>Service</code> 共享线程池</li><li><code>Connector</code> 用于配置 <code>Service</code> 包含的链接器</li><li><code>Engine</code> 用于配置<code>Service</code>中连接器（<code>connector</code>）对应的Servlet 容器引擎</li></ul><h2 id="3-3-Executor"><a href="#3-3-Executor" class="headerlink" title="3.3 Executor"></a>3.3 Executor</h2><p><code>executor</code>表示可组件之间Tomcat中共享的线程池。默认情况下，<code>Service</code>并未添加共享线程池配置。<code>executor</code>实现了tomcat中的<code>org.apache.catalina.Executor</code>接口。 如果不配置共享线程池，那么Catalina 各组件在用到线程池时会独立创建。由于<code>executor</code>是<code>Service</code>元素的嵌套元素。为了使它能够被<code>Connector</code>使用，<code>Executor</code>元素必须出现在<code>server.xml</code>中的<code>Connector</code>元素之前。下面展示的是一个简单的executor的配置，具体的配置参数可以点这里查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/executor.html">官网</a>：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Executor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tomcatThreadPool&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">namePrefix</span>=<span class="hljs-string">&quot;catalina‐exec‐&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;200&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">minSpareThreads</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxIdleTime</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">maxQueueSize</span>=<span class="hljs-string">&quot;Integer.MAX_VALUE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">prestartminSpareThreads</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">threadPriority</span>=<span class="hljs-string">&quot;5&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardThreadExecutor&quot;</span>/&gt;</span><br><br></code></pre></div></td></tr></table></figure><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>线程池名称，用于<code>Connector</code>中指定。</td></tr><tr><td>namePrefix</td><td>所创建的每个线程的名称前缀，一个单独的线程名称为 <code>namePrefix</code>+<code>threadNumber</code>。</td></tr><tr><td>daemon</td><td>是否作为守护线程（类似于守护进程），默认为true</td></tr><tr><td>maxThreads</td><td>线程池中最大线程数。</td></tr><tr><td>minSpareThreads</td><td>活跃线程数，也就是核心池线程数，这些线程不会被销毁，会一直存在。</td></tr><tr><td>maxIdleTime</td><td>线程空闲时间，超过该时间后，空闲线程会被销毁，默 认值为6000（1分钟），单位毫秒。</td></tr><tr><td>maxQueueSize</td><td>在被执行前最大线程排队数目，默认为<code>int</code>的最大值，也就是广义的无限。除非特殊情况，这个值不需要更改， 否则会有请求不会被处理的情况发生。</td></tr><tr><td>prestartminSpareThreads</td><td>启动线程池时是否启动 <code>minSpareThreads</code>部分线程。 默认值为<code>false</code>，即不启动。</td></tr><tr><td>threadPriority</td><td>线程池中线程优先级，默认值为5，值从1到10。</td></tr><tr><td>className</td><td>线程池实现类，未指定情况下，默认实现类为 <code>org.apache.catalina.core.StandardThreadExecutor</code>。 如果想使用自定义线程池首先需要实现 <code>org.apache.catalina.Executor</code>接口。</td></tr></tbody></table><h2 id="3-4-Connector"><a href="#3-4-Connector" class="headerlink" title="3.4 Connector"></a>3.4 Connector</h2><p>Connector 用于创建链接器实例。默认情况下，server.xml 配置了两个链接器，一个支 持HTTP协议，一个支持AJP协议。因此大多数情况下，我们并不需要新增链接器配置， 只是根据需要对已有链接器进行优化。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8009&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;AJP/1.3&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>port</code>为监听的端口，如果设置为0，Tomcat将会随机选择一个可用的端口号给当前Connector 使用</li><li><code>protocol</code>为Connector的协议，这里默认的是HTTP和AJP两种协议，后面可以指定对应协议的不同版本，默认情况下会检测本机是否配置了APR库，如果有并且 <code>useAprConnector</code>设置为true则会默认使用APR模式的IO协议，如果无则会使用NIO模式</li><li><code>connectionTimeOut</code> ：Connector 接收链接后的等待超时时间，单位为毫秒。 -1表示永不超时</li><li><code>redirectPort</code>：当前Connector 不支持SSL请求， 接收到了一个请求， 并且也符合 security-constraint 约束， 需要SSL传输，Catalina自动将请求重定向到指定的端口</li><li><code>executor</code> ： 指定前面提到的共享线程池的名称，也可以通过maxThreads、minSpareThreads 等属性对该connector进行单独配置对应的内部线程池</li><li><code>URIEncoding</code> : 用于指定编码URI的字符编码， Tomcat8.x和Tomcat9.x版本默认的编码为 UTF-8 , Tomcat7.x版本默认为ISO-8859-1</li></ul><h2 id="3-5-engine"><a href="#3-5-engine" class="headerlink" title="3.5 engine"></a>3.5 engine</h2><p>Engine 作为Servlet 引擎的顶级元素，内部可以嵌入： Cluster、Listener、Realm、 Valve和Host。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Engine</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span> <span class="hljs-attr">defaultHost</span>=<span class="hljs-string">&quot;localhost&quot;</span>&gt;</span><br>    ……<br><span class="hljs-tag">&lt;/<span class="hljs-name">Engine</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>name</code>：用于指定Engine 的名称， 默认为Catalina </li><li><code>defaultHost</code>：默认使用的虚拟主机名称，当客户端请求访问的host无效时，会跳转到默认的host来处理请求</li></ul><h2 id="3-6-Host"><a href="#3-6-Host" class="headerlink" title="3.6 Host"></a>3.6 Host</h2><p>Host 元素用于配置一个虚拟主机，它支持以下嵌入元素：Alias、Cluster、Listener、 Valve、Realm、Context</p><p>如果在Engine下配置Realm，那么此配置将在当前Engine下的所有Host中共享。 同样，如果在Host中配置Realm ，则在当前Host下的所有Context 中共享</p><p><strong>Context中的Realm优先级 &gt; Host的Realm优先级 &gt; Engine中的Realm优先级</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;localhost_access_log&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Alias</span>&gt;</span>www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">Alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Alias</span>&gt;</span>www.example2.com<span class="hljs-tag">&lt;/<span class="hljs-name">Alias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>上面这一段Host的配置文件中还额外添加了Valve配置来实现自定义的日志记录。其中一些参数的详细信息和配置方式可以查看<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging">官网的说明</a><br>。</p><p>The shorthand pattern <code>pattern=&quot;common&quot;</code> corresponds to the Common Log Format defined by <strong>‘%h %l %u %t “%r” %s %b’</strong>.</p></blockquote><ul><li>name: 当前Host通用的网络名称，也就是常用的域名，如果有多个域名对应同一个Host的应用，我们可以设置一个或多个Alias来实现访问</li><li>appBase：当前Host应用对应的目录，当前Host上部署的Web应用均在该目录下（相对路径和绝对路径均可），默认为webapps</li><li>unpackWARs：设置为true，Host在启动时会将appBase目录下war包解压为目 录。设置为false，Host将直接从war文件启动</li><li>autoDeploy： 控制tomcat是否在运行时定期检测并自动部署新增或变更的web应用</li></ul><h2 id="3-7-Context"><a href="#3-7-Context" class="headerlink" title="3.7 Context"></a>3.7 Context</h2><p><a href="https://tomcat.apache.org/tomcat-9.0-doc/config/context.html">Context的完整配置官网文档</a>，Context 用于配置一个Web应用，默认的配置如下。它支持的内嵌元素为：CookieProcessor，Loader，Manager，Realm，Resources，WatchedResource，JarScanner，Valve。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;myAppDeploy&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myApp&quot;</span>&gt;</span><br>    ....<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>docBase：Web应用目录或者War包的部署路径。可以是绝对路径，也可以是相对于该Context所属的Host中的<code>appBase</code>的相对路径。</li><li>path：Web应用的Context的访问路径。</li></ul><p>假设tomcat的安装目录为<code>/home/tomcat9</code>，Host为默认的localhost， 则该web应用访问的根路径为： <code>http://localhost:8080/myApp</code>，对应的部署文件所存放的路径为：<code>/home/tomcat9/webapps/myAppDeploy</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括tomcat服务器的web应用部署和管理，以及&lt;code&gt;server.xml&lt;/code&gt;的主要配置。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>LVS三种模式的工作原理</title>
    <link href="https://tinychen.com/20200427-lvs-principle-introduction/"/>
    <id>https://tinychen.com/20200427-lvs-principle-introduction/</id>
    <published>2020-04-27T02:00:00.000Z</published>
    <updated>2020-04-27T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括LVS三种模式的基本工作原理介绍和可能涉及的ARP问题原理。</p><span id="more"></span><h1 id="1、LVS简介"><a href="#1、LVS简介" class="headerlink" title="1、LVS简介"></a>1、LVS简介</h1><h2 id="1-1-LVS起源"><a href="#1-1-LVS起源" class="headerlink" title="1.1 LVS起源"></a>1.1 LVS起源</h2><p>LVS是Linux Virtual Server的简称，也叫Linux虚拟服务器, 也就是现在常说的四层负载均衡。 它是一个由章文嵩博士发起的<a href="http://www.linuxvirtualserver.org/">自由软件项目</a><br>。现在LVS已经是 Linux标准内核的一部分，在Linux2.4内核以前，使用LVS时必须要重新编译内核以支持LVS功能模块，但是从Linux2.4内核以后，已经完全内置了LVS的各个功能模块，无需给内核打任何补丁，可以直接使用LVS提供的各种功能。</p><h2 id="1-2-LVS常用名词概念"><a href="#1-2-LVS常用名词概念" class="headerlink" title="1.2 LVS常用名词概念"></a>1.2 LVS常用名词概念</h2><ul><li>loadbalance：<code>Load Balancer</code>，负载均衡器，运行LVS负责负载均衡的服务器</li><li>DS：<code>Director Server</code>，指的是前端负载均衡器节点，也就是运行LVS的服务器；</li><li>RS：<code>Real Server</code>，后端真实的工作服务器；</li><li>VIP：<code>Virtual Server IP</code>，向外部直接面向用户请求，作为用户请求的目标的IP地址，一般也是DS的外部IP地址；</li><li>DIP：<code>Director Server IP</code>，主要用于和内部主机通讯的IP地址，一般也是DS的内部IP地址；</li><li>RIP：<code>Real Server IP</code>，后端服务器的IP地址；</li><li>CIP：<code>Client IP</code>，访问客户端的IP地址；</li></ul><h1 id="2、LVS基本原理"><a href="#2、LVS基本原理" class="headerlink" title="2、LVS基本原理"></a>2、LVS基本原理</h1><p>一般说的LVS集群指的是对于客户端来说的一个大型快速可靠高可用的服务器集群。LVS的核心是在LVS director上的Linux内核中的ip_vs内核模块</p><p><img src="https://resource.tinychen.com/20200420163129.png"></p><p>对于LVS集群中的Director Server（以下简称DS）来说：</p><ul><li>LVS属于四层负载均衡，DS属于四层交换，它在网络中显示为路由器，其规则与普通路由器略有不同；</li><li>DS接受从客户端发送过来的请求，并且从后端（backend）的真实服务器RS中挑选一个用来处理请求；</li><li>RS可以提供正常互联网服务中的任何服务，因为LVS是四层转发，兼容性很好，对业务无侵入性；</li><li>RS可以在客户端无感知的情况下添加或删除到LVS集群中，因此允许后端的RS出现宕机、升级、弹性伸缩。</li></ul><p>在调度器的实现技术中，IP负载均衡技术是效率最高的。在已有的IP负载均衡技术中有通过网络地址转换（Network Address Translation）将一组服务器构成一个高性能的、高可用的虚拟服务器，我们称之为VS/NAT技术（Virtual Server via Network Address Translation），在分析VS/NAT的缺点和网络服务的非对称性的基础上，LVS提出通过IP隧道实现虚拟服务器的方法VS/TUN （Virtual Server via IP Tunneling），和通过直接路由实现虚拟服务器的方法VS/DR（Virtual Server via Direct Routing），它们可以极大地提高系统的伸缩性。所以，IPVS软件实现了这三种IP负载均衡技术，它们的大致原理如下</p><h1 id="3、LVS-NAT模式"><a href="#3、LVS-NAT模式" class="headerlink" title="3、LVS NAT模式"></a>3、LVS NAT模式</h1><p>NAT模式的主要实现原理是通过网络地址转换，LB重写请求报文的目标地址(包括IP和MAC)，根据预设的调度算法，将请求分派给后端的RS；RS的响应报文通过LB返回时，报文的源地址被重写，修改为LB的MAC和IP，再返回给客户，完成整个负载调度过程。</p><p><img src="https://resource.tinychen.com/20200415112219.png"></p><ul><li>当用户访问服务器群集提供的服务时，发往虚拟服务器IP（VIP/LB的外部IP地址）的数据包将到达LB</li><li>LB检查数据包的目标地址和端口号。如果符合在LVS的规则表中定义添加的服务，则根据调度算法从后端群集中选择一个RS，并将该连接添加到记录已建立连接的哈希表中</li><li><strong>然后，将数据包的目标地址和端口重写为所选RS的地址和端口，然后将数据包转发到RS</strong></li><li>当传入的数据包符合在LVS的规则表中定义添加的服务并且可以在哈希表中找到所选的RS时，该数据包将被重写并直接转发到所选的RS</li><li>当RS处理完请求之后，会把回复数据包返回给LB，此时<strong>LB会将数据包的源地址和端口重写为虚拟服务的源地址和端口</strong>，然后发送给客户端</li><li>连接终止或超时后，连接记录将在哈希表中删除</li></ul><p><img src="https://resource.tinychen.com/20200427092441.png"></p><blockquote><p>LVS的NAT模式需要开启LB的内核中的ip_forward功能</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></div></td></tr></table></figure></blockquote><h1 id="4、LVS-via-IP-Tunneling-TUN"><a href="#4、LVS-via-IP-Tunneling-TUN" class="headerlink" title="4、LVS  via IP Tunneling(TUN)"></a>4、LVS  via IP Tunneling(TUN)</h1><p>采用NAT技术时，虽然对于客户端来说整个服务器集群中的LVS负载均衡过程是无感的（因为对于客户端来说请求包发送的目标IP和响应包返回的源IP都没有改变），但是由于请求和响应报文都必须经过LB进行重写，当客户请求越来越多时，LB的处理能力将成为整个集群中的瓶颈。</p><p>为了解决这个问题，LB把请求报文通过IP隧道转发至RS，而RS将响应直接返回给客户端，所以LB只需要处理请求报文。由于一般网络服务应答的数据包要比请求数据包大许多，采用 VS/TUN技术后，集群系统的最大吞吐量可以大大提高。</p><p><img src="https://resource.tinychen.com/20200422090745.png"></p><ul><li>客户端请求LVS集群提供的服务，数据包发送到VIP</li><li>LB检查数据包的目的地址和端口，如果符合在LVS的规则表中定义添加的服务，则根据调度算法从后端群集中选择一个RS，并将该连接添加到记录已建立连接的哈希表中</li><li><strong>LB对请求的数据包进行封装，在VIP外面再封装一层目标RS的IP地址，然后将它发送到对应的RS上</strong></li><li>当传入的数据包符合在LVS的规则表中定义添加的服务并且可以在哈希表中找到所选的RS时，该数据包将被直接封装IP并转发到所选的RS</li><li>RS接收到数据包后，对其进行解封并且处理请求，然后将响应数据包直接发送到客户端</li><li>连接终止或超时后，连接记录将在哈希表中删除</li></ul><p><img src="https://resource.tinychen.com/20200427092756.png"></p><p>注意在这种模式下的RS可以是在物理位置上分离的服务器（如可以分布在不同地区的机房），只要拥有在任意网络中的任意真实IP即可（相对VIP而言）。此外，此时的RS需要支持IP封装协议并且需要和LB直接配置好IP隧道，同时VIP需要配置到非ARP响应的网卡设备上。</p><p><img src="https://resource.tinychen.com/20200426172658.png"></p><blockquote><p>需要LB和RS上面的服务使用的端口必须保持一致，因此在添加配置规则的时候无需指定RS的端口。</p><p>Note that the services running on the real servers must run on the same port as virtual service, so it is not necessary to specify the service port on the real servers.</p></blockquote><h1 id="5、LVS-via-Direct-Routing-DR"><a href="#5、LVS-via-Direct-Routing-DR" class="headerlink" title="5、LVS via Direct Routing(DR)"></a>5、LVS via Direct Routing(DR)</h1><p>VS/DR通过改写请求报文的MAC地址，将请求发送到RS，而RS将响应直接返回给客户。和VS/TUN技术一样，VS/DR技术可极大地提高集群系统的伸缩性。这种方法没有IP隧道的开销，对集群中的RS也没有必须支持IP隧道协议的要求，但是因为使用的是MAC地址进行二层转发，所以要求LB和RS都有一块网卡连在同一物理网段上。</p><p><img src="D:\tinychen\Desktop\20200422090907.png"></p><ul><li>客户端请求LVS集群提供的服务，数据包发送到VIP</li><li>LB检查数据包的目的地址和端口，如果符合在LVS的规则表中定义添加的服务，则根据调度算法从后端群集中选择一个RS，并将该连接添加到记录已建立连接的哈希表中</li><li><strong>LB对请求的数据包进行封装，在VIP外面再封装一层目标RS的MAC地址，然后将它发送到对应的RS上</strong></li><li>当传入的数据包符合在LVS的规则表中定义添加的服务并且可以在哈希表中找到所选的RS时，该数据包将被直接封装IP并转发到所选的RS</li><li>由于RS的本地lo接口上面绑定了VIP，且这时MAC地址是RS自身的MAC地址，所以RS接收到数据包后会处理请求，然后将响应数据包直接发送到客户端</li><li>连接终止或超时后，连接记录将在哈希表中删除</li></ul><p><img src="https://resource.tinychen.com/20200427092539.png"></p><p>由于LB只是简单地对数据包的MAC地址更改为RS的MAC地址并且将其重新发送到局域网中，所以要求LB和RS必须要在同一个局域网中，这样才能直接利用MAC来进行二层传输。</p><p><img src="https://resource.tinychen.com/20200426225346.png"></p><blockquote><p>注意DR模式也同样不支持指定RS的服务端口，因此LB和RS的端口也必须保持一致。</p></blockquote><h1 id="6、ARP-in-LVS"><a href="#6、ARP-in-LVS" class="headerlink" title="6、ARP in LVS"></a>6、ARP in LVS</h1><p>细心观察上面的DR模式，我们会发现：</p><p>LB把数据包发送给RS的时候只修改了MAC，尽管在交换机上会根据MAC直接把包发送给RS，但是RS在接受到数据包之后还是会检查数据包的目的IP和端口，此时数据包的目的IP依旧是VIP。所以这就是为什么需要在RS的网卡上面也绑定VIP的原因。（一般绑定在loopback接口）</p><p>那么当LB和RS都绑定了VIP的时候，问题又来了：</p><p>当客户端的请求数据包传到LVS集群所在的网关的时候，它是不知道LB的MAC地址的，因此需要通过ARP协议来进行查询，也就是在局域网中发送ARP请求，看谁会响应，响应的就是要发送的MAC地址。而这个时候，由于DR模式下的LB和RS都在同一个局域网中且都绑定了VIP，那么它们就都会响应这个ARP请求。这样一来客户端的数据包就不一定会发送到LB上面，也就不一定会触发整个负载均衡效果。</p><p>因此这种情况下一般都会对RS上面的网卡接口的ARP请求设置进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore<br>echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce<br>echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore<br>echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce<br></code></pre></div></td></tr></table></figure><p>我们看一下kernel的文档中对这两个参数的相关描述</p><p><strong>arp_ignore的意义</strong></p><p>arp_ignore - INTEGER</p><p>Define different modes for sending replies in response to received ARP requests that resolve local target IP addresses:</p><ul><li><p>0 - (default): reply for any local target IP address, configured on any interface</p></li><li><p>1 - reply only if the target IP address is local address configured on the incoming interface</p></li><li><p>2 - reply only if the target IP address is local address configured on the incoming interface and both with the sender’s IP address are part from same subnet on this interface</p></li><li><p>3 - do not reply for local addresses configured with scope host, only resolutions for global and link addresses are replied</p></li><li><p>4-7 - reserved</p></li><li><p>8 - do not reply for all local addresses The max value from conf/{all,interface}/arp_ignore is used when ARP request is received on the {interface}</p></li></ul><p><img src="https://resource.tinychen.com/20200505223931.png"></p><p>arp_ignore设置为0时，无论收到的ARP请求的IP是否是eth上面的IP，只要在宿主机上有网卡有对应的IP，就会发送ARP应答。</p><p><img src="https://resource.tinychen.com/20200505224231.png"></p><p>arp_ignore设置为1即意味着对应的网卡在收到了目标IP不是自己的网卡的IP的数据包的ARP请求时不会进行回应，而在DR模式中，对应的VIP是绑定在lo接口上的，而lo接口并不是物理网卡，实际上数据包都是从物理网卡eth上进来，因此这时就不会对目标IP是VIP的数据包进行ARP回应。使得访问能够顺利地到达LB上面，再从LB上面进行负载均衡。</p><p><strong>arp_annouce的意义</strong></p><p>arp_announce - INTEGER</p><p>Define different restriction levels for announcing the local source IP address from IP packets in ARP requests sent on interface:</p><ul><li>0 - (default) Use any local address, configured on any interface</li><li>1 - Try to avoid local addresses that are not in the target’s subnet for this interface. This mode is useful when target hosts reachable via this interface require the source IP address in ARP requests to be part of their logical network configured on the receiving interface. When we generate the request we will check all our subnets that include the target IP and will preserve the source address if it is from such subnet. If there is no such subnet we select source address according to the rules for level 2.</li><li>2 - Always use the best local address for this target. In this mode we ignore the source address in the IP packet and try to select local address that we prefer for talks with the target host. Such local address is selected by looking for primary IP addresses on all our subnets on the outgoing interface that include the target IP address. If no suitable local address is found we select the first local address we have on the outgoing interface or on all other interfaces, with the hope we will receive reply for our request and even sometimes no matter the source IP address we announce. The max value from conf/{all,interface}/arp_announce is used.</li></ul><p>每个机器或者交换机中都有一张ARP表，ARP表的作用就是用于记录IP地址和MAC地址的对应关系。当收到一个ARP表中没有记录的IP地址的ARP请求，就会在本机的ARP表中新增对应的IP和MAC记录；当收到一个已知IP地址（arp表中已有记录的地址）的arp请求，则会根据arp请求中的源MAC刷新自己的arp表。</p><p>如果arp_announce参数配置为0，则网卡在发送arp请求时，可能选择的源IP地址并不是该网卡自身的IP地址，这时候收到该arp请求的其他节点或者交换机上的arp表中记录的该网卡IP和MAC的对应关系就不正确。</p><p>所以DR模式下要求arp_announce参数要求配置为2。</p><ul><li>在这个模式下会忽略IP数据包中的源地址并且尝试选择能与目标地址主机通信的本机地址</li><li>首先就是查找本机所有的出口网卡上的IP地址所属的子网里面包含了目标的IP地址的IP</li><li>如果没有上述的合适的IP地址，那么就会选择出口网卡的第一个IP地址或者是在所有的网卡中最有可能能够接收到请求的IP地址</li></ul><p>由于在DR模式中RS和LB的物理网卡是处于同一个局域网中的，所以会直接解析到对应的物理网卡的MAC地址。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括LVS三种模式的基本工作原理介绍和可能涉及的ARP问题原理。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="lvs" scheme="https://tinychen.com/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库简介</title>
    <link href="https://tinychen.com/20200424-nosql-base-introduction/"/>
    <id>https://tinychen.com/20200424-nosql-base-introduction/</id>
    <published>2020-04-24T02:00:00.000Z</published>
    <updated>2020-04-24T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL基本概念简介，常见的NoSQL数据库类型介绍以及MongoDB、Memcached和Redis的简单概念以及特性介绍。</p><span id="more"></span><h1 id="1、什么是NoSQL"><a href="#1、什么是NoSQL" class="headerlink" title="1、什么是NoSQL"></a>1、什么是NoSQL</h1><p>NoSQL(Not only SQL)是对不同于传统的关系数据库的数据库管理系统的统称，即广义地来说可以把所有不是关系型数据库的数据库统称为NoSQL。</p><p>NoSQL 数据库专门构建用于特定的数据模型，并且具有灵活的架构来构建现代应用程序。NoSQL 数据库使用各种数据模型来访问和管理数据。这些类型的数据库专门针对需要大数据量、低延迟和灵活数据模型的应用程序进行了优化，这是通过放宽其他数据库的某些数据一致性限制来实现的。</p><p>数十年来，用于应用程序开发的主要数据模型是由关系数据库（如 Oracle、DB2、SQL Server、MySQL 和 PostgreSQL）使用的关系数据模型。直到 21 世纪中后期，才开始大规模采用和使用其他数据模型。为了对这些新类别的数据库和数据模型进行区分和分类，创造了术语“NoSQL”。通常术语“NoSQL”与“非关系”可互换使用。</p><h2 id="1-1-NoSQL的常见类型"><a href="#1-1-NoSQL的常见类型" class="headerlink" title="1.1 NoSQL的常见类型"></a>1.1 NoSQL的常见类型</h2><h3 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h3><p>键值：键值数据库是高度可分区的，并且允许以其他类型的数据库无法实现的规模进行水平扩展。诸如游戏、广告技术和 IoT 等使用案例本身特别适合键值数据模型。Amazon DynamoDB 旨在为任意规模的工作负载提供一致且低于 10 毫秒的延迟。这种一致的性能是为何使用 Snapchat Stories 功能的主要原因，该功能包含移至 DynamoDB 的 Snapchat 的最大存储写入工作负载。</p><p>键值数据库是一种非关系数据库，它使用简单的键值方法来存储数据。键值数据库将数据存储为键值对集合，其中键作为唯一标识符。键和值都可以是从简单对象到复杂复合对象的任何内容。键值数据库是高度可分区的，并且允许以其他类型的数据库无法实现的规模进行水平扩展。 </p><h3 id="内存数据库"><a href="#内存数据库" class="headerlink" title="内存数据库"></a>内存数据库</h3><p>内存：游戏和广告技术应用程序具有排行榜、会话存储和实时分析等使用案例，它们需要微秒响应时间并且可能随时出现大规模的流量高峰。</p><h3 id="文档数据库"><a href="#文档数据库" class="headerlink" title="文档数据库"></a>文档数据库</h3><p>文档：在应用程序代码中，数据通常表示为对象或 JSON 文档，因为对开发人员而言它是高效和直观的数据模型。文档数据库让开发人员可以使用他们在其应用程序代码中使用的相同文档模型格式，更轻松地在数据库中存储和查询数据。文档和文档数据库的灵活、半结构化和层级性质允许它们随应用程序的需求而变化。文档模型可以很好地与目录、用户配置文件和内容管理系统配合使用，其中每个文档都是唯一的，并会随时间而变化。</p><p>文档数据库是一种非关系数据库，旨在将数据作为类 JSON 文档存储和查询。文档数据库让开发人员可以使用他们在其应用程序代码中使用的相同文档模型格式，更轻松地在数据库中存储和查询数据。文档和文档数据库的灵活、半结构化和层级性质允许它们随应用程序的需求而变化。文档模型可以很好地与目录、用户配置文件和内容管理系统等使用案例配合使用，其中每个文档都是唯一的，并会随时间而变化。文档数据库支持灵活的索引、强大的临时查询和文档集合分析。</p><h3 id="图形数据库"><a href="#图形数据库" class="headerlink" title="图形数据库"></a>图形数据库</h3><p>图形：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括社交网络、推荐引擎、欺诈检测和知识图形。热门图形数据库包括 Neo4j 和 Giraph。图形数据库专门用于存储和导航关系。关系是图形数据库中的一等公民，图形数据库的大部分价值都源自于这些关系。图形数据库使用节点来存储数据实体，并使用边缘来存储实体之间的关系。边缘始终有一个开始节点、结束节点、类型和方向，并且边缘可以描述父子关系、操作、所有权等。一个节点可以拥有的关系的数量和类型没有限制。</p><p>图形数据库中的图形可依据具体的边缘类型进行遍历，或者也可对整个图形进行遍历。在图形数据库中，遍历联结或关系非常快，因为节点之间的关系不是在查询时计算的，而是留存在数据库中。在社交网络、推荐引擎和欺诈检测等使用案例中，您需要在数据之间创建关系并快速查询这些关系，此时，图形数据库更具优势。</p><h3 id="搜索数据库"><a href="#搜索数据库" class="headerlink" title="搜索数据库"></a>搜索数据库</h3><p>搜索：许多应用程序输出日志以帮助开发人员解决问题。搜索引擎数据库是一种非关系数据库，专用于数据内容的搜索。搜索引擎数据库使用索引对数据之间的相似特征进行分类，并增强搜索功能。搜索引擎数据库经过优化，可处理可能是长数据，半结构数据或非结构数据的数据，并且它们通常提供专门的方法，例如全文搜索，复杂的搜索表达式和搜索结果排名。</p><h2 id="1-2-关系型数据库和NoSQL"><a href="#1-2-关系型数据库和NoSQL" class="headerlink" title="1.2 关系型数据库和NoSQL"></a>1.2 关系型数据库和NoSQL</h2><table><thead><tr><th></th><th><strong>关系数据库</strong></th><th><strong>NoSQL 数据库</strong></th></tr></thead><tbody><tr><td><strong>最佳工作负载</strong></td><td>关系数据库专为事务性和高度一致的联机事务处理 (OLTP) 应用程序而设计，并且适用于联机分析处理 (OLAP)。</td><td>NoSQL 数据库适用于包括低延迟应用程序在内的多种数据访问模式。NoSQL 搜索数据库设计用于对半结构化数据进行分析。</td></tr><tr><td><strong>数据模型</strong></td><td>关系模型可将数据标准化为由行和列组成的表。采用一种架构来严格定义表、行、列、索引、各个表之间的关系及其他数据库元素。数据库在表之间的关系中强制实施引用完整性。</td><td>NoSQL 数据库提供了各种数据模型，如键值、文档和图形，这些模型针对性能和规模进行了优化。</td></tr><tr><td><strong>ACID 属性</strong></td><td>关系数据库提供原子性、一致性、隔离性和持久性 (ACID) 属性： 原子性要求事务完全执行或根本不执行。一致性要求事务提交之后，数据必须符合数据库架构。隔离性要求并发事务彼此分开执行。持久性要求能够从意外系统故障或断电情况中恢复到上一个已知状态。</td><td>NoSQL 数据库通常通过放宽关系数据库的一些 ACID 属性来进行权衡，以获得可以水平扩展的更灵活的数据模型。这将使 NoSQL 数据库成为高吞吐量、低延迟使用案例的绝佳选择，这些使用案例需要水平扩展超出单个实例的限制。</td></tr><tr><td><strong>性能</strong></td><td>性能通常取决于磁盘子系统。要获得最佳性能，通常需要优化查询、索引和表结构。</td><td>性能通常由底层硬件集群大小、网络延迟以及调用应用程序来决定。</td></tr><tr><td><strong>扩展</strong></td><td>关系数据库通常通过增加硬件的计算能力进行纵向扩展或通过为只读工作负载添加副本进行横向扩展。</td><td>NoSQL 数据库通常是可分区的，因为访问模式可以通过使用分布式体系结构进行横向扩展来提高吞吐量，从而以接近无限的规模提供一致的性能。</td></tr><tr><td><strong>API</strong></td><td>存储和检索数据的请求通过使用符合结构化查询语言 (SQL) 的查询来传达。这些查询由关系数据库解析和执行。</td><td>借助基于对象的 API，应用开发人员可以轻松存储和检索数据结构。通过分区键，应用程序可以查找键值对、列集或包含序列化应用程序对象和属性的半结构化文档。</td></tr></tbody></table><h2 id="1-3-分布式系统的CAP原理"><a href="#1-3-分布式系统的CAP原理" class="headerlink" title="1.3 分布式系统的CAP原理"></a>1.3 分布式系统的CAP原理</h2><p>在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ul><li>一致性（Consistency） （等同于所有节点访问同一份最新的数据副本）</li><li>可用性（Availability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）</li><li>分区容错性（Partition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。）</li></ul><p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p><h2 id="1-3-NoSQL的BASE原则"><a href="#1-3-NoSQL的BASE原则" class="headerlink" title="1.3 NoSQL的BASE原则"></a>1.3 NoSQL的BASE原则</h2><p>BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。BASE是NoSQL数据库通常对可用性及一致性的弱要求原则:</p><ul><li>Basically Availble –基本可用</li><li>Soft-state –软状态/柔性事务。 “Soft state” 可以理解为”无连接”的, 而 “Hard state” 是”面向连接”的</li><li>Eventual Consistency – 最终一致性， 也是是 ACID 的最终目的。</li></ul><p>BASE模型是传统ACID模型的反面，不同于ACID，BASE强调牺牲高一致性，从而获得可用性，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p><h1 id="2、MongoDB"><a href="#2、MongoDB" class="headerlink" title="2、MongoDB"></a>2、MongoDB</h1><p>MongoDB 是由C++语言编写的基于分布式文件存储的开源数据库系统（document database）。MongoDB数据库中的记录称为文档（document），是一种由字段和值（field and value）成对组成的key-value键值型数据结构，格式上和常用的json格式类似，字段的值可以包括其他文档，数组和文档数组。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  name: <span class="hljs-string">&quot;sue&quot;</span>,<br>  age: <span class="hljs-number">26</span>,<br>  status: <span class="hljs-string">&quot;A&quot;</span>,<br>  groups: [<span class="hljs-string">&quot;news&quot;</span>,<span class="hljs-string">&quot;sports&quot;</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用文档的主要优势在于可以支持许多编程语言的原生数据类型，避免不必要的join操作以及动态的schema模式可以流畅地支持多态类型。</p><blockquote><p><a href="https://stackoverflow.com/questions/36946572/meaning-of-dynamic-schema-supports-fluent-polymorphism-in-mongodb-doc">Dynamic schema supports fluent polymorphism</a>。</p></blockquote><p>MongoDB将文档存储到集合（collections）中，集合与关系型数据库中的数据表类似。除了集合之外，MongoDB还支持只读视图（3.4）和按需实例化视图（4.2）。</p><p>除了最主要的文档特性外，MongoDB还具有以下特性：</p><h2 id="2-1-High-Performance"><a href="#2-1-High-Performance" class="headerlink" title="2.1 High Performance"></a>2.1 High Performance</h2><p>MongoDB提供了高性能的数据持久化存储功能，主要是</p><ul><li>通过支持嵌入式的数据模型来减少数据库系统的I/O操作</li><li>索引支持更快的查询，并且可以包括来自嵌入式文档和数组的键</li></ul><h2 id="2-2-Rich-Query-Language"><a href="#2-2-Rich-Query-Language" class="headerlink" title="2.2 Rich Query Language"></a>2.2 Rich Query Language</h2><p>MongoDB提供了丰富的查询语句用于支持CRUD等操作，除了常规的查询语句还支持如</p><p>Data Aggregation（数据聚合）、Text Search 、 Geospatial Queries和mapping等操作</p><ul><li>聚合操作（Data Aggregation）处理数据记录并返回计算结果。聚合操作将来自多个文档的值组合在一起，并且可以对分组的数据执行各种操作以返回单个结果。MongoDB提供了三种执行聚合的方式：聚合管道，map-reduce函数和单一目的聚合方法。</li><li>MongoDB支持使用文本索引和<code>$text</code>运算符执行字符串内容的文本搜索的查询操作。</li><li>MongoDB还支持地理空间位置的查询操作</li></ul><h2 id="2-3-High-Availability"><a href="#2-3-High-Availability" class="headerlink" title="2.3 High Availability"></a>2.3 High Availability</h2><p>MongoDB的复制工具（称为副本集 ）提供自动故障转移和数据冗余功能。副本集是一组维护相同数据集的MongoDB服务器，可提供冗余并提高数据可用性.</p><h2 id="2-4-Horizontal-Scalability"><a href="#2-4-Horizontal-Scalability" class="headerlink" title="2.4 Horizontal Scalability"></a>2.4 Horizontal Scalability</h2><p>MongoDB的核心功能之一就是提供水平扩展能力。</p><ul><li>分片将数据分布在一组计算机上。 </li><li>从3.4开始，MongoDB支持基于分片键创建数据区域。在均衡的集群中，MongoDB仅将区域覆盖的读写定向到区域内的那些分片。</li></ul><h2 id="2-5-Support-for-Multiple-Storage-Engines"><a href="#2-5-Support-for-Multiple-Storage-Engines" class="headerlink" title="2.5 Support for Multiple Storage Engines"></a>2.5 Support for Multiple Storage Engines</h2><p>MongoDB支持多种存储引擎，如<code>WiredTiger</code>和<code>In-Memory</code> 。此外，MongoDB还提供了存储引擎的API插件供第三方开发者开发存储引擎。</p><h1 id="3、Memcached"><a href="#3、Memcached" class="headerlink" title="3、Memcached"></a>3、Memcached</h1><p>自由和开放源代码，高性能，分布式内存对象缓存系统，本质上是通用的，但旨在通过减轻数据库负载来加速动态Web应用程序。Memcached是一个内存中的键值存储，用于存储来自数据库调用，API调用或页面渲染结果的任意数据（字符串，对象）。Memcached简单但功能强大。其简单的设计可促进快速部署，易于开发，并解决了大型数据缓存面临的许多问题。它的API适用于大多数流行语言。Memcached对其特点介绍主要有以下几点：</p><h2 id="3-1-Simple-Key-Value-Store"><a href="#3-1-Simple-Key-Value-Store" class="headerlink" title="3.1 Simple Key/Value Store"></a>3.1 Simple Key/Value Store</h2><p>Memcached的服务端并不在乎用户的数据具体是怎么样的，每一个项目/Item（相当于MySQL中的行）是由key、过期时间、标记/flags（可选）和原始数据组成。Memcached并不知道数据的数据结构，因此用户端必须要上传预序列化的数据。</p><h2 id="3-2-Logic-Half-in-Client-Half-in-Server"><a href="#3-2-Logic-Half-in-Client-Half-in-Server" class="headerlink" title="3.2 Logic Half in Client, Half in Server"></a>3.2 Logic Half in Client, Half in Server</h2><p>一个完整的memcached过程实现是需要客户端和服务端共同完成的，也就是说有部分操作在客户端完成而另一部分在服务端完成。客户端负责选择哪一个服务器来进行读写和无法与服务器建立通信连接的时候该如何操作；服务器负责存储和拉取item，同时还负责内存的释放和复用等工作。</p><h2 id="3-3-Servers-are-Disconnected-From-Each-Other"><a href="#3-3-Servers-are-Disconnected-From-Each-Other" class="headerlink" title="3.3 Servers are Disconnected From Each Other"></a>3.3 Servers are Disconnected From Each Other</h2><p>Memcached集群之间的服务器互相并不知道对方的存在，他们不交流、不同步、不广播、不复制，往集群中添加服务器就可以直接增加整个集群的可用内存。当客户端删除或者覆盖了记录该客户端的缓存数据的服务器的时候，缓存就会失效。</p><h2 id="3-4-O-1"><a href="#3-4-O-1" class="headerlink" title="3.4 O(1)"></a>3.4 O(1)</h2><p>所有的命令实现起来都很快并且对加锁十分友好，这为所有用例提供了近乎确定的查询速度。官方表示对于比较慢的机器每次查询都在1ms以下，而高端服务器可以实现每秒百万的吞吐。</p><blockquote><p>Queries on slow machines should run in well under 1ms. High end servers can serve millions of keys per second in throughput.</p></blockquote><h2 id="3-5-Forgetting-is-a-Feature"><a href="#3-5-Forgetting-is-a-Feature" class="headerlink" title="3.5 Forgetting is a Feature"></a>3.5 Forgetting is a Feature</h2><p>Memcached默认使用LRU算法和懒惰回收机制。items会在指定的时间后失效，但不是失效后就马上把item从内存中删除，而是当内存不足需要新的内存来建立item时再去查找已经过期的item将其删除并释放内存。当没有过期的item且当内存不足时，Memcached会清除内存中尚未过期但是很久没有被使用的数据来释放内存从而保留那些被频繁访问的数据</p><h2 id="3-6-Cache-Invalidation"><a href="#3-6-Cache-Invalidation" class="headerlink" title="3.6 Cache Invalidation"></a>3.6 Cache Invalidation</h2><p>Memcached使用哈希算法，因此客户端不是直接向所有可用主机广播更改，而是根据哈希表的记录直接访问保存有待失效数据的服务器。</p><h1 id="4、Redis"><a href="#4、Redis" class="headerlink" title="4、Redis"></a>4、Redis</h1><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p><p>Redis是一个基于BSD开源协议的，内存中的数据结构存储系统，可以用于数据库、缓存和消息中间件。它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的数据持久化（persistence）， 并通过 Redis哨兵（Sentinel）和redis集群的自动分区提供高可用性。</p><h2 id="4-1-Redis-vs-Memcached"><a href="#4-1-Redis-vs-Memcached" class="headerlink" title="4.1 Redis vs Memcached"></a>4.1 Redis vs Memcached</h2><p>缓存中间件 Memcache 和 Redis 的区别</p><table><thead><tr><th></th><th>Memcached</th><th>Redis</th></tr></thead><tbody><tr><td>数据类型</td><td>支持简单数据类型</td><td>数据类型丰富</td></tr><tr><td>数据持久化存储</td><td>N</td><td>Y</td></tr><tr><td>主从</td><td>N</td><td>Y</td></tr><tr><td>分片</td><td>N</td><td>Y</td></tr></tbody></table><h2 id="4-2-Redis的特点"><a href="#4-2-Redis的特点" class="headerlink" title="4.2 Redis的特点"></a>4.2 Redis的特点</h2><ul><li><p>redis 完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高。</p></li><li><p>redis 使用单进程单线程模型的（K，V）数据库，将数据存储在内存中，存取均不会受到硬盘 IO 的限制，因此其执行速度极快。</p><p>另外单线程也能处理高并发请求，还可以避免频繁上下文切换和锁的竞争，如果想要多核运行也可以启动多个实例。</p><p>当然了，单线程也会有它的缺点，也是Redis的噩梦：<strong>阻塞。</strong>如果执行一个命令过长，那么会造成其他命令的阻塞，对于Redis是十分致命的，所以Redis是面向快速执行场景的数据库。</p></li><li><p>数据结构简单，对数据操作也简单，Redis 不使用表，不会强制用户对各个关系进行关联，不会有复杂的关系限制，其存储结构就是键值对，类似于 HashMap，HashMap 最大的优点就是存取的时间复杂度为 O(1)。</p></li><li><p>redis 使用I/O 多路复用模型，属于非阻塞 IO。Redis使用epoll作为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll的read、write、close等都转换成事件，不在网络I/O上浪费过多的时间。实现对多个FD读写的监控，提高性能。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;NoSQL基本概念简介，常见的NoSQL数据库类型介绍以及MongoDB、Memcached和Redis的简单概念以及特性介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>DNS原理篇01-DNS原理介绍</title>
    <link href="https://tinychen.com/20200417-dns-01-dns-theory-01-dns-introduction/"/>
    <id>https://tinychen.com/20200417-dns-01-dns-theory-01-dns-introduction/</id>
    <published>2020-04-17T02:00:00.000Z</published>
    <updated>2020-04-17T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括DNS的简单介绍，DNS查询的原理介绍和DNS负载均衡应用的简单介绍。</p><span id="more"></span><h1 id="1、DNS简介"><a href="#1、DNS简介" class="headerlink" title="1、DNS简介"></a>1、DNS简介</h1><h2 id="1-1-什么是DNS"><a href="#1-1-什么是DNS" class="headerlink" title="1.1 什么是DNS"></a>1.1 什么是DNS</h2><p>首先我们来了解DNS是什么。下面引用维基百科的解释：</p><blockquote><p>域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p></blockquote><p>我们知道计算机网络中的通信实际上是需要通过IP来进行的，但是让使用者记住那么多复杂无规律的IP地址是不现实的，因此人们发明了域名，使用者只需要记住域名，然后通过域名即可访问对应的网站，而DNS就是负责将我们平时使用的域名如163.com、google.com等解析成对应的IP地址，然后让客户端和该IP地址进行通信的这样一个系统。</p><p>上面的维基百科说DNS是一个分布式的数据库其实也是合理的，因为DNS主要的功能就是存储着各类域名和对应的IP地址，DNS请求可以理解成查询数据库的操作。而因为DNS需要给全球所有上网的用户频繁使用，因此它必须是分布式（地域广）、高并发（请求多）、高可用（重要性高）的一个系统。</p><h2 id="1-2-DNS解析类型"><a href="#1-2-DNS解析类型" class="headerlink" title="1.2 DNS解析类型"></a>1.2 DNS解析类型</h2><p>DNS的解析类型其实也有很多种，我们比较常接触到的就是A类和CNAME，当然现在IPv6开始普及了也就有AAAA类（相当于IPv6版的A类）。</p><ul><li><p>A-将域名指向一个IPV4地址</p><p>比如将<code>wikipedia.org</code>这个域名解析到<code>103.102.166.224</code>这个IPv4地址；</p></li><li><p>CNAME-将域名指向另外一个域名</p><p>比如将<code>wikipedia.org</code>这个域名解析到<code>wikipedia.org.cn</code></p></li><li><p>AAAA-将域名指向一个IPV6地址</p><p>比如将<code>wikipedia.org</code>这个域名解析到<code>2001:df2:e500:ed1a::1</code>这个IPv6地址；</p></li><li><p>NS-将子域名指定其他DNS服务器解析</p><p>比如你在阿里云购买的域名，但是想要使用网易云来提供DNS解析服务，那就添加一个NS记录，将记录值设置成网易云的DNS服务器域名；</p></li><li><p>MX-将域名指向邮件服务器地址</p><p>设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为<code>mail exchanger</code>，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给<code>wikipediauser@wikipedia.org</code>时，系统将对<code>wikipedia.org</code>进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。</p></li><li><p>TXT-文本长度限制一般为255，通常做SPF记录（反垃圾邮件）</p><p>SPF是 <code>Sender Policy Framework</code> 的缩写，一种以IP地址认证电子邮件发件人身份的技术。接收邮件方会首先检查域名的SPF记录，来确定发件人的IP地址是否被包含在SPF记录里面，如果在，就认为是一封正确的邮件，否则会认为是一封伪造的邮件进行退回。</p></li><li><p>CAA-CA证书颁发机构授权校验</p><p>CAA<code>(Certificate Authority Authorization)</code>，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。</p><p>域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。</p></li></ul><p>其他的还有诸如SRV、显性/隐性URL等解析，具体可以查看对应的域名供应商提供的DNS解析服务说明文档。</p><h1 id="2、DNS查询过程"><a href="#2、DNS查询过程" class="headerlink" title="2、DNS查询过程"></a>2、DNS查询过程</h1><h2 id="2-1-DNS服务器类型"><a href="#2-1-DNS服务器类型" class="headerlink" title="2.1 DNS服务器类型"></a>2.1 DNS服务器类型</h2><p>DNS服务器一般分三种，根DNS服务器，顶级DNS服务器，权威DNS服务器。</p><ul><li><p><strong>根DNS服务器</strong>是最高层次的DNS服务器，全球共有13套，它并不提供直接的DNS域名解析服务，而是负责将对应的顶级域名DNS服务器的地址返回给查询的客户端</p></li><li><p><strong>顶级域名</strong>（<code>top level domain</code>，简写为 TLD），即对应图中第二层的<strong>顶级DNS服务器</strong>负责的顶级域名，同样的，顶级域名服务器也不提供直接的DNS域名解析服务，而是负责将对应的权威域名服务器返回给查询的客户端</p></li><li><p><strong>权威DNS服务器</strong>为图中的第三层，这时候权威DNS服务器会返回对应域名的IP地址，客户端拿到了IP地址就可以进行访问了。</p></li></ul><p><img src="https://resource.tinychen.com/20200417143001.png"></p><p>那么图中的第四层<code>example.wikipedia.org</code>为<code>wikipedia.org</code>的子域名，也可以叫做二级域名，第五层<code>www.example.wikipedia.org</code>是第四层<code>example.wikipedia.org</code>的子域名，也可以叫做三级域名，以此类推。</p><h2 id="2-2-DNS请求过程"><a href="#2-2-DNS请求过程" class="headerlink" title="2.2 DNS请求过程"></a>2.2 DNS请求过程</h2><p>接下来我们以访问维基百科(<code>wikipedia.org</code>)为例，对应下图进行解析：</p><p><img src="https://resource.tinychen.com/20200417112013.png"></p><ol><li>首先客户端发送请求需要访问<code>wikipedia.org</code>，然后第一步是访问本地的DNS缓存；</li><li>本地的DNS缓存会读取系统下对应的<code>hosts</code>文件，也就是Linux下的<code>/etc/hosts</code>或Windows下的<code>C:\Windows\System32\drivers\etc\hsots</code>，如果这里面定义了<code>wikipedia.org</code>这个域名对应的IP地址，则直接访问这个IP，就没有后面什么事儿了；</li><li>如果本地的缓存文件没有记录，那么客户端就会发送请求到<code>本地DNS服务器</code>，一般来说会是ISP默认提供的DNS服务器，当然我们也可以手动指定成第三方的DNS服务器。本地DNS服务器查询服务器内的记录，如果有则直接返回记录给客户端；</li><li>如果<code>本地DNS服务器</code>没有记录，那么就会访问<code>根域名服务器</code>，询问<code>wikipedia.org</code>对应的顶级域名服务器的地址；</li><li><code>根域名服务器</code>根据请求判断出是访问<code>.org</code>域名的请求，就会给客户端返回<code>.org</code>的<code>顶级域名服务器</code>地址；</li><li><code>本地DNS服务器</code>获取到地址之后，发送请求给<code>.org</code>的<code>顶级域名服务器</code>，询问<code>wikipedia.org</code>对应的权威域名服务器的地址；</li><li><code>.org</code>的<code>顶级域名服务器</code>给客户端返回了<code>wikipedia.org</code>的<code>权威域名服务器</code>的地址；</li><li><code>本地DNS服务器</code>获取到地址之后，发送请求给<code>wikipedia.org</code>的<code>权威域名服务器</code>，询问<code>wikipedia.org</code>的IP地址；</li><li><code>wikipedia.org</code>的<code>权威域名服务器</code>给<code>本地DNS服务器</code>返回了<code>wikipedia.org</code>的IP地址；</li><li><code>本地DNS服务器</code>给客户端返回了<code>wikipedia.org</code>的IP地址，客户端和这个IP建立连接，开始传输数据，该次DNS请求结束。</li></ol><p>实际上上面的是最长的DNS查询情况，因为一般情况下我们的DNS本地服务器就会存着对应的DNS缓存记录，这样在DNS查询的时候直接就可以返回本地的缓存给客户端，从而避免了后面的递归查询。</p><p>那么要是我们修改了域名的DNS解析记录呢？比如<code>wikipedia.org</code>的IP地址从<code>103.102.166.224</code>修改成<code>103.102.166.225</code>，这就涉及到解析生效的时间问题，也就是所谓的TTL，解析生效时间取决于本地DNS缓存的解析记录的TTL到期时间，一般默认为10分钟。例如解析记录设置的TTL值为 10 分钟，则理论上全球解析生效时间需要10分钟；解析记录设置的TTL值为60秒，则理论上全球解析生效时间需要60秒。</p><h1 id="3、DNS的用途"><a href="#3、DNS的用途" class="headerlink" title="3、DNS的用途"></a>3、DNS的用途</h1><p>我们已经知道DNS最基本也是最重要的作用就是进行域名和IP地址之间对应关系的记录和查询，除此之外，DNS还可以用作负载均衡。</p><p>首先我们要知道，域名和IP并不是一对一的关系，而是多对多的关系。也就是说一个IP可以绑定多个域名，一个域名也可以解析到多个IP。有了这个特性，我们就可以利用DNS来实现负载均衡。</p><blockquote><p>注意负载均衡并非只有DNS这一种方式</p></blockquote><h2 id="3-1-内部负载均衡（SLB）"><a href="#3-1-内部负载均衡（SLB）" class="headerlink" title="3.1 内部负载均衡（SLB）"></a>3.1 内部负载均衡（SLB）</h2><p>例如，一个应用要访问数据库，在这个应用里面应该配置这个数据库的IP地址，还是应该配置这个数据库的域名呢？显然应该配置域名，因为一旦这个数据库，因为某种原因，换到了另外一台机器上，而如果有多个应用都配置了这台数据库的话，一换IP地址，就需要将这些应用全部修改一遍。但是如果配置了域名，则只要在DNS服务器里，将域名映射为新的IP地址，这个工作就完成了，大大简化了运维。</p><p>在这个基础上，我们可以再进一步。例如，某个应用要访问另外一个应用，如果配置另外一个应用的IP地址，那么这个访问就是一对一的。但是当被访问的应用撑不住的时候，我们其实可以部署多个。但是，访问它的应用，如何在多个之间进行负载均衡？只要配置成为域名就可以了。在域名解析的时候，我们只要配置策略，这次返回第一个IP，下次返回第二个IP，就可以实现负载均衡了。</p><h2 id="3-2-全局负载均衡（GSLB）"><a href="#3-2-全局负载均衡（GSLB）" class="headerlink" title="3.2 全局负载均衡（GSLB）"></a>3.2 全局负载均衡（GSLB）</h2><p><img src="https://resource.tinychen.com/20200417153535.png"></p><p>还是刚刚上面的那个图，我们加入了GSLB1和GSLB2在权威域名服务器后面，权威服务器之前的访问过程和上面提到的DNS请求过程一样，这里我们还是以访问维基百科(<code>wikipedia.org</code>)为例。</p><ul><li>我们先对维基百科(<code>wikipedia.org</code>)做一个CNAME解析，让它解析到<code>glsb.wikipedia.org</code>这个GSLB1服务器；</li><li>客户端请求到权威域名服务器之后，获得了一个<code>glsb.wikipedia.org</code>的地址，然后客户端就访问<code>glsb.wikipedia.org</code>这个服务器，注意这个时候<code>glsb.wikipedia.org</code>应该是充当了权威域名服务器的角色；</li><li><code>glsb.wikipedia.org</code>接受到请求之后，可以根据来源的IP判断是哪个地区的请求，假设是中国，那就给它返回一个<code>cn.glsb.wikipedia.org</code>的GSLB2的服务器地址；</li><li>GSLB2根据接受到的请求，返回一个离客户端最近服务器的IP地址，从而实现了GSLB的效果。</li></ul><p>GSLB和我们常说的LVS、NGINX负载均衡等方式的一个比较大的不同就是在覆盖范围特别广的时候使用效果会更好一些。比如在中国的服务器业务，要扩展到美国，假设业务的访问量翻倍，要增加一倍的机器，可以选择在原有的集群上增加一倍的机器，或者在美国再部署一套同样的服务器，然后配置DNS的GSLB服务器来实现。显然后者的效果会更好，因为美国的用户访问中国的服务器在速度上肯定是没有访问美国的服务器快。</p><blockquote><p>这里只是打一个不太恰当的比喻，实际上访问量翻倍肯定没这么简单。但是在这种跨地域的负载均衡策略上，DNS的GSLB是一个不错的选择。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括DNS的简单介绍，DNS查询的原理介绍和DNS负载均衡应用的简单介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="dns" scheme="https://tinychen.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>iptables的四表五链与NAT工作原理</title>
    <link href="https://tinychen.com/20200414-iptables-principle-introduction/"/>
    <id>https://tinychen.com/20200414-iptables-principle-introduction/</id>
    <published>2020-04-14T02:00:00.000Z</published>
    <updated>2020-04-14T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了iptables的基本工作原理和四表五链等基本概念以及NAT的工作原理。</p><span id="more"></span><h1 id="1、iptables简介"><a href="#1、iptables简介" class="headerlink" title="1、iptables简介"></a>1、iptables简介</h1><p>我们先来看一下<a href="https://www.netfilter.org/projects/iptables/index.html">netfilter官网</a>对iptables的描述：</p><blockquote><p><strong>iptables</strong> is the userspace command line program used to configure the Linux 2.4.x and later packet filtering ruleset. It is targeted towards system administrators.</p><p>Since Network Address Translation is also configured from the packet filter ruleset, <strong>iptables</strong> is used for this, too.</p><p>The <strong>iptables</strong> package also includes <strong>ip6tables</strong>. <strong>ip6tables</strong> is used for configuring the IPv6 packet filter.</p></blockquote><p>也就是说<code>iptables</code>实际上只是位于用户空间的一个面向系统管理员的Linux防火墙的管理工具而已，而真正实现防火墙功能的是<code>netfilter</code>，它是Linux内核中实现包过滤的内核模块，<code>iptables</code>对应在内核中的模块应该是<code>ip_tables</code>，我们查看系统内核中<code>ip_tables</code>的信息的时候可以看到<code>ip_tables.ko</code>这个模块是在<code>netfilter</code>这个目录下的。</p><p><img src="https://resource.tinychen.com/20200420164507.png"></p><p>实际上除了<code>iptables</code>还有如<code>nftables</code>、<code>firewalld</code>等防火墙工具都是在用户空间（用户层）对相应的内核空间中对应的<code>netfilter</code>相关的模块进行操作的工具。</p><h1 id="2、iptables的四表五链"><a href="#2、iptables的四表五链" class="headerlink" title="2、iptables的四表五链"></a>2、iptables的四表五链</h1><h2 id="2-1-iptables流程图"><a href="#2-1-iptables流程图" class="headerlink" title="2.1 iptables流程图"></a>2.1 iptables流程图</h2><p>首先我们来看一下下面的这张图了解一下iptables中的表和链的概念。图中使用箭头展示了用户访问使用了iptables的机器的过程，其中按照箭头的顺序我们就可以将其梳理为一条大的带有分支的链条，在每个需要进行操作的模块处都标有名称和相应的括号，括号内的就是iptables的四表，而每个模块都可以视为一个链。</p><p><img src="https://resource.tinychen.com/20200420174840.png"></p><blockquote><p>CentOS7中的input链中还有nat表，但是在CentOS6中并没有。</p></blockquote><p>之所以叫做链就是因为在访问该链的时候会按照每个链对应的表依次进行查询匹配执行的操作，如<code>PREROUTING</code>链对应的就是(<code>raw</code>-&gt;<code>mangle</code>-&gt;<code>nat</code>)，每个表按照优先级顺序进行连接，每个表中还可能有多个规则，因此最后看起来就像链一样，因此称为链。而<code>iptables</code>的表中存储的就是对应的规则和需要执行的操作，这里以路由器为例查看其中<code>iptables</code>的<code>filter</code>表：</p><p><img src="https://resource.tinychen.com/20200421101939.png"></p><p>注意每一个链对应的表都是不完全一样的，表和链之间是多对多的对应关系。但是不管一个链对应多少个表，它的表都是按照下面的优先顺序来进行查找匹配的。</p><p><strong>表的处理优先级：<code>raw</code>&gt;<code>mangle</code>&gt;<code>nat</code>&gt;<code>filter</code>。</strong></p><h2 id="2-2-四表"><a href="#2-2-四表" class="headerlink" title="2.2 四表"></a>2.2 四表</h2><p><code>iptables</code>的四个表<code>iptable_filter</code>，<code>iptable_mangle</code>，<code>iptable_nat</code>，<code>iptable_raw</code>，默认表是<code>filter</code>（没有指定表的时候就是filter表）。</p><ul><li><p><code>filter 表</code>：用来对数据包进行过滤，具体的规则要求决定如何处理一个数据包。</p><p>对应的内核模块为：<code>iptable_filter</code>，其表内包括三个链：<code>input</code>、<code>forward</code>、<code>output</code>;</p></li><li><p><code>nat 表</code>：nat 全称：network address translation 网络地址转换，主要用来修改数据包的 IP 地址、端口号信息。</p><p>对应的内核模块为：<code>iptable_nat</code>，其表内包括三个链：<code>prerouting</code>、<code>postrouting</code>、<code>output</code>;</p></li><li><p><code>mangle 表</code>：主要用来修改数据包的服务类型，生存周期，为数据包设置标记，实现流量整形、策略路由等。</p><p>对应的内核模块为：<code>iptable_mangle</code>，其表内包括五个链：<code>prerouting</code>、<code>postrouting</code>、<code>input</code>、<code>output</code>、<code>forward</code>;</p></li><li><p><code>raw 表</code>：主要用来决定是否对数据包进行状态跟踪。</p><p>对应的内核模块为：<code>iptable_raw</code>，其表内包括两个链：<code>output</code>、<code>prerouting</code>;</p></li></ul><blockquote><p>raw表只使用在<code>PREROUTING</code>链和<code>OUTPUT</code>链上,因为优先级最高，从而可以对收到的数据包在系统进行ip_conntrack（连接跟踪）前进行处理。一但用户使用了raw表,在某个链上，raw表处理完后，将跳过NAT表和ip_conntrack处理，即不再做地址转换和数据包的链接跟踪处理了。RAW表可以应用在那些不需要做nat的情况下，以提高性能。</p></blockquote><h2 id="2-3-五链"><a href="#2-3-五链" class="headerlink" title="2.3 五链"></a>2.3 五链</h2><p><code>iptables</code>的五个链<code>PREROUTING</code>，<code>INPUT</code>，<code>FORWARD</code>，<code>OUTPUT</code>，<code>POSTROUTING</code>。</p><ul><li><code>input 链</code>：当收到访问防火墙本机地址的数据包时，将应用此链中的规则；</li><li><code>output 链</code>：当防火墙本机向外发送数据包时，将应用此链中的规则；</li><li><code>forward 链</code>：当收到需要通过防火中转发给其他地址的数据包时，将应用此链中的规则，注意如果需要实现forward转发需要开启Linux内核中的ip_forward功能；</li><li><code>prerouting 链</code>：在对数据包做路由选择之前，将应用此链中的规则；</li><li><code>postrouting 链</code>：在对数据包做路由选择之后，将应用此链中的规则；</li></ul><h2 id="2-4-iptables的常见情况"><a href="#2-4-iptables的常见情况" class="headerlink" title="2.4 iptables的常见情况"></a>2.4 iptables的常见情况</h2><p>下面我们利用上面的流程图来对几种常见的情况解析：<strong>关键点在于发往iptables主机的数据包的目的地址是否是iptables主机本机</strong>。如果是，那我们就可以理解为常见的开启了iptables防火墙的网站服务器主机；如果不是，那就是走ip_forward进行转发，比如我们常见的NAT路由器的NAT服务和策略路由等。如下图为开启了ip_forward功能的openwrt路由器。</p><p><img src="https://resource.tinychen.com/20200421111042.png"></p><h1 id="3、NAT工作原理"><a href="#3、NAT工作原理" class="headerlink" title="3、NAT工作原理"></a>3、NAT工作原理</h1><p>接下来介绍一些NAT(<strong>N</strong>etwork <strong>A</strong>ddress <strong>T</strong>ranslation，网络地址转换)的基本知识，众所周知，IPv4的公网IP地址已经枯竭，但是需要接入互联网的设备还在不断增加，这其中NAT就发挥了很大的作用（此处不讨论IPv6）。NAT服务器提供了一组私有的IP地址池（10.0.0.0/8、172.16.0.0/12、192.168.0.0/16），使得连接该NAT服务器的设备能够获得一个私有的IP地址（也称局域网IP/内网IP），当设备需要连接互联网的时候，NAT服务器将该设备的私有IP转换成可以在互联网上路由的公网IP（全球唯一）。NAT的实现方式有很多种，这里我们主要介绍三种：<strong>静态NAT</strong>、<strong>动态NAT</strong>和网络地址端口转换（<strong>NAPT</strong>）。</p><h2 id="3-1-BNAT"><a href="#3-1-BNAT" class="headerlink" title="3.1 BNAT"></a>3.1 BNAT</h2><ul><li><p>静态NAT：LVS的官方文档中也称为(N-to-N mapping)<br>，前面的N指的是局域网中需要联网的设备数量，后面的N指的是该NAT服务器所拥有的公网IP的数量。既然数量相等，那么就可以实现静态转换，即一个设备对应一个公网IP，这时候的NAT服务器只需要维护一张静态的NAT映射转换表。    </p><table><thead><tr><th align="center">内网IP</th><th align="center">外网IP</th></tr></thead><tbody><tr><td align="center">192.168.1.55</td><td align="center">219.152.168.222</td></tr><tr><td align="center">192.168.1.59</td><td align="center">219.152.168.223</td></tr><tr><td align="center">192.168.1.155</td><td align="center">219.152.168.224</td></tr></tbody></table></li><li><p>动态NAT：LVS的官方文档中也称为(M-to-N mapping)<br>，注意这时候的M&gt;N，也就是说局域网中需要联网的设备数量多于NAT服务器拥有的公网IP数量，这时候就需要由NAT服务器来实现动态的转换，这样每个内网设备访问公网的时候使用的公网IP就不一定是同一个IP。</p></li></ul><blockquote><p>在一些家用路由器中，DMZ是指一部所有端口都暴露在外部网络的内部网络主机，除此以外的端口都被转发。严格来说这不是真正的DMZ，因为该主机仍能访问内部网络，并非独立于内部网络之外的。但真正的DMZ是不允许访问内部网络的，DMZ和内部网络是分开的。这种 DMZ主机并没有真正DMZ所拥有的子网划分的安全优势，其常常以一种简单的方法将所有端口转发到另外的防火墙或NAT设备上。</p></blockquote><h2 id="3-2-NAPT"><a href="#3-2-NAPT" class="headerlink" title="3.2 NAPT"></a>3.2 NAPT</h2><p>以上的这两种都属于<strong>基本网络地址转换（Basic NAT）</strong>，这种转换在技术上比较简单，仅支持地址转换，不支持端口映射，这也就带来了另一个问题就是资源的浪费。我们知道一个IP实际上可以对应多个端口，而我们访问应用实际上是通过IP地址+端口号的形式来访问的，即客户端访问的时候发送请求到服务器端应用程序监听的端口即可实现访问。那么NAPT就是在这基础上的扩展延申，它在IP地址的基础上加上了端口号，支持了端口映射的功能。</p><ul><li>NAPT：NAPT实际上还可以分为<strong>源地址转换（SNAT）</strong>和<strong>目的地址转换（DNAT）</strong>两种。<strong>注意这个源地址和目的地址是针对NAT服务器而言</strong>，我们通过下面一张图来说明：</li></ul><p><img src="https://resource.tinychen.com/20200415111556.png"></p><p>  首先我们这里有一个客户端，上面运行着一个浏览器，假设它使用的是<code>5566</code>端口，它需要访问<code>14.25.23.47</code>这个Web服务器的HTTPS服务的<code>443</code>端口，它在访问的时候需要经过局域网出口的这个路由器网关（同时也是NAT服务器），路由器对它进行一个NAPT的<strong>源地址转换（SNAT）</strong>，这个时候客户端的请求经过NAT服务器之后变成了<code>222.17.23.45:7788</code>这个IP端口对Web服务器的<code>443</code>端口进行访问。注意在这个过程中，目标服务器（Web服务器）的IP和端口是一直没有改变的。</p><p>  接下来在Web服务器接收到请求之后，需要返回数据给发送请求的设备，注意这时候web服务器返回数据的指向IP应该是刚刚NAT服务器发送请求的<code>227.17.23.45:7788</code>这个IP端口，这时候路由器网关再进行一次NAPT的<strong>目标地址转换（DNAT）</strong>，目标的IP端口就是最开始发送请求的<code>192.168.1.77:5566</code>这个端口。</p><p>实际上对于大多数人来说日常接触到最多的就是路由器做的SNAT和DNAT操作，它们一般成对出现用于解决公网IP资源不足的问题，需要注意的是NAT是可以进行嵌套操作的，即NAT下面的网络设备还可以继续做NAT，只要做NAT的网段不和上层的NAT的网段相同即可。</p><h1 id="4、iptables配置"><a href="#4、iptables配置" class="headerlink" title="4、iptables配置"></a>4、iptables配置</h1><p>在了解清楚iptables的工作原理和每个表以及链的作用之后，我们就可以根据其特点进行针对性的配置。</p><p>iptables 的基本语法命令格式</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">iptables <span class="hljs-selector-attr">[-t 表名]</span> 管理选项 <span class="hljs-selector-attr">[链名]</span> <span class="hljs-selector-attr">[匹配条件]</span> <span class="hljs-selector-attr">[-j 控制类型]</span><br></code></pre></div></td></tr></table></figure><ul><li><code>表名</code>、<code>链名</code>：指定<code>iptables</code>命令所操作的<code>表</code>和<code>链</code>，未指定表名时将默认使用<code>filter</code>表；</li><li><code>管理选项</code>：表示<code>iptables</code>规则的操作方式，比如：<code>插入</code>、<code>增加</code>、<code>删除</code>、<code>查看</code>等；</li><li><code>匹配条件</code>：指定要处理的数据包的特征，不符合指定条件的数据包不处理；</li><li><code>控制类型</code>：指数据包的处理方式，比如：<code>允许accept</code>、<code>拒绝reject</code>、<code>丢弃drop</code>、<code>日志LOG</code>等；</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">iptables 命令的常用管理选项<br><span class="hljs-deletion">-A:在指定链的末尾添加一条新的规则</span><br><span class="hljs-deletion">-D:删除指定链中的某一条规则，可删除指定序号或具体内容</span><br><span class="hljs-deletion">-I:在指定链中插入一条新规则，未指定序号时默认作为第一条规则</span><br><span class="hljs-deletion">-R:修改、替换指定链中的某一条规则，可指定规则序号或具体内容</span><br><span class="hljs-deletion">-L:列出指定链中所有的规则，未指定链名，则列出表中的所有链</span><br><span class="hljs-deletion">-F:清空指定链中所有的规则，未指定链名，则清空表中的所有链</span><br><span class="hljs-deletion">-P:设置指定链的默认策略</span><br><span class="hljs-deletion">-n:使用数字形式显示输出结果</span><br><span class="hljs-deletion">-v:查看规则列表时显示详细的信息</span><br><span class="hljs-deletion">-h:查看命令帮助信息</span><br><span class="hljs-deletion">--line-numbers:查看规则列表时，同时显示规则在链中的顺序号</span><br></code></pre></div></td></tr></table></figure><p>在添加规则之前我们先开启iptables的独立log功能，对于centos6，我们可以执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;kern.*     /var/log/iptables.log&quot; &gt;&gt; /etc/rsyslog.conf<br><span class="hljs-meta">#</span><span class="bash"> 记录所有级别的日志到指定目录中</span><br>service rsyslog restart<br><span class="hljs-meta">#</span><span class="bash"> 重启rsyslog服务使配置生效</span><br></code></pre></div></td></tr></table></figure><p>接着我们开始添加一条比较有针对性的规则：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">iptables -A INPUT -j LOG --log-prefix &quot;*** INPUT ***&quot; --log-level debug<br>iptables -t filter -A INPUT -p tcp -s 192.168.100.100 --dport 80 -j REJECT <br></code></pre></div></td></tr></table></figure><p>上述两条命令第一条增加了一条记录日志的规则，对于INPUT链中的所有操作都记录到日志中，添加日志前缀<code>*** INPUT ***</code>并设定日志级别为<code>debug</code></p><p>第二条是在INPUT链的filter表中插入一条规则，限定对<code>192.168.100.100</code>这个IP使用<code>tcp</code>协议访问本机的目的端口<code>80</code>端口的时候拒绝掉数据包。</p><p><img src="https://resource.tinychen.com/20200421153817.png"></p><p>接着我们尝试访问发现无法正常显示页面。</p><p><img src="https://resource.tinychen.com/20200421153854.png"></p><p>再查看日志发现iptables日志中多了很多请求被拒绝的记录。</p><p><img src="https://resource.tinychen.com/20200421154137.png"></p><p>再清空所有的规则，此时可以正常访问，且不再继续记录日志，因为记录日志的那条规则也被我们清空掉了。</p><p><img src="https://resource.tinychen.com/20200421154237.png"></p><p><img src="https://resource.tinychen.com/20200421154255.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了iptables的基本工作原理和四表五链等基本概念以及NAT的工作原理。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="iptables" scheme="https://tinychen.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Ceph系列02-使用ceph-deploy部署ceph集群</title>
    <link href="https://tinychen.com/20200410-ceph-02-ceph-deploy-deploy-ceph/"/>
    <id>https://tinychen.com/20200410-ceph-02-ceph-deploy-deploy-ceph/</id>
    <published>2020-04-10T02:00:00.000Z</published>
    <updated>2020-04-10T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用ceph-deploy部署ceph集群并配置ceph-dashboard。</p><span id="more"></span><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><h2 id="1-1-关闭selinux（所有节点）"><a href="#1-1-关闭selinux（所有节点）" class="headerlink" title="1.1 关闭selinux（所有节点）"></a>1.1 关闭selinux（所有节点）</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setenforce 0<br>sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27; /etc/selinux/config<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 也可以直接修改/etc/selinux/config文件</span><br></code></pre></div></td></tr></table></figure><h2 id="1-2-配置ntp时间同步（所有节点）"><a href="#1-2-配置ntp时间同步（所有节点）" class="headerlink" title="1.2 配置ntp时间同步（所有节点）"></a>1.2 配置ntp时间同步（所有节点）</h2><p>具体的操作可以参考<a href="https://tinychen.com/20191026-NTP-servers/">之前的文章</a>。</p><h2 id="1-3-安装epel源"><a href="#1-3-安装epel源" class="headerlink" title="1.3 安装epel源"></a>1.3 安装epel源</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo yum install -y https:<span class="hljs-regexp">//</span>dl.fedoraproject.org<span class="hljs-regexp">/pub/</span>epel/epel-release-latest-<span class="hljs-number">7</span>.noarch.rpm<br></code></pre></div></td></tr></table></figure><h2 id="1-4-导入repo仓库"><a href="#1-4-导入repo仓库" class="headerlink" title="1.4 导入repo仓库"></a>1.4 导入repo仓库</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">cat &lt;&lt; EOM &gt; /etc/yum.repos.d/ceph.repo<br>[ceph-noarch]<br><span class="hljs-attribute">name</span>=Ceph noarch packages<br><span class="hljs-attribute">baseurl</span>=https://download.ceph.com/rpm-&#123;ceph-stable-release&#125;/el7/noarch<br><span class="hljs-attribute">enabled</span>=1<br><span class="hljs-attribute">gpgcheck</span>=1<br><span class="hljs-attribute">type</span>=rpm-md<br><span class="hljs-attribute">gpgkey</span>=https://download.ceph.com/keys/release.asc<br>EOM<br></code></pre></div></td></tr></table></figure><p>注意这里的{ceph-stable-release}要换成对应的版本号，如我这里就是：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">cat &lt;&lt; EOM &gt; /etc/yum.repos.d/ceph.repo<br>[ceph-noarch]<br><span class="hljs-attribute">name</span>=Ceph noarch packages<br><span class="hljs-attribute">baseurl</span>=https://download.ceph.com/rpm-octopus/el7/noarch<br><span class="hljs-attribute">enabled</span>=1<br><span class="hljs-attribute">gpgcheck</span>=1<br><span class="hljs-attribute">type</span>=rpm-md<br><span class="hljs-attribute">gpgkey</span>=https://download.ceph.com/keys/release.asc<br>EOM<br></code></pre></div></td></tr></table></figure><p>然后更新yum repo</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br>yum repolist<br></code></pre></div></td></tr></table></figure><h2 id="1-5-安装python工具"><a href="#1-5-安装python工具" class="headerlink" title="1.5 安装python工具"></a>1.5 安装python工具</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> python-setuptools<br></code></pre></div></td></tr></table></figure><h2 id="1-6-安装ceph-deploy"><a href="#1-6-安装ceph-deploy" class="headerlink" title="1.6 安装ceph-deploy"></a>1.6 安装ceph-deploy</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sudo yum update<br>sudo yum <span class="hljs-keyword">install</span> ceph-deploy<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200410214907.png"></p><p>注意这里的版本为2.0.1要比epel中的1.5.x要新一些，后面的repo也应该是刚刚导入的ceph repo</p><h2 id="1-7-创建ceph部署用户（所有节点）"><a href="#1-7-创建ceph部署用户（所有节点）" class="headerlink" title="1.7 创建ceph部署用户（所有节点）"></a>1.7 创建ceph部署用户（所有节点）</h2><p>这里我们需要创建一个用户专门用来给ceph-deploy部署，使用ceph-deploy部署的时候只需要加上<code>--username</code>选项即可指定用户，需要注意的是：</p><ul><li>不建议使用root</li><li>不能使用ceph为用户名，因为后面的部署中需要用到该用户名，如果系统中已存在该用户则会先删除掉该用户，然后就会导致部署失败</li><li>该用户需要具备超级用户权限（sudo），并且不需要输入密码使用sudo权限</li><li>所有的节点均需要创建该用户</li><li>该用户需要在ceph集群中的所有机器之间免密ssh登录</li></ul><p>创建新用户</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">sudo useradd -d <span class="hljs-meta-keyword">/home/</span>&#123;username&#125; -<span class="hljs-class">m </span>&#123;username&#125;<br>sudo <span class="hljs-class">passwd </span>&#123;username&#125;<br></code></pre></div></td></tr></table></figure><p>配置sudo权限并设置免密</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;&#123;username&#125; ALL = (root) NOPASSWD:ALL&quot;</span> | sudo tee <span class="hljs-regexp">/etc/</span>sudoers.d/&#123;username&#125;<br>sudo chmod <span class="hljs-number">0440</span> <span class="hljs-regexp">/etc/</span>sudoers.d/&#123;username&#125;<br></code></pre></div></td></tr></table></figure><p>如果我们的节点已经设置了ssh免密登录，可以直接把免密登录用户的ssh文件夹复制到新建的用户目录下，这里以root用户为例。{username}请替换成需要新建的用户名。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo cp -R <span class="hljs-regexp">/root/</span>.ssh<span class="hljs-regexp">/ /</span>home<span class="hljs-regexp">/&#123;username&#125;/</span><br>sudo chown &#123;username&#125;:&#123;username&#125; <span class="hljs-regexp">/home/</span>&#123;username&#125;<span class="hljs-regexp">/.ssh/</span> -R<br></code></pre></div></td></tr></table></figure><p>编辑deploy节点的ssh文件</p><p>我们可以通过编辑deploy节点的ssh配置文件来指定登录到ceph其他节点的用户：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">Host node1<br>   Hostname node1<br>   <span class="hljs-keyword">User</span> &#123;username&#125;<br><span class="hljs-keyword">Host</span> <span class="hljs-keyword">node2</span><br>   <span class="hljs-keyword">Hostname</span> <span class="hljs-keyword">node2</span><br>   <span class="hljs-keyword">User</span> &#123;username&#125;<br><span class="hljs-keyword">Host</span> <span class="hljs-keyword">node3</span><br>   <span class="hljs-keyword">Hostname</span> <span class="hljs-keyword">node3</span><br>   <span class="hljs-keyword">User</span> &#123;username&#125;<br></code></pre></div></td></tr></table></figure><p>在我这里替换成</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">Host ceph71<br>   Hostname ceph71<br>   <span class="hljs-keyword">User</span> <span class="hljs-title">cephDeploy</span><br>Host ceph72<br>   Hostname ceph72<br>   <span class="hljs-keyword">User</span> <span class="hljs-title">cephDeploy</span><br>Host ceph73<br>   Hostname ceph73<br>   <span class="hljs-keyword">User</span> <span class="hljs-title">cephDeploy</span><br></code></pre></div></td></tr></table></figure><h2 id="1-8-防火墙中放行端口"><a href="#1-8-防火墙中放行端口" class="headerlink" title="1.8 防火墙中放行端口"></a>1.8 防火墙中放行端口</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">sudo firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-service</span>=ceph-mon --permanent<br><span class="hljs-comment"># on monitors</span><br><br>sudo firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-service</span>=ceph --permanent<br><span class="hljs-comment"># on OSDs and MDSs</span><br><br>sudo firewall-cmd --reload<br></code></pre></div></td></tr></table></figure><p>也可以直接关闭或禁用防火墙</p><h2 id="1-9-安装yum插件"><a href="#1-9-安装yum插件" class="headerlink" title="1.9 安装yum插件"></a>1.9 安装yum插件</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> yum-plugin-priorities<br></code></pre></div></td></tr></table></figure><blockquote><p>Ensure that your package manager has priority/preferences packages installed and enabled. On CentOS, you may need to install EPEL. On RHEL, you may need to enable optional repositories.</p></blockquote><h1 id="2、部署ceph"><a href="#2、部署ceph" class="headerlink" title="2、部署ceph"></a>2、部署ceph</h1><h2 id="2-1-创建部署目录"><a href="#2-1-创建部署目录" class="headerlink" title="2.1 创建部署目录"></a>2.1 创建部署目录</h2><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">[cephDeploy@ceph71 ~]$ mkdir my-<span class="hljs-keyword">cluster</span><br>[cephDeploy@ceph71 ~]$ cd my-<span class="hljs-keyword">cluster</span><br>[cephDeploy@ceph71 my-<span class="hljs-keyword">cluster</span>]$ <span class="hljs-keyword">pwd</span><br>/home/cephDeploy/my-<span class="hljs-keyword">cluster</span><br></code></pre></div></td></tr></table></figure><p>由于部署过程中会生成许多文件，这里我们专门创建一个目录用于存放。</p><h2 id="2-2-初始化mon节点"><a href="#2-2-初始化mon节点" class="headerlink" title="2.2 初始化mon节点"></a>2.2 初始化mon节点</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">[cephDeploy@ceph71 my-cluster]$ ceph-deploy new ceph71<br>[ceph_deploy.conf][<span class="hljs-builtin-name">DEBUG</span> ] found configuration file at: /home/cephDeploy/.cephdeploy.conf<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ] Invoked (2.0.1): /usr/bin/ceph-deploy new ceph71<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ] ceph-deploy options:<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  username                      : None<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  func                          : &lt;function new at 0x7f7f15a43e60&gt;<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  verbose                       : <span class="hljs-literal">False</span><br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  overwrite_conf                : <span class="hljs-literal">False</span><br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  quiet                         : <span class="hljs-literal">False</span><br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf<span class="hljs-built_in"> instance </span>at 0x7f7f151ba950&gt;<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  cluster                       : ceph<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  ssh_copykey                   : <span class="hljs-literal">True</span><br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  mon                           : [<span class="hljs-string">&#x27;ceph71&#x27;</span>]<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  public_network                : None<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  ceph_conf                     : None<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  cluster_network               : None<br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  default_release               : <span class="hljs-literal">False</span><br>[ceph_deploy.cli][<span class="hljs-builtin-name">INFO</span>  ]  fsid                          : None<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Creating new cluster named ceph<br>[ceph_deploy.new][<span class="hljs-builtin-name">INFO</span>  ] making sure passwordless SSH succeeds<br>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ]<span class="hljs-built_in"> connection </span>detected need <span class="hljs-keyword">for</span> sudo<br>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ] connected <span class="hljs-keyword">to</span> host: ceph71 <br>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ] detect platform information <span class="hljs-keyword">from</span> remote host<br>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ] detect machine<span class="hljs-built_in"> type</span><br><span class="hljs-built_in"></span>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ] <span class="hljs-builtin-name">find</span> the location of an executable<br>[ceph71][<span class="hljs-builtin-name">INFO</span>  ] Running command: sudo /usr/sbin<span class="hljs-built_in">/ip </span>link show<br>[ceph71][<span class="hljs-builtin-name">INFO</span>  ] Running command: sudo /usr/sbin<span class="hljs-built_in">/ip </span>addr show<br>[ceph71][<span class="hljs-builtin-name">DEBUG</span> ]<span class="hljs-built_in"> IP </span>addresses found: [u<span class="hljs-string">&#x27;240e:f8:a903:2455:5054:ff:fe99:871&#x27;</span>, u<span class="hljs-string">&#x27;192.168.122.71&#x27;</span>, u<span class="hljs-string">&#x27;192.168.100.71&#x27;</span>]<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Resolving host ceph71<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Monitor ceph71 at 192.168.122.71<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Monitor initial members are [<span class="hljs-string">&#x27;ceph71&#x27;</span>]<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Monitor addrs are [<span class="hljs-string">&#x27;192.168.122.71&#x27;</span>]<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Creating a random mon key<span class="hljs-built_in">..</span>.<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Writing monitor keyring <span class="hljs-keyword">to</span> ceph.mon.keyring<span class="hljs-built_in">..</span>.<br>[ceph_deploy.new][<span class="hljs-builtin-name">DEBUG</span> ] Writing initial<span class="hljs-built_in"> config </span><span class="hljs-keyword">to</span> ceph.conf<span class="hljs-built_in">..</span>.<br>[cephDeploy@ceph71 my-cluster]$ <br></code></pre></div></td></tr></table></figure><h2 id="2-3-指定网卡"><a href="#2-3-指定网卡" class="headerlink" title="2.3 指定网卡"></a>2.3 指定网卡</h2><p>由于我们这里的虚拟机每台都有两个网卡，因此我们需要指定ceph集群用于通信的网卡所在的网段</p><p><img src="https://resource.tinychen.com/20200410224047.png"></p><h2 id="2-4-安装ceph"><a href="#2-4-安装ceph" class="headerlink" title="2.4 安装ceph"></a>2.4 安装ceph</h2><p>在所有的节点上都安装ceph</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ceph</span>-deploy install ceph<span class="hljs-number">71</span> ceph<span class="hljs-number">72</span> ceph<span class="hljs-number">73</span><br></code></pre></div></td></tr></table></figure><p>初始化mon</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">ceph<span class="hljs-operator">-</span>deploy mon <span class="hljs-keyword">create</span><span class="hljs-operator">-</span><span class="hljs-keyword">initial</span><br></code></pre></div></td></tr></table></figure><p>顺利执行后会在当前目录下生成一系列相关的密钥文件</p><p><img src="https://resource.tinychen.com/20200410230047.png"></p><p>使用ceph-deploy复制配置文件和密钥</p><blockquote><p>Use <code>ceph-deploy</code> to copy the configuration file and admin key to your admin node and your Ceph Nodes so that you can use the <code>ceph</code> CLI without having to specify the monitor address and <code>ceph.client.admin.keyring</code> each time you execute a command.</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ceph</span>-deploy admin ceph<span class="hljs-number">71</span> ceph<span class="hljs-number">72</span> ceph<span class="hljs-number">73</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200410230904.png"></p><h2 id="2-5-部署manager"><a href="#2-5-部署manager" class="headerlink" title="2.5 部署manager"></a>2.5 部署manager</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ceph</span>-deploy mgr create ceph<span class="hljs-number">71</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200410231120.png"></p><h2 id="2-6-添加OSD"><a href="#2-6-添加OSD" class="headerlink" title="2.6 添加OSD"></a>2.6 添加OSD</h2><p>这里我们添加三个节点上面的共计6个硬盘到ceph集群中作为osd</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdb ceph71<br>ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdb ceph72<br>ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdb ceph73<br>ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdc ceph71<br>ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdc ceph72<br>ceph-deploy osd create --data <span class="hljs-regexp">/dev/</span>vdc ceph73<br></code></pre></div></td></tr></table></figure><h2 id="2-7-检测结果"><a href="#2-7-检测结果" class="headerlink" title="2.7 检测结果"></a>2.7 检测结果</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看ceph集群状态</span><br>sudo ceph health<br>sudo ceph -s<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200410232126.png"></p><p><img src="https://resource.tinychen.com/20200410233919.png"></p><h1 id="3、配置dashboard"><a href="#3、配置dashboard" class="headerlink" title="3、配置dashboard"></a>3、配置dashboard</h1><p>详细的官网部署文档链接：<a href="https://docs.ceph.com/docs/master/mgr/dashboard/">https://docs.ceph.com/docs/master/mgr/dashboard/</a></p><h2 id="3-1-启用dashboard"><a href="#3-1-启用dashboard" class="headerlink" title="3.1 启用dashboard"></a>3.1 启用dashboard</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ceph mgr module <span class="hljs-builtin-name">enable</span> dashboard<br></code></pre></div></td></tr></table></figure><h2 id="3-2-禁用ssl加密"><a href="#3-2-禁用ssl加密" class="headerlink" title="3.2 禁用ssl加密"></a>3.2 禁用ssl加密</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/ssl <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h2 id="3-3-重启ceph-dashboard"><a href="#3-3-重启ceph-dashboard" class="headerlink" title="3.3 重启ceph-dashboard"></a>3.3 重启ceph-dashboard</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ceph mgr module <span class="hljs-builtin-name">disable</span> dashboard<br>ceph mgr module <span class="hljs-builtin-name">enable</span> dashboard<br></code></pre></div></td></tr></table></figure><h2 id="3-4-配置IP和端口"><a href="#3-4-配置IP和端口" class="headerlink" title="3.4 配置IP和端口"></a>3.4 配置IP和端口</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">$ ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/<span class="hljs-variable">$name</span>/server_addr <span class="hljs-variable">$IP</span><br>$ ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/<span class="hljs-variable">$name</span>/server_port <span class="hljs-variable">$PORT</span><br>$ ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/<span class="hljs-variable">$name</span>/ssl_server_port <span class="hljs-variable">$PORT</span><br></code></pre></div></td></tr></table></figure><p>到我这里是</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/ceph71/server_addr 192.168.100.71<br>ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/ceph71/server_port 8080<br>ceph<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> mgr mgr/dashboard/ceph71/ssl_server_port 8443<br></code></pre></div></td></tr></table></figure><h2 id="3-5-创建dashboard用户"><a href="#3-5-创建dashboard用户" class="headerlink" title="3.5 创建dashboard用户"></a>3.5 创建dashboard用户</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">ceph dashboard ac-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">create</span> &lt;username&gt; &lt;<span class="hljs-keyword">password</span>&gt; administrator<br></code></pre></div></td></tr></table></figure><p>到我这里是</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">[root@ceph71 <span class="hljs-keyword">my</span>-cluster]<span class="hljs-comment"># ceph dashboard set-login-credentials tinychen tinychen</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/20200411001630.png"></p><p><img src="https://resource.tinychen.com/image-20200411002213747.png"></p><p>登录后可以看到首页</p><p><img src="https://resource.tinychen.com/20200411021220.png"></p><p>最后可以看到的界面如上。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用ceph-deploy部署ceph集群并配置ceph-dashboard。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="ceph" scheme="https://tinychen.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat篇03-使用Jmeter对Tomcat9的三种IO模型进行持续压力测试</title>
    <link href="https://tinychen.com/20200409-tomcat-03-jmeter-nio-nio2-apr/"/>
    <id>https://tinychen.com/20200409-tomcat-03-jmeter-nio-nio2-apr/</id>
    <published>2020-04-09T06:00:00.000Z</published>
    <updated>2020-04-09T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括Tomcat9的NIO、NIO2、APR三种I/O模型的工作原理以及使用Jmeter对其进行持续压力测试。</p><span id="more"></span><h1 id="1、connector的工作原理"><a href="#1、connector的工作原理" class="headerlink" title="1、connector的工作原理"></a>1、connector的工作原理</h1><p>这里我们说的Tomcat中三种不同的I/O模型主要指的是其连接器（connector）的工作模型，对于tomcat而言，连接器一般指的是coyote，其工作原理大致如下图所示：</p><p><img src="https://resource.tinychen.com/blog/20200409/Yt4hJSPQcMJj.png"></p><p>连接器中的各个组件的作用如下： </p><h2 id="1-1-EndPoint"><a href="#1-1-EndPoint" class="headerlink" title="1.1 EndPoint"></a>1.1 <code>EndPoint</code></h2><p><code>EndPoint</code>即Coyote通信端点，是通信监听的接口，是具体Socket接收和发送处理器，是对传输层（四层）的抽象，因此<code>EndPoint</code>用来实现TCP/IP协议的。Tomcat 并没有<code>EndPoint</code>接口，而是提供了一个抽象类<code>AbstractEndpoint</code>， 里面定义了两个内部类：<code>Acceptor</code>和<code>SocketProcessor</code>。<code>Acceptor</code>用于监听Socket连接请求。 <code>SocketProcessor</code>用于处理接收到的Socket请求，它实现<code>Runnable</code>接口，在<code>Run</code>方法里 调用协议处理组件<code>Processor</code>进行处理。为了提高处理能力，<code>SocketProcessor</code>被提交到线程池来执行，而这个线程池叫作执行器（<strong>Executor</strong>)。</p><h2 id="1-2-Processor"><a href="#1-2-Processor" class="headerlink" title="1.2 Processor"></a>1.2 <code>Processor</code></h2><p><strong><code>Processor</code>是coyote的协议处理接口 。</strong>如果说EndPoint是用来实现TCP/IP协议的，那么 <code>Processor</code>用来实现HTTP协议，<code>Processor</code>接收来自EndPoint的Socket，读取字节流解析成Tomcat的<code>Request</code>和<code>Response</code>对象，并通过<code>Adapter</code>将其提交到容器处理， <code>Processor</code>是对应用层（七层）协议的抽象。</p><h2 id="1-3-ProtocolHandler"><a href="#1-3-ProtocolHandler" class="headerlink" title="1.3 ProtocolHandler"></a>1.3 <code>ProtocolHandler</code></h2><p><strong><code>ProtocolHandler</code>是Coyote的协议接口，通过Endpoint和Processor ，实现对具体协议（HTTP或AJP）的处理。</strong>Tomcat 按照协议和I/O 提供了6个实现类 ： <code>AjpNioProtocol</code> ， <code>AjpAprProtocol</code>， <code>AjpNio2Protocol</code> ， <code>Http11NioProtocol</code> ，<code>Http11Nio2Protocol</code> ， <code>Http11AprProtocol</code>。我们在配置<code>tomcat/conf/server.xml</code> 中的<code>connecter</code>块时 ， 至少要指定具体的<code>ProtocolHandler</code> , 当然也可以指定协议名称（如HTTP/1.1）。</p><h2 id="1-4-Adapter"><a href="#1-4-Adapter" class="headerlink" title="1.4 Adapter"></a>1.4 <code>Adapter</code></h2><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来存放这些请求信息。<code>ProtocolHandler</code>接口负责解析请求并生成Tomcat的<code>Request</code>类。 但是这个Request对象不是标准的ServletRequest，不能用来作为参数来调用容器。因此需要引入<code>CoyoteAdapter</code>，连接器调用<code>CoyoteAdapter</code>的<code>Sevice</code>方法，传入Tomcat的<code>Request</code>对象，CoyoteAdapter将<code>Request</code>转成<code>ServletRequest</code>，再调用容器的Service方法。</p><h1 id="2、三种I-O模型原理"><a href="#2、三种I-O模型原理" class="headerlink" title="2、三种I/O模型原理"></a>2、三种I/O模型原理</h1><p>在开始之前，我们先看一下<a href="https://tomcat.apache.org/tomcat-9.0-doc/config/http.html">tomcat官网</a>给出的这三种I/O模型的工作参数的一个对比图：</p><p><img src="https://resource.tinychen.com/blog/20200409/l0bTxdP2juMk.png"></p><p>这里我们可以看到一般说的NIO、NIO2和APR使用的是非阻塞方式指的就是在<strong>读取请求报头</strong>和<strong>等待下一个请求</strong>的时候是使用的非阻塞方式。</p><p>Tomcat的NIO是基于I/O复用（同步I/O）来实现的，而NIO2是使用的异步I/O。参考经典书籍《UNIX网络编程 卷1 套接字联网API》，两者的主要原理如下：</p><h2 id="I-O复用（NIO）"><a href="#I-O复用（NIO）" class="headerlink" title="I/O复用（NIO）"></a>I/O复用（NIO）</h2><p>I/O复用（I/O multiplexing）可以调用<code>select</code>或<code>poll</code>，阻塞在这两个系统调用中的某一个之上，而不是阻塞在真正的I/O系统调用上。进程阻塞于<code>select</code>调用，等待数据报套接字变为可读。当<code>select</code>返回套接字可读这一条件时，进程调用<code>recvfrom</code>把所读数据报复制到应用进程缓冲区，尽管这里需要使用<code>select</code>和<code>recvfrom</code>两个系统调用，但是使用<code>select</code>的可以等待多个描述符就绪，即可以等待多个请求。</p><p><img src="https://resource.tinychen.com/blog/20200409/tKX17eQCJnzT.png"></p><h2 id="异步IO（NIO2）"><a href="#异步IO（NIO2）" class="headerlink" title="异步IO（NIO2）"></a>异步IO（NIO2）</h2><p>异步I/O（asynchronous I/O）的工作机制是：告知内核启动某个操作，并让内核在整个操作（包括将数据从内核复制到应用程序的缓冲区）完成后通知应用程序。需要注意的是：异步I/O模型是由内核通知应用进程I/O操作何时完成。</p><p><img src="https://resource.tinychen.com/blog/20200409/cxhjDzPYM0a4.png"></p><p>最后我们可以把上面的过程结合剩下没有提到的三种UNIX系统中的IO模型进行对比得到下图：</p><p><img src="https://resource.tinychen.com/blog/20200409/YDYCG1ChUYRp.png"></p><h2 id="NIO、NIO2和APR的区别"><a href="#NIO、NIO2和APR的区别" class="headerlink" title="NIO、NIO2和APR的区别"></a>NIO、NIO2和APR的区别</h2><table><thead><tr><th></th><th>NIO</th><th>NIO2</th><th>APR</th></tr></thead><tbody><tr><td>实现</td><td>JAVA NIO库</td><td>JDK1.7 NIO2库</td><td>C</td></tr><tr><td>IO模型</td><td>同步非阻塞</td><td>异步非阻塞</td><td>取决于系统</td></tr></tbody></table><blockquote><p>APR的重点在于使用C语言实现并且能够跨平台使用，它相当于将UNIX系统中的IO操作进行了一层封装使得编程开发更容易</p></blockquote><h1 id="3、connector的几个重要参数"><a href="#3、connector的几个重要参数" class="headerlink" title="3、connector的几个重要参数"></a>3、connector的几个重要参数</h1><h2 id="connectionTimeout"><a href="#connectionTimeout" class="headerlink" title="connectionTimeout"></a>connectionTimeout</h2><blockquote><p>The number of milliseconds this <strong>Connector</strong> will wait, after accepting a connection, for the request URI line to be presented. Use a value of -1 to indicate no (i.e. infinite) timeout. The default value is 60000 (i.e. 60 seconds) but note that the standard server.xml that ships with Tomcat sets this to 20000 (i.e. 20 seconds). Unless <strong>disableUploadTimeout</strong> is set to <code>false</code>, this timeout will also be used when reading the request body (if any).</p></blockquote><p>在connector和请求的客户端建立连接之后开始计时，当超过该值的时候就会超时，然后断开连接。使用值-1表示无超时，默认值为60000（即60秒），但Tomcat中的server.xml将此值设置为20000（即20秒）。</p><p>除非disableUploadTimeout设置为false，否则在读取请求正文（如果有）时也会使用此超时。</p><h2 id="maxThreads"><a href="#maxThreads" class="headerlink" title="maxThreads"></a>maxThreads</h2><blockquote><p>The maximum number of request processing threads to be created by this <strong>Connector</strong>, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as <code>-1</code> to make clear that it is not used.</p></blockquote><p>最大线程数，大并发请求时，tomcat能创建来处理请求的最大线程数，超过则放入请求队列中进行排队，默认值为200。</p><h2 id="acceptCount"><a href="#acceptCount" class="headerlink" title="acceptCount"></a>acceptCount</h2><blockquote><p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p></blockquote><p>当最大线程数（maxThreads）被使用完时，可以放入请求队列排队个数，超过这个数返回connection refused（请求被拒绝），默认值为100；</p><h2 id="maxConnections"><a href="#maxConnections" class="headerlink" title="maxConnections"></a>maxConnections</h2><blockquote><p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below <strong>maxConnections</strong> at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the <code>acceptCount</code> setting. The default value is <code>8192</code>.For NIO/NIO2 only, setting the value to -1, will disable the maxConnections feature and connections will not be counted.</p></blockquote><p>Tomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。默认值为8192。 </p><p>对于NIO / NIO2，将该值设置为-1将禁用maxConnections功能，并且不计算连接数。</p><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p>按照被处理的先后顺序我们可以把tomcat中的线程队列和以上四个参数使用该图进行表示</p><p><img src="https://resource.tinychen.com/blog/20200409/Ic6Wtt6KkKeV.png"></p><ul><li>当<code>maxThreads + acceptCount &lt; maxConnections</code>的时候将不会有线程被阻塞</li><li>当阻塞的线程时间超过connectionTimeout还没得到返回值将返回连接超时</li></ul><h1 id="4、配置测试环境"><a href="#4、配置测试环境" class="headerlink" title="4、配置测试环境"></a>4、配置测试环境</h1><h2 id="4-1-配置connector"><a href="#4-1-配置connector" class="headerlink" title="4.1 配置connector"></a>4.1 配置connector</h2><p>首先我们需要在tomcat中配置三个connector，分别对应三种I/O模型：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;16&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxConnections</span>=<span class="hljs-string">&quot;22000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8081&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8444&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;200&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxConnections</span>=<span class="hljs-string">&quot;22000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8082&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8445&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;16&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxConnections</span>=<span class="hljs-string">&quot;22000&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-2-配置jmeter"><a href="#4-2-配置jmeter" class="headerlink" title="4.2 配置jmeter"></a>4.2 配置jmeter</h2><h3 id="4-2-1-测试环境"><a href="#4-2-1-测试环境" class="headerlink" title="4.2.1 测试环境"></a>4.2.1 测试环境</h3><p><a href="https://jmeter.apache.org/index.html">jmeter</a>是apache旗下的一款开源的使用JAVA编写的服务器压力测试软件，我们从<a href="https://jmeter.apache.org/index.html">官网</a>下载源码包，分别部署在windows和Linux系统上，因为windows系统的硬件配置太差了，没办法进行高并发的压力测试，所以windows平台只进行jmeter的测试文件jmx的配置，配置完成后再使用Linux测试机来进行压力测试。(注意jmeter版本需要保持一致)</p><p>使用jmeter进行测试的机器系统和内核版本为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@www ~]# lsb_release -a<br>LSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch<br>Distributor ID: RedHatEnterpriseServer<br>Description:    Red Hat Enterprise Linux Server release 6.9 (Santiago)<br>Release:        6.9<br>Codename:       Santiago<br>[root@www ~]# uname -r<br>2.6.32-696.el6.x86_64<br></code></pre></div></td></tr></table></figure><p>安装tomcat9的服务器系统和内核版本为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tmpsys conf]# lsb_release -a<br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID: n/a<br>Description:    NAME=&quot;Red Hat Enterprise Linux Server&quot;<br>Release:        n/a<br>Codename:       n/a<br>[root@tmpsys conf]# uname -r<br>3.10.0-1062.18.1.el7.x86_64<br></code></pre></div></td></tr></table></figure><h3 id="4-2-2-配置jmeter"><a href="#4-2-2-配置jmeter" class="headerlink" title="4.2.2 配置jmeter"></a>4.2.2 配置jmeter</h3><p>jmeter使用前需要配置JDK和系统环境变量（JDK配置这里不再赘述），我们在<code>/etc/profile</code>中导入相关变量并使用source命令保证生效。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export JMETER_HOME=/home/jmeter<br>export CLASSPATH=$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$CLASSPATH<br>export PATH=$JMETER_HOME/bin:$PATH<br></code></pre></div></td></tr></table></figure><p>配置成功后应该可以看到如下输出</p><p><img src="https://resource.tinychen.com/blog/20200409/nVqBfW2s6jJu.png"></p><h2 id="4-3-编辑JMX文件"><a href="#4-3-编辑JMX文件" class="headerlink" title="4.3 编辑JMX文件"></a>4.3 编辑JMX文件</h2><p>JMX的文件配置不算复杂，最重要的是测试的时间和并发线程数量</p><p><img src="https://resource.tinychen.com/blog/20200409/xfSP92UKkTQR.png"></p><p>这里我们使用持续压力测试模式，设置<strong>循环次数</strong>为永远，然后设置<strong>持续时间</strong>为300秒即5分钟，设置<strong>线程数</strong>为200并且<strong>ramp-up时间</strong>为1s即每秒200并发数，如果ramp-up时间为10s即每秒200÷10=20并发数，以此类推。对应到jmx文件中的xml文件块为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThreadGroup</span> <span class="hljs-attr">guiclass</span>=<span class="hljs-string">&quot;ThreadGroupGui&quot;</span> <span class="hljs-attr">testclass</span>=<span class="hljs-string">&quot;ThreadGroup&quot;</span> <span class="hljs-attr">testname</span>=<span class="hljs-string">&quot;线程组&quot;</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stringProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.on_sample_error&quot;</span>&gt;</span>continue<span class="hljs-tag">&lt;/<span class="hljs-name">stringProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">elementProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.main_controller&quot;</span> <span class="hljs-attr">elementType</span>=<span class="hljs-string">&quot;LoopController&quot;</span> <span class="hljs-attr">guiclass</span>=<span class="hljs-string">&quot;LoopControlPanel&quot;</span> <span class="hljs-attr">testclass</span>=<span class="hljs-string">&quot;LoopController&quot;</span> <span class="hljs-attr">testname</span>=<span class="hljs-string">&quot;循环控制器&quot;</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">boolProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LoopController.continue_forever&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">boolProp</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LoopController.loops&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">intProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">elementProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stringProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.num_threads&quot;</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">stringProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stringProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.ramp_time&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">stringProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">boolProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.scheduler&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stringProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.duration&quot;</span>&gt;</span>300<span class="hljs-tag">&lt;/<span class="hljs-name">stringProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stringProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.delay&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">stringProp</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">boolProp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ThreadGroup.same_user_on_next_iteration&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolProp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ThreadGroup</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-4-测试类型"><a href="#4-4-测试类型" class="headerlink" title="4.4 测试类型"></a>4.4 测试类型</h2><p>这里我们分别测试<strong>五分钟持续压测</strong>情况下<strong>200、400、600、800、1000的并发情况</strong>，测试的页面为tomcat的默认首页，tomcat自带的<code>examples</code>中的<code>/examples/servlets/nonblocking/bytecounter.html</code>和<code>/examples/servlets/nonblocking/numberwriter</code>。可以看到后面的两个example都是使用非阻塞的方式进行编写的<code>sevlet</code>。三者的主要操作如下：</p><ul><li>tomcat首页几乎相当于一个静态页面，属于简单的网页请求操作，应用程序发送请求到内核，内核从IO从读取相应文件并返回；</li><li><code>numberwriter</code>是生成返回一串很长的数字，应用程序发送请求到内核并接收从内核生成返回的较大的数据；</li><li><code>bytecounter</code>需要上传一个文件然后再计算字数（这里使用了一个大小约30KB的markdown文件作为测试），需要进行IO传输和CPU计算再从内核返回一个简单的数值到应用程序；</li></ul><h2 id="4-5-tomcat9启动参数"><a href="#4-5-tomcat9启动参数" class="headerlink" title="4.5 tomcat9启动参数"></a>4.5 tomcat9启动参数</h2><p>此处我们使用的依旧是systemd调用jsvc启动tomcat，启动参数如下:</p><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">ExecStart=/home/tomcat9/bin/jsvc \<br>        -<span class="ruby">user tomcat \</span><br><span class="ruby"></span>        -<span class="ruby">nodetach \</span><br><span class="ruby"></span>        -<span class="ruby">java-home <span class="hljs-variable">$&#123;</span>JAVA_HOME&#125; \</span><br><span class="ruby"></span>        -<span class="ruby">Xms4096m \</span><br><span class="ruby"></span>        -<span class="ruby">Xmx8192m \</span><br><span class="ruby"></span>        -<span class="ruby"><span class="hljs-symbol">XX:</span>NewRatio=<span class="hljs-number">3</span> \</span><br><span class="ruby"></span>        -<span class="ruby"><span class="hljs-symbol">XX:</span>SurvivorRatio=<span class="hljs-number">4</span> \</span><br><span class="ruby"></span>        -<span class="ruby">pidfile <span class="hljs-variable">$&#123;</span>CATALINA_BASE&#125;/tomcat.pid \</span><br><span class="ruby"></span>        -<span class="ruby">classpath <span class="hljs-variable">$&#123;</span>CATALINA_HOME&#125;/bin/bootstrap.<span class="hljs-symbol">jar:</span><span class="hljs-variable">$&#123;</span>CATALINA_HOME&#125;/bin/tomcat-juli.jar \</span><br><span class="ruby"></span>        -<span class="ruby">outfile <span class="hljs-variable">$&#123;</span>CATALINA_BASE&#125;/logs/catalina.out \</span><br><span class="ruby"></span>        -<span class="ruby">errfile <span class="hljs-variable">$&#123;</span>CATALINA_BASE&#125;/logs/catalina.err \</span><br><span class="ruby"></span>        -<span class="ruby">Dcatalina.home=<span class="hljs-variable">$&#123;</span>CATALINA_HOME&#125; \</span><br><span class="ruby"></span>        -<span class="ruby">Dcatalina.base=<span class="hljs-variable">$&#123;</span>CATALINA_BASE&#125; \</span><br><span class="ruby"></span>        -<span class="ruby">Djava.io.tmpdir=<span class="hljs-variable">$&#123;</span>CATALINA_TMPDIR&#125; \</span><br><span class="ruby"></span>        -<span class="ruby">Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \</span><br><span class="ruby"></span>        -<span class="ruby">Djava.util.logging.config.file=<span class="hljs-variable">$&#123;</span>CATALINA_BASE&#125;/conf/logging.properties \</span><br><span class="ruby"></span>        -<span class="ruby">Djava.library.path=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/apr/lib</span> \</span><br><span class="ruby"></span>        org.apache.catalina.startup.Bootstrap<br></code></pre></div></td></tr></table></figure><h1 id="5、测试结果"><a href="#5、测试结果" class="headerlink" title="5、测试结果"></a>5、测试结果</h1><h2 id="5-1-tomcat首页测试结果"><a href="#5-1-tomcat首页测试结果" class="headerlink" title="5.1 tomcat首页测试结果"></a>5.1 tomcat首页测试结果</h2><p><img src="https://resource.tinychen.com/20200410133532.png"></p><p><img src="https://resource.tinychen.com/20200410132141.png"></p><p>对于简单的请求，三种模式的所有表现数据都几乎一样，基本不存在测试误差范围外的差距。</p><h2 id="5-2-numberwriter测试结果"><a href="#5-2-numberwriter测试结果" class="headerlink" title="5.2 numberwriter测试结果"></a>5.2 numberwriter测试结果</h2><p><img src="https://resource.tinychen.com/20200410133419.png"></p><p><img src="https://resource.tinychen.com/20200410133050.png"></p><p>到了numberwrite这一种返回较长数据的请求，NIO2模型的错误率要比其他两者低得多，到了1200并发的时候apr模型和NIO模型的错误率都已经超过了六成，个人认为此时的响应时间不具有参考性。</p><h2 id="5-3-wordcount测试结果"><a href="#5-3-wordcount测试结果" class="headerlink" title="5.3 wordcount测试结果"></a>5.3 wordcount测试结果</h2><p><img src="https://resource.tinychen.com/20200410133833.png"></p><p><img src="https://resource.tinychen.com/20200410134056.png"></p><p>和之前的numberwrite一样，同样是牺牲了响应时间而降低了错误率。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括Tomcat9的NIO、NIO2、APR三种I/O模型的工作原理以及使用Jmeter对其进行持续压力测试。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CentOS创建KVM虚拟机</title>
    <link href="https://tinychen.com/20200405-centos-create-kvm-vm/"/>
    <id>https://tinychen.com/20200405-centos-create-kvm-vm/</id>
    <published>2020-04-05T02:00:00.000Z</published>
    <updated>2020-04-05T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用qemu-kvm在CentOS8上通过GUI创建虚拟机。</p><span id="more"></span><h1 id="1、安装系统组件"><a href="#1、安装系统组件" class="headerlink" title="1、安装系统组件"></a>1、安装系统组件</h1><p>首先我们需要安装epel源和相应的虚拟机工具</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install epel-release -y<br>yum install qemu-kvm qemu-img libvirt virt-manager virt-top.x86_64 virtio-win.noarch virt-viewer.x86_64 virt-install.noarch -y<br><br>virt-install <br>libvirt #安装libvirt会将libvirt-client作为依赖进行安装，libvirt-client即libvirt的客户端，最重要的功能之一就是就在宿主机关机时可以通知虚拟机也关机，使虚拟机系统正常关机，而不是被强制关机，造成数据丢失<br>ipxe-roms-qemu #虚拟机iPXE的启动固件，支持虚拟机从网络启动<br>qemu-kvm #KVM在用户空间运行的程序<br>virt-manager  #基于 Libvirt 的图像化虚拟机管理软件<br>libvirt   #用于管理虚拟机，它提供了一套虚拟机操作API<br>virt-viewer  #显示虚拟机的控制台console<br>virt-top  #类似于top命令，查看虚拟机的资源使用情况<br>virt-what  #在虚拟机内部执行，查看虚拟机运行的虚拟化平台<br>qemu-img  #用于操作虚拟机硬盘镜像的创建、查看和格式转化<br></code></pre></div></td></tr></table></figure><p>一些主要组件的功能介绍如下：</p><ul><li><p><code>virt-install</code></p><p>Description  : Package includes several command line utilities, including virt-install</p><div class="hljs code-wrapper"><pre><code>      : (build and install new VMs) and virt-clone (clone an existing virtual      : machine).</code></pre></div></li><li><p><code>virt-who</code></p><p>Description  : Agent that collects information about virtual guests present in the system and</p><div class="hljs code-wrapper"><pre><code>      : report them to the subscription manager.</code></pre></div></li><li><p><code>virt-top</code></p><p>Description  : virt-top is a ‘top(1)’-like utility for showing stats of virtualized</p><div class="hljs code-wrapper"><pre><code>      : domains.  Many keys and command line options are the same as for      : ordinary &#39;top&#39;.      :       : It uses libvirt so it is capable of showing stats across a variety of      : different virtualization systems.</code></pre></div></li><li><p><code>virt-viewer</code></p><p>Description  : Virtual Machine Viewer provides a graphical console client for connecting</p><div class="hljs code-wrapper"><pre><code>      : to virtual machines. It uses the GTK-VNC or SPICE-GTK widgets to provide      : the display, and libvirt for looking up VNC/SPICE server details.</code></pre></div></li><li><p><code>virt-manager</code></p><p>Description  : Virtual Machine Manager provides a graphical tool for administering virtual</p><div class="hljs code-wrapper"><pre><code>      : machines for KVM, Xen, and LXC. Start, stop, add or remove virtual devices,      : connect to a graphical or serial console, and see resource usage statistics      : for existing VMs on local or remote machines. Uses libvirt as the backend      : management API.</code></pre></div></li><li><p><code>libvirt</code></p><p>Description  : Libvirt is a C toolkit to interact with the virtualization capabilities</p><div class="hljs code-wrapper"><pre><code>      : of recent versions of Linux (and other OSes). The main package includes      : the libvirtd server exporting the virtualization support.</code></pre></div></li><li><p><code>qemu-kvm</code></p><p>Description  : qemu-kvm is an open source virtualizer that provides hardware</p><div class="hljs code-wrapper"><pre><code>      : emulation for the KVM hypervisor. qemu-kvm acts as a virtual      : machine monitor together with the KVM kernel modules, and emulates the      : hardware for a full system such as a PC and its associated peripherals.</code></pre></div></li></ul><h1 id="2、创建虚拟机"><a href="#2、创建虚拟机" class="headerlink" title="2、创建虚拟机"></a>2、创建虚拟机</h1><h2 id="2-1-配置虚拟机存储目录"><a href="#2-1-配置虚拟机存储目录" class="headerlink" title="2.1 配置虚拟机存储目录"></a>2.1 配置虚拟机存储目录</h2><p>这里我们直接开启宿主机Linux系统上面的GUI模式并且使用xrdp远程到桌面，然后使用<code>virt-manager</code>来进行GUI模式的创建虚拟机。</p><blockquote><p>这里需要注意的是因为我们使用的是ISO镜像文件来进行虚拟机系统的安装，因此必须需要一个GUI界面来进行最开始的系统安装，等待系统安装完成之后，我们可以直接使用命令行操作来克隆虚拟机，就不用每次都打开GUI模式安装系统这么麻烦了。</p></blockquote><p>接着我们创建一个目录专门用来存放虚拟机相关的镜像和文件，同时我们还需要注意权限的问题：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkdir -p /kvm/iso<br>sudo chown tinychen:tinychen /kvm -R<br></code></pre></div></td></tr></table></figure><p>接着我们把相应的系统安装镜像复制进去（对应的系统安装镜像文件均可直接在对应的官网下载），然后打开<code>Virtual Machine Manager</code>（以下简称VMM）来创建虚拟机</p><p><img src="https://resource.tinychen.com/20200407222046.png"></p><p>首先我们在<code>Edit→Preferences</code>里面开启XML文件编辑功能，XML模式可以最大程度的控制虚拟机的所有配置，一些特殊的配置或者组件操作无法通过VMM的GUI界面完成的我们可以直接编辑对应的XML文件块来实现。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/91RrPRPkxwoW.png"></p><h2 id="2-2-创建虚拟机"><a href="#2-2-创建虚拟机" class="headerlink" title="2.2 创建虚拟机"></a>2.2 创建虚拟机</h2><p>直接点击<code>加号</code>或者上面的<code>File→New Virtual Machine</code>然后选择使用本地媒体创建虚拟机（这里我们使用刚刚复制进去的ISO镜像文件）</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/qBG6f4K8RFTr.png"></p><p>接着我们可以看到有四种创建虚拟机的方式：</p><ul><li>从本地的媒体资源安装（iso文件或者CD光盘）</li><li>通过网络协议获取安装的镜像文件然后进行安装</li><li>通过PXE进行安装</li><li>导入已有的虚拟机硬盘镜像文件</li></ul><p>我们选择第一种方式进行新建虚拟机操作。</p><p><img src="https://resource.tinychen.com/20200407222856.png"></p><p>由于是第一次创建虚拟机，我们需要先在VMM中添加一个池（pool），把先前创建的存放iso镜像文件的目录作为一个池添加到VMM中。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/89XGBr704Dfa.png"></p><p>添加完成之后我们就可以看到里面的镜像文件，这里我们选择CentOS7的版本进行安装。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/K4HnyMvgqE9O.png"></p><p>选择镜像之后VMM会自动检测镜像文件内包含的操作系统。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/F8PIaR58VKl2.png"></p><p>接下来是设定CPU和内存，注意这里的内存单位是MB，而CPU的单位是个，即并不是我们常说的CPU核心数量或者是超线程的线程数量，而是虚拟设定的多少个CPU，这里选择4即为4个CPU而不是一个4核CPU，<strong>这个选项我们后面需要再进行修改</strong>。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/9MRcgr72BaSj.png"></p><p>接下来便是进行虚拟机的硬盘参数设置，我们这里选择手动创建一个硬盘。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/VSyuFbMf2B2p.png"></p><p>和之前一样我们再创建一个池专门用来存放虚拟机的系统镜像文件。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/iBtfNknt1AfQ.png"></p><p>接着在对应的池中新建一个qcow2磁盘文件。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/Ytw3FHQ40o80.png"></p><p>这里我们可以看到硬盘的格式主要有raw和qcow2两种。qcow2 镜像格式是 QEMU 模拟器支持的一种磁盘镜像。它也是可以用一个文件的形式来表示一块固定大小的块设备磁盘。与普通的 raw 格式的镜像相比，有以下特性：</p><ul><li>更小的空间占用，即使文件系统不支持空洞(holes)；</li><li>支持写时拷贝（COW, copy-on-write），镜像文件只反映底层磁盘的变化；</li><li>支持快照（snapshot），镜像文件能够包含多个快照的历史；</li><li>可选择基于 zlib 的压缩方式</li><li>可以选择 AES 加密</li></ul><p>qcow2最大的特点就是可以节省硬盘空间，只有在虚拟机实际占用了磁盘空间时，其文件才会增长。比如这里我们创建了一个40G的硬盘镜像文件，但是实际占用并没有40G，只有在虚拟机实际使用了硬盘空间之后，qcow2格式的镜像文件才会增大。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/cf1T1J4cVIXl.png"></p><p><img src="https://resource.tinychen.com/blogphotos/20200407/ib6Kd21DvzIP.png"></p><p>最后需要设置的就是虚拟机的网卡，这里我们要勾选<code>Customize configuration before install</code>，在系统开始安装之前进行一些参数的设置。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/j6YvgD4OwvDS.png"></p><h2 id="2-3-配置虚拟机其他参数"><a href="#2-3-配置虚拟机其他参数" class="headerlink" title="2.3 配置虚拟机其他参数"></a>2.3 配置虚拟机其他参数</h2><p>首先我们看到<code>Overview</code>中的<code>Chipset</code>和<code>Firmware</code>两个参数，它们分别相当于物理机电脑主板的芯片组和固件模式（BIOS或UEFI），如果有新版本的需求（如虚拟机KVM直通GPU）可以选择UEFI（OVMF）来进行启动，需要注意VMM中的快照（snapshot）功能不支持UEFI（OVMF）固件的虚拟机，因此这里我们选择默认的Q35和BIOS即可。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/qDsvA9Bjbo7M.png"></p><p>接下来我们需要对前面设定的CPU参数进行更改。这里我们编辑对应的XML文件将CPU模式修改为<code>host-passthrough</code>以便将CPU的全部特性传递到虚拟机中，同时修改CPU个数为1，核心数为4，每个核心的线程数为1。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/vRQpHOifxppU.png"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cpu</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;host-passthrough&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">topology</span> <span class="hljs-attr">sockets</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cores</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">threads</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">cpu</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blogphotos/20200407/oQANCFXRzPE9.png"></p><p>设定安装系统的ISO为只读，保证ISO文件不会被修改，同时设置数据总线方式为SATA保证最好的兼容性。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/nCeP9DhIJ3pr.png"></p><p>配置两个网卡，分别为桥接宿主机的网卡和NAT模式，其中桥接网卡使用e1000e型号保证最好的兼容性，NAT模式的网卡使用VirtIO型号可以达到最大100G的传输速度。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/gasot4Fqknrk.png"></p><p><img src="https://resource.tinychen.com/blogphotos/20200407/EEYNsA6KwRCo.png"></p><p>其他还会默认添加一些常用的组件，我们根据自己的需求进行修改，这里我只保留了常用的USB重定向设备，声卡、网卡、串行总线等基本设备，如果不清楚具体需求，建议保留。</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/rI4NlOMgUI2P.png"></p><p>最后整个完整的xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">domain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;kvm&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>centos7_demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">uuid</span>&gt;</span>2e80a698-c4f9-464b-bb3e-28c4987cbe9a<span class="hljs-tag">&lt;/<span class="hljs-name">uuid</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">metadata</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">libosinfo:libosinfo</span> <span class="hljs-attr">xmlns:libosinfo</span>=<span class="hljs-string">&quot;http://libosinfo.org/xmlns/libvirt/domain/1.0&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">libosinfo:os</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;http://centos.org/centos/7.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">libosinfo:libosinfo</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">metadata</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">memory</span>&gt;</span>8388608<span class="hljs-tag">&lt;/<span class="hljs-name">memory</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">currentMemory</span>&gt;</span>8388608<span class="hljs-tag">&lt;/<span class="hljs-name">currentMemory</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">vcpu</span> <span class="hljs-attr">current</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">vcpu</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">os</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span> <span class="hljs-attr">arch</span>=<span class="hljs-string">&quot;x86_64&quot;</span> <span class="hljs-attr">machine</span>=<span class="hljs-string">&quot;q35&quot;</span>&gt;</span>hvm<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">boot</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;hd&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">os</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">features</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">acpi</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">apic</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">vmport</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&quot;off&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">features</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cpu</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;host-passthrough&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">topology</span> <span class="hljs-attr">sockets</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cores</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">threads</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">cpu</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">clock</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;utc&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rtc&quot;</span> <span class="hljs-attr">tickpolicy</span>=<span class="hljs-string">&quot;catchup&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pit&quot;</span> <span class="hljs-attr">tickpolicy</span>=<span class="hljs-string">&quot;delay&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hpet&quot;</span> <span class="hljs-attr">present</span>=<span class="hljs-string">&quot;no&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">clock</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pm</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">suspend-to-mem</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;no&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">suspend-to-disk</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;no&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pm</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">devices</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emulator</span>&gt;</span>/usr/libexec/qemu-kvm<span class="hljs-tag">&lt;/<span class="hljs-name">emulator</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">disk</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">device</span>=<span class="hljs-string">&quot;disk&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">driver</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;qemu&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;qcow2&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;/kvm/vm/centos7_demo.qcow2&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;vda&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;virtio&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">disk</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">disk</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">device</span>=<span class="hljs-string">&quot;cdrom&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">driver</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;qemu&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;raw&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;/kvm/iso/centos7.7.iso&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;sda&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;sata&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">readonly</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">disk</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;network&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">network</span>=<span class="hljs-string">&quot;default&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mac</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;52:54:00:83:cc:6d&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">model</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;virtio&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;pty&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">channel</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;unix&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;bind&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;virtio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.qemu.guest_agent.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">channel</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">channel</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;spicevmc&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;virtio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.redhat.spice.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">channel</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tablet&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;usb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">graphics</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;spice&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">tlsPort</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">autoport</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">compression</span>=<span class="hljs-string">&quot;off&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">graphics</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">model</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;qxl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">memballoon</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&quot;virtio&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rng</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&quot;virtio&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">backend</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&quot;random&quot;</span>&gt;</span>/dev/urandom<span class="hljs-tag">&lt;/<span class="hljs-name">backend</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rng</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;direct&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;enp6s0&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;bridge&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mac</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;52:54:00:31:ad:1d&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">model</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;e1000e&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">devices</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">domain</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-4开始安装"><a href="#2-4开始安装" class="headerlink" title="2.4开始安装"></a>2.4开始安装</h2><p><img src="https://resource.tinychen.com/blogphotos/20200407/8Vpx09lXQTBp.png"></p><p>接下来的安装就和正常的物理机安装操作系统一样，这里我们就不再赘述了，由于是CentOS的虚拟机，为了节约系统资源，我选择了最小化安装（Minimal Install）、关闭了KDUMP功能，并且使用LVM来设定分区以便后期扩容</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/HJ6YRVr8Xo2t.png"></p><p>最后可以通过virsh命令来查看虚拟机的状态</p><p><img src="https://resource.tinychen.com/blogphotos/20200407/ILuYhcJWiObV.png"></p><p>如果需要开启虚拟机只需要使用<code>virsh start 虚拟机名</code>即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用qemu-kvm在CentOS8上通过GUI创建虚拟机。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="kvm" scheme="https://tinychen.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat篇02-整体架构和I/O模型</title>
    <link href="https://tinychen.com/20200402-tomcat-02-structure-io-model/"/>
    <id>https://tinychen.com/20200402-tomcat-02-structure-io-model/</id>
    <published>2020-04-02T02:00:00.000Z</published>
    <updated>2020-04-02T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括tomcat服务器的目录结构、工作模式、整体架构、I/O模型以及NIO、NIO2、APR三者的对比介绍。</p><span id="more"></span><h1 id="1、Tomcat的目录结构"><a href="#1、Tomcat的目录结构" class="headerlink" title="1、Tomcat的目录结构"></a>1、Tomcat的目录结构</h1><p>我们先来看一下tomcat8.5和tomcat9中的home目录中的文件：</p><p><img src="https://resource.tinychen.com/blog/20200401/EurnK7y7obav.png"></p><p>可以看到除掉一些说明文件之后，还有7个目录：</p><table><thead><tr><th align="center">目录名</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">bin</td><td align="center">存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同于 windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件</td></tr><tr><td align="center">conf</td><td align="center">配置文件及相关的 DTD<em>（document type definition 文档类型定义，DTD文件一般和XML文件配合使用，主要是为了约束XML文件）</em>。其中最重要的文件是 server.xml，这是容器的主配置文件</td></tr><tr><td align="center">lib</td><td align="center">存放tomcat服务器自身和所有的web应用都可以访问的JAR文件</td></tr><tr><td align="center">logs</td><td align="center">日志文件的默认目录</td></tr><tr><td align="center">temp</td><td align="center">存放临时文件的默认目录</td></tr><tr><td align="center">webapps</td><td align="center">在tomcat上发布Java web应用的时候，默认把web应用的文件存放在这个目录</td></tr><tr><td align="center">work</td><td align="center">tomcat的工作目录，tomcat把运行时生成的一些工作文件存放在这个目录，如默认情况下tomcat会把编译JSP生成的Servlet类文件存放在这里</td></tr></tbody></table><p>实际上除了主目录里有lib目录，在webapps目录下的web应用中的WEB-INF目录下也存在一个lib目录：</p><p><img src="https://resource.tinychen.com/blog/20200331/9XL5OhCa6UtT.png"></p><p>两者的区别在于：</p><p>●　Tomcat主目录下的lib目录：存放的JAR文件<strong>不仅能被Tomcat访问，还能被所有在Tomcat中发布的Java Web应用访问</strong><br>●　webapps目录下的Java Web应用的lib目录：存放的JAR文件<strong>只能被当前Java Web应用访问</strong></p><p>既然有多个lib目录，那么肯定就有使用的优先顺序，Tomcat类加载器的目录加载优先顺序如下：</p><p>Tomcat的类加载器负责为Tomcat本身以及Java Web应用加载相关的类。假如Tomcat的类加载器要为一个Java Web应用加载一个类，类加载器会按照以下优先顺序到各个目录中去查找该类的.class文件，直到找到为止，如果所有目录中都不存在该类的.class文件，则会抛出异常：</p><ol><li>在Java Web应用的<code>WEB-INF/classes</code>目录下查找该类的.class文件</li><li>在Java Web应用的<code>WEB-INF/lib</code>目录下的JAR文件中查找该类的.class文件</li><li>在Tomcat的<code>lib</code>子目录下直接查找该类的.class文件</li><li>在Tomcat的<code>lib</code>子目录下的JAR文件中查找该类的.class文件</li></ol><h1 id="2、Tomcat的工作模式"><a href="#2、Tomcat的工作模式" class="headerlink" title="2、Tomcat的工作模式"></a>2、Tomcat的工作模式</h1><p>Tomcat不仅可以单独运行，还可以与其他的Web服务器集成，作为其他Web服务器的进程内或进程外的servlet容器。集成的意义在于：对于不支持运行Java Servlet的其他Web服务器，可通过集成Tomcat来提供运行Servlet的功能。</p><p>Tomcat有三种工作模式：</p><ul><li>第一种：Tomcat在一个Java虚拟机进程中独立运行，此时客户端直接和tomcat通信。Tomcat可看作是能运行Servlet的独立Web服务器。Servlet容器组件作为Web服务器中的一部分而存在。<strong>这是Tomcat的默认工作模式。</strong></li></ul><p><img src="https://resource.tinychen.com/blog/20200401/FldbzwEHSxcO.png"></p><ul><li><p>第二种：Tomcat运行在其他Web服务器的进程中，Tomcat不直接和客户端通信，仅仅为其他Web服务器处理客户端访问Servlet的请求。进程内的Servlet容器对于单进程、多线程的Web服务器非常合适，<strong>可以提供较高的运行速度，但缺乏伸缩性。</strong></p><p>在这种模式下，Tomcat分为Web服务器插件和Servlet容器组件两部分。如下图所示，Web服务器插件在其他Web服务器进程的内部地址空间启动一个Java虚拟机，Servlet容器组件在此Java虚拟机中运行。如有客户端发出调用Servlet的请求，Web服务器插件获得对此请求的控制并将它转发<strong>（使用JNI通信机制）</strong>给Servlet容器组件。</p></li></ul><p><img src="https://resource.tinychen.com/blog/20200401/Qyp6hqzGjiDW.png"></p><blockquote><p>JNI（Java Native Interface）指的是Java本地调用接口，通过这一接口，Java程序可以和采用其他语言编写的本地程序进行通信。</p></blockquote><ul><li><p>第三种：Tomcat在一个Java虚拟机进程中独立运行，但是它不直接和客户端通信，仅仅为与它集成的其他Web服务器处理客户端访问Servlet的请求。</p><p>在这种模式下，Tomcat分为Web服务器插件和Servlet容器组件两部分。如下图所示，Web服务器插件在其他Web服务器的<strong>外部地址空间</strong>启动一个JVM进程，Servlet容器组件在此JVM中运行。如有客户端发出调用Servlet的请求，Web服务器插件获得对此请求的控制并将它转发（采用IPC通信机制）给Servlet容器。</p><p><strong>进程外Servlet容器对客户请求的响应速度不如进程内Servlet容器，但进程外容器具有更好的伸缩性和稳定性。</strong></p></li></ul><p><img src="https://resource.tinychen.com/image-20200401104831691.png"></p><blockquote><p>IPC（Inter-Process Communication，进程间通信）是两个进程之间进行通信的一种机制。</p></blockquote><h1 id="3、Tomcat的整体架构"><a href="#3、Tomcat的整体架构" class="headerlink" title="3、Tomcat的整体架构"></a>3、Tomcat的整体架构</h1><p>我们先从tomcat的源码目录来分析一下tomcat的整体架构，前面我们配置jsvc运行tomcat的时候，我们知道tomcat中启动运行的最主要的类是<code>org.apache.catalina.startup.Bootstrap</code>，那么我们在tomcat的源码中的java目录下的org目录的apache目录可以找到主要的源码的相对应的类。</p><p><img src="https://resource.tinychen.com/blog/20200401/VjgcMc38VXw4.png"></p><p>图中的目录如果画成架构图，可以这样表示：</p><p><img src="https://resource.tinychen.com/20200401115202.png"></p><p>Tomcat 本质上就是一款Servlet 容器，因此<code>catalina</code>才是Tomcat的核心 ，其他模块都是为<code>catalina</code>提供支撑的。 </p><ul><li><code>coyote</code>模块主要负责链接通信，Tomcat作为http服务器，需要从socket中获得HTTP数据流；而Tomcat作为容器，只能处理封装好的<code>org.apache.coyote.Request</code>，因此从socket到Request之间的转换就交给<code>coyote</code>来负责了。因此，连接socket和容器之间的重任就交给了Coyote。简单说就是coyote来处理底层的socket，并将http请求、响应等字节流层面的东西，包装成Request和Response两个类（这两个类是tomcat定义的，而非servlet中的ServletRequest和ServletResponse），供容器使用；同时，为了能让我们编写的servlet能够得到ServletRequest，tomcat使用了facade模式，将比较底层、低级的Request包装成为ServletRequest（这一过程通常发生在Wrapper容器一级）</li></ul><p><img src="https://resource.tinychen.com/20200402111850.png"></p><ul><li><p><code>jasper</code>模块提供JSP引擎，在jsp文件被初次访问的时候做出响应，将jsp页面翻译成servlet请求，然后调用java编译器对servlet进行编译得到class文件，再调用jvm来执行class文件生成应答，最后把应答发送回客户端。</p></li><li><p><code>el</code>全名为Expression Language，也叫<a href="https://en.wikipedia.org/wiki/Unified_Expression_Language">JUEL</a>，主要在Java Web应用中用于将表达式嵌入到web页面</p></li><li><p><code>naming</code>提供JNDI 服务(Java Naming and Directory Interface,Java命名和目录接口)，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</p></li><li><p><code>juli</code>提供日志服务，JDK 所提供的默认 <code>java.util.logging</code> 实现功能太过局限，不能实现针对每一应用进行日志记录，因为配置是针对VM的。而<code>juli</code>通过自定义的 <code>LogManager</code> 能分辨运行在 Tomcat 上的不同 Web 应用（以及它们所用的不同的类加载器），还能针对每一应用进行私有的日志配置。</p></li></ul><h1 id="4、Tomcat的I-O模型"><a href="#4、Tomcat的I-O模型" class="headerlink" title="4、Tomcat的I/O模型"></a>4、Tomcat的I/O模型</h1><h2 id="4-1-阻塞I-O处理模型"><a href="#4-1-阻塞I-O处理模型" class="headerlink" title="4.1 阻塞I/O处理模型"></a>4.1 阻塞I/O处理模型</h2><h3 id="4-1-1-单线程阻塞I-O模型"><a href="#4-1-1-单线程阻塞I-O模型" class="headerlink" title="4.1.1 单线程阻塞I/O模型"></a>4.1.1 单线程阻塞I/O模型</h3><p>单线程阻塞I/O模型是最简单的一种服务器I/O模型，单线程即同时只能处理一个客户端的请求，阻塞即该线程会一直等待，直到处理完成为止。对于多个客户端访问，必须要等到前一个客户端访问结束才能进行下一个访问的处理，请求一个一个排队，只提供一问一答服务。</p><p><img src="https://resource.tinychen.com/20200401153247.png"></p><p>如上图所示：这是一个同步阻塞服务器响应客户端访问的时间节点图。</p><ul><li>首先，服务器必须初始化一个套接字服务器，并绑定某个端口号并使之监听客户端的访问</li><li>接着，客户端1调用服务器的服务，服务器接收到请求后对其进行处理，处理完后写数据回客户端1，整个过程都是在一个线程里面完成的</li><li>最后，处理客户端2的请求并写数据回客户端2，期间就算客户端2在服务器处理完客户端1之前就进行请求，也要等服务器对客户端1响应完后才会对客户端2进行响应处理</li></ul><p><strong>这种模型的特点在于单线程和阻塞I/O。</strong>单线程即服务器端只有一个线程处理客户端的所有请求，客户端连接与服务器端的处理线程比是<code>n:1</code>，它无法同时处理多个连接，只能串行处理连接。而阻塞I/O是指服务器在读写数据时是阻塞的，读取客户端数据时要等待客户端发送数据并且把操作系统内核复制到用户进程中，这时才解除阻塞状态。写数据回客户端时要等待用户进程将数据写入内核并发送到客户端后才解除阻塞状态。<strong>这种阻塞带来了一个问题，服务器必须要等到客户端成功接收才能继续往下处理另外一个客户端的请求，在此期间线程将无法响应任何客户端请求。</strong></p><p>该模型的特点：它是最简单的服务器模型，整个运行过程都只有一个线程，只能支持同时处理一个客户端的请求(如果有多个客户端访问，就必须排队等待)，<strong>服务器系统资源消耗较小，但并发能力低，容错能力差。</strong></p><h3 id="4-1-2-多线程阻塞I-O模型"><a href="#4-1-2-多线程阻塞I-O模型" class="headerlink" title="4.1.2 多线程阻塞I/O模型"></a>4.1.2 多线程阻塞I/O模型</h3><p>多线程阻塞I/O模型在单线程阻塞I/O模型的基础上对其进行改进，加入多线程，提高并发能力，使其能够同时对多个客户端进行响应，多线程的核心就是利用多线程机制为每个客户端分配一个线程。</p><p><img src="https://resource.tinychen.com/image-20200401154934307.png"></p><p>如上图所示，服务器端开始监听客户端的访问，假如有两个客户端同时发送请求过来，服务器端在接收到客户端请求后分别创建两个线程对它们进行处理，每条线程负责一个客户端连接，直到响应完成。<strong>期间两个线程并发地为各自对应的客户端处理请求</strong>，包括读取客户端数据、处理客户端数据、写数据回客户端等操作。</p><p><strong>这种模型的I/O操作也是阻塞的</strong>，因为每个线程执行到读取或写入操作时都将进入阻塞状态，直到读取到客户端的数据或数据成功写入客户端后才解除阻塞状态。尽管I/O操作阻塞，但这种模式比单线程处理的性能明显高了，它不用等到第一个请求处理完才处理第二个，而是并发地处理客户端请求，客户端连接与服务器端处理线程的比例是<code>1:1</code>。</p><p>多线程阻塞I/O模型的特点：支持对多个客户端并发响应，处理能力得到大幅提高，有较大的并发量，但服务器系统资源消耗量较大，而且如果线程数过多，多线程之间会产生较大的线程切换成本，同时拥有较复杂的结构。</p><h2 id="4-2-非阻塞I-O模型"><a href="#4-2-非阻塞I-O模型" class="headerlink" title="4.2 非阻塞I/O模型"></a>4.2 非阻塞I/O模型</h2><h3 id="4-2-1-非阻塞情况下的事件检测"><a href="#4-2-1-非阻塞情况下的事件检测" class="headerlink" title="4.2.1 非阻塞情况下的事件检测"></a>4.2.1 非阻塞情况下的事件检测</h3><p>在探讨单线程非阻塞I/O模型前必须要先了解非阻塞情况下套接字事件的检测机制，因为对于单线程非阻塞模型最重要的事情是检测哪些连接有感兴趣的事件发生。一般会有如下三种检测方式。</p><blockquote><p>此处“有感兴趣的事件发生”指的是需要进行读写数据等操作。</p></blockquote><h4 id="1-应用程序遍历套接字的事件检测"><a href="#1-应用程序遍历套接字的事件检测" class="headerlink" title="(1)应用程序遍历套接字的事件检测"></a>(1)应用程序遍历套接字的事件检测</h4><p>当多个客户端向服务器请求时，服务器端会保存一个套接字连接列表中，应用层线程对套接字列表轮询尝试读取或写入。如果成功则进行处理，如果失败则下次继续。这样不管有多少个套接字连接，它们都可以被一个线程管理，这很好地利用了阻塞的时间，处理能力得到提升。</p><p>但这种模型需要在应用程序中遍历所有的套接字列表，同时需要处理数据的拼接，连接空闲时可能也会占用较多CPU资源，不适合实际使用。</p><h4 id="2-内核遍历套接字的事件检测"><a href="#2-内核遍历套接字的事件检测" class="headerlink" title="(2)内核遍历套接字的事件检测"></a>(2)内核遍历套接字的事件检测</h4><p>这种方式将套接字的遍历工作交给了操作系统内核，把对套接字遍历的结果组织成一系列的事件列表并返回应用层处理。对于应用层，它们需要处理的对象就是这些事件，这是一种事件驱动的非阻塞方式。</p><p>服务器端有多个客户端连接，应用层向内核请求读写事件列表。内核遍历所有套接字并生成对应的可读列表readList和可写列表writeList。readList和writeList则标明了每个套接字是否可读/可写。应用层遍历读写事件列表readList和writeList，做相应的读写操作。</p><p>内核遍历套接字时已经不用在应用层对所有套接字进行遍历，将遍历工作下移到内核层，这种方式有助于提高检测效率。<strong>然而，它需要将所有连接的可读事件列表和可写事件列表传到应用层，假如套接字连接数量变大，列表从内核复制到应用层也是不小的开销。</strong>另外，当活跃连接较少时，<strong>内核与应用层之间存在很多无效的数据副本</strong>，因为它将活跃和不活跃的连接状态都复制到应用层中。</p><h4 id="3-内核基于回调的事件检测"><a href="#3-内核基于回调的事件检测" class="headerlink" title="(3)内核基于回调的事件检测"></a>(3)内核基于回调的事件检测</h4><p>通过遍历的方式检测套接字是否可读可写是一种效率比较低的方式，不管是在应用层中遍历还是在内核中遍历。所以需要另外一种机制来优化遍历的方式，那就是<strong>回调函数</strong>。内核中的套接字都对应一个回调函数，当客户端往套接字发送数据时，内核从网卡接收数据后就会调用回调函数，在回调函数中维护事件列表，应用层获取此事件列表即可得到所有感兴趣的事件。</p><p><strong>内核基于回调的事件检测方式有两种</strong></p><h5 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a><strong>方式一：</strong></h5><p>第一种是用<code>可读列表readList</code>和<code>可写列表writeList</code>标记读写事件，<strong>套接字的数量与<code>readList</code>和<code>writeList</code>两个列表的长度一样</strong>。</p><ul><li><p>服务器端有多个客户端套接字连接</p></li><li><p>当客户端发送数据过来时，内核从网卡复制数据成功后调用回调函数将<code>readList/writeList</code>对应的元素标记为可读/可写</p></li><li><p>应用层发送请求读、写事件列表，内核返回包含了事件标识的<code>readList</code>和<code>writeList</code>事件列表，此时返回的两个列表内容大致如下</p><table><thead><tr><th align="center">套接字</th><th align="center">readList</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center">1</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table><table><thead><tr><th align="center">套接字</th><th align="center">writeList</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">0</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table></li><li><p>应用程序接着分表遍历读事件列表readList和写事件列表writeList，对置为1的元素对应的套接字进行读或写操作</p></li><li><p>这样就避免了遍历套接字的操作，但仍然有大量无用的数据(状态为0的元素)从内核复制到应用层中。从上面的表格中我们可以看到实际上有用的数据只是在List中被标记为1的数据（意味着可读或可写），其他的数据并没有传送回去的必要。</p></li></ul><h5 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a><strong>方式二：</strong></h5><ul><li><p>服务器端有多个客户端套接字连接。</p></li><li><p>应用层告诉内核每个套接字感兴趣的事件，这时候直接发送一个列表给内核</p><table><thead><tr><th align="center">套接字</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">read</td></tr><tr><td align="center">2</td><td align="center">write</td></tr><tr><td align="center">3</td><td align="center">read</td></tr><tr><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">n</td><td align="center">……</td></tr></tbody></table></li><li><p>接着，当客户端发送数据过来时，对应会有一个回调函数，内核从网卡复制数据成功后即调回调函数将套接字1作为可读事件event1加入到事件列表，同样地，内核发现网卡可写时就将套接字2作为可写事件event2添加到事件列表中</p></li><li><p>应用层向内核请求读、写事件列表，内核将包含了event1和event2的事件列表返回应用层，此时的列表内容大致如下：</p><table><thead><tr><th align="center">套接字</th><th align="center">可以进行的操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">read</td></tr><tr><td align="center">2</td><td align="center">write</td></tr></tbody></table><p>注意这时不能进行读写操作的套接字是不会被记录到列表中返回给应用层的，这就大大地减少了数据的传输量。</p></li><li><p>应用层通过遍历事件列表得知哪些套接字可以进行哪些操作，然后执行对应的操作。</p></li></ul><p>上面两种方式由操作系统内核维护客户端的所有连接并通过回调函数不断更新事件列表，而应用层线程只要遍历这些事件列表即可知道可读取或可写入的连接，进而对这些连接进行读写操作，极大提高了检测效率，自然处理能力也更强。</p><h3 id="4-2-2-单线程非阻塞I-O模型"><a href="#4-2-2-单线程非阻塞I-O模型" class="headerlink" title="4.2.2 单线程非阻塞I/O模型"></a>4.2.2 单线程非阻塞I/O模型</h3><p>单线程非阻塞I/O模型最重要的一个特点是，在调用读取或写入接口后立即返回，而不会进入阻塞状态。虽然只有一个线程，但是它通过把非阻塞读写操作与上面几种检测机制配合就可以实现对多个连接的及时处理，而不会因为某个连接的阻塞操作导致其他连接无法处理。在客户端连接大多数都保持活跃的情况下，这个线程会一直循环处理这些连接，它很好地利用了阻塞的时间，大大提高了这个线程的执行效率。</p><p>单线程非阻塞I/O模型的主要优势体现在对多个连接的管理，一般在同时需要处理多个连接的发场景中会使用非阻塞NIO模式，此模型下只通过一个线程去维护和处理连接，这样大大提高了机器的效率。一般服务器端才会使用NIO模式，而对于客户端，出于方便及习惯，可使用阻塞模式的套接字进行通信。</p><h3 id="4-2-3-多线程非阻塞I-O模型"><a href="#4-2-3-多线程非阻塞I-O模型" class="headerlink" title="4.2.3 多线程非阻塞I/O模型"></a>4.2.3 多线程非阻塞I/O模型</h3><p>在多核的机器上可以通过多线程继续提高机器效率。最朴实、最自然的做法就是将客户端连接按组分配给若干线程，每个线程负责处理对应组内的连接。比如有4个客户端访问服务器，服务器将套接字1和套接字2交由线程1管理，而线程2则管理套接字3和套接字4，通过事件检测及非阻塞读写就可以让每个线程都能高效处理。</p><p><strong>多线程非阻塞I/O模式让服务器端处理能力得到很大提高，它充分利用机器的CPU，适合用于处理高并发的场景，但它也让程序更复杂，更容易出现问题（死锁、数据不一致等经典并发问题）。</strong></p><h3 id="4-2-4-Reactor模式"><a href="#4-2-4-Reactor模式" class="headerlink" title="4.2.4 Reactor模式"></a>4.2.4 Reactor模式</h3><p>最经典的多线程非阻塞I/O模型方式是Reactor模式。首先看单线程下的Reactor，Reactor将服务器端的整个处理过程分成若干个事件，例如分为接收事件、读事件、写事件、执行事件等。Reactor通过事件检测机制将这些事件分发给不同处理器去处理。在整个过程中只要有待处理的事件存在，即可以让Reactor线程不断往下执行，而不会阻塞在某处，所以处理效率很高。</p><p><img src="https://resource.tinychen.com/20200402115511.png"></p><p><strong>基于单线程Reactor模型，根据实际使用场景，把它改进成多线程模式。常见的有两种方式：一种是在耗时的process处理器中引入多线程，如使用线程池；另一种是直接使用多个Reactor实例，每个Reactor实例对应一个线程。</strong></p><p>Reactor模式的一种改进方式如下图所示。其整体结构基本上与单线程的Reactor类似，只是引入了一个线程池。由于对连接的接收、对数据的读取和对数据的写入等操作基本上都耗时较少，因此把它们都放到Reactor线程中处理。然而，对于逻辑处理可能比较耗时的工作，可以在process处理器中引入线程池，process处理器自己不执行任务，而是交给线程池，从而在Reactor线程中避免了耗时的操作。将耗时的操作转移到线程池中后，尽管Reactor只有一个线程，它也能保证Reactor的高效。</p><p><img src="https://resource.tinychen.com/20200402115553.png"></p><p>Reactor模式的另一种改进方式如下图所示。其中有多个Reactor实例，每个Reactor实例对应一个线程。因为接收事件是相对于服务器端而言的，所以客户端的连接接收工作统一由一个accept处理器负责，accept处理器会将接收的客户端连接均匀分配给所有Reactor实例，每个Reactor实例负责处理分配到该Reactor上的客户端连接，包括连接的读数据、写数据和逻辑处理。这就是多Reactor实例的原理。</p><p><img src="https://resource.tinychen.com/20200402115623.png"></p><h2 id="4-3-Tomcat的I-O模型"><a href="#4-3-Tomcat的I-O模型" class="headerlink" title="4.3 Tomcat的I/O模型"></a>4.3 Tomcat的I/O模型</h2><p>Tomcat支持的I/O模型如下表（自8.5/9.0 版本起，Tomcat移除了对BIO的支持），在 8.0 之前 ， Tomcat 默认采用的I/O方式为 BIO ， 之后改为 NIO。 无论 NIO、NIO2 还是 APR， 在性能方面均优于以往的BIO。</p><table><thead><tr><th>IO模型</th><th>描述</th></tr></thead><tbody><tr><td>NIO</td><td>同步非阻塞I/O，采用Java NIO类库实现</td></tr><tr><td>NIO2</td><td>异步非阻塞I/O，采用JDK 7最新的NIO2类库实现</td></tr><tr><td>APR</td><td>采用Apache可移植运行库实现，是C/C++编写的本地库，需要单独安装APR库</td></tr></tbody></table><p><img src="https://resource.tinychen.com/20200402151558.png"></p><h3 id="4-3-1-NIO（New-I-O-APIs、同步非阻塞）"><a href="#4-3-1-NIO（New-I-O-APIs、同步非阻塞）" class="headerlink" title="4.3.1 NIO（New I/O APIs、同步非阻塞）"></a>4.3.1 NIO（New I/O APIs、同步非阻塞）</h3><p><strong>Tomcat中的NIO模型是使用的JAVA的NIO类库，其内部的IO实现是同步的（也就是在用户态和内核态之间的数据交换上是同步机制），采用基于selector实现的异步事件驱动机制（这里的异步指的是selector这个实现模型是使用的异步机制）。</strong>而对于Java来说，非阻塞I/O的实现完全是基于操作系统内核的非阻塞I/O，它将操作系统的非阻塞I/O的差异屏蔽并提供统一的API，让我们不必关心操作系统。JDK会帮我们选择非阻塞I/O的实现方式。</p><blockquote><p>这里需要提一下同步异步和阻塞非阻塞的概念：</p><p><strong>同步和异步关注的是消息通信机制</strong>，同步异步指的是应用程序<strong>发起的调用请求</strong>和<strong>获得的返回值</strong>是否一起返回，如果一起返回就是同步，否则就是异步，异步可以通过回调函数等方式实现。</p><p><strong>阻塞和非阻塞关注的是程序在等待调用结果时的状态</strong>，应用程序发起调用请求之后不能干别的事情直到请求处理完成了就是阻塞，否则就是非阻塞。</p><p><strong>所以我个人认为，对于阻塞I/O谈同步异步是没有太大意义的，因为此时进程已经阻塞，想要去干别的事情必须得等请求处理完，而请求处理完必然会得到返回值。</strong></p><p>上面我们提到得内核基于回调得事件检测方式二就是典型的异步非阻塞I/O模型。</p></blockquote><h3 id="4-3-2-NIO2（New-I-O-APIs-2、异步非阻塞、AIO）"><a href="#4-3-2-NIO2（New-I-O-APIs-2、异步非阻塞、AIO）" class="headerlink" title="4.3.2 NIO2（New I/O APIs 2、异步非阻塞、AIO）"></a>4.3.2 NIO2（New I/O APIs 2、异步非阻塞、AIO）</h3><p>NIO2和前者相比的最大不同就在于引入了异步通道来实现异步IO操作，因此也叫AIO（Asynchronous I/O）。NIO.2 的异步通道 APIs 提供方便的、平台独立的执行异步操作的标准方法。这使得应用程序开发人员能够以更清晰的方式来编写程序，而不必定义自己的 Java 线程，此外，还可通过使用底层 OS 所支持的异步功能来提高性能。如同其他 Java API 一样，API 可利用的 OS 自有异步功能的数量取决于其对该平台的支持程度。</p><p>异步通道提供支持连接、读取、以及写入之类非锁定操作的连接，并提供对已启动操作的控制机制。Java 7 中用于 Java Platform（NIO.2）的 More New I/O APIs，通过在 <code>java.nio.channels</code> 包中增加四个异步通道类，从而增强了 Java 1.4 中的 New I/O APIs（NIO），这些类在风格上与 NIO 通道 API 很相似。他们共享相同的方法与参数结构体，并且大多数对于 NIO 通道类可用的参数，对于新的异步版本仍然可用。主要区别在于新通道可使一些操作异步执行。</p><p>异步通道 API 提供两种对已启动异步操作的监测与控制机制。第一种是通过返回一个 <code>java.util.concurrent.Future</code> 对象来实现，它将会建模一个挂起操作，并可用于查询其状态以及获取结果。第二种是通过传递给操作一个新类的对象，<code>java.nio.channels.CompletionHandler</code>，来完成，它会定义在操作完毕后所执行的处理程序方法。每个异步通道类为每个操作定义 API 副本，这样可采用任一机制。</p><h3 id="4-3-3-APR"><a href="#4-3-3-APR" class="headerlink" title="4.3.3 APR"></a>4.3.3 APR</h3><p><strong>Apache可移植运行时（Apache Portable Runtime，APR）</strong>是Apache HTTP服务器的支持库，最初，APR是作为Apache HTTP服务器的一部分而存在的，后来成为一个单独的项目。其他的应用程序可以使用APR来实现平台无关性（跨平台）。APR提供了一组映射到下层操作系统的API，如果操作系统不支持某个特定的功能，APR将提供一个模拟的实现。这样程序员使用APR编写真正可在不同平台上移植的程序。</p><h3 id="4-3-4-Tomcat配置APR"><a href="#4-3-4-Tomcat配置APR" class="headerlink" title="4.3.4 Tomcat配置APR"></a>4.3.4 Tomcat配置APR</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 手动编译安装最新版本的apr</span><br>cd /home<br>wget https://dlcdn.apache.org//apr/apr-1.7.0.tar.gz<br>yum group install &quot; Development Tools &quot; -y<br>tar -zxvf apr-1.7.0.tar.gz<br>/home/apr-1.7.0<br>./buildconf<br>./configure &amp;&amp; make &amp;&amp; make install<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 也可以使用yum来安装apr</span><br>yum install apr apr-devel<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入tomcat目录下对tomcat-native进行解压</span><br>cd /home/tomcat9/bin/<br>tar -zxvf tomcat-native.tar.gz <br>cd tomcat-native-1.2.23-src/native/<br><span class="hljs-meta">#</span><span class="bash"> 编译安装</span><br>./configure <br>make<br>make install<br></code></pre></div></td></tr></table></figure><p>顺利安装完成后会显示apr的lib库路径，一般都是<code>/usr/local/apr/lib</code></p><p><img src="https://resource.tinychen.com/20200402101103.png"></p><p>安装完成之后我们还需要修改环境变量和配置参数</p><p>这里我们使用的是systemd调用jsvc来启动tomcat，所以我们直接在systemd对应的tomcat的unit文件中的<code>ExecStart</code>中添加一个路径参数<code>-Djava.library.path=/usr/local/apr/lib</code>指向apr库的路径：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/home/</span>tomcat9<span class="hljs-regexp">/bin/</span>jsvc \<br>        -user tomcat \<br>        -nodetach \<br>        -java-home <span class="hljs-variable">$&#123;JAVA_HOME&#125;</span> \<br>        -pidfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span>/tomcat.pid \<br>        -classpath <span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span><span class="hljs-regexp">/bin/</span>bootstrap.jar:<span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span><span class="hljs-regexp">/bin/</span>tomcat-juli.jar \<br>        -outfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/logs/</span>catalina.out \<br>        -errfile <span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/logs/</span>catalina.err \<br>        -Dcatalina.home=<span class="hljs-variable">$&#123;CATALINA_HOME&#125;</span> \<br>        -Dcatalina.base=<span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span> \<br>        -Djava.io.tmpdir=<span class="hljs-variable">$&#123;CATALINA_TMPDIR&#125;</span> \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        -Djava.util.logging.config.file=<span class="hljs-variable">$&#123;CATALINA_BASE&#125;</span><span class="hljs-regexp">/conf/</span>logging.properties \<br>        -Djava.library.path=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apr/</span>lib \<br>        org.apache.catalina.startup.Bootstrap<br></code></pre></div></td></tr></table></figure><p>然后我们在tomcat的home目录下的conf子目录中对server.xml文件进行修改</p><p>把8080端口对应的配置修改成apr：（其他端口配置也类似）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>重启tomcat服务我们从tomcat的日志中就可以看到协议已经从默认的NIO变成了apr。</p><p><img src="https://resource.tinychen.com/20200402102439.png"></p><p><img src="https://resource.tinychen.com/20200402102535.png"></p><h3 id="4-3-5-三者之间的区别："><a href="#4-3-5-三者之间的区别：" class="headerlink" title="4.3.5 三者之间的区别："></a>4.3.5 三者之间的区别：</h3><p>NIO性能是最差的这是毋庸置疑的，如果是考虑到高并发的情况，显然异步非阻塞I/O模式的NIO2和APR库在性能上更有优势，实际上NIO2的性能表现也和APR不相上下，但是NIO2要求Tomcat的版本要在8.0以上，而APR只需要5.5以上即可，但是APR需要额外配置库环境，相对于内置集成的NIO2来说APR这个操作比较麻烦，两者各有优劣。具体使用哪个还是需要结合实际业务需求和环境进行测试才能决定。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括tomcat服务器的目录结构、工作模式、整体架构、I/O模型以及NIO、NIO2、APR三者的对比介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>windows系统RDP远程桌面配置可信证书</title>
    <link href="https://tinychen.com/20200331-mstsc-deploy-tls-cert/"/>
    <id>https://tinychen.com/20200331-mstsc-deploy-tls-cert/</id>
    <published>2020-03-31T02:00:00.000Z</published>
    <updated>2020-03-31T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>为微软windows系统自带的RDP远程桌面配置权威CA签发的证书，使得可以安全加密远程。</p><span id="more"></span><p>首先我们需要确定可以通过<code>公网IP:端口号</code>的方式来远程访问自己的windows主机，如果只是在内网远程，windows本身自己签发的证书便足够了，但是如果暴露在公网上还是使用权威CA签发的可信证书比较安全。</p><blockquote><p>如果家里的宽带有公网IP的可以使用DDNS+端口转发的方式暴露出远程桌面端口号，没有公网IP则可以考虑FRP内网穿透等方式。</p></blockquote><p>接下来我们要准备一个域名和一张域名相关的证书，这里我使用的是阿里云购买的万网域名，证书也是使用的阿里云上申请的免费证书。下载证书一般来说可以得到一个pem文件和一个key文件。</p><p>首先我们使用openssl来生成p12文件，命令格式如下。如果没有安装openssl，可以先安装一个git，然后打开git bash即可使用openssl。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">openssl pkcs12 -export -clcerts -in [your_domain_crt.pem] -inkey [your_domain_key.key] -out [your_domain.p12]<br></code></pre></div></td></tr></table></figure><p>首先我们按win+r然后输入mmc打开管理台：</p><p>然后在<strong>文件</strong>里面<strong>添加管理单元</strong>，选择<strong>证书</strong>，注意这里账户要选择<strong>计算机账户</strong></p><p><img src="https://resource.tinychen.com/blog/20200331/poHgymNCpHvY.png"></p><p>然后在<strong>个人</strong>这里<strong>右键</strong>选择<strong>导入证书</strong>，接着按照默认设置导入我们刚刚生成的p12证书：</p><p><img src="https://resource.tinychen.com/blog/20200331/roqTF8z1GQgX.png"></p><p>接着我们需要修改该证书的属性使得远程桌面能够使用它</p><p>然后找到我们刚刚导入的证书，点击 <strong>右键</strong> ，选择 <strong>所有任务-管理私钥</strong> ，然后把<strong>读取</strong> 权限分配给 <strong>NETWORK SERVICE</strong> </p><p><img src="https://resource.tinychen.com/blog/20200331/WJbgRbClo8BK.png"></p><p>成功之后我们使用证书对应的域名进行远程的时候就不会再弹出证书不安全的提醒了，如果不是使用域名进行连接而是使用IP或者局域网名的话还是会提醒证书不安全。</p><p><img src="https://resource.tinychen.com/blog/20200331/f60KOXWLBdkc.png"></p><blockquote><p>默认情况下是会使用windows自带的自签证书进行连接。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;为微软windows系统自带的RDP远程桌面配置权威CA签发的证书，使得可以安全加密远程。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="tls" scheme="https://tinychen.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat篇01-概念简介和守护进程配置</title>
    <link href="https://tinychen.com/20200327-tomcat-01-brief-introduction-installation/"/>
    <id>https://tinychen.com/20200327-tomcat-01-brief-introduction-installation/</id>
    <published>2020-03-27T02:00:00.000Z</published>
    <updated>2020-03-27T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括tomcat服务器的主要概念介绍、在systemd上的tomcat守护进程的配置、jsvc的原理介绍和systemd的并发实现原理介绍。</p><span id="more"></span><h1 id="1、Tomcat简介"><a href="#1、Tomcat简介" class="headerlink" title="1、Tomcat简介"></a>1、Tomcat简介</h1><p>在了解tomcat之前我们需要了解一些基本的概念。</p><h2 id="1-1-web应用"><a href="#1-1-web应用" class="headerlink" title="1.1 web应用"></a>1.1 web应用</h2><p>所谓Web应用，就是指需要通过编程来创建的Web站点。Web应用中不仅包括普通的静态HTML文档，还包含大量可被Web服务器动态执行的程序。用户在Internet上看到的能开展业务的各种Web站点都可看作Web应用，例如，网上商店和网上银行都是Web应用。此外，公司内部基于Web的Intranet工作平台也是Web应用。</p><p>Web应用与传统的桌面应用程序相比，具有以下特点：</p><ul><li>以浏览器作为展示客户端界面的窗口。</li><li>客户端界面一律表现为网页形式，网页由HTML语言写成。</li><li>客户端与服务器端能进行和业务相关的<strong>动态交互</strong>。</li><li>能完成与桌面应用程序类似的功能。</li><li>使用浏览器—服务器架构（B/S），浏览器与服务器之间采用HTTP协议通信。</li><li>Web应用通过Web服务器来发布。</li></ul><p>web应用的一大好处就是可以轻易地跨平台运行，不论是windows、mac、ios、android还是linux，只要安装了浏览器，一般都可以使用web应用，而浏览器在各个平台都是标配的软件，因此给web应用的普及提供了非常良好的条件。同样的，web应用使用的是B/S架构，即Browser/Server架构，主要的计算任务都交给Server端进行，因此都客户端的性能要求较低，同时也推动了服务端的负载均衡、高可用等技术的发展。</p><blockquote><p><code>Context</code>：在tomcat中一般指web应用</p></blockquote><h2 id="1-2-Servlet"><a href="#1-2-Servlet" class="headerlink" title="1.2 Servlet"></a>1.2 Servlet</h2><p><strong>Servlet（Server Applet），全称Java Servlet。是用Java编写的服务器端程序。</strong>其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类别，一般情况下，我们说的Servlet为后者。</p><p>Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。也就是说Web服务器可以访问任意一个Web应用中所有实现Servlet接口的类。而Web应用中用于被Web服务器动态调用的程序代码位于Servlet接口的实现类中。既然servlet和java关系密切，那么servlet接口的标准制定毫无疑问也是由甲骨文公司来主导。</p><p><strong>Servlet规范把能够发布和运行Java Web应用的Web服务器称为Servlet容器。</strong>Servlet容器最主要的特征是动态执行Java Web应用中Servlet实现类的程序代码。由Apache开源软件组织创建的Tomcat是一个符合Servlet规范的优秀Servlet容器。</p><p><img src="https://resource.tinychen.com/blog/20200324/dak4snL5hzJi.png"></p><h2 id="1-3-jsp"><a href="#1-3-jsp" class="headerlink" title="1.3 jsp"></a>1.3 jsp</h2><p>JSP（全称JavaServer Pages）是由Sun Microsystems公司主导建立的一种<strong>动态网页技术标准</strong>。JSP是HttpServlet的扩展。JSP将Java代码和特定变动内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容。JSP在首次被访问的时候被应用服务器转换为servlet，在以后的运行中，容器直接调用这个servlet，而不再访问JSP页面。<strong>JSP的实质仍然是servlet。</strong></p><h2 id="1-4-Tomcat"><a href="#1-4-Tomcat" class="headerlink" title="1.4 Tomcat"></a>1.4 Tomcat</h2><p><a href="http://tomcat.apache.org/">Tomcat</a><br>是在Oracle公司的JSWDK（JavaServer Web DevelopmentKit，是Oracle公司推出的小型Servlet/JSP调试工具）的基础上发展起来的一个优秀的Servlet容器，<strong>Tomcat本身完全用Java语言编写</strong>。作为一个开源软件，Tomcat除了运行稳定、可靠，并且效率高之外，还可以和目前大部分的主流Web服务器（如IIS、Apache、Nginx等）一起工作。</p><p>tomcat的版本实际上比较复杂，目前有7、8、9、10四个版本并行发布，具体的各个版本的兼容信息我们可以通过<a href="https://tomcat.apache.org/whichversion.html">官网</a>查询。</p><h1 id="2、Tomcat安装配置"><a href="#2、Tomcat安装配置" class="headerlink" title="2、Tomcat安装配置"></a>2、Tomcat安装配置</h1><p>tomcat的配置安装需要先在系统上配置好jdk环境，这里我们使用centos7.7版本的Linux系统和jdk8版本。</p><h2 id="2-1-配置jdk8"><a href="#2-1-配置jdk8" class="headerlink" title="2.1 配置jdk8"></a>2.1 配置jdk8</h2><p>我们首先到<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">官网</a>下载JDK8的安装包，这里我们选择<code>tar.gz</code>格式的压缩包下载，需要注意建议先使用浏览器下载再使用工具传输到Linux上，因为下载需要登录注册账号。</p><p>接着我们解压将安装包解压到自己想要配置的jdk安装目录下，这里我们使用/home/目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /home/<br></code></pre></div></td></tr></table></figure><p>在<code>/etc/profile</code>中添加以下三个参数并导入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">JAVA_HOME=/home/jdk_1.8.0_241<br>CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin<br>export JAVA_HOME CLASSPATH PATH<br></code></pre></div></td></tr></table></figure><p>重新载入配置文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><p>检查配置是否生效，如不生效可以重启终端试试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@tiny-yun ~]# java -version<br>java version &quot;1.8.0_241&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_241-b07)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<br></code></pre></div></td></tr></table></figure><h2 id="2-2-配置tomcat"><a href="#2-2-配置tomcat" class="headerlink" title="2.2 配置tomcat"></a>2.2 配置tomcat</h2><p>tomcat的安装配置和上面几乎一样，由于我们已经在<code>/etc/profile</code>中设定了全局的java环境变量，因此在tomcat中就不用再特殊配置，直接就会使用默认的全局变量。</p><p>这里我们还是使用<a href="https://downloads.apache.org/">官网</a><br>提供的<code>tar.gz</code>压缩包来安装。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># tomcat可以直接使用wget下载</span><br><span class="hljs-attribute">wget</span> https://downloads.apache.org/tomcat/tomcat-<span class="hljs-number">8</span>/v<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>/bin/apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>.tar.gz<br><span class="hljs-comment"># 解压到安装目录并重命名</span><br><span class="hljs-attribute">tar</span> -zxvf apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>.tar.gz /home/<br><span class="hljs-attribute">cd</span> /home<br><span class="hljs-attribute">mv</span> apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span> tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span><br></code></pre></div></td></tr></table></figure><h3 id="tomcat目录"><a href="#tomcat目录" class="headerlink" title="tomcat目录"></a>tomcat目录</h3><p>首先我们来看一下tomcat中的主要目录：</p><ul><li><strong>/bin</strong> 存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同于 Windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件。</li><li><strong>/conf</strong> 配置文件及相关的 DTD。其中最重要的文件是 server.xml，这是容器的主配置文件。</li><li><strong>/log</strong> 日志文件的默认目录。</li><li><strong>/webapps</strong> 存放 Web 应用的相关文件。</li></ul><p>接着我们进入tomcat目录下的<code>bin</code>目录就可以看到各种各样的脚本文件，主要分为<code>bat</code>和<code>sh</code>两类，其中bat主要是在windows系统上使用的，我们可以把它们删掉，接着我们执行一些<code>version.sh</code>这个脚本就可以看到版本信息。</p><p><img src="https://resource.tinychen.com/blog/20200324/fL53hXHw5Q1I.png"></p><p>接下来我们来看一下和tomcat相关的几个变量：</p><p><code>JRE_HOME</code></p><p>这里我们可以看到<code>JRE_HOME</code>这个变量是之前设置了的<code>JAVA_HOME</code>环境变量。</p><ul><li>如果同时定义了<code>JRE_HOME</code>和<code>JAVA_HOME</code>这两个变量，那么使用的是<code>JRE_HOME</code></li><li>如果只定义了<code>JAVA_HOME</code>，那么<code>JRE_HOME</code>变量值就是<code>JAVA_HOME</code>的变量值</li><li>如果两个变量都没定义，那么tomcat无法运行</li></ul><blockquote><p>前面我们提到过tomcat是使用Java编写的，这也就意味着它在运行的时候需要创建一个JVM虚拟机，所以如果没定义JAVA环境变量，tomcat是无法运行的</p></blockquote><h3 id="CATALINA-HOME"><a href="#CATALINA-HOME" class="headerlink" title="CATALINA_HOME"></a><code>CATALINA_HOME</code></h3><p>tomcat安装目录的根目录</p><h3 id="CATALINA-BASE"><a href="#CATALINA-BASE" class="headerlink" title="CATALINA_BASE"></a><code>CATALINA_BASE</code></h3><p>tomcat实例运行的目录，默认情况下等于<code>CATALINA_HOME</code>，如果我们需要在一台机器上运行多个tomcat实例，可以设置多个<code>CATALINA_BASE</code></p><h3 id="setenv-sh"><a href="#setenv-sh" class="headerlink" title="setenv.sh"></a><code>setenv.sh</code></h3><p>这个脚本默认是不存在的，需要我们自己手动创建在<code>bin</code>目录下，在windows系统则应该是<code>setenv.bat</code>，我们在里面指定了JRE_HOME环境变量以及PID文件的位置，这样在运行的时候就能比较方便的定位到运行进程</p><blockquote><p>注意前面提到的<code>CATALINA_HOME</code>和<code>CATALINA_BASE</code>两个变量不能在这里设定，因为tomcat就是根据这两个变量来找到 <code>setenv.sh</code>的。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">[admin@tiny-yun bin]$ cat setenv.sh <br><span class="hljs-attribute">JRE_HOME</span>=/home/jdk1.8.0_241/jre<br><span class="hljs-attribute">CATALINA_PID</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$CATALINA_BASE</span>/tomcat.pid&quot;</span><br></code></pre></div></td></tr></table></figure><p>这时候运行<code>./catalina.sh start</code>或者是<code>./startup.sh</code>文件就可以启动tomcat，注意要在防火墙中放行默认的8080端口。如果没有指定PID文件的位置，在关闭tomcat的时候可能会出现错误。此外，一般不建议使用root用户来运行tomcat。</p><p><img src="https://resource.tinychen.com/blog/20200325/Jdtn5kIniRtV.png"></p><p>个人感觉使用<code>catalina.sh</code>加参数的方式来控制tomcat进程要更加灵活强大一些。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[admin<span class="hljs-variable">@tiny</span><span class="hljs-operator">-</span>yun bin]$ .<span class="hljs-operator">/</span>catalina.sh <span class="hljs-operator">-</span>h<br><span class="hljs-keyword">Using</span> CATALINA_BASE:   <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><br><span class="hljs-keyword">Using</span> CATALINA_HOME:   <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><br><span class="hljs-keyword">Using</span> CATALINA_TMPDIR: <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><span class="hljs-operator">/</span>temp<br><span class="hljs-keyword">Using</span> JRE_HOME:        <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_241<span class="hljs-operator">/</span>jre<br><span class="hljs-keyword">Using</span> CLASSPATH:       <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bootstrap.jar:<span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>tomcat<span class="hljs-operator">-</span>juli.jar<br><span class="hljs-keyword">Using</span> CATALINA_PID:    <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>tomcat<span class="hljs-number">-8.5</span><span class="hljs-number">.53</span><span class="hljs-operator">/</span>tomcat.pid<br>Usage: catalina.sh ( commands ... )<br>commands:<br>  debug             <span class="hljs-keyword">Start</span> Catalina <span class="hljs-keyword">in</span> a debugger<br>  debug <span class="hljs-operator">-</span>security   Debug Catalina <span class="hljs-keyword">with</span> a security manager<br>  jpda <span class="hljs-keyword">start</span>        <span class="hljs-keyword">Start</span> Catalina under JPDA debugger<br>  run               <span class="hljs-keyword">Start</span> Catalina <span class="hljs-keyword">in</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span><br>  run <span class="hljs-operator">-</span>security     <span class="hljs-keyword">Start</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span> <span class="hljs-keyword">with</span> security manager<br>  <span class="hljs-keyword">start</span>             <span class="hljs-keyword">Start</span> Catalina <span class="hljs-keyword">in</span> a separate <span class="hljs-keyword">window</span><br>  <span class="hljs-keyword">start</span> <span class="hljs-operator">-</span>security   <span class="hljs-keyword">Start</span> <span class="hljs-keyword">in</span> a separate <span class="hljs-keyword">window</span> <span class="hljs-keyword">with</span> security manager<br>  stop              Stop Catalina, waiting up <span class="hljs-keyword">to</span> <span class="hljs-number">5</span> seconds <span class="hljs-keyword">for</span> the process <span class="hljs-keyword">to</span> <span class="hljs-keyword">end</span><br>  stop n            Stop Catalina, waiting up <span class="hljs-keyword">to</span> n seconds <span class="hljs-keyword">for</span> the process <span class="hljs-keyword">to</span> <span class="hljs-keyword">end</span><br>  stop <span class="hljs-operator">-</span>force       Stop Catalina, wait up <span class="hljs-keyword">to</span> <span class="hljs-number">5</span> seconds <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> use kill <span class="hljs-operator">-</span>KILL if still <span class="hljs-keyword">running</span><br>  stop n <span class="hljs-operator">-</span>force     Stop Catalina, wait up <span class="hljs-keyword">to</span> n seconds <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> use kill <span class="hljs-operator">-</span>KILL if still <span class="hljs-keyword">running</span><br>  configtest        Run a basic syntax <span class="hljs-keyword">check</span> <span class="hljs-keyword">on</span> server.xml <span class="hljs-operator">-</span> <span class="hljs-keyword">check</span> exit code <span class="hljs-keyword">for</span> <span class="hljs-keyword">result</span><br>  version           What version <span class="hljs-keyword">of</span> tomcat <span class="hljs-keyword">are</span> you <span class="hljs-keyword">running</span>?<br>Note: Waiting <span class="hljs-keyword">for</span> the process <span class="hljs-keyword">to</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">and</span> use <span class="hljs-keyword">of</span> the <span class="hljs-operator">-</span>force option require that $CATALINA_PID <span class="hljs-keyword">is</span> defined<br>[admin<span class="hljs-variable">@tiny</span><span class="hljs-operator">-</span>yun bin]$ <br></code></pre></div></td></tr></table></figure><h1 id="3、-jsvc配置daemon（守护进程）"><a href="#3、-jsvc配置daemon（守护进程）" class="headerlink" title="3、 jsvc配置daemon（守护进程）"></a>3、 jsvc配置daemon（守护进程）</h1><p>在Windows上，tomcat会默认注册成系统服务，这样设置启动和运行都方便很多，而在Linux上，我们需要借助jsvc来实现这一效果。</p><h2 id="3-1-什么是jsvc"><a href="#3-1-什么是jsvc" class="headerlink" title="3.1 什么是jsvc"></a>3.1 什么是jsvc</h2><p><strong>Commons Daemon</strong>（共享守护进程），<a href="http://commons.apache.org/proper/commons-daemon/jsvc.html">原名JSVC</a>，是一个属于Apache的Commons项目的Java库。守护程序提供了一种启动和停止正在运行服务器端应用程序的Java虚拟机（JVM）的便携式方法。<strong>守护程序包括两部分：用C编写的操作系统接口的原生库 ，以及提供用Java编写的Daemon API的库。</strong></p><p><strong>有两种使用Commons守护程序的方法：直接调用实现守护程序接口（interface）或调用为守护程序提供所需方法（method）的类（class）。</strong>例如，Tomcat-4.1.x使用守护程序接口，而Tomcat-5.0.x提供了一个类，该类的方法直接由JSVC调用。</p><h2 id="3-2-jsvc工作原理"><a href="#3-2-jsvc工作原理" class="headerlink" title="3.2 jsvc工作原理"></a>3.2 jsvc工作原理</h2><p>jsvc使用了三个进程来工作：一个启动进程、一个控制进程、一个被控制进程。其中被控制进程一般来说就是java主线程（我们这里就是tomcat），如果JVM虚拟机崩溃了，那么控制进程会在下一分钟重启。因为jsvc是守护进程，所以它应该使用root用户来启动，同时我们可以使用-user参数来进行用户的降级（downgrade），即先使用root用户来创建进程，然后再降级到指定的非root用户而不丢失root用户的特殊权限，如监听1024以下的端口。</p><h2 id="3-3-jsvc配置tomcat守护进程（daemon）"><a href="#3-3-jsvc配置tomcat守护进程（daemon）" class="headerlink" title="3.3 jsvc配置tomcat守护进程（daemon）"></a>3.3 jsvc配置tomcat守护进程（daemon）</h2><p>tomcat的二进制安装包中的bin目录下就有jsvc的安装包，我们需要使用GCC编译器对其进行编译安装。同时在编译的时候我们需要指定jdk的路径，由于我们前面已经手动指定了，这里不需要再指定。如果没有，可以使用<code>./configure --with-java=$JAVA_HOME</code>来进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们进入tomcat的bin目录进行编译</span><br>cd $CATALINA_HOME/bin<br>tar xvfz commons-daemon-native.tar.gz<br>cd commons-daemon-1.2.2-native-src/unix<br>./configure<br>make<br><span class="hljs-meta">#</span><span class="bash"> 编译完成后，会在当前文件夹生成一个jsvc的文件，将它拷贝到tomcat的/bin/目录下</span><br>cp jsvc ../..<br>cd ../..<br><span class="hljs-meta">#</span><span class="bash"> 接着我们可以这样查看jsvc的帮助文档</span><br>./jsvc -help<br></code></pre></div></td></tr></table></figure><p>使用jsvc来启动tomcat，我们使用下面的参数来进行启动</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">./jsvc \<br>    -user tomcat \<br>    -classpath <span class="hljs-variable">$CATALINA_HOME</span>/bin/bootstrap<span class="hljs-selector-class">.jar</span>:<span class="hljs-variable">$CATALINA_HOME</span>/bin/tomcat-juli<span class="hljs-selector-class">.jar</span> \<br>    -outfile <span class="hljs-variable">$CATALINA_BASE</span>/logs/catalina<span class="hljs-selector-class">.out</span> \<br>    -errfile <span class="hljs-variable">$CATALINA_BASE</span>/logs/catalina<span class="hljs-selector-class">.err</span> \<br>    -Dcatalina.home=<span class="hljs-variable">$CATALINA_HOME</span> \<br>    -Dcatalina.base=<span class="hljs-variable">$CATALINA_BASE</span> \<br>    -Djava<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.logging</span>.manager=org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.juli</span><span class="hljs-selector-class">.ClassLoaderLogManager</span> \<br>    -Djava<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.config</span>.file=<span class="hljs-variable">$CATALINA_BASE</span>/conf/logging<span class="hljs-selector-class">.properties</span> \<br>    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.startup</span>.Bootstrap<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200326/jlQScDXanNG5.png"></p><p>注意看这时的用户和PID，上面的12839的用户为root，也就是我们前面说的控制进程，后面被12839进程控制的12840进程才是我们主要运行的tomcat进程，而这里的用户也符合我们使用-user参数指定的tomcat用户。如果我们不指定进程的PID文件位置，那么默认就会在/var/run目录下生成PID文件，我们可以看到这个jsvc.pid对应的正好是jsvc运行的三个进程中的被控制进程。</p><p>如果需要关闭，我们可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./jsvc -stop org.apache.catalina.startup.Bootstrap stop<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 还可以指定pid文件位置，如果前面没有使用默认的pid文件目录的话</span><br>./jsvc -stop -pidfile /var/run/jsvc.pid org.apache.catalina.startup.Bootstrap stop<br></code></pre></div></td></tr></table></figure><p>这个时候可能就会有同学发现，前面不是说jsvc主要有三个进程来工作的吗，怎么这里只有两个进程呢？</p><p>我们在上面的启动命令的选项里面加入一个<code>-wait 10</code>的参数，然后启动之后迅速查看一下进程。</p><blockquote><p>一般情况下，启动进程在启动了控制进程之后就会结束，而当我们使用了<code>-wait</code>参数之后，启动进程会等待被控制进程启动好了之后向其发送一个”I am ready”信号，启动进程在收到信号之后就会结束。<code>-wait 10</code>表示等待时间为10秒，需要注意等待时间要是10的倍数。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20200326/rGRNwKHxcWyh.png"></p><p>这时候可以看到存在三个jsvc相关的进程，等tomcat启动完之后再查看的时候我们就会发现最上面的19347号进程，也就是jsvc启动进程消失了。并且控制进程19350的父进程变成了1号进程。</p><p><img src="https://resource.tinychen.com/blog/20200326/Wz45K8kzINLa.png"></p><p>我们再进一步查看以下进程的关系：</p><p><img src="https://resource.tinychen.com/blog/20200326/5JVRVSUwyzte.png"></p><p>接着我们再来查看一下1号进程。可以发现，在centos7中的1号进程是<code>systemd</code>。</p><p><img src="https://resource.tinychen.com/blog/20200326/N2GUtLLlwlRf.png"></p><p>接着我们可以总结以上的整个过程为下列步骤：</p><ol><li>系统启动，0号进程启动，0号通过fork()生成1号进程systemd；</li><li>1号进程systemd通过fork()创建进程sshd，这就是我们使用的ssh服务的进程；</li><li>用户使用ssh远程登录系统，sshd进程创建了对应的终端进程pts；</li><li>用户在终端输入指令，pts根据系统中指定的该用户使用的shell（此处为bash shell）来执行对应的操作，这里具体表现为根据我们输入的指令来创建jsvc的启动进程；</li><li>jsvc启动进程创建jsvc控制进程，并根据启动参数决定是否在等待jsvc控制进程的”I am ready”信号再结束，同时jsvc启动进程在结束之前会把jsvc控制进程交给1号进程systemd来管理控制；</li><li>jsvc控制进程创建jsvc被控制进程，也就是我们的主要进程tomcat，同时jsvc控制进程会监视jsvc被控制进程，如果它崩溃了，jsvc控制进程则会重启，确保其正常运行；</li></ol><p>这里使用jsvc来启动tomcat的好处就是启动完成了之后即使我们的shell终端关闭了也不会影响它的运行，当然如果我们直接使用tomcat的bin目录下的启动脚本来进行启动然后再送入后台运行也是可以达到这样的效果。实际上我们还可以通过编写systemd的unit单元配置文件，将tomcat注册成系统服务。</p><h2 id="3-4-daemon-sh"><a href="#3-4-daemon-sh" class="headerlink" title="3.4 daemon.sh"></a>3.4 daemon.sh</h2><p>同样的，在tomcat的bin目录下，集成了一个daemon.sh的脚本，用来调用jsvc从而实现tomcat的守护进程。daemon.sh的实现原理还是jsvc，只不过在脚本中加入了大量的变量判断和环境配置文件读取等操作</p><p>在官网上会建议我们直接把daemon.sh脚本复制到 <code>/etc/init.d</code> 目录下，就可以实现开机自动启动了。不过在CentOS7等使用了systemd的系统上，我个人更推荐使用systemd来管理。</p><h1 id="4、systemd配置"><a href="#4、systemd配置" class="headerlink" title="4、systemd配置"></a>4、systemd配置</h1><blockquote><p>这里先放上archwiki和fedoraproject官网上面的链接作为参考资料：</p><p><a href="https://wiki.archlinux.org/index.php/Systemd">https://wiki.archlinux.org/index.php/Systemd</a></p><p><a href="https://docs.fedoraproject.org/en-US/quick-docs/understanding-and-administering-systemd/index.html">https://docs.fedoraproject.org/en-US/quick-docs/understanding-and-administering-systemd/index.html</a></p></blockquote><h2 id="4-1-systemd简介"><a href="#4-1-systemd简介" class="headerlink" title="4.1 systemd简介"></a>4.1 systemd简介</h2><p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器，是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。systemd 和 ubuntu 的 upstart 是竞争对手，不过现在ubuntu也使用了systemd。</p><p>systemd 使用 socket 和 D-Bus 来开启服务，<strong>提供基于守护进程（daemon）的按需启动策略</strong>，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit 。</p><p><strong>systemd 开启和监督整个系统是基于 unit 的概念。</strong>unit 是由一个与配置文件对应的名字和类型组成的(例如：avahi.service unit 有一个具有相同名字的配置文件，是守护进程 Avahi 的一个封装单元)。一个unit单元配置文件可以描述的内容有：系统服务（<code>.service</code>）、挂载点（<code>.mount</code>）、sockets（<code>.sockets</code>） 、系统设备（<code>.device</code>）、交换分区（<code>.swap</code>）、文件路径（<code>.path</code>）、启动目标（<code>.target</code>）、由 systemd 管理的计时器（<code>.timer</code>）。</p><ul><li><code>service</code> ：守护进程的启动、停止、重启和重载是此类 unit 中最为明显的几个类型。</li><li><code>socket</code> ：此类 unit 封装系统和互联网中的一个 socket 。当下，systemd 支持流式、数据报和连续包的 AF_INET、AF_INET6、AF_UNIX socket 。也支持传统的 FIFO（先进先出） 传输模式。<strong>每一个 socket unit 都有一个相应的服务 unit 。相应的服务在第一个连接（connection）进入 socket 或 FIFO 时就会启动(例如：nscd.socket 在有新连接后便启动 nscd.service)。</strong></li><li><code>device</code> ：此类 <em>unit</em> 封装一个存在于 Linux 设备树中的设备。每一个使用 udev 规则标记的设备都将会在 systemd 中作为一个设备 <em>unit</em> 出现。udev 的属性设置可以作为配置设备 <em>unit</em> 依赖关系的配置源。</li><li><code>mount</code> ：此类 <em>unit</em> 封装系统结构层次中的一个挂载点。</li><li><code>automount</code> ：此类 <em>unit</em> 封装系统结构层次中的一个自挂载点。每一个自挂载 unit 对应一个已挂载的挂载 unit (需要在自挂载目录可以存取的情况下尽早挂载)。</li><li><code>target</code> ：此类 unit 为其他 unit 进行逻辑分组。它们本身实际上并不做什么，只是引用其他 <em>unit</em> 而已。这样便可以对 unit 做一个统一的控制。(例如：multi-user.target 相当于在传统使用 SysV 的系统中运行级别5，即GUI图形化界面)；bluetooth.target 只有在蓝牙适配器可用的情况下才调用与蓝牙相关的服务，如：bluetooth 守护进程、obex 守护进程等）</li><li>snapshot ：与 target unit 相似，快照本身不做什么，唯一的目的就是引用其他 unit 。</li></ul><p>systemd的unit文件可以从多个地方加载，使用<code>systemctl show --property=UnitPath</code> 可以按优先级从低到高显示加载目录。</p><p><img src="https://resource.tinychen.com/blog/20200326/dqTDvbfsMkK7.png"></p><blockquote><p>主要的unit文件在下面的两个目录中：</p><ul><li><code>/usr/lib/systemd/system/</code> ：软件包安装的单元</li><li><code>/etc/systemd/system/</code> ：系统管理员安装的单元</li></ul></blockquote><h2 id="4-2-systemd原理"><a href="#4-2-systemd原理" class="headerlink" title="4.2 systemd原理"></a>4.2 systemd原理</h2><p>这里我们重点分析一下systemd的并行操作性能以及service服务的配置单元。</p><p>和前任的sysvinit的完全串行相比，systemd为了加速整个系统启动，实现了几乎所有的进程都并行启动（包括需要上下进程依赖的进程也并行启动）。想要实现这一点，主要需要解决三个方面的依赖问题：socket、D-Bus和文件系统。</p><h3 id="socket-依赖-inetd"><a href="#socket-依赖-inetd" class="headerlink" title="socket 依赖(inetd)"></a>socket 依赖(inetd)</h3><p>绝大多数的服务依赖是套接字依赖。比如服务 A 通过一个套接字端口 S1 提供自己的服务，其他的服务如果需要服务 A，则需要连接 S1。因此如果服务 A 尚未启动，S1 就不存在，其他的服务就会得到启动错误。</p><p>所以传统地，人们需要先启动服务 A，等待它进入就绪状态，再启动其他需要它的服务。</p><p>systemd 认为，只要我们预先把套接字端口S1建立好，那么其他所有的服务就可以同时启动而无需等待服务 A来创建套接字端口S1了。如果服务 A 尚未启动，那么其他进程向套接字端口S1发送的服务请求实际上会被 Linux 操作系统缓存，其他进程会在这个请求的地方等待（这里使用FIFO方式）。一旦服务A启动就绪，就可以立即处理缓存的请求，一切都开始正常运行。</p><p>那么服务如何使用由 init 进程创建的套接字呢？</p><p>Linux 操作系统有一个特性，当进程调用<code>fork</code>或者<code>exec</code>创建子进程之后，所有在父进程中被打开的文件句柄 (<code>file descriptor</code>) 都被子进程所继承。套接字也是一种文件句柄，进程A可以创建一个套接字，此后当进程 A调用 exec 启动一个新的子进程时，只要确保该套接字的<code>close_on_exec</code>标志位被清空，那么新的子进程就可以继承这个套接字。子进程看到的套接字和父进程创建的套接字是同一个系统套接字，就仿佛这个套接字是子进程自己创建的一样，没有任何区别。</p><p>这个特性以前被一个叫做<code>inetd</code>的系统服务所利用。<code>Inetd</code>进程会负责监控一些常用套接字端口，比如 ssh，当该端口有连接请求时，<code>inetd</code>才启动<code>telnetd</code>进程，并把有连接的套接字传递给新的<code>telnetd</code>进程进行处理。这样，当系统没有 ssh 客户端连接时，就不需要启动 sshd 进程。Inetd 可以代理很多的网络服务，这样就可以节约很多的系统负载和内存资源，只有当有真正的连接请求时才启动相应服务，并把套接字传递给相应的服务进程。</p><p>和 inetd 类似，systemd(1号进程)是所有其他进程的父进程，它可以先建立所有需要的套接字，然后在调用 exec 的时候将该套接字传递给新的服务进程，而新进程直接使用该套接字进行服务即可。</p><h3 id="D-Bus-依赖-bus-activation"><a href="#D-Bus-依赖-bus-activation" class="headerlink" title="D-Bus 依赖(bus activation)"></a>D-Bus 依赖(bus activation)</h3><p><strong>D-Bus 是 <code>desktop-bus</code> 的简称，是一个低延迟、低开销、高可用性的进程间通信机制。</strong>它越来越多地用于应用程序之间通信，也用于应用程序和操作系统内核之间的通信。很多现代的服务进程都使用D-Bus 取代套接字作为进程间通信机制，对外提供服务。</p><blockquote><p>Linux的 <code>NetworkManager</code> 服务就使用 D-Bus 和其他的应用程序或者服务进行交互：Linux上常见的邮件客户端软件 <code>evolution</code> 可以通过 D-Bus 从 <code>NetworkManager</code> 服务获取网络状态的改变，以便做出相应的处理。</p></blockquote><p>D-Bus 支持所谓<code>&quot;bus activation&quot;</code>功能。如果服务 A 需要使用服务 B 的 D-Bus 服务，而服务 B 并没有运行，则 D-Bus 可以在服务 A 请求服务 B 的 D-Bus 时自动启动服务 B。而服务 A 发出的请求会被 D-Bus 缓存，服务 A 会等待服务 B 启动就绪。利用这个特性，依赖 D-Bus 的服务就可以实现并行启动。</p><h3 id="文件系统依赖-automounter"><a href="#文件系统依赖-automounter" class="headerlink" title="文件系统依赖(automounter)"></a>文件系统依赖(automounter)</h3><p>系统启动过程中，文件系统相关的活动是最耗时的，比如挂载文件系统，对文件系统进行磁盘检查（fsck），磁盘配额检查等都是非常耗时的操作。在等待这些工作完成的同时，系统处于空闲状态。那些想使用文件系统的服务似乎必须等待文件系统初始化完成才可以启动。但是 systemd 发现这种依赖也是可以避免的。</p><p>systemd 参考了 <a href="https://wiki.archlinux.org/index.php/Autofs">autofs</a> 的设计思路，使得依赖文件系统的服务和文件系统本身初始化两者可以并行工作。autofs 可以监测到某个文件系统挂载点真正被访问到的时候才触发挂载操作，这是通过内核 <a href="https://en.wikipedia.org/wiki/Automounter"><code>automounter</code></a> 模块的支持而实现的。systemd 集成了autofs的实现，对于系统中的挂载点，比如<code>/home</code>，当系统启动的时候，systemd 为其创建一个临时的自动挂载点。在这个时刻<code>/home</code> 真正的挂载设备尚未启动好，真正的挂载操作还没有执行，文件系统检测也还没有完成。可是那些依赖该目录的进程已经可以并发启动，他们的 <code>open()</code>操作被内建在 systemd 中的 <code>autofs</code> 捕获，将该 <code>open()</code>调用挂起（可中断睡眠状态）。然后等待真正的挂载操作完成，文件系统检测也完成后，systemd 将该自动挂载点替换为真正的挂载点，并让 <code>open()</code>调用返回。由此，实现了那些依赖于文件系统的服务和文件系统本身同时并发启动。</p><p>对于<code>/</code>根目录的依赖实际上一定还是要<strong>串行执行</strong>，因为 systemd 自己也存放在<code>/</code>根目录之下，必须等待系统根目录挂载检查好。</p><blockquote><p>不过对于类似<code>/home</code>等挂载点，这种并发可以提高系统的启动速度，尤其是当<code>/home</code>是远程的 NFS 节点，或者是加密盘等，需要耗费较长的时间才可以准备就绪的情况下，因为并发启动，这段时间内，系统并不是完全无事可做，而是可以利用这段空余时间做更多的启动进程的事情，总的来说就缩短了系统启动时间。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从上面的三个办法我们可以看出，systemd让多个程序并行启动的解决思路就是先创建一个虚拟点，让各类需要依赖的服务先运行起来，最后再把虚拟点换成实际的服务使得能够正常运行。</p><h2 id="4-3-systemd实现tomcat的daemon进程"><a href="#4-3-systemd实现tomcat的daemon进程" class="headerlink" title="4.3 systemd实现tomcat的daemon进程"></a>4.3 systemd实现tomcat的daemon进程</h2><p>我们在<code>/usr/lib/systemd/system/</code>目录下新建一个<code>tomcat9.service</code>文件，接下来我们可以使用<code>systemctl</code>命令来进行控制：</p><blockquote><ul><li><p>使用 <code>systemctl</code> 控制单元时，通常需要使用unit文件的全名，包括扩展名（例如 <code>sshd.service</code> ）。但是有些unit可以在 <code>systemctl</code> 中使用简写方式。</p></li><li><p>如果无扩展名，systemctl 默认把扩展名当作 <code>.service</code> 。例如 tomcat 和 <code>tomcat.service</code> 是等价的。</p></li><li><p>挂载点会自动转化为相应的 <code>.mount</code> 单元。例如 <code>/home</code> 等价于 <code>home.mount</code> 。</p></li><li><p>设备会自动转化为相应的 <code>.device</code> 单元，所以 <code>/dev/sda1</code> 等价于 <code>dev-sda1.device</code> 。</p></li></ul></blockquote><h3 id="使用daemon-sh"><a href="#使用daemon-sh" class="headerlink" title="使用daemon.sh"></a>使用daemon.sh</h3><p>首先我们尝试在systemd中使用自带的脚本进行启动和关闭tomcat，这里我们先把<code>startup.sh</code>和<code>shutdown.sh</code>两个脚本给排除掉，虽然它们无法启动守护进程的缺陷可以使用systemd来进行弥补，但是还是无法使用jsvc，无法在特权端口和运行用户之间取得两全，我们直接使用<code>daemon.sh</code>来运行。</p><p>需要注意的是，systemd并不会去读取我们先前在/etc/profile中设定的变量，因此我们直接把变量写进unit配置文件中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br><br>[Service]<br>User=tomcat<br>Group=tomcat<br>PIDFile=/var/run/tomcat.pid<br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br>ExecStart=/home/tomcat9/bin/daemon.sh start<br>ExecStop=/home/tomcat9/bin/daemon.sh stop<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p>添加了新的unit单元之后我们先<code>systemctl daemon-reload</code>重启一下daemon进程，再使用<code>systemctl start tomcat9.service</code>来启动服务，接着查看状态，发现无法正常运行，一启动进程就failed掉了，查看daemon脚本默认的日志文件（位于tomcat目录下的<code>logs/catalina-daemon.out</code>）我们发现返回了143错误。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Service <span class="hljs-keyword">exit</span> with a return value of <span class="hljs-number">143</span><br></code></pre></div></td></tr></table></figure><p>网上搜索了一下，有个解决方案是把daemon.sh脚本中的wait参数时间从10调成240，在125行左右的位置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Set the default service-start <span class="hljs-built_in">wait</span> time <span class="hljs-keyword">if</span> necessary</span><br>test &quot;.$SERVICE_START_WAIT_TIME&quot; = . &amp;&amp; SERVICE_START_WAIT_TIME=10<br></code></pre></div></td></tr></table></figure><p>wait参数调大之后，等待启动成功之后（这里用的主机配置很低，启动比较耗时）就可以正常访问了</p><p><img src="https://resource.tinychen.com/blog/20200327/KFmNuX2L0N1j.png"></p><p>但是在四分钟（240s）之后我们再查看tomcat9.service就会发现，进程已经结束了，再次访问默认的8080端口也无法访问，查找进程也没有找到相关的进程。</p><p><img src="https://resource.tinychen.com/blog/20200327/4IS7HuajJiAC.png"></p><p><strong>试图分析一波</strong></p><p>我们来根据上面的情况结合原理来试图分析一下：</p><p>首先我们可以看到-wait参数时长调到240之后，bash shell进程的生命周期延长了，根据之前的jsvc工作原理部分我们可以知道-wait参数会影响jsvc的启动进程的生命周期，而从systemd输出的信息来看，有包括jsvc三个进程和bash shell进程在内共计四个进程，这和之前我们直接运行daemon.sh之后最终只有jsvc的两个进程（控制进程和被控制进程不同），且Main PID参数指向的是bash shell进程。</p><p>于是乎我们大胆猜测一下：使用<code>daemon.sh start</code>命令启动tomcat，systemd会把启动daemon.sh的bash的PID作为整个service的PID来监控，而这个bash进程在启动了jsvc之后是会自行退出的，这也就导致了systemd认为service已经运行失败，从而清理掉了关联的进程，进而使得jsvc相关的tomcat进程也被清理掉了。而-wait参数时长调到240之后，bash shell进程的存活时间变长，我们就能在tomcat启动完成之后且bash shell进程结束之前访问到tomcat服务器。</p><p>考虑到这种情况，我们可以试一下使用<code>daemon.sh run</code>来启动tomcat，因为在终端中使用run参数的时候会一直把log信息输出到终端，我猜测这个运行方式是和start不太一样的。</p><p><strong>把systemd的unit文件的启动参数改为run，同时将-wait参数时长调回默认的10，再次启动服务。</strong></p><p><img src="https://resource.tinychen.com/blog/20200327/7fEtIOxNacQi.png"></p><p>这次我们可以看到systemd的Main PID对应为jsvc的主进程，tomcat服务也能一直正常的在后台运行。应该算是成功的使用systemd来管理jsvc启动的tomcat进程了。</p><p>那么这两者的区别在哪里呢？接着我们打开daemon.sh这个脚本来查看一下两者的不同：</p><p><img src="https://resource.tinychen.com/blog/20200327/SDqqCLNFjEKa.png"></p><p>从图中我们可以看到两者最大的不同就是使用run命令的时候是<code>exec</code>调用<code>jsvc</code>来启动tomcat并且使用了<code>-nodetach</code>参数。</p><p>shell中的<code>exec</code>命令和直接调用不同，命令<code>exec</code>将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，<strong>而且exec命令后的其它命令将不再执行。</strong></p><p>也就是说，run命令使用exec调用了jsvc，是直接替代原来启动daemon.sh的bash shell进程，并且在这个exec命令执行完之后才会执行后面的exit命令。这样就可以让systemd的Main PID从bash shell进程顺理成章地变为jsvc的启动进程。</p><p>那么我们知道，jsvc的启动进程在启动完jsvc控制进程之后还是会退出的，这个时候systemd还是会监听失败。而<code>-nodetach</code>参数的作用就是不脱离父进程而成为守护进程（ don’t detach from parent process and become a daemon），这样就能顺利地使得jsvc控制进程从它的父进程jsvc启动进程那里“得到”systemd的Main PID的位置，成为该service的主要进程。</p><p>我们直接在终端中运行jsvc并加上<code>-nodetach</code>参数，可以看到即使是运行成功了之后也不会退出（控制进程继承了启动进程成为守护进程一直运行），而没加的情况下则是jsvc启动进程退出后就会退出。</p><p><img src="https://resource.tinychen.com/blog/20200327/nOEzacp0ewCV.png"></p><p>这里再放上systemd使用daemon.sh启动tomcat的整个unit文件的配置及注释：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br><span class="hljs-meta">#</span><span class="bash"> 对整个serive的描述，相当于备注，会出现在systemd的<span class="hljs-built_in">log</span>中</span><br>After=network.target<br><span class="hljs-meta">#</span><span class="bash"> 在network服务启动之后再启动</span><br><br>[Service]<br>User=tomcat<br>Group=tomcat<br><span class="hljs-meta">#</span><span class="bash"> 运行该service的用户及用户组</span><br><br>PIDFile=/var/run/tomcat.pid<br><span class="hljs-meta">#</span><span class="bash"> 该service的PID文件</span><br><br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br><span class="hljs-meta">#</span><span class="bash"> 定义了运行时需要的变量</span><br><br>ExecStart=/home/tomcat9/bin/daemon.sh start<br>ExecStop=/home/tomcat9/bin/daemon.sh stop<br><span class="hljs-meta">#</span><span class="bash"> 对应systemd控制的start和stop命令</span><br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta">#</span><span class="bash"> 运行级别为第三级（带有网络的多用户模式）</span><br></code></pre></div></td></tr></table></figure><h3 id="直接使用jsvc"><a href="#直接使用jsvc" class="headerlink" title="直接使用jsvc"></a>直接使用jsvc</h3><p>既然搞清楚了运行原理，我们也就可以跳过脚本直接在unit文件中定义各种参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Unit]<br>Description=Apache Tomcat 9<br>After=network.target<br><br>[Service]<br>User=root<br>Group=root<br><span class="hljs-meta">#</span><span class="bash"> 这里使用root用户启动方便jsvc监听特权端口</span><br><span class="hljs-meta">#</span><span class="bash"> 后面可以在jsvc参数中使用-user降权到tomcat用户</span><br><br>PIDFile=/var/run/tomcat.pid<br><br>Environment=JAVA_HOME=/home/jdk8/<br>Environment=JRE_HOME=/home/jdk8/jre<br>Environment=CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>Environment=CATALINA_HOME=/home/tomcat9<br>Environment=CATALINA_BASE=/home/tomcat9<br>Environment=CATALINA_TMPDIR=/home/tomcat9/temp<br><br>ExecStart=/home/tomcat9/bin/jsvc \<br>        -user tomcat \<br>        -nodetach \<br>        -java-home $&#123;JAVA_HOME&#125; \<br>        -pidfile $&#123;CATALINA_BASE&#125;/tomcat.pid \<br>        -classpath $&#123;CATALINA_HOME&#125;/bin/bootstrap.jar:$&#123;CATALINA_HOME&#125;/bin/tomcat-juli.jar \<br>        -outfile $&#123;CATALINA_BASE&#125;/logs/catalina.out \<br>        -errfile $&#123;CATALINA_BASE&#125;/logs/catalina.err \<br>        -Dcatalina.home=$&#123;CATALINA_HOME&#125; \<br>        -Dcatalina.base=$&#123;CATALINA_BASE&#125; \<br>        -Djava.io.tmpdir=$&#123;CATALINA_TMPDIR&#125; \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        -Djava.util.logging.config.file=$&#123;CATALINA_BASE&#125;/conf/logging.properties \<br>        org.apache.catalina.startup.Bootstrap<br><br>ExecStop=/home/tomcat9/bin/jsvc \<br>        -stop \<br>        -classpath $&#123;CLASSPATH&#125; \<br>        -Dcatalina.base=$&#123;CATALINA_BASE&#125; \<br>        -Dcatalina.home=$&#123;CATALINA_HOME&#125; \<br>        -pidfile $&#123;CATALINA_BASE&#125;/tomcat.pid \<br>        -Djava.io.tmpdir=$&#123;CATALINA_TMPDIR&#125; \<br>        -Djava.util.logging.config.file=$&#123;CATALINA_BASE&#125;/conf/logging.properties \<br>        -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>        org.apache.catalina.startup.Bootstrap<br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：ExecStart和ExecStop两个命令中的执行文件路径需要使用绝对路径</p></blockquote><p><img src="https://resource.tinychen.com/blog/20200327/xePF5uyykIOM.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括tomcat服务器的主要概念介绍、在systemd上的tomcat守护进程的配置、jsvc的原理介绍和systemd的并发实现原理介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇06-Sendfile指令及其原理</title>
    <link href="https://tinychen.com/20200323-nginx-06-sendfile/"/>
    <id>https://tinychen.com/20200323-nginx-06-sendfile/</id>
    <published>2020-03-23T06:00:00.000Z</published>
    <updated>2020-03-23T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx中http模块中的sendfile指令及其原理。</p><span id="more"></span><h1 id="1、sendfile-介绍"><a href="#1、sendfile-介绍" class="headerlink" title="1、sendfile()介绍"></a>1、sendfile()介绍</h1><p>nginx的http模块中有一个<code>sendfile</code>指令，默认是开启状态，<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile">官网的文档</a>对其解释是：</p><blockquote><p>Enables or disables the use of <code>sendfile()</code>.</p><p>Starting from nginx 0.8.12 and FreeBSD 5.2.1, <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#aio">aio</a> can be used to pre-load data for <code>sendfile()</code>:</p><blockquote><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /video/ &#123;<br>    <span class="hljs-attribute">sendfile</span>       <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nopush</span>     <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">aio</span>            <span class="hljs-literal">on</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>In this configuration, <code>sendfile()</code> is called with the <code>SF_NODISKIO</code> flag which causes it not to block on disk I/O, but, instead, report back that the data are not in memory. nginx then initiates an asynchronous data load by reading one byte. On the first read, the FreeBSD kernel loads the first 128K bytes of a file into memory, although next reads will only load data in 16K chunks. This can be changed using the <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#read_ahead">read_ahead</a> directive.</p></blockquote><p>简单来说就是启用sendfile()系统调用来替换read()和write()调用，减少系统上下文切换从而提高性能，当 nginx 是静态文件服务器时，能极大提高nginx的性能表现，而当 nginx 是反向代理服务器时，则没什么用了。下面我们来分析一下这个sendfile的工作原理：</p><h1 id="2、原理分析"><a href="#2、原理分析" class="headerlink" title="2、原理分析"></a>2、原理分析</h1><p>首先我们需要知道sendfile()和read()、write()之间最大的区别就是前者是属于系统调用，而后者是属于函数调用，我们来看下面这幅图</p><p><img src="https://resource.tinychen.com/blog/20200324/dQBklaVXJ2O5.png"></p><p>我们不难看出，nginx是属于Applicaiton的，而read()、write()属于函数调用，也就是在Lib Func这一层，sendfile()系统调用，位于System Call这一层，而想要对硬盘进行操作，是kernel才有的权限，上面的那些层都需要往下调用。</p><p>作为对比我们先来看一下正常情况下如果nginx调用read()和write()函数的操作过程：</p><p>我们都知道数据是存储在硬盘上面的，当数据被调用的时候会被加载进内存再被层层递进最后被CPU使用，这里个这个过程我们进行简化。</p><ul><li>步骤一：首先nginx调用read函数，这时data从harddisk从被加载进Kernel Buffer（Hard Disk）中，此时是从一开始的用户态（user mode）陷入内核态（kernel mode）才能完成操作</li><li>步骤二：接着由于data需要被write()函数进行操作，所以data从Kernel Buffer（Hard Disk）传输到User Buffer中，此时从内核态（kernel mode）切换回用户态（user mode）</li><li>步骤三：再接着data被write()函数从user buffer写入到Kernel Buffer（Socket Engine），此时从用户态（user mode）陷入内核态（kernel mode）</li><li>步骤四：data从Kernel Buffer（Socket Engine）传输到Socket Engine，此时从内核态（kernel mode）切换回用户态（user mode）</li></ul><p>这里需要说明两点，一是用户态和内核态之间的切换是需要执行上下文切换操作的，这是十分耗费系统资源和时间的操作，二是因为read()、write()属于函数调用，它们是没有权限在kernel中操作，无法将data直接从Kernel Buffer（Hard Disk）传输到Kernel Buffer（Socket Engine）。</p><p>那么使用sendfile()呢？，由于是系统调用，所以在步骤二和步骤三的时候就可以不需要再将数据传输到User Buffer，直接在kernel中进行操作，省去了两次状态切换，也就是省去了两次的上下文切换，从而大幅度提升了性能。</p><p>我们来看一下下面的这幅图（灵魂画手上线→_→）</p><p><img src="https://resource.tinychen.com/blog/20200324/gkIcm2dmrSK4.png"></p><p>最后我们再来解释一下，为什么当 nginx 是反向代理服务器时，<code>sendfile()</code>就没什么用了呢。</p><p>顾名思义，<code>sendfile()</code>的作用是发送文件，也就是接收数据的一段是文件句柄，发送数据的那一端是socket。而在做反向代理服务器的时候，两端都是socket，此时无法使用<code>sendfile()</code>，也就不存在性能提升这一说了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx中http模块中的sendfile指令及其原理。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇05-http长连接和keeplive</title>
    <link href="https://tinychen.com/20200320-nginx-05-upstream-keepalive/"/>
    <id>https://tinychen.com/20200320-nginx-05-upstream-keepalive/</id>
    <published>2020-03-20T08:00:00.000Z</published>
    <updated>2020-03-20T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx中http模块使用http长连接的相关配置（主要是keepalive指令）和http长连接的原理解释。</p><span id="more"></span><h1 id="1、http长连接"><a href="#1、http长连接" class="headerlink" title="1、http长连接"></a>1、http长连接</h1><h2 id="1-1-预备知识"><a href="#1-1-预备知识" class="headerlink" title="1.1 预备知识"></a>1.1 预备知识</h2><p>连接管理是一个 HTTP 的关键话题：打开和保持连接在很大程度上影响着网站和 Web 应用程序的性能。在 HTTP/1.x 里有多种模型：短连接, 长连接, 和 HTTP 流水线。在解释这三种模型之前，我们需要先明确一些前提知识：</p><ul><li>HTTP是属于应用层（七层）的协议，同时它的传输层（四层）使用的是TCP协议，那么也就是说，HTTP的长连接和短连接，其本质就是TCP的长连接和短连接；</li><li>HTTP是一个无状态的面向连接的协议（使用TCP，面向连接、可靠传输），指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）；</li><li>TCP建立连接和断开连接是需要三握四挥的，由于这个属于计算机网络基本知识，所以原理这里不再赘述；</li></ul><p>接下来我们开始解释。</p><h2 id="1-2-HTTP短连接模型"><a href="#1-2-HTTP短连接模型" class="headerlink" title="1.2 HTTP短连接模型"></a>1.2 HTTP短连接模型</h2><p>在早期，HTTP 使用一个简单的模型来处理这样的连接。这些连接的生命周期是短暂的：每发起一个请求时都会创建一个新的连接，并在收到应答时立即关闭。这就是类似上面说的三次握手，在互联网发展的早期一个网页的资源并没有现在这么多，很多可能只是一个简单的静态页面而已，所以这样的模型显然很OK。客户端获取完所需资源之后，就断开连接，不再占用服务器的资源。</p><blockquote><p>套用TCP连接的三握四挥的模型来举例：</p></blockquote><blockquote><p>三次握手：</p><p>A→B：今晚下班一起吃饭吗？</p><p>B→A：好的，今晚下班一起吃饭。</p><p>A→B：好的，我知道你答应我今晚下班一起吃饭的邀请了。</p><hr><p>然后开始去吃饭，吃完饭到了两个人需要各自回家的时候：</p><hr><p>四次挥手：</p><p>A→B：我吃完饭准备走了</p><p>B→A：等一下，我快吃完了</p><p>B→A：好了，我吃完了可以走了</p><p>A→B：好的，我知道你吃完了我们可以走了</p><hr><p>然后两人吃完饭就各回各家了</p></blockquote><p>HTTP 短连接模型是最早期的模型，也是  HTTP/1.0 的默认模型。每一个 HTTP 请求都由它自己独立的连接完成；这意味着发起每一个 HTTP 请求之前都会有一次 TCP 握手，而且是连续不断的。<strong>实际上，TCP 协议握手本身就是耗费时间的，所以 TCP 可以保持更多的热连接来适应负载。短连接破坏了 TCP 具备的能力，新的冷连接降低了其性能。</strong></p><blockquote><p>在 HTTP/1.0 中如果没有指定 <code>Connection</code>协议头，或者是值被设置为 <code>close</code>就会启用短连接模型，要在 HTTP/1.0 中启用长连接模型，需要在协议头中指定<code>Connection: Keep-Alive</code> ，不过并不建议这样操作。</p><p>而在 HTTP/1.1 中，默认使用长连接模型，只有当 <code>Connection</code>被设置为 <code>close</code> 时才会用到这个短连接模型，协议头都不用再去声明它(但是一般还是会把它加上，以防万一因为某种原因要退回到 HTTP/1.0 )。</p></blockquote><h2 id="1-3-HTTP长连接模型"><a href="#1-3-HTTP长连接模型" class="headerlink" title="1.3 HTTP长连接模型"></a>1.3 HTTP长连接模型</h2><p>后来，网页需要请求的资源越来越多，短连接模型显然已经十分吃力了。因为短连接有两个比较大的问题：创建新连接耗费的时间尤为明显（三次握手很耗费时间），另外 TCP 连接的性能只有在该连接被使用一段时间后(热连接)才能得到改善。因此在HTTP/1.1中引入了长连接模型和流水线模型。</p><blockquote><p>在 HTTP/1.1 之前，长连接也被称为keep-alive 连接。</p></blockquote><p>一个长连接会保持一段时间，重复用于发送一系列请求，节省了新建 TCP 连接握手的时间，还可以利用 TCP 的性能增强能力。当然这个连接也不会一直保留着：连接在空闲一段时间后会被关闭(服务器可以使用 Keep-Alive 协议头来指定一个最小的连接保持时间)。</p><blockquote><p>套用上面的例子来进一步解释：</p></blockquote><blockquote><p>三次握手：</p><p>A→B：今晚下班一起吃饭吗？</p><p>B→A：好的，今晚下班一起吃饭。</p><p>A→B：好的，我知道你答应我今晚下班一起吃饭的邀请了。</p><hr><p>然后开始去吃饭，但是这时吃完饭就不是马上四次挥手断开连接，AB两人还顺便去逛街、看电影（相当于省去了三次握手使用已建立的连接来传输多个资源）</p><hr><p>此处省略四次挥手</p><hr><p>最后两人就各回各家了</p></blockquote><p>长连接也还是有缺点的；也就是前面提到的资源占用问题，就算是在空闲状态，它还是会消耗服务器资源，也更容易被DDoS攻击。<strong>本质上长连接是因为不断地三次握手建立连接消耗的资源要大于维持连接所需要的资源才使用的</strong>，如果服务器处于高负载时段或者被DDoS，可以使用非长连接，即尽快关闭那些空闲的连接，也能对性能有所提升。</p><h2 id="1-4-HTTP流水线模型"><a href="#1-4-HTTP流水线模型" class="headerlink" title="1.4 HTTP流水线模型"></a>1.4 HTTP流水线模型</h2><p>流水线模型的实现要复杂很多，而已效果也并不是特别好，主要还要考虑到各种兼容性，所以默认是不启用这个流水线模型的，而在HTTP/2中，流水线已经被更好的算法给代替，如<code>multiplexing</code>。</p><p>默认情况下，HTTP 请求是按顺序发出的。<strong>下一个请求只有在当前请求收到应答过后才会被发出。</strong>由于会受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。<strong>流水线是在同一条长连接上发出连续的请求，而不用等待应答返回。这样可以避免连接延迟。</strong>理论上讲，性能还会因为两个 HTTP 请求有可能被打包到一个 TCP 消息包中而得到提升。就算 HTTP 请求不断的继续，尺寸会增加，但设置 TCP 的 <code>MSS(Maximum Segment Size)</code> 选项，仍然足够包含一系列简单的请求。</p><p>并不是所有类型的 HTTP 请求都能用到流水线：只有 <code>idempotent</code>方式，比如 <code>GET</code>、<code>HEAD</code>、<code>PUT</code>和 <code>DELETE</code>能够被安全的重试：因为有故障发生时，流水线的内容要能被轻易的重试，即出现了问题重试的成本要尽可能低，否则还不如使用长连接模型。</p><p>正确的实现流水线是复杂的：传输中的资源大小，多少有效的 <code>RTT</code> 会被用到，还有有效带宽，流水线带来的改善有多大的影响范围。不知道这些的话，重要的消息可能被延迟到不重要的消息后面。这个重要性的概念甚至会演变为影响到页面布局！因此 HTTP 流水线在大多数情况下带来的改善并不明显。此外，流水线受制于 HOL 问题。</p><blockquote><p>摘自wiki</p><p><strong>队头阻塞</strong>（<strong>Head-of-line blocking</strong>或缩写为<strong>HOL blocking</strong>）在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C">计算机网络</a>的范畴中是一种性能受限的现象。它的原因是一列的第一个数据包（队头）受阻而导致整列数据包受阻。例如它有可能在缓存式输入的交换机中出现，有可能因为传输顺序错乱而出现，亦有可能在HTTP流水线中有多个请求的情况下出现。</p></blockquote><p>我们还是使用上面的例子来进行解释，这次的握手请求就变了，A一次向B发出了三个请求：</p><blockquote><p>三次握手：</p><p>A→B：今晚下班一起吃饭、逛街、看电影吗？</p><p>B→A：好的，今晚下班一起吃饭、逛街、看电影。</p><p>A→B：好的，我知道你答应我今晚下班一起吃饭、逛街、看电影的邀请了。</p><hr><p>实际上这样子是有很大的风险的</p><p>如果是按照长连接模型，A可以根据B在吃饭的时候的反应来决定要不要继续去逛街看电影，也就是如果传输完了一次数据之后还保持连接就继续传输，万一连接突然断开或者是不稳定，那可能就要重新建立连接。（万一B在吃饭的时候吃的不开心不想继续逛街看电影那就等下次再吃饭逛街看电影）</p><p>但是如果按照流水线模型，A一次发送三个请求，虽然发送请求的时候省事儿了（三次握手的时候TCP打包传输请求更省事），但是谁也不知道吃饭逛街看电影的过程中会发生什么意外，时间越长越不稳定，而且还容易出现万一B想减肥不想吃饭，只想逛街看电影的情况呢？（<strong>HOL问题</strong>）</p></blockquote><p>最后这里补充一张图片来对比三种模型之间的差别：</p><p><img src="https://resource.tinychen.com/blog/20200320/wWfgR6m9rdCV.png"></p><h1 id="2、Nginx中的keepalive指令"><a href="#2、Nginx中的keepalive指令" class="headerlink" title="2、Nginx中的keepalive指令"></a>2、Nginx中的keepalive指令</h1><blockquote><p>当我们配置Nginx作为代理服务器的时候，想要支持HTTP长连接，需要client到Nginx和Nginx到server都是长连接，因为此时Nginx既是client的server也是server的client。</p></blockquote><p>了解了上面的原理之后，Nginx中的keepalive指令我们就非常好理解了，相关的指令主要有三个，我们逐个进行解释：</p><h2 id="2-1-keepalive"><a href="#2-1-keepalive" class="headerlink" title="2.1 keepalive"></a>2.1 <code>keepalive</code></h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Syntax</span>:keepalive connections;<br><span class="hljs-attribute">Default</span>:—<br><span class="hljs-attribute">Context</span>:upstream<br><span class="hljs-attribute">This</span> directive appeared in version <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<br></code></pre></div></td></tr></table></figure><p>在upstream模块中配置，启用连接到upstream中的服务器的缓存，<code>connections</code>参数的主要作用是设定每个Nginx的<strong>单个worker进程（each worker process）</strong>对于upstream中的server的最大空闲连接数，当超过该数字的时候，会关闭使用得最少的连接。</p><ul><li><p>对于HTTP，应将<code>proxy_http_version</code>指令设置为“ <code>1.1</code>”，并且应清除<code>Connection</code>标题字段</p></li><li><p>对于FastCGI服务器，需要设置<code>fastcgi_keep_conn</code>以启用<code>keepalive</code>连接</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream http_backend &#123;<br>    server 127.0.0.1:8080;<br>    keepalive 16;<br>&#125;<br><br>server &#123;<br>    location /http/ &#123;<br>        proxy_pass http://http_backend;<br>        proxy_http_version 1.1;<br>        proxy_set_header Connection &quot;&quot;;<br>    &#125;<br>    <br>    lcaotion /FastCGI/ &#123;<br>    fastcgi_pass fastcgi_backend;<br>    fastcgi_keep_conn on;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要注意的是，keepalive指令并不会限制Nginx的<strong>所有worker</strong>进程能开启的连接到upstream服务器中的<strong>连接总数（total number）</strong>。也就是如果设得太大了，会导致过多的空闲连接占满了upstream中的server资源，导致新的连接无法建立，因此这个数值的设定需要根据worker进程数量来调整。</p><h2 id="2-2-keepalive-requests"><a href="#2-2-keepalive-requests" class="headerlink" title="2.2 keepalive_requests"></a>2.2 <code>keepalive_requests</code></h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Syntax:keepalive_requests number;<br>Default:keepalive_requests 100;<br>Context:upstream<br>This directive appeared in version 1.15.3.<br></code></pre></div></td></tr></table></figure><p><code>keepalive_requests</code>设定可以通过一个连接（connection）发送的请求（request）数量，超过最大请求数量之后，该连接会被关闭。为了释放每个连接的内存分配，定期关闭连接是很有必要的。因此，不建议将<code>keepalive_requests</code>设定过大，否则可能会导致过高的内存占用。</p><h2 id="2-3-keepalive-timeout"><a href="#2-3-keepalive-timeout" class="headerlink" title="2.3 keepalive_timeout"></a>2.3 <code>keepalive_timeout</code></h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Syntax</span>:keepalive_timeout timeout;<br><span class="hljs-attribute">Default</span>:keepalive_timeout <span class="hljs-number">60</span>s;<br><span class="hljs-attribute">Context</span>:upstream<br><span class="hljs-attribute">This</span> directive appeared in version <span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">3</span>.<br></code></pre></div></td></tr></table></figure><p>设定连接超时时间，在此设定的时间内，client与upstream中的server的空闲keepalive连接将保持打开状态（open）。此外，虽然官方文档说的默认值是60s，但是1.17.9版本的Nginx在安装之后配置文件nginx.conf上面设定的是65s。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx中http模块使用http长连接的相关配置（主要是keepalive指令）和http长连接的原理解释。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇04-map模块</title>
    <link href="https://tinychen.com/20200320-nginx-04-http-map-module/"/>
    <id>https://tinychen.com/20200320-nginx-04-http-map-module/</id>
    <published>2020-03-20T02:00:00.000Z</published>
    <updated>2020-03-20T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的map模块配置语法。</p><span id="more"></span><p>map模块是由<code>ngx_http_map_module</code>模块提供的，<strong>只能在<code>http模块</code>下使用</strong>，nginx默认自带安装。<strong>map 的主要作用简单来说就和编程语言中的赋值语句有点像，只不过这里称为映射（map）。</strong>具体来说是创建一个自定义变量，去匹配某些指定的字符串或者是正则表达式，如果匹配成功则将该匹配值赋值给该自定义变量，然后该自定义变量可以作其他用途。</p><h1 id="1、语法格式"><a href="#1、语法格式" class="headerlink" title="1、语法格式"></a>1、语法格式</h1><p>我们先来看一下<a href="http://nginx.org/en/docs/http/ngx_http_map_module.html">官网</a>给出的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Syntax:map string $variable &#123; ... &#125;<br>Default:—<br>Context:http<br></code></pre></div></td></tr></table></figure><p>实际上现在的版本中map指令后面的第一个参数也就是源变量可以是字符串、正则表达式或者是另一个变量。因此这样表示会更容易理解一些。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Syntax:map $source_var $result_var &#123; ... &#125;<br></code></pre></div></td></tr></table></figure><p>此外，map模块内还有<code>default</code>、<code>hostnames</code>、<code>include</code>、<code>volatile</code>这四个关键字可以使用</p><ul><li><code>default</code>：使用方法为 <code>default</code> <em>value</em>，主要用于给源变量设定默认值，如果源变量没有匹配到模块中指定的任何一个，则设为指定的<em>value</em>，如果不指定<code>default</code>，则会设定为一个空字符串（NULL）</li><li><code>hostnames</code>：指定源变量可以为域名，并且可以使用前缀掩码或者后缀掩码，如<code>*.example.com</code>或者<code>mail.*</code></li><li><code>include</code>：使用方法为<code>include</code> <em>file</em>，指定一个带有变量的文件，可以使用多次</li><li><code>volatile</code>：指明该变量不可缓存</li></ul><p>我们来看一个复杂一点的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">map $http_host $name &#123;<br>    default 0;<br>    hostnames;<br>    volatile;<br>    *.example.com 1;<br>    *.example.org 2;<br>    *.example.net 3;<br>    mail.* 4;<br>    mail.example.com 5;<br>    include /var/www/html/host.list;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要注意这里的include使用的文件格式应该如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">source_var0 <span class="hljs-variable">$result_var0</span>;</span><br><span class="hljs-meta">$</span><span class="bash">source_var1 <span class="hljs-variable">$result_var1</span>;</span><br>...<br><span class="hljs-meta">$</span><span class="bash">source_varN <span class="hljs-variable">$result_varN</span>;</span><br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nginx.example.com 7;<br>awesome.example.com 8;<br></code></pre></div></td></tr></table></figure><h1 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h1><p>这里有几点需要注意：</p><ul><li>map指令只能在http块中使用；</li><li>如果源变量是字符串，那么在匹配的时候是不区分大小写的；</li><li>在0.9.0版本之前只能指定单个源变量；</li><li>0.9.6版本之后的源变量可以是字符串或者正则表达式；</li><li>正则表达式中，开头“<code>~</code>”为大小写敏感，“<code>~*</code>”为大小写不敏感，正则表达式必须以这两者中的一个开头；</li><li>需要匹配的的源变量中有特殊符号的需要使用反斜杠<code>\</code>来进行转义；</li><li>0.9.0版本中源变量可以使用变量，1.11.0版本中源变量可以使用变量和字符串的组合；</li><li><strong>map指令对应的结果变量（<code>$result_var</code>）只有在之后的配置文件中使用到了该结果变量的时候，才会使用前面定义的map模块来进行映射，因此即使定义了很多个map模块，也不会对性能有额外的影响；</strong></li></ul><h1 id="3、匹配顺序"><a href="#3、匹配顺序" class="headerlink" title="3、匹配顺序"></a>3、匹配顺序</h1><p>当map块中指定的映射关系有多个可以匹配的时候，按照以下的优先顺序进行匹配：</p><ol><li>完整指定没有使用掩码的指定变量，e.g.“<code>mail.example.com</code>”；</li><li>带有前缀掩码的最长字符串值, e.g. “<code>*.nginx.example.com</code>”就会比 “<code>*.example.com</code>”优先匹配；</li><li>带有后缀掩码的最长字符串值, e.g. “<code>mail.nginx.*</code>”就会比 “<code>mail.*</code>”优先匹配；</li><li>按照配置文件中出现的先后顺序匹配的第一个正则表达式；</li><li>设定的default值；</li></ol><blockquote><p>个人记忆口诀：先整再缺，先前再后；先长再短，先实再虚；无则默认，不行查表。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx的map模块配置语法。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇03-负载均衡简单配置和算法原理</title>
    <link href="https://tinychen.com/20200319-nginx-03-load-balancing/"/>
    <id>https://tinychen.com/20200319-nginx-03-load-balancing/</id>
    <published>2020-03-19T02:00:00.000Z</published>
    <updated>2020-03-19T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的负载均衡配置，包括http、tcp和udp负载均衡，以及<code>Round robin</code>、<code>Least connections</code>、<code>Least time</code>（Nginx Plus专属）、<code>Generic hash</code>、<code>Random</code>、<code>IP hash</code>（HTTP模块专属）的原理分析。</p><span id="more"></span><h1 id="1、http负载均衡"><a href="#1、http负载均衡" class="headerlink" title="1、http负载均衡"></a>1、http负载均衡</h1><p>我们先来看一小段配置文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream backend &#123;  <br>  server 10.0.0.1:80  weight=1;  <br>  server nginx.example.com:80  weight=2; <br>&#125;<br><br>server &#123;<br>location / &#123;<br>proxy_pass http://backend;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这是一个简单的使用upstream模块对http服务进行指定权重的负载均衡的配置文件，一般存放在nginx目录下的<code>conf.d</code>文件夹中。</p><p>server可以使用Unix socket、IP、DNS、FQDN等来进行服务器的指定，这里的Unix socket指的是POSIX操作系统中的组件，即用于进程间通信的那个Unix socket。也就是说如果做负载均衡的时候本机也作为server之一，使用scoket确实是可以有效提高速度的（对比DNS和IP等），因为都在同一个系统上，走进程间的通信比走网络通信要少了很多验证步骤和协议，通信的速度会更快。但是在实际业务中比较少使用这样的方式，一般都会直接使用IP方便定位主机和运维分析等。IP相比DNS和FQDN要少了一步域名解析的过程，理论上速度会快一些，但是DNS其实也可以做负载均衡，同时DNS和FQDN给了网络路由更多的控制权，实际怎么使用还要看具体的业务需求。</p><p><code>upstream</code>中<code>server</code>指令语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server address [parameters]<br></code></pre></div></td></tr></table></figure><ul><li><p>关键字<code>server</code>必选</p></li><li><p><code>address</code>也必选，可以是主机名、域名、ip或unix socket，也可以指定端口号</p></li><li><p><code>parameters</code>是可选参数，可以是如下参数：</p><ul><li><code>down</code>：表示当前server已停用</li><li><code>backup</code>：表示当前server是备用服务器，只有其它非backup后端服务器都挂掉了或者很忙才会分配到请求</li><li><code>weight</code>：表示当前server负载权重，权重越大被请求几率越大，默认是1</li></ul></li><li><p><code>max_fails</code>和<code>fail_timeout</code>一般会关联使用，如果某台server在<code>fail_timeout</code>时间内出现了<code>max_fails</code>次连接失败，那么Nginx会认为其已经挂掉了，从而在<code>fail_timeout</code>时间内不再去请求它，<code>fail_timeout</code>默认是10s</p></li><li><p><code>max_fails</code>默认是1，即默认情况是只要发生错误就认为服务器挂掉了</p></li><li><p>如果将<code>max_fails</code>设置为0，则表示取消这项检查</p></li></ul><h1 id="2、tcp负载均衡"><a href="#2、tcp负载均衡" class="headerlink" title="2、tcp负载均衡"></a>2、tcp负载均衡</h1><p>我们来看一个stream模块的配置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stream &#123;    <br>    upstream mysql_read &#123;        <br>        server mysqlread1.example.com:3306  weight=5;<br>        server mysqlread2.example.com:3306;        <br>        server 10.0.0.1:3306        backup;    <br>    &#125;<br><br>    server &#123;        <br>        listen 3306;        <br>        proxy_pass mysql_read;    <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>在这个配置中我们实现了一个MySQL的负载均衡和备份。我们先看整个stream模块包含了<code>upstream</code>模块和<code>server</code>模块，在upstream中指定了三个server，其中第二个server在没有指定权重<code>weight</code>的情况下，**<code>weight</code>默认为1**，而第三个server后面指定了其状态为<code>backup</code>，也就是备用服务器。一般来说nginx会同时监听运行服务器和备用服务器，以便在<code>active</code>服务器出现故障的时候能迅速切换到备用服务器。</p><p>需要注意的是，stream模块的配置文件不建议放到nginx下的conf.d目录下（该目录一般用于放置http模块相关的配置文件），我们可以新建一个<code>stream.conf.d</code>目录用于存放stream模块的配置文件，同时需要在nginx目录下的<code>nginx.conf</code>文件中写入该目录，如：</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">stream &#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/stream.conf.d/</span>*.conf;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后我们在对应新建的<code>stream.conf.d</code>目录下面新建配置文件的时候，就不需要再添加<code>stream&#123;&#125;</code>了，这和之前的http模块对应的<code>conf.d</code>目录下的配置相似，同样的，我们其实也可以直接将整个stream模块配置全部都放到nginx目录下的<code>nginx.conf</code>文件中，只不过这样不方便整理，尤其是当需要配置的项目变多了的时候。</p><blockquote><p>实际上我们会发现tcp负载均衡使用的stream模块和http模块十分相似，这是因为nginx一开始是作为web服务器和七层负载均衡服务器，tcp和udp的负载均衡是属于四层负载均衡，这项功能是在1.9版本加入的，因此在一些配置和原理上都参考了http模块。</p></blockquote><h1 id="3、UDP负载均衡"><a href="#3、UDP负载均衡" class="headerlink" title="3、UDP负载均衡"></a>3、UDP负载均衡</h1><p>udp负载均衡和上面的两个负载均衡比较类似，在实现的原理上也参考了tcp的负载均衡。</p><p>我们日常使用的服务中比较常见的使用UDP协议的有NTP、DNS等。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stream &#123;    <br>    upstream ntp &#123;        <br>        server ntp1.example.com:123  weight=2;        <br>        server ntp2.example.com:123;    <br>    &#125;<br>    server &#123;        <br>        listen 123 udp;        <br>        proxy_pass ntp;    <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>udp负载均衡的配置和tcp基本一致，需要注意的就是要在监听的端口后面加上<code>udp</code>参数指定协议为udp协议即可。</p><h1 id="4、负载均衡策略"><a href="#4、负载均衡策略" class="headerlink" title="4、负载均衡策略"></a>4、负载均衡策略</h1><p>除了默认的轮询负载均衡算法，nginx还内置了其他的一些负载均衡策略，实际上对于HTPP、TCP和UDP三类负载均衡使用的策略默认有<code>Round robin</code>、<code>Least connections</code>、<code>Least time</code>（Nginx Plus专属）、<code>Generic hash</code>、<code>Random</code>、<code>IP hash</code>（仅HTTP可用）这六种。</p><blockquote><p>网上提到较多的url_hash和fair这两种策略属于第三方模块实现的策略。</p></blockquote><h2 id="4-1-轮询Round-robin"><a href="#4-1-轮询Round-robin" class="headerlink" title="4.1 轮询Round robin"></a>4.1 轮询<code>Round robin</code></h2><p>轮询算法是默认的负载均衡算法，根据设定的权重值来进行访问，权重值越高被访问的概率就越高，不设置权重值的话则会默认设置为1，最后的被访问比例从概率统计的角度上看等于设定的权重值比例。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream backend &#123;<br>    server backend1.example.com weight=5;<br>    server backend2.example.com weight=1;<br>    server backend3.example.com backup;<br>    server backend4.example.com down;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>具体使用到的是名为<code>smooth weighted round-robin balancing</code>的负载均衡算法，具体原理和测试有兴趣的可以看<a href="https://tinychen.com/200318-nginx02-smooth-weighted-round-robin-balancing/">之前的文章</a>，这里直接摘录之前的原理叙述部分。</p><ul><li><code>weight</code>：配置文件中设置的权重值，是定值，在整个选择过程中是不会改变的，对应到这里就是3、5、7。</li><li><code>current_weight</code>：后端服务器的当前权重值，初始值等于0，在每轮选择中，该值最大的服务器就会被选中</li><li><code>effective_weight</code>：变化权重值，初始值等于<code>weight</code>，用于动态调整服务器被选择的概率，即当被选中的服务器出现了failure的时候，该服务器对应的<code>effective_weight</code>就会减小，具体操作我们下面再解释。</li><li><code>total_weight</code>：总的权重值，即所有服务器的权重值相加，在这里为3+5+7=15。</li></ul><p>接下来我们开始逐步解析算法执行过程：</p><ol><li>首先进行各类值的初始化，<code>weight</code>赋值为配置文件中的<code>weight</code>，<code>current_weight</code>赋值为0，<code>effective_weight</code>赋值为<code>weight</code>，<code>total_weight</code>为所有<code>weight</code>之和；</li><li>对于每个服务器的<code>current_weight</code>，加上该服务器对应的<code>weight</code>；</li><li>选取<code>current_weight</code>值最大的服务器来接受这次访问，然后该服务器对应的<code>current_weight</code>需要减去<code>total_weight</code>（因此<code>current_weight</code>是可以出现负值的）</li><li>不断重复步骤2和步骤3，当重复的次数等于<code>total_weight</code>时，所有服务器的<code>current_weight</code>刚好为0，此时结束一轮负载均衡。</li></ol><h2 id="4-2-最少连接数Least-connections"><a href="#4-2-最少连接数Least-connections" class="headerlink" title="4.2 最少连接数Least connections"></a>4.2 最少连接数<code>Least connections</code></h2><p><strong>在配置文件中使用<code>least_conn</code>来指定该策略。</strong>前面的轮询算法是使每台服务器的连接数大致相同或者符合设定的权重比例来实现负载均衡，前提是每个访问请求所需要的处理时间都大致相同，如果每次访问需要的处理时间不一样，使用轮询算法的效果就比较一般。这时候就可以考虑使用最少连接数算法。</p><p>顾名思义，nginx会将访问负载到访问数最少的服务器上，同时也会将设定的权重值<code>weight</code>纳入考虑因素。具体来说就是nginx会记录分配给后端服务器的连接数，当有访问过来的时候优先分配给连接数最少的服务器，而如果最少连接数的服务器出现了多台，则根据上面的轮询算法来进行选择。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream backend &#123;<br>    least_conn;<br>    server backend1.example.com;<br>    server backend2.example.com;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-3-最快响应时间Least-time（Nginx-Plus专属）"><a href="#4-3-最快响应时间Least-time（Nginx-Plus专属）" class="headerlink" title="4.3 最快响应时间Least time（Nginx Plus专属）"></a>4.3 最快响应时间<code>Least time</code>（Nginx Plus专属）</h2><p>号称在这几种算法中最复杂的算法，在最少连接数算法的基础上增加了响应时间这一维度,因此在使用的时候需要加上<code>header</code>或者<code>last_byte</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream backend &#123;<br>    least_time header;<br>    server backend1.example.com;<br>    server backend2.example.com;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>对于指定了<code>header</code>参数，nginx会使用接收到响应报文的报头的时间来作为响应时间</li><li>对于指定了<code>last_byte</code> 参数，nginx会使用接收整个完整报文的时间来作为响应时间</li></ul><h2 id="4-4-普通哈希Generic-hash"><a href="#4-4-普通哈希Generic-hash" class="headerlink" title="4.4 普通哈希Generic hash"></a>4.4 普通哈希<code>Generic hash</code></h2><p>以用户自定义资源(比如URL、特定的文本、请求的变量或者多个的组合等)的方式计算hash值完成分配。当我们需要更好地控制请求的发送到哪个服务器上或者确定服务器最有可能有缓存数据时，此方法很有用。<strong>注意此时的<code>server</code>语句中不能写入<code>weight</code>等其他的参数，<code>hash_method</code>是使用的<code>hash</code>算法。</strong>当有服务器加入或者移除后端的服务器列表的时候，哈希请求会被重新分配，想要最小化该影响，可以添加关键字<code>consistent</code>。这个关键词会使用一种新的一致性哈希算法 ketama, 该算法会让管理员添加或删除某个服务实例的时候，只有一小部分的请求会被转发到与之前不同的服务实例上去，其他请求仍然会被转发到原有的服务实例上去。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream resinserver &#123;   <br>    hash $request_uri consistent;<br>    server backend1.example.com;<br>    server backend2.example.com;            <br>    hash_method crc32; <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-5-随机Random"><a href="#4-5-随机Random" class="headerlink" title="4.5 随机Random"></a>4.5 随机<code>Random</code></h2><p>随机算法就是随机从后端服务器中挑选一个来接受访问，不过它还有一个附加参数<code>two [parameters]</code>，可以随机挑选两个服务器，然后根据指定的均衡算法从服务器中挑选一台接受访问。如果不指定<code>two</code>后面的<code>parameters</code>则默认使用<code>Least time</code>算法进行选择。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">upstream <span class="hljs-keyword">backend </span>&#123;<br>    <span class="hljs-built_in">random</span> two ip_hash;<br>    server <span class="hljs-keyword">backend1.example.com;</span><br><span class="hljs-keyword"></span>    server <span class="hljs-keyword">backend2.example.com;</span><br><span class="hljs-keyword"></span>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-6-IP哈希IP-hash（HTTP模块专属）"><a href="#4-6-IP哈希IP-hash（HTTP模块专属）" class="headerlink" title="4.6 IP哈希IP hash（HTTP模块专属）"></a>4.6 IP哈希<code>IP hash</code>（HTTP模块专属）</h2><p>IP哈希算法使用<strong>ipv4地址的前三段</strong>（比如说192.168.1.1就使用192.168.1这三段）或者是<strong>整个ipv6地址</strong>来进行哈希算法计算，从源码中我们可以看到实际使用的哈希算法比较简单，在nginx源码的<code>\src\http\modules\ngx_http_upstream_ip_hash_module.c</code>中大概181行的位置，具体如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">hash</span> = (hash * <span class="hljs-number">113</span> + iphp-&gt;addr[i]) % <span class="hljs-number">6271</span><br></code></pre></div></td></tr></table></figure><p>这种算法的好处是可以保持服务器的session的一致性，因为同一个IP根据哈希算法的结果一般都是访问到同一台服务器（除非中途服务器崩了），<strong>需要注意的是该算法也可以使用轮询算法的参数。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">upstream backend &#123;<br>    ip_hash;<br>    server backend1.example.com weight=5;<br>    server backend2.example.com weight=1;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx的负载均衡配置，包括http、tcp和udp负载均衡，以及&lt;code&gt;Round robin&lt;/code&gt;、&lt;code&gt;Least connections&lt;/code&gt;、&lt;code&gt;Least time&lt;/code&gt;（Nginx Plus专属）、&lt;code&gt;Generic hash&lt;/code&gt;、&lt;code&gt;Random&lt;/code&gt;、&lt;code&gt;IP hash&lt;/code&gt;（HTTP模块专属）的原理分析。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇02-upstream模块中的加权轮询负载均衡</title>
    <link href="https://tinychen.com/20200318-nginx-02-smooth-weighted-round-robin-balancing/"/>
    <id>https://tinychen.com/20200318-nginx-02-smooth-weighted-round-robin-balancing/</id>
    <published>2020-03-18T09:00:00.000Z</published>
    <updated>2020-03-18T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的upstream模块中的加权轮询负载均衡的算法原理。</p><span id="more"></span><p>我们先来看一个简单的负载均衡：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">upstream backend &#123;    <br>    server 10.0.0.1:80;<span class="hljs-comment">#服务器a</span><br>    server 10.0.0.2:80; <span class="hljs-comment">#服务器b</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这是一个简单的负载均衡，将接受到的访问按照默认的均分原则分配给后台的两台服务器，这时候两台server的访问量应该是1：1。如果我们在后面加上权重值，例如</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">upstream backend &#123;    <br>    server 10.0.0.1:80   weight=1;<span class="hljs-comment">#服务器a  </span><br>    server 10.0.0.2:80   weight=2;<span class="hljs-comment">#服务器b</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候如果进行访问，我们得到的结果就应该是<code>b a b</code>，如果再进行修改权重</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">upstream backend &#123;    <br>    server 10.0.0.1:80   weight=5;<span class="hljs-comment">#服务器a</span><br>    server 10.0.0.2:80   weight=10; <span class="hljs-comment">#服务器b</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>虽然两个权重化简之后都是1：2，但是这时候访问策略就有两种选择</p><ul><li><p>第一种是先连续访问<code>server a</code>5次再连续访问<code>server b</code>10次</p></li><li><p>第二种是a b两台服务器轮流访问，但是总的访问次数比例符合5：10也就是1：2的比例。</p></li></ul><p>显然第二种访问策略要更加优秀，可以避免一台服务器被连续访问多次而另一台服务器进入空闲状态。在nginx中的upstream模块实现这个操作使用了一个名为<code>smooth weighted round-robin balancing</code>的算法，直译过来就是平滑加权轮询负载均衡算法，大概意思就是实现上面说的第二种操作，下面我们用一个稍微复杂一点的配置来检验一下。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">upstream backend &#123;    <br>    server 127.0.0.1:8080   weight=3;    <br>    server 127.0.0.1:8081   weight=5; <br>    server 127.0.0.1:8082   weight=7;<br>&#125;<br><br>server &#123;<br>    listen 80;<br>    server_name example.com www.example.com;<br><br>    location / &#123;<br>        proxy_pass http://backend;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们使用nginx监听在本机8080~8081三个端口，然后这三个端口作为本机的80端口的负载均衡后端，接着我们把权重设为比较复杂的<code>3：5：7</code>，然后我们进行实际测试。</p><p><img src="https://resource.tinychen.com/blog/20200318/pwzKS3ftCfn5.png"></p><p>得到的结果为，<code>c b a c b c a c b c b c a b c</code>，这里刚好15次也就是符合权重上面的加起来的总和，从结果来看这里的访问顺序比较均衡，但是细看又比较难找出规律。</p><p>我们去Github上面找到<a href="https://github.com/nginx/nginx">nginx的源码</a>，对应的我们这里使用的测试的版本是稳定版的<code>1.17.9</code>，我们在目录下的<code>nginx-master\src\http\ngx_http_upstream_round_robin.c</code>当中可以看到这部分的实现源码，主要集中在该文件的前面部分。接下来我们需要理解源码中的几个变量：</p><ul><li><code>weight</code>：配置文件中设置的权重值，是定值，在整个选择过程中是不会改变的，对应到这里就是3、5、7。</li><li><code>current_weight</code>：后端服务器的当前权重值，初始值等于0，在每轮选择中，该值最大的服务器就会被选中</li><li><code>effective_weight</code>：变化权重值，初始值等于<code>weight</code>，用于动态调整服务器被选择的概率，即当被选中的服务器出现了failure的时候，该服务器对应的<code>effective_weight</code>就会减小，具体操作我们下面再解释。</li><li><code>total_weight</code>：总的权重值，即所有服务器的权重值相加，在这里为3+5+7=15。</li></ul><p>接下来我们开始逐步解析算法执行过程：</p><ol><li>首先进行各类值的初始化，<code>weight</code>赋值为配置文件中的<code>weight</code>，<code>current_weight</code>赋值为0，<code>effective_weight</code>赋值为<code>weight</code>，<code>total_weight</code>为所有<code>weight</code>之和；</li><li>对于每个服务器的<code>current_weight</code>，加上该服务器对应的<code>weight</code>；</li><li>选取<code>current_weight</code>值最大的服务器来接受这次访问，然后该服务器对应的<code>current_weight</code>需要减去<code>total_weight</code>（因此<code>current_weight</code>是可以出现负值的）</li><li>不断重复步骤2和步骤3，当重复的次数等于<code>total_weight</code>时，所有服务器的<code>current_weight</code>刚好为0，此时结束一轮负载均衡。</li></ol><p>从上面的步骤分析我们可以看出，当被选中的服务器出现了failure的时候，该服务器对应的<code>effective_weight</code>就会减小，在下面的<code>current_weight</code>加上该服务器对应的<code>weight</code>操作中就不能变得足够大导致被选中，从而就可以避免过多的访问被分配到出现了failure的服务器。</p><p>接下来我们进行简单的演算看看是否符合实际的输出结果：</p><table><thead><tr><th align="center">操作</th><th align="center"><code>current_weight</code></th><th align="center">选中服务器</th></tr></thead><tbody><tr><td align="center">初始化</td><td align="center">（0，0，0）</td><td align="center">-</td></tr><tr><td align="center">步骤2</td><td align="center">（3，5，7）</td><td align="center">-</td></tr><tr><td align="center">步骤3</td><td align="center">（3，5，-8）</td><td align="center">c</td></tr><tr><td align="center">步骤2</td><td align="center">（6，10，-1）</td><td align="center">-</td></tr><tr><td align="center">步骤3</td><td align="center">（6，-5，-1）</td><td align="center">b</td></tr><tr><td align="center">步骤2</td><td align="center">（9，0，6）</td><td align="center">-</td></tr><tr><td align="center">步骤3</td><td align="center">（-6，0，6）</td><td align="center">a</td></tr><tr><td align="center">步骤2</td><td align="center">（-3，5，13）</td><td align="center">-</td></tr><tr><td align="center">步骤3</td><td align="center">（-3，5，-2）</td><td align="center">c</td></tr></tbody></table><p>下面的步骤就不继续演示了，当步骤2和步骤3重复了<code>total_weight</code>次，也就是相当于一轮之后，<code>current_weight</code>就会正好全部变回0，而前提是过程中没有出现服务器failure的情况。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx的upstream模块中的加权轮询负载均衡的算法原理。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="loadbalance" scheme="https://tinychen.com/tags/loadbalance/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx篇01-基本安装配置和静态页面设置</title>
    <link href="https://tinychen.com/20200317-nginx-01-base-conf-static-web/"/>
    <id>https://tinychen.com/20200317-nginx-01-base-conf-static-web/</id>
    <published>2020-03-17T03:00:00.000Z</published>
    <updated>2020-03-17T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的编译安装、添加模块、yum安装、简单配置、默认目录作用和静态页面配置。</p><span id="more"></span><h1 id="0、编译安装nginx"><a href="#0、编译安装nginx" class="headerlink" title="0、编译安装nginx"></a>0、编译安装nginx</h1><h2 id="0-1-准备工作"><a href="#0-1-准备工作" class="headerlink" title="0.1 准备工作"></a>0.1 准备工作</h2><p>这里我们使用nginx的mainline版本的1.17.9来进行编译安装，nginx各版本的官网下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p>首先我们下载并解压nginx源码</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://nginx.org/download/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">17</span>.<span class="hljs-number">9</span>.tar.gz<br><span class="hljs-attribute">tar</span> -zxvf nginx-<span class="hljs-number">1</span>.<span class="hljs-number">17</span>.<span class="hljs-number">9</span>.tar.gz<br></code></pre></div></td></tr></table></figure><p>在编译安装之前我们还需要先安装几个别的软件：</p><ul><li><p>GCC/G++编译器：GCC（GNU Compiler Collection）可用来编译C语言程序，如果你还需要使用C++来编写Nginx HTTP模块，这时还需要用到G++编译器了。</p></li><li><p>PCRE库：PCRE（Perl Compatible Regular Expressions，Perl兼容正则表达式）是由Philip Hazel开发的函数库，目前为很多软件所使用，该库支持正则表达式。实际上在nginx的很多高级配置中都会用到正则表达式，因此我们在编译Nginx时尽量先把PCRE库编译进Nginx。</p></li><li><p>zlib库：zlib库用于对HTTP包的内容做gzip格式的压缩，我们可以在nginx.conf里配置了gzip on，并指定对于某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量。</p></li><li><p>OpenSSL开发库：HTTPS必备，这个就不用解释了</p><p>上面提到的库我们都可以使用yum来进行安装：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> pcre-devel是使用PCRE做二次开发时所需要的开发库，包括头文件等，这也是编译Nginx所必须使用的。</span><br><span class="hljs-meta">#</span><span class="bash"> 同理，zlib是直接使用的库，zlib-devel是二次开发所需要的库。</span><br></code></pre></div></td></tr></table></figure><p>Nginx是高度自由化的Web服务器，它的功能是由许多模块来支持的。而这些模块可根据我们的使用需求来定制，如果某些模块不需要使用则完全不必理会它。同样，如果使用了某个模块，而这个模块使用了一些类似zlib或OpenSSL等的第三方库，那么就必须先安装这些软件。</p><h2 id="0-2-编译安装"><a href="#0-2-编译安装" class="headerlink" title="0.2 编译安装"></a>0.2 编译安装</h2><p>我们进入nginx的目录，输入下面的指令可以查看各类的编译参数，或者在<a href="http://nginx.org/en/docs/configure.html">官网</a>也可以看到：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--help</span><br></code></pre></div></td></tr></table></figure><p>我们这里使用的参数是：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --sbin-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/nginx --conf-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/nginx.conf --pid-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx/nginx.pid --with-http_ssl_module<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200324/XBFWbitOjxxu.png"></p><p>这里我们可以看到，我们在参数里面并没有指定上面提到的几个库的目录，configure文件会默认系统已经安装的库版本和目录，当然我们也可以手动指定某个库的目录来指定版本。</p><p>接下来进行make安装：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">make<br>make install<br></code></pre></div></td></tr></table></figure><p>如无意外此时应该已经正常安装好了，我们到前面指定的安装目录看一下</p><p><img src="https://resource.tinychen.com/blog/20200324/yCV4ewKcJh8E.png"></p><p>注意这个时候我们如果需要使用nginx需要指定这个安装目录，想要全局使用我们可以创建一个软链接：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln -s /usr/local/nginx/nginx /usr/sbin/nginx<br></code></pre></div></td></tr></table></figure><h2 id="0-3-添加模块"><a href="#0-3-添加模块" class="headerlink" title="0.3 添加模块"></a>0.3 添加模块</h2><p>同时，如果之后有需要用到的模块而在编译安装的时候忘了安装也没关系，我们可以继续编译添加新模块</p><p>首先我们需要查看已经编译的参数:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@localhost ~]# nginx -V<br>nginx version: nginx/1.17.9<br>built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC) <br>built with OpenSSL 1.0.1e-fips 11 Feb 2013<br>TLS SNI support enabled<br>configure arguments: --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module<br><br></code></pre></div></td></tr></table></figure><blockquote><p>需要注意上面的V是大写的V</p></blockquote><p>在<code>configure arguments:</code> 这一栏里面我们就可以看到之前编译的时候的参数，对比上面的记录我们可以看到是一模一样的，然后我们会到之前下载的源码目录，<strong>注意是源码的目录不是安装的目录</strong>，然后添加上之前的编译参数，再添加新的模块，</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --sbin-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/nginx --conf-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/nginx.conf --pid-path=/u</span>sr<span class="hljs-regexp">/local/</span>nginx/nginx.pid --with-http_ssl_module --with-http_v2_module --with-mail --with-mail_ssl_module<br></code></pre></div></td></tr></table></figure><p>比如这里我们添加了<code>http_v2</code>、<code>mail</code>、<code>mail_ssl</code>三个模块</p><p>如果想要添加第三方模块的话，只需要使用<code>--add-module=</code>然后加上第三方模块的路径即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">--add-module=/home/echo-nginx-module-0.61<br></code></pre></div></td></tr></table></figure><p>最后我们的编译参数是：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./configure \<br>--sbin-path=/usr/local/nginx/nginx \<br>--conf-path=/usr/local/nginx/nginx.conf \<br>--pid-path=/usr/local/nginx/nginx.pid \<br>--with-http_ssl_module \<br>--with-http_v2_module \<br>--with-mail \<br>--with-mail_ssl_module \<br>--add-module=/home/echo-nginx-module-0.61<br></code></pre></div></td></tr></table></figure><p>接着我们使用make安装，再查看目录会发现原来的文件已经被替换成<code>*.default</code>了</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">make<br>make install<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200324/0wsDPdjxSyL6.png"></p><p>最后我们再确定一下是否安装成功：</p><p><img src="https://resource.tinychen.com/blog/20200324/K86pzHvKgi61.png"></p><h1 id="1、yum安装nginx"><a href="#1、yum安装nginx" class="headerlink" title="1、yum安装nginx"></a>1、yum安装nginx</h1><h2 id="1-1-yum仓库建立和安装配置"><a href="#1-1-yum仓库建立和安装配置" class="headerlink" title="1.1 yum仓库建立和安装配置"></a>1.1 yum仓库建立和安装配置</h2><p>centos自带的repo中就有nginx，可以直接安装，但是版本比较旧，想要使用yum进行安装最新的稳定版本，我们需要自行配置yum仓库。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=<span class="hljs-literal">true</span><br><br>[nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>默认情况下mainline版本是不会启用的，因此我们如果需要安装mainline版本的nginx则需要手动启用这个repo。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install yum-utils<br>yum-config-manager --<span class="hljs-built_in">enable</span> nginx-mainline<br>yum clean all<br>yum repolist<br>yum install nginx<br></code></pre></div></td></tr></table></figure><p>安装的时候需要注意这个列出信息中的repo应该是我们刚刚新建的repo。</p><p><img src="https://resource.tinychen.com/blog/20200317/oVhLjc6gtrUu.png"></p><p>安装完成之后需要设置开机启动和防火墙放行80端口，如果使用https还需要放行443端口。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> nginx <br>systemctl start nginx <br>firewall-cmd --permanent --zone=public --add-port=80/tcp<br>firewall-cmd --permanent --zone=public --add-port=443/tcp<br>firewall-cmd --reload <br></code></pre></div></td></tr></table></figure><p>接下来我们可以测试一下安装和启动是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nginx -v<br>curl 127.0.0.1<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200317/3f4pVwyJKKz8.png"></p><h2 id="1-2-master和worker进程"><a href="#1-2-master和worker进程" class="headerlink" title="1.2 master和worker进程"></a>1.2 master和worker进程</h2><p>使用ps命令查看进程，我们可以看到有一个master进程和一个worker进程，默认情况下，worker的进程数量为1，实际上我们可以根据具体需要对其进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -ef | grep nginx<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200317/vrTFVgW4tsi4.png"></p><p>在正式提供服务的产品环境下，<strong>部署Nginx时都是使用一个master进程来管理多个worker进程，一般情况下，worker进程的数量与服务器上的CPU核心数相等</strong>。每一个worker进程都是繁忙的，它们在真正地提供互联网服务，master进程则很“清闲”，只负责监控管理worker进程。worker进程之间通过共享内存、原子操作等一些进程间通信机制来实现各种功能。</p><p><img src="https://resource.tinychen.com/blog/20200317/YjtkNXpqb702.png"></p><h1 id="2、nginx基本配置"><a href="#2、nginx基本配置" class="headerlink" title="2、nginx基本配置"></a>2、nginx基本配置</h1><h2 id="2-1-nginx默认目录"><a href="#2-1-nginx默认目录" class="headerlink" title="2.1 nginx默认目录"></a>2.1 nginx默认目录</h2><h3 id="etc-nginx"><a href="#etc-nginx" class="headerlink" title="/etc/nginx/"></a><code>/etc/nginx/</code></h3><p>这个是nginx服务器的默认配置目录</p><p><img src="https://resource.tinychen.com/blog/20200317/shQqNYJuU4vW.png"></p><h3 id="etc-nginx-nginx-conf"><a href="#etc-nginx-nginx-conf" class="headerlink" title="/etc/nginx/nginx.conf"></a><code>/etc/nginx/nginx.conf</code></h3><p>这个是nginx服务器的默认配置文件，我们可以在这里对nginx的所有全局配置进行修改，包括线程数端口号等等，同时在默认情况下它也包括了下述的<code>/etc/nginx/conf.d/</code>目录中的所有配置文件。</p><h3 id="etc-nginx-conf-d"><a href="#etc-nginx-conf-d" class="headerlink" title="/etc/nginx/conf.d/"></a><code>/etc/nginx/conf.d/</code></h3><p>这个目录中包含的<code>.conf</code>配置文件主要用于单独定义某个http网页，从而使得整个配置目录文件的管理变得更加简洁而清晰。</p><h3 id="var-log-nginx"><a href="#var-log-nginx" class="headerlink" title="/var/log/nginx"></a><code>/var/log/nginx</code></h3><p>这个目录是默认的log日志目录，主要有<code>acces.log</code>和<code>error.log</code>两个文件，前者负责记录每一个被访问的记录，后者负责记录访问中出现的错误。</p><p><img src="https://resource.tinychen.com/blog/20200317/zUthGtH2nWfK.png"></p><h2 id="2-2-nginx命令"><a href="#2-2-nginx命令" class="headerlink" title="2.2 nginx命令"></a>2.2 nginx命令</h2><p>输入<code>nginx -h</code>即可查看所有指令，不需要特意去记忆，用多了就自然记住了。</p><p><img src="https://resource.tinychen.com/blog/20200317/vJhEEkDYRGVw.png"></p><h1 id="3、nginx-conf文件"><a href="#3、nginx-conf文件" class="headerlink" title="3、nginx.conf文件"></a>3、nginx.conf文件</h1><p>我们把整个全局配置文件拿出来分析一下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">user  nginx;<br>worker_processes  16;<br><br>error_log  /var/<span class="hljs-built_in">log</span>/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br><br>    access_log  /var/<span class="hljs-built_in">log</span>/nginx/access.log  main;<br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    include /etc/nginx/conf.d/*.conf;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-1-user"><a href="#3-1-user" class="headerlink" title="3.1 user"></a>3.1 user</h2><p><code>user</code>指的是以哪个用户来创建nginx的<strong>worker进程</strong>，master进程一般都是使用root用户启动，权限较大。</p><h2 id="3-2-worker-processes"><a href="#3-2-worker-processes" class="headerlink" title="3.2 worker_processes"></a>3.2 worker_processes</h2><p><code>worker_processes</code>则是nginx的worker进程数量，一般与CPU的核心数量一致，这里我们设置为16。</p><h2 id="3-3-error-log"><a href="#3-3-error-log" class="headerlink" title="3.3 error_log"></a>3.3 error_log</h2><p><code>error_log</code>是日志的存放位置和输出等级，等级的取值范围是<code>debug</code>、<code>info</code>、<code>notice</code>、<code>warn</code>、<code>error</code>、<code>crit</code>、<code>alert</code>、<code>emerg</code>，从左至右级别依次增大。当设定为一个级别时，大于或等于该级别的日志都会被输出到记录文件中，小于该级别的日志则不会输出。<strong>这里默认设定的是warn级别</strong>，则<code>warn</code>、<code>error</code>、<code>crit</code>、<code>alert</code>、<code>emerg</code>级别的日志都会输出。</p><blockquote><p>如果设定的日志级别是<code>debug</code>，则会输出所有的日志，这样数据量会很大，要确保存放日志的硬盘有足够的空间，同时，如果需要开启日志的<code>debug</code>功能，需要在编译安装的时候在<code>configure</code>时加入<code>--with-debug</code>配置项，如果不确定是否开启了<code>debug</code>功能，可以输入<code>nginx -V</code>查看所有的<code>configure arguments</code>。</p></blockquote><h2 id="3-4-pid"><a href="#3-4-pid" class="headerlink" title="3.4 pid"></a>3.4 pid</h2><p><code>pid</code>是<code>nginx</code>的<code>master</code>进程的<code>pid</code>文件，理论上应该和查找的<code>nginx</code>进程中<code>master</code>进程的<code>PID</code>以及<code>worker</code>进程的<code>PPID</code>一致。</p><p><img src="https://resource.tinychen.com/blog/20200317/2vUn1KmtJfeJ.png"></p><h2 id="3-5-块配置"><a href="#3-5-块配置" class="headerlink" title="3.5 块配置"></a>3.5 块配置</h2><p>接下来的<code>events</code>和<code>http</code>都是属于模块或者块。最基本的配置项语法格式为<code>配置项名 配置项值1 配置项值2 … ;</code></p><ul><li>一个配置项以英文分号<code>;</code>结束，中间的值使用空格隔开</li><li>块配置项由一个块配置项名和一对大括号组成。</li><li>块配置项可以嵌套，内层块直接继承外层块。</li><li>当内外层块中的配置发生冲突时，究竟是以内层块还是外层块的配置为准，取决于解析这个配置项的模块。</li><li>注释部分使用井号<code>＃</code></li></ul><p>比如上面的<code>log_format</code>这个配置项，变量需要在前面加上美刀符号<code>$</code>，如果变量之间有空格，需要使用单引号或者双引号避免语法错误，同时引号可以嵌套使用。同时需要注意的是，并不是所有的模块都支持使用变量。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                  <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                  <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="3-6-单位"><a href="#3-6-单位" class="headerlink" title="3.6 单位"></a>3.6 单位</h2><p>当指定空间大小时，可以使用的单位包括：</p><ul><li>K或者k千字节（KiloByte，KB）</li><li>M或者m兆字节（MegaByte，MB）</li></ul><p>当指定时间时，可以使用的单位包括：</p><ul><li>ms（毫秒）</li><li>s（秒）</li><li>m（分钟）</li><li>h（小时）</li><li>d（天）</li><li>w（周，7天）</li><li>M（月，30天）</li><li>y（年，365天）</li></ul><p>单位之间支持混合使用，如<code>1h30m</code>即为<code>90m</code>如果不指定后缀，那么默认使用<code>s（秒）</code>作为单位。</p><p>配置项后的值究竟是否可以使用这些单位，取决于解析该配置项的模块。如果这个模块使用了Nginx框架提供的相应解析配置项方法，那么配置项值才可以携带单位。</p><h1 id="4、nginx配置静态页面"><a href="#4、nginx配置静态页面" class="headerlink" title="4、nginx配置静态页面"></a>4、nginx配置静态页面</h1><p>接下来我们尝试配置一个简单的静态页面，使用vim对<code>/etc/nginx/conf.d/default.conf</code>进行修改，需要注意的是默认情况下<code>/etc/nginx/conf.d/</code>下面的配置文件只要是<code>.conf</code>即可生效，前面的名称并没有特殊限制，所以最好根据文件的实际用途进行命名方便记忆和管理。</p><p>接下来我们在<code>/etc/hosts</code>中将 <code>www.example.com www.example.org www.example.net example.com example.org example.net</code>的DNS解析手动指定为本机IP地址，方便后面使用域名进行配置页面</p><h2 id="4-1-default-server"><a href="#4-1-default-server" class="headerlink" title="4.1 default_server"></a>4.1 default_server</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@localhost conf.d]<span class="hljs-comment"># ll</span><br>总用量 16<br>-rw-r--r-- 1 root root 1093 3月   4 00:20 default.conf.bak<br>-rw-r--r-- 1 root root  158 3月  18 00:08 example.com.conf<br>-rw-r--r-- 1 root root  158 3月  18 00:09 example.net.conf<br>-rw-r--r-- 1 root root  173 3月  18 00:11 example.org.conf<br>[root@localhost conf.d]<span class="hljs-comment"># cat example.*</span><br>server &#123;<br>    listen 80;<br>    server_name example.com www.example.com;<br><br>    location / &#123;<br>        root   /var/www/html;<br>        index  example.com.html;<br>    &#125;<br>&#125;<br>server &#123;<br>    listen 80;<br>    server_name example.net www.example.net;<br><br>    location / &#123;<br>        root   /var/www/html;<br>        index  example.net.html;<br>    &#125;<br>&#125;<br>server &#123;<br>    listen 80 default_server;<br>    server_name example.org www.example.org;<br><br>    location / &#123;<br>        root   /var/www/html;<br>        index  example.org.html;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们可以看到上面配置了三个server块，分别对应三组域名，三组域名都是指向本机的IP地址，同样都是监听的80端口，其中我们在第三个server块中指定了<code>default_server</code>参数，此时我们访问本机IP，返回的页面就是我们指定了<code>default_server</code>参数的这个页面。</p><p><img src="https://resource.tinychen.com/blog/20200317/V9SN9w4cYpqG.png"></p><p>如果我们不指定<code>default_server</code>参数，返回的则是默认的第一个页面。</p><p><img src="https://resource.tinychen.com/blog/20200317/nrgXs9YImesb.png"></p><h2 id="4-2-location"><a href="#4-2-location" class="headerlink" title="4.2 location"></a>4.2 location</h2><p>location块的默认语法如下，<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">官网文档点这里</a>。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">Syntax:<span class="hljs-keyword">location</span> <span class="hljs-title">[ = | ~ | ~* | ^~ ] uri</span> &#123; ... &#125;<br><span class="hljs-keyword">location</span> <span class="hljs-title">@name</span> &#123; ... &#125;<br>Default: —<br>Context: server, location<br></code></pre></div></td></tr></table></figure><p>主要作用是根据请求URI设置配置，location可以由前缀字符串或正则表达式定义。</p><ul><li>正则表达式由前面的<code>~*</code>修饰符（不区分大小写）或<code>~</code>修饰符（区分大小写）指定。</li><li>优先顺序是，nginx首先检查使用前缀字符串定义的位置（前缀位置），其中，将选择并记住具有最长匹配前缀的位置。</li><li>然后按照在配置文件中出现的顺序检查正则表达式。</li><li>正则表达式的搜索在第一个匹配项上终止，并使用相应的配置。</li><li>如果未找到与正则表达式匹配的内容，则使用前面记住的前缀位置的配置。</li></ul><p>我们来看一下实例：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> example.com www.example.com;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   /var/www/html;<br>        <span class="hljs-attribute">index</span>  example.com.html;<br>    &#125;<br>    <br>    <span class="hljs-attribute">location</span> /images &#123;<br>        <span class="hljs-attribute">root</span>  /var/www;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们先来看一个<code>server</code>块，这里我们可以看到里面包含了两个<code>location</code>块，在<code>/var/www/html</code>和<code>/var/www</code>这两个目录下均有一个<code>images</code>文件夹，但是在<code>www</code>目录下的<code>images</code>文件夹没有<code>images2.html</code>这个文件。</p><p><img src="https://resource.tinychen.com/blog/20200317/NDKJhkhoG0vG.png"></p><p>接着我们尝试访问：</p><p><img src="https://resource.tinychen.com/blog/20200317/FPrVs7UyolQD.png"></p><p>可以看到因为我们在<code>www</code>目录下的<code>images</code>文件夹没有<code>images2.html</code>这个文件，所以在执行<code>curl example.com/images/images2.html</code>的时候返回了404请求。</p><p>所以我们可以得到结论，当访问域名后面的目录（如这里的<code>/images/</code>），如果在<code>server</code>块里面单独定义了一个相关的<code>location</code>块，则只会在这个<code>/images/</code>目录相关<code>location</code>块定义的目录中去查找，不存在则返回404，并不会再去根目录<code>/</code>的<code>location</code>块中的目录中查找。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx的编译安装、添加模块、yum安装、简单配置、默认目录作用和静态页面配置。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
    <category term="http" scheme="https://tinychen.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化技术的演变过程和KVM虚拟化的简介</title>
    <link href="https://tinychen.com/20200301-virtualization-intro-kvm-intro/"/>
    <id>https://tinychen.com/20200301-virtualization-intro-kvm-intro/</id>
    <published>2020-03-01T03:00:00.000Z</published>
    <updated>2020-03-01T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍虚拟化技术的历史演进过程和KVM虚拟化的一些特点。</p><span id="more"></span><h1 id="0、简介"><a href="#0、简介" class="headerlink" title="0、简介"></a>0、简介</h1><p>虚拟化技术的演变过程可以分为<strong>软件模拟、虚拟化层翻译、容器虚拟化</strong>三个大的阶段。其中，虚拟化层翻译又可以分为：<strong>软件捕获翻译（软件全虚拟化）</strong>、<strong>改造虚拟机系统内核加虚拟化层翻译（半虚拟化）</strong>和<strong>硬件支持的虚拟化层翻译（硬件支持的全虚拟化）</strong>三种。</p><h1 id="1、软件模拟"><a href="#1、软件模拟" class="headerlink" title="1、软件模拟"></a>1、软件模拟</h1><p>软件模拟是<strong>通过软件完全模拟</strong>CPU、芯片组、磁盘、网卡等计算机硬件。因为是软件模拟，所以理论上可以模拟任何硬件，<strong>甚至是不存在的硬件</strong>。但是因为这种方式全部是软件模拟硬件，所以非常低效，<strong>性能很差</strong>，因此一般只用于研究测试的场景。采用这种技术的典型产品有<a href="http://bochs.sourceforge.net/">Bochs</a>、<a href="https://www.qemu.org/">QEMU</a>等。</p><p><img src="https://resource.tinychen.com/blog/20200316/iC7twu8IzcUB.png"></p><h1 id="2、虚拟化层翻译"><a href="#2、虚拟化层翻译" class="headerlink" title="2、虚拟化层翻译"></a>2、虚拟化层翻译</h1><p>X86平台指令集划分为4个特权模式：Ring 0、Ring 1、Ring 2、Ring 3。操作系统一般使用Ring 0级别，应用程序使用Ring 3级别，驱动程序使用Ring 1和Ring 2级别。<strong>X86平台在虚拟化方面的一个难点就是如何将虚拟机越级的指令使用进行隔离。</strong></p><p><img src="https://resource.tinychen.com/blog/20200316/saHItFzI3ptv.png"></p><h2 id="2-1-软件全虚拟化"><a href="#2-1-软件全虚拟化" class="headerlink" title="2.1 软件全虚拟化"></a>2.1 软件全虚拟化</h2><p>VMware公司首先想到了通过虚拟化引擎，捕获虚拟机的指令，并进行处理的解决方法。</p><p><img src="https://resource.tinychen.com/blog/20200316/oOf6IYhAXMoN.png"></p><p>通过虚拟化引擎VMM来对虚拟机上的指令进行捕获并解释执行，就可以有效地隔离开虚拟机和物理机上的操作，最常见的表现就是关闭虚拟机并不会关闭物理机。这种方案也因此叫做软件全虚拟化的解决方案。</p><blockquote><p>Hypervisor，又称虚拟机监视器（英语：virtual machine monitor，缩写为 VMM），是用来建立与执行虚拟机器的软件、固件或硬件。</p><p>被Hypervisor用来执行一个或多个虚拟机器的电脑称为主体机器/宿主机/物理机（host machine），这些虚拟机器则称为客体机器/虚拟机（guest machine）。hypervisor提供虚拟的作业平台来执行客体操作系统（guest operating systems），负责管理其他客体操作系统的执行阶段；这些客体操作系统，共同分享虚拟化后的硬件资源。</p></blockquote><h2 id="2-2-半虚拟化"><a href="#2-2-半虚拟化" class="headerlink" title="2.2 半虚拟化"></a>2.2 半虚拟化</h2><p>软件全虚拟化的解决方案虽然可行，但是由于指令需要经过VMM，所以要在虚拟化层做大量的工作，性能上比较一般，因此Xen项目提出了使用修改虚拟机操作系统内核的解决方案。具体来说就是在虚拟机上使用修改过的内核，在修改过的内核中对特殊指令进行修改使其与物理机隔离开来，这样就可以有效地减少虚拟化层的工作，从而提高性能。但是劣势也是显而易见的，由于需要使用特殊的内核，因此在配置上也会相对麻烦一些，且由于内核原因一开始不支持windows系统的虚拟化，直到后来才加入支持。</p><p>不过由于将一部分的指令翻译工作从虚拟化层转移到了修改过的内核当中，因此性能比上面提到的软件全虚拟化要高很多，这种虚拟化方式也称为<strong>半虚拟化（paravirtualization）</strong>或者是<strong>准虚拟化</strong>。</p><h2 id="2-3-硬件全虚拟化"><a href="#2-3-硬件全虚拟化" class="headerlink" title="2.3 硬件全虚拟化"></a>2.3 硬件全虚拟化</h2><p>2005年，Intel推出了硬件的方案，对CPU指令进行改造，即VT-x，如图1-5所示。VT-x增加了两种操作模式：VMX root operation和VMX non-root operation。VMM运行在VMX root operation模式，虚拟机运行在VMX non-root operation模式。这两种操作模式都支持Ring 0～Ring 3这4个特权级。</p><p><img src="https://resource.tinychen.com/blog/20200316/HcrpDc5oVu1v.png"></p><blockquote><p>2005年，随着Intel推出支持x86虚拟化技术的CPU，Xen亦加入全虚拟化模式。Xen的全虚拟化模式允许在虚拟机中运行Windows等非Linux系统。</p></blockquote><p>因为是基于硬件的，所以效率非常高，这种方案也称为硬件支持的全虚拟化方案。现在的一个发展趋势是不仅CPU指令有硬件解决方案，I/O通信也有硬件解决方案，称为VT-d；网络通信也有硬件解决方案，称为VT-c。</p><blockquote><p>除了Intel，AMD也在自家的处理器上加入了对硬件级虚拟化的支持，命名为AMD-v。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20200316/WT68pw0flJ4K.png"></p><blockquote><p>当前的虚拟化引擎，都是使用硬件支持的虚拟化解决方案。并且最新的操作系统一般都支持一些半虚拟化的特性，所以宿主机和虚拟机使用比较新的版本，性能也会好一些。</p></blockquote><h1 id="3、容器虚拟化"><a href="#3、容器虚拟化" class="headerlink" title="3、容器虚拟化"></a>3、容器虚拟化</h1><p>容器虚拟化的原理是基于CGroups、Namespace等技术将进程隔离，每个进程就像一台单独的虚拟机一样，有自己被隔离出来的资源，也有自己的根目录、独立的进程编号、被隔离的内存空间。基于容器的虚拟化可以实现在单一内核上运行多个实例，因此是一个更高效率的虚拟化方式。目前基于Docker+k8s的容器级虚拟化技术已经在国内许多互联网公司的生产环境中大量使用。</p><h1 id="4、KVM虚拟化"><a href="#4、KVM虚拟化" class="headerlink" title="4、KVM虚拟化"></a>4、KVM虚拟化</h1><h2 id="4-1-kvm简介"><a href="#4-1-kvm简介" class="headerlink" title="4.1 kvm简介"></a>4.1 kvm简介</h2><p>KVM（Kernel-based Virtual Machine）最初是由以色列的公司Qumranet开发的。KVM在2007年2月被正式合并到Linux 2.6.20核心中，成为内核源代码的一部分。2008年9月4日，RedHat公司收购了Qumranet，开始在RHEL中用KVM替换Xen，第一个包含KVM的版本是RHEL 5.4。<strong>从RHEL 6开始，KVM成为默认的虚拟化引擎。</strong>KVM必须在具备Intel VT或AMD-V功能的X86平台上运行。在Linux内核3.9版中，加入了对ARM架构的支持。</p><blockquote><p>具体kvm虚拟化支持的处理器可以通过<a href="https://www.linux-kvm.org/page/Processor_support">官网</a>进行查询。</p></blockquote><p>KVM包含一个为处理器提供底层虚拟化、可加载的核心模块<code>kvm.ko</code>（<code>kvm-intel.ko</code>或<code>kvm-amd.ko</code>），使用QEMU（QEMU-KVM）作为虚拟机上层控制工具。KVM不需要改变Linux或Windows系统就能运行。</p><p>实际上，在Linux中，kvm就是内核中的一个模块，用户空间通过QEMU模拟硬件提供给虚拟机使用，而一台使用kvm创建的虚拟机就是一个Linux中的进程，管理这个对应的进程就是相当于管理整个对应的虚拟机。</p><p><img src="https://resource.tinychen.com/blog/20200316/CirIGJLtOkIo.png"></p><h2 id="4-2-QEMU和KVM"><a href="#4-2-QEMU和KVM" class="headerlink" title="4.2 QEMU和KVM"></a>4.2 QEMU和KVM</h2><blockquote><p>以下摘录自wiki：</p><p>QEMU有多种模式</p><ul><li>User mod：又称作“使用者模式”，在这种模块下，QEMU运行针对不同指令编译的单个Linux或Darwin/macOS程序。系统调用与32/64位接口适应。在这种模式下，我们可以实现交叉编译（cross-compilation）与交叉偵错（cross- debugging）。</li><li>System mod：“系统模式”，在这种模式下，QEMU模拟一个完整的计算机系统，包括外围设备。它可以用于在一台计算机上提供多台虚拟计算机的虚拟主机。 QEMU可以实现许多客户机OS的引导，比如x86，MIPS，32-bit ARMv7，PowerPC等等。</li><li>KVM Hosting：QEMU在这时处理KVM镜像的设置与迁移，并参加硬件的仿真，但是客户端的执行则由KVM完成。</li><li>Xen Hosting：在这种托管下，客户端的执行几乎完全在Xen中完成，并且对QEMU屏蔽。QEMU只提供硬件仿真的支持。</li></ul></blockquote><p>前面我们提到过QEMU的架构是纯软件实现的，因此灵活性很强，但是性能很差，因此可以搭配KVM模块使用从而有效地提升性能表现，也就是我们常说的<code>QEMU-KVM</code>，此时的QEMU运行在上面提到的<code>KVM Hosting</code>模式下，处理KVM镜像的设置与迁移，并参加硬件的仿真，可以存储及还原虚拟机运行状态，还可以虚拟多种设备，包括网卡、多CPU、IDE设备、软驱、显卡、声卡、多种并口设备、多种串口设备、多种USB设备、PC喇叭、PS/2键盘鼠标（默认）和USB键盘鼠标、蓝牙设备，但是客户端的执行则由KVM完成。</p><p>QEMU-KVM的分支版本发布了3个正式的版本1.1、1.2、1.3，随后和QEMU的主版本合并，也就是说<strong>现在的QEMU版本默认支持KVM</strong>，而KVM的最后一个自己的版本是KVM 83，随后和内核版本一起发布，和内核版本号保持一致，所以要使用KVM的最新版本，就要使用最新的内核。</p><h2 id="4-3-Libvirt和KVM"><a href="#4-3-Libvirt和KVM" class="headerlink" title="4.3 Libvirt和KVM"></a>4.3 Libvirt和KVM</h2><p>前面我们提到，基于KVM的虚拟机在Linux中可以视为一个进程，而为了方便管理，红帽公司发布了一个开源项目Libvirt，Libvirt有API，也有一套命令行工具，可以完成对虚拟机的管理，大多数的管理平台都是通过Libvirt来完成对KVM虚拟机的管理的，比如OpenStack、CloudStack、OpenNebula等。</p><p>Libvirt主要由3部分组成：</p><ul><li>一套API的lib库，支持主流的编程语言，包括C、Python、Ruby等</li><li>Libvirtd服务</li><li>命令行工具virsh</li></ul><p>Libvirt的设计目标是通过相同的方式管理不同的虚拟化引擎，但是目前实际上多数场景使用Libvirt的是KVM。Libvirt可以实现对虚拟机的管理，比如虚拟机的创建、启动、关闭、暂停、恢复、迁移、销毁，以及虚拟机网卡、硬盘、CPU、内存等多种设备的热添加。Libvirt还可以通过SSH、TCP、基于TCP的TLS来实现远程的宿主机管理。</p><h2 id="4-4-KVM的优势"><a href="#4-4-KVM的优势" class="headerlink" title="4.4 KVM的优势"></a>4.4 KVM的优势</h2><p>KVM虚拟化的主要优势在我看来有三点：</p><ul><li><p>开源免费</p><p>kvm是开源的，同时也是可以免费使用的，这也意味着有很多新技术会先在kvm上尝鲜，再推广到其他的虚拟化平台，而且对于企业来说，免费这一对个人用户而言感知不强的特性就会被放大很多倍，这也是诸如openstack等云平台使用kvm作为首选虚拟化的原因。</p></li><li><p>性能优越</p><p>同样的硬件条件下，相比起软件模拟、半虚拟化等，kvm虚拟化可以提供更好的性能甚至于接近物理机的性能。</p></li><li><p>支持广泛</p><p>除了广泛的社区技术支持，还可以付费购买红帽公司的技术支持。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要介绍虚拟化技术的历史演进过程和KVM虚拟化的一些特点。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="kvm" scheme="https://tinychen.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>Linux上启用kvm嵌套虚拟化功能</title>
    <link href="https://tinychen.com/20200213-kvm-nested/"/>
    <id>https://tinychen.com/20200213-kvm-nested/</id>
    <published>2020-02-13T02:00:00.000Z</published>
    <updated>2020-02-13T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>kvm支持嵌套虚拟化，即可以在虚拟机中创建虚拟机。本文主要介绍如何在使用Intel处理器的CentOS7中开启KVM的嵌套虚拟化功能。</p><span id="more"></span><p>kvm主要是通过内核模块来实现的，因此我们查看系统是否开启了kvm嵌套虚拟化，只需要：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /sys/module/kvm_intel/parameters/nested<br></code></pre></div></td></tr></table></figure><p>根据输出的结果即可知道是否支持。</p><p><img src="https://resource.tinychen.com/blog/20200327/5kj2hHXszDcE.png"></p><p>如果不支持，我们则需要<code>在/etc/modprobe.d/</code>新建一个<code>kvm-nested.conf</code>：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">options kvm-intel nested=1<br>options kvm-intel enable_shadow_vmcs=1<br>options kvm-intel enable_apicv=1<br>options kvm-intel ept=1<br></code></pre></div></td></tr></table></figure><p>接着我们重新加载一下kvm模块：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">modprobe -r kvm_intel<br>modprobe -a kvm_intel<br></code></pre></div></td></tr></table></figure><p>最后再查看一下是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /sys/module/kvm_intel/parameters/nested<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200327/zNl6YBpDrszi.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;kvm支持嵌套虚拟化，即可以在虚拟机中创建虚拟机。本文主要介绍如何在使用Intel处理器的CentOS7中开启KVM的嵌套虚拟化功能。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="kvm" scheme="https://tinychen.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>Ceph系列01-Ceph简介</title>
    <link href="https://tinychen.com/20200201-ceph-01-ceph-introduction/"/>
    <id>https://tinychen.com/20200201-ceph-01-ceph-introduction/</id>
    <published>2020-02-01T03:00:00.000Z</published>
    <updated>2020-02-01T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ceph的基本概念介绍和入门知识储备。</p><span id="more"></span><h1 id="1、ceph简介"><a href="#1、ceph简介" class="headerlink" title="1、ceph简介"></a>1、ceph简介</h1><p>Ceph是一个开源项目，它提供软件定义的、统一的存储解决方案。Ceph是一个可大规模扩展、高性能并且无单点故障的分布式存储系统。从一开始它就运行在通用商用硬件上，具有高度可伸缩性，容量可扩展至EB级别，甚至更大。</p><p>Ceph的架构在设计之初就包含下列特性：</p><ul><li>所有的组件必须可扩展</li><li>不能存在单点故障</li><li>解决方案必须是软件定义的、开源的并且可适配</li><li>Ceph软件应该运行在通用商用硬件之上</li><li>所有组件必须尽可能自我管理</li></ul><p>Ceph存储系统在同一个底层架构上提供了块、文件和对象存储，使得用户可以自主选择他们需要的存储方式。对象是Ceph的基础，也就是它的基本存储单元。任何格式的数据，不管是块、对象还是文件，都以对象的形式保存在Ceph集群的归置组(Placement Group，Pg)<br>中。使用对象存储，我们可以将平台和硬件独立开来。在Ceph中，由于对象没有物理存储路径绑定，使得对象非常灵活并且与位置无关。这也使得Ceph的规模能够近线性地从PB级别扩展到EB级别。</p><blockquote><p>Ceph是圣克鲁兹加利福尼亚大学的Sage Weil在2003年开发的，也是他的博士学位项目的一部分。初始的项目原型是大约40000行C++代码的Ceph文件系统，并于2006年作为参考实现和研究平台遵循LGPL协议(Lesser GUN Public License)开源。美国劳伦斯利物莫国家实验室(Lawrence Livermore National Laboratory)资助了Sage的初始研究工作。2003～2007年是Ceph的研究开发时期。在这期间，它的核心组件逐步形成，并且社区对项目的贡献也已经开始逐渐变大。Ceph没有采用双重许可模式，也就不存在只针对企业版的特性。</p><p>Inktank是Ceph背后的公司，它的主要目的是给他们的企业客户提供专业知识、处理流程、工具和支撑，使他们能够有效地采用和管理Ceph存储系统。Sage是Inktank的CTO和创始人。</p></blockquote><p>Ceph这个词是宠物章鱼的一个常见绰号。Ceph可以看作Cephalopod的缩写，它属于海洋软体类动物家族。Ceph以章鱼作为自己的吉祥物，表达了Ceph跟章鱼一样的并行行为。</p><p>Inktank这个词与章鱼有一定关系。渔民有时候也把章鱼称为墨鱼，因为它们可以喷射墨汁。这就解释了为什么章鱼(Ceph)跟墨鱼(Inktank)有一定关系。同样，Ceph和Inktank有很多共同点。你可以认为Inktank就是Ceph的智库。</p><p>开源Linux社区2008年就预见到Ceph的潜力，并将其加入Linux内核主线。这已经成为Ceph的里程碑事件。</p><p><img src="https://resource.tinychen.com/blog/20200301/zTF3g5mjkgMe.png"></p><h1 id="2、Ceph与云"><a href="#2、Ceph与云" class="headerlink" title="2、Ceph与云"></a>2、Ceph与云</h1><p>云环境要求其存储能够以低成本纵向和横向扩展，而且能够容易与云框架中其他组件集成。</p><p>OpenStack项目大力推动了公有云和私有云的发展。它已经证明了自己是一个端到端云解决方案。它自己的内部核心存储组件Swift提供基于对象的存储和Nova-Volume(也称为Cinder)，而Cinder则为VM提供块存储。</p><p>与Swift(它仅提供对象存储)不同，Ceph是一个包含块存储、文件存储和对象存储的统一存储解决方案，这样可以通过单一存储集群为OpenStack提供多种存储类型。因此，你可以轻松而高效地为OpenStack云管理存储。OpenStack和Ceph社区已经一起合作了许多年，致力于为OpenStack云开发一个完全支持的Ceph存储后端。从Folsom(OpenStack第6个主要版本)开始，Ceph已经完全与OpenStack集成。Ceph开发人员确保Ceph能够适用于OpenStack的最新版，同时贡献新特性以及修正bug。OpenStack通过它的cinder和glance组件使用Ceph最苛刻的特性RADOS块设备(RBD)。Ceph RBD通过提供精简配置的快照复制(snapshotted-cloned)卷帮助OpenStack快速配置数百个VM实例，这种方式既减少空间需求，又非常快速。</p><h1 id="3、Ceph与软件定义存储（SDS）"><a href="#3、Ceph与软件定义存储（SDS）" class="headerlink" title="3、Ceph与软件定义存储（SDS）"></a>3、Ceph与软件定义存储（SDS）</h1><p>Ceph是一个真正的SDS解决方案，它是开源软件，运行在商用硬件上，因此不存在厂商锁定，并且能提供低成本存储。SDS方案提供了客户急需的硬件选择的灵活性。客户可以根据自身的需要选择任意制造商的商用硬件，并自由地设计异构的硬件解决方案。在此硬件解决方案之上的Ceph的软件定义存储可以很好地工作。它可以从软件层面正确提供所有的企业级存储特性。低成本、可靠性、可扩展性是Ceph的主要特点。</p><p>从存储厂商的角度来看，统一存储的定义就是在单一的平台上同时提供基于文件和基于块的访问。</p><p>Ceph底层中并不存在块和文件的管理，而是管理对象并且在对象之上支持基于块和文件的存储。在传统基于文件的存储系统中，文件是通过文件目录进行寻址的。类似地，Ceph中的对象通过唯一的标识符进行寻址，并存储在一个扁平的寻址空间中。剔除了元数据操作之后，对象提供了无限的规模扩展和性能提升。Ceph通过一个算法来动态计算存储和获取某个对象的位置。</p><p>传统的存储系统并不具备更智能地管理元数据的方法。元数据是关于数据的信息，它决定了数据将往哪里存储，从哪里读取。传统的存储系统通过维护一张集中的查找表来跟踪它们的元数据。也就是说，客户端每次发出读写操作请求时，存储系统首先要查找这个巨大的元数据表，得到结果之后它才能执行客户端请求的操作。对于一个小的存储系统而言，你或许不会感觉到性能问题，但对于一个大的存储集群来说，你将会受制于这种方法的性能限制。它也会限制系统的扩展性。</p><h1 id="4、Ceph中的数据副本"><a href="#4、Ceph中的数据副本" class="headerlink" title="4、Ceph中的数据副本"></a>4、Ceph中的数据副本</h1><p>Ceph没有采用传统的存储架构，而是用下一代架构完全重塑了它。Ceph引入了一个叫CRUSH的新算法，而不是保存和操纵元数据。<strong>CRUSH是<code>Controlled Replication Under Scalable Hashing</code>的缩写。</strong></p><p>CRUSH算法在后台计算数据存储和读取的位置，而不是为每个客户端请求执行元数据表的查找。通过动态计算元数据，Ceph也就不需要管理一个集中式的元数据表。现代计算机计算速度极快，能够非常快地完成CRUSH查找。另外，利用分布式存储的功能可以将一个小的计算负载分布到集群中的多个节点。CRUSH清晰的元数据管理方法比传统存储系统的更好。</p><p><strong>CRUSH会以多副本的方式保存数据，以保证在故障区域中有些组件故障的情况下数据依旧可用。</strong>用户在Ceph的<code>CRUSH map</code>中可以自由地为他们的基础设施定义故障区域。这也就使得Ceph管理员能够在自己的环境中高效地管理他们的数据。CRUSH使得Ceph能够自我管理和自我疗愈。当故障区域中的组件故障时，CRUSH能够感知哪个组件故障了，并确定其对集群的影响。无须管理员的任何干预，CRUSH就会进行自我管理和自我疗愈，为因故障而丢失的据数执行恢复操作。CRUSH根据集群中维护的其他副本来重新生成丢失的数据。在任何时候，集群数据都会有多个副本分布在集群中。</p><p>使用RAID技术修复多个大硬盘是一个很繁琐的过程。另外，RAID需要很多整块的磁盘来充当备用盘。这也会影响到TCO，如果你不配置备用盘，将会将会遇到麻烦。RAID机制要求在同一个RAID组中的磁盘必须完全相同。如果你改动了磁盘容量、转速和磁盘类型，则你可能要面临惩罚。这样做将会对于存储系统的容量和性能产生不利影响。</p><blockquote><p>TCO （Total Cost of Ownership ），即总拥有成本，包括产品采购到后期使用、维护的成本。这是一种公司经常采用的技术评价标准。由于常见的RAID5、6、10等阵列方式需要使用磁盘作为镜像盘或者热备盘，因此如果你买了10块10T的硬盘共计100T空间，使用阵列后会导致最后可以使用的硬盘容量小于100T。当然你也可以使用诸如RAID0之类的不损失空间的阵列方式，但是这样会导致数据的安全性大大地降低。</p></blockquote><p><strong>基于RAID的企业级存储系统通常都需要昂贵的硬件RAID卡，这也增加了系统总成本。</strong></p><p>RAID系统最大的限制因素是它只能防止磁盘故障，而不能为网络、服务器硬件、OS、交换设备的故障或者区域灾害提供保护措施。</p><p>RAID最多能为你提供防止两个磁盘故障的措施。在任何情况下你无法容忍超过两个的磁盘故障。</p><p>Cpeh是一个软件定义的存储，因此它不需要任何特殊硬件来提供数据副本功能。另外，数据副本级别可以通过命令高度定制化。这也就意味着Ceph存储管理员能够轻松地根据自身需要和底层基础设施特点来管理副本策略。</p><p>这样的恢复操作不需要任何热备磁盘；数据只是简单地复制到Ceph集群中其他的磁盘上。</p><p>除了数据副本方法外，Ceph还支持其他用于保证数据可靠性的方法，比如纠删码技术。纠删码方式下，毁损的数据借助纠删码计算通过算法进行恢复或再次生成。</p><h1 id="5、Ceph的存储兼容性"><a href="#5、Ceph的存储兼容性" class="headerlink" title="5、Ceph的存储兼容性"></a>5、Ceph的存储兼容性</h1><p><strong>Ceph是一个完备的企业级存储系统，它支持多种协议以及访问方式，主要可以分为块、文件和对象存储三大类。</strong></p><h2 id="5-1-Ceph块存储"><a href="#5-1-Ceph块存储" class="headerlink" title="5.1 Ceph块存储"></a>5.1 Ceph块存储</h2><p>块存储是存储区域网络中使用的一个数据存储类别。在这种类型中，数据以块的形式存储在卷里，卷会挂接到节点上。它可以为应用程序提供更大的存储容量，并且可靠性和性能都更高。这些块形成的卷会映射到操作系统中，并被文件系统层控制。</p><p>Ceph引入了一个新的RBD协议，也就是Ceph块设备(Ceph Block Device)。</p><p>RBD块呈带状分布在多个Ceph对象之上，而这些对象本身又分布在整个Ceph存储集群中，因此能够保证数据的可靠性以及性能。</p><p>几乎所有的Linux操作系统发行版都支持RBD。除了可靠性和性能之外，RBD也支持其他的企业级特性，例如完整和增量式快照，精简的配置，写时复制(copy-on-write)式克隆，以及其他特性。RBD还支持全内存式缓存，这可以大大提高它的性能。Ceph RBD支持的最大镜像为16EB。在OpenStack中，可以通过cinder(块)和glance(image)组件来使用Ceph块设备。这样做可以让你利用Ceph块存储的copy-on-write特性在很短的时间内创建上千个VM。</p><p><img src="https://resource.tinychen.com/blog/20200311/BkOvaglxAz9O.png"></p><h2 id="5-2-Ceph文件存储"><a href="#5-2-Ceph文件存储" class="headerlink" title="5.2 Ceph文件存储"></a>5.2 Ceph文件存储</h2><p><strong>Ceph文件系统(也就是CephFS)是一个兼容POSIX的文件系统，它利用Ceph存储集群来保存用户数据。CephFS将数据和元数据分开存储，为上层的应用程序提供较高的性能以及可靠性。</strong></p><blockquote><p>Linux内核驱动程序支持CephFS，这也使得CephFS高度适用于各大Linux操作系统发行版。</p></blockquote><p>在Cpeh集群内部，Ceph文件系统库(libcephfs)运行在RADOS库(librados)之上，后者是Ceph存储集群协议，由文件、块和对象存储共用。<strong>要使用CephFS，你的集群节点上最少要配置一个Ceph元数据服务器(MDS)。</strong>然而，需要注意的是，单一的MDS服务器将成为Ceph文件系统的<strong>单点故障</strong>。MDS配置后，客户端可以采用多种方式使用CephFS。如果要把Ceph挂载成文件系统，客户端可以使用本地Linux内核的功能或者使用Ceph社区提供的ceph-fuse(用户空间文件系统)驱动。除此之外，客户端可以使用第三方开源程序，例如NFS的Ganesha和SMB/CIFS的Samba。</p><p><img src="https://resource.tinychen.com/blog/20200311/RkKUgQoFHBHG.png"></p><h2 id="5-3-Ceph对象存储"><a href="#5-3-Ceph对象存储" class="headerlink" title="5.3 Ceph对象存储"></a>5.3 Ceph对象存储</h2><p><strong>对象存储是一种以对象形式而不是传统文件和块形式存储数据的方法。</strong></p><p>Ceph是一个分布式对象存储系统，通过它的对象网关(object gateway)，也就是RADOS网关(radosgw)提供对象存储接口。RADOS网关利用librgw(RADOS网关库)和librados这些库，允许应用程序跟Ceph对象存储建立连接。</p><p>RADOS网关提供RESTful接口让用户的应用程序将数据存储到Ceph集群中。RADOS网关接口满足以下特点。</p><ul><li><strong>兼容Swift</strong>：这是为OpenStack Swift API提供的对象存储功能。</li><li><strong>兼容S3</strong>：这是为Amazon S3 API提供的对象存储功能。</li><li><strong>Admin API</strong>：这也称为管理API或者原生API，应用程序可以直接使用它来获取访问存储系统的权限以管理存储系统。</li></ul><p>要访问Ceph的对象存储系统，也可以绕开RADOS网关层，这样更灵活并且速度更快。librados软件库允许用户的应用程序通过C、C++、Java、Python和PHP直接访问Ceph对象存储。Ceph对象存储具备多站点(multisite)的能力，也就是说它能为灾难恢复提供解决方案。通过RADOS或者联合网关可以配置多站点的对象存储。</p><p><img src="https://resource.tinychen.com/blog/20200311/bmlrefKsKRLa.png"></p><h1 id="6、其他存储方案"><a href="#6、其他存储方案" class="headerlink" title="6、其他存储方案"></a>6、其他存储方案</h1><h2 id="6-1-GPFS-通用并行文件系统"><a href="#6-1-GPFS-通用并行文件系统" class="headerlink" title="6.1 GPFS/通用并行文件系统"></a>6.1 GPFS/通用并行文件系统</h2><p>GPFS(General Parallel File System，通用并行文件系统)是一个分布式文件系统，由IBM开发及拥有。这是一个专有、闭源的存储系统，这使得它缺少吸引力并且难以适应。存储硬件加上授权以及支持成本使得它非常昂贵。另外，它提供的存储访问接口非常有限；它既不能提供块存储，也不能提供RESTful接口来访问存储系统，因此这是一个限制非常严格的系统。甚至最大的数据副本数都限制只有3个，这在多个组件同时故障的情形下降低了系统的可靠性。</p><h2 id="6-2-iRDOS"><a href="#6-2-iRDOS" class="headerlink" title="6.2 iRDOS"></a>6.2 iRDOS</h2><p>iRDOS是面向规则的数据系统的代表，它是依据第三条款(3-clause)BSD协议发布的开源数据管理软件。iRDOS不是一个高度可靠的存储系统，因为它的iCAT元数据服务器是单点(single point of failure，SPOF)，并且它不提供真正的HA。另外，它提供的存储访问接口很有限；既不能提供块存储，也不能提供RESTful接口来访问存储系统，因此这是一个限制非常严格的系统。它更适合于存储少量大文件，而不是同时存储小文件和大文件。iRdos采用传统的工作方式，维护一个关于物理位置(与文件名相关联)的索引。由于多个客户端都需要从元数据服务器请求文件位置，使得元数据服务器需要承受更多的计算负载，从而导致单点故障以及性能瓶颈。</p><h2 id="6-3-HDFS"><a href="#6-3-HDFS" class="headerlink" title="6.3 HDFS"></a>6.3 HDFS</h2><p>HDFS是一个用Java写的并且为Hadoop框架而生的分布式可扩展文件系统。HDFS不是一个完全兼容POSIX的文件系统，并且不支持块存储，这使得它的适用范围不如Ceph。HDFS的可靠性不需要讨论，因为它不是一个高度可用的文件系统。HDFS中的单点故障以及性能瓶颈主要源于它单一的NameNode节点。它更适合于存储少量大文件，而不是同时存储小文件和大文件。</p><h2 id="6-4-Lustre"><a href="#6-4-Lustre" class="headerlink" title="6.4 Lustre"></a>6.4 Lustre</h2><p>Lustre是一个由开源社区推动的并行分布式文件系统，依据GNU(General Public License，通用公共许可证)发布。在Lustre中，由单独一个服务器负责存储和管理元数据。因此，从客户端来的所有I/O请求都完全依赖于这个服务器的计算能力，但对企业级计算来说通常这个服务器的计算能力都比较低。与iRDOS和HDFS类似，Lustre适合于存储少量大文件，而不是同时存储小文件和大文件。与iRDOS类似，Lustre管理一个用于映射物理位置和文件名的索引文件，这就决定了它是一个传统的架构，而且容易出现性能瓶颈。Lustre不具备任何节点故障检测和纠正机制。在节点出现故障时，客户端只能自行连接其他节点。</p><h2 id="6-5-Gluster"><a href="#6-5-Gluster" class="headerlink" title="6.5 Gluster"></a>6.5 Gluster</h2><p>GlusterFS最初由Gluster公司开发，该公司2011年被Red Hat收购。GlusterFS是一个横向扩展的网络附加(network-attached)文件系统。在Gluster中，管理员必须明确使用哪种安置策略来将数据副本存储到不同地域的机架上。Gluster本身不内置块访问、文件系统和远程副本，而是以扩展(add-ons)的方式支持。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ceph的基本概念介绍和入门知识储备。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="openstack" scheme="https://tinychen.com/tags/openstack/"/>
    
    <category term="ceph" scheme="https://tinychen.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>Windows更改MSTSC的远程端口号</title>
    <link href="https://tinychen.com/20200125-windows-change-mstsc-port/"/>
    <id>https://tinychen.com/20200125-windows-change-mstsc-port/</id>
    <published>2020-01-25T03:00:00.000Z</published>
    <updated>2020-01-25T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改注册表来修改windows远程的3389端口号从而提升一定的安全性。</p><span id="more"></span><p>首先按<code>win+R</code>打开运行窗口，然后输入<code>regedit</code>打开注册表。</p><p><img src="https://resource.tinychen.com/blog/20200310/Ot9LPDUFsJl2.png"></p><p>接下来我们定位到注册表的这个位置</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">计算机<span class="hljs-symbol">\H</span>KEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>YSTEM<span class="hljs-symbol">\C</span>urrentControlSet<span class="hljs-symbol">\C</span>ontrol<span class="hljs-symbol">\T</span>erminal Server<span class="hljs-symbol">\W</span>inStations<span class="hljs-symbol">\R</span>DP-Tcp<br></code></pre></div></td></tr></table></figure><p>找到<code>PortNumber</code>，注意需要勾选十进制再进行修改，把默认的3389端口号改为其他的端口号即可，建议修改为一个较大的端口号，这样不容易与其他程序的端口号产生冲突。</p><p><img src="https://resource.tinychen.com/blog/20200309/FloKFVpGn9rR.png"></p><p>最后重启电脑即可生效，之后再使用远程的时候记得要在IP地址后面加上英文冒号和端口号，如：<code>192.168.66.66:23333</code>，如果不手动指定就是默认的3389端口号了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过修改注册表来修改windows远程的3389端口号从而提升一定的安全性。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用ntfsfix解决Linux下无法挂载NTFS硬盘的问题</title>
    <link href="https://tinychen.com/20200120-linux-ntfsfix-ntfs/"/>
    <id>https://tinychen.com/20200120-linux-ntfsfix-ntfs/</id>
    <published>2020-01-20T09:00:00.000Z</published>
    <updated>2020-01-20T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>ntfsfix</code>解决Linux下无法挂载NTFS硬盘的问题，主要是由硬盘分区的<code>$MFT</code>文件出现了问题，可以在windows下使用<code>chkdsk</code>命令或者在Linux下使用<code>ntfsfix</code>来进行修复。</p><span id="more"></span><p>首先是故障详情</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[tinychen@tiny-openstack Movies]$ sudo mount /dev/sda1 <br><span class="hljs-meta">$</span><span class="bash">MFTMirr does not match <span class="hljs-variable">$MFT</span> (record 3).</span><br>Failed to mount &#x27;/dev/sda1&#x27;: Input/output error<br>NTFS is either inconsistent, or there is a hardware fault, or it&#x27;s a<br>SoftRAID/FakeRAID hardware. In the first case run chkdsk /f on Windows<br>then reboot into Windows twice. The usage of the /f parameter is very<br>important! If the device is a SoftRAID/FakeRAID then first activate<br>it and mount a different device under the /dev/mapper/ directory, (e.g.<br>/dev/mapper/nvidia_eahaabcc1). Please see the &#x27;dmraid&#x27; documentation<br>for more details.<br></code></pre></div></td></tr></table></figure><p>接着我在<code>askubuntu</code>上面看到了一个<a href="https://askubuntu.com/questions/727218/cannot-mount-usb-stick-errors-out-with-mftmirr-does-not-match-mft">同样的情况</a>，高赞回答里面说是<code>$MFT</code>文件出现了问题，windows下可以使用<code>chkdsk</code>进行修复，之前写过相关的<a href="https://tinychen.com/170503-chkdsk/">操作教程</a>，这次尝试一下使用Linux下的<code>ntfsfix</code>来修复。</p><p>这里需要事先安装好<code>ntfsprogs</code>这个工具，ubuntu下也可以直接使用<code>apt</code>安装，下面使用的是CentOS7作为示范。</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams">[tinychen@tiny-openstack ~]<span class="hljs-symbol">$</span> sudo yum install ntfsprogs<br>[tinychen@tiny-openstack ~]<span class="hljs-symbol">$</span> sudo ntfsfix /dev/sda1<br><span class="hljs-function"><span class="hljs-title">Mounting</span></span> volume... <span class="hljs-symbol">$</span>MFTMirr does <span class="hljs-keyword">not</span> match <span class="hljs-symbol">$</span>MFT (record <span class="hljs-number">3</span>).<br>FAILED<br><span class="hljs-function"><span class="hljs-title">Attempting</span></span> to correct errors... <br><span class="hljs-function"><span class="hljs-title">Processing</span></span> <span class="hljs-symbol">$</span>MFT <span class="hljs-keyword">and</span> <span class="hljs-symbol">$</span>MFTMirr...<br><span class="hljs-function"><span class="hljs-title">Reading</span></span> <span class="hljs-symbol">$</span>MFT... OK<br><span class="hljs-function"><span class="hljs-title">Reading</span></span> <span class="hljs-symbol">$</span>MFTMirr... OK<br><span class="hljs-function"><span class="hljs-title">Comparing</span></span> <span class="hljs-symbol">$</span>MFTMirr to <span class="hljs-symbol">$</span>MFT... FAILED<br><span class="hljs-function"><span class="hljs-title">Correcting</span></span> differences in <span class="hljs-symbol">$</span>MFTMirr record <span class="hljs-number">3.</span>..OK<br>Processing of <span class="hljs-symbol">$</span>MFT <span class="hljs-keyword">and</span> <span class="hljs-symbol">$</span>MFTMirr completed successfully.<br><span class="hljs-function"><span class="hljs-title">Setting</span></span> required flags on partition... OK<br><span class="hljs-function"><span class="hljs-title">Going</span></span> to empty the journal (<span class="hljs-symbol">$</span>LogFile)... OK<br><span class="hljs-function"><span class="hljs-title">Checking</span></span> the alternate boot sector... OK<br>NTFS volume version is <span class="hljs-number">3.1</span>.<br>NTFS partition /dev/sda1 was processed successfully.<br><br></code></pre></div></td></tr></table></figure><p>修复完成之后我们直接进行挂载，这次没有报错，可以正常读写里面的文件了。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[tinychen@tiny-openstack ~]$ sudo mount /dev/sda1 <br></code></pre></div></td></tr></table></figure><blockquote><p>由于这里已经在<code>/etc/fstab</code>文件中制定了挂载的目录和方式，所以直接在命令行里面指定要挂载的设备号就能根据<code>/etc/fstab</code>内的信息进行挂载。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;ntfsfix&lt;/code&gt;解决Linux下无法挂载NTFS硬盘的问题，主要是由硬盘分区的&lt;code&gt;$MFT&lt;/code&gt;文件出现了问题，可以在windows下使用&lt;code&gt;chkdsk&lt;/code&gt;命令或者在Linux下使用&lt;code&gt;ntfsfix&lt;/code&gt;来进行修复。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>常用的高效gnome插件以及主题的下载地址</title>
    <link href="https://tinychen.com/20200110-gnome-extension-recommand/"/>
    <id>https://tinychen.com/20200110-gnome-extension-recommand/</id>
    <published>2020-01-10T02:00:00.000Z</published>
    <updated>2020-01-10T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7上使用Gnome3.26版本进行安装测试，大多数的插件都可以正常运行，主题的工作情况良好，下面的推荐插件全部同时启用会发生冲突，实际需要启用那些插件大家可以根据自己的实际需求进行选择。</p><p>注：grub界面的引导美化在CentOS7上面暂未成功。</p><span id="more"></span><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><h2 id="安装gnome-tweak-tool"><a href="#安装gnome-tweak-tool" class="headerlink" title="安装gnome-tweak-tool"></a>安装gnome-tweak-tool</h2><p>使用yum安装tweak来管理gnome的界面设置和插件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install gnome-tweak-tool chrome-gnome-shell<br></code></pre></div></td></tr></table></figure><h2 id="安装gnome-shell-integration"><a href="#安装gnome-shell-integration" class="headerlink" title="安装gnome-shell-integration"></a>安装gnome-shell-integration</h2><p>安装浏览器插件，一般来说在gnome官网界面上会提醒安装，<strong>火狐和谷歌都支持该插件</strong>，如果没有提醒，可以直接去浏览器的插件中心搜索。</p><h1 id="2、Gnome-shell-Extension"><a href="#2、Gnome-shell-Extension" class="headerlink" title="2、Gnome shell Extension"></a>2、Gnome shell Extension</h1><p>一般来说需要的插件都可以在这里找到：<br><strong>gnome的插件的官网</strong><br><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a></p><h2 id="User-Themes"><a href="#User-Themes" class="headerlink" title="User Themes"></a>User Themes</h2><p><a href="https://extensions.gnome.org/extension/19/user-themes/">https://extensions.gnome.org/extension/19/user-themes/</a><br>使shell界面可以使用主题</p><h2 id="Dash-to-Dock"><a href="#Dash-to-Dock" class="headerlink" title="Dash to Dock"></a>Dash to Dock</h2><p><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">https://extensions.gnome.org/extension/307/dash-to-dock/</a><br>把dash栏变成mac那样子的dock栏</p><h2 id="Dash-to-Panel"><a href="#Dash-to-Panel" class="headerlink" title="Dash to Panel"></a>Dash to Panel</h2><p><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a><br>把dash栏和最上面的任务栏合并变成类似windows的任务栏</p><h2 id="Unblank-screen-saver"><a href="#Unblank-screen-saver" class="headerlink" title="Unblank screen saver"></a>Unblank screen saver</h2><p><a href="https://extensions.gnome.org/extension/1414/unblank/">https://extensions.gnome.org/extension/1414/unblank/</a><br>锁屏的时候使显示器不自动黑屏</p><h2 id="Coverflow-Alt-Tab"><a href="#Coverflow-Alt-Tab" class="headerlink" title="Coverflow Alt-Tab"></a>Coverflow Alt-Tab</h2><p><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">https://extensions.gnome.org/extension/97/coverflow-alt-tab/</a><br>多任务切换的时候提供动态特效</p><h2 id="CPU-Power-Manager"><a href="#CPU-Power-Manager" class="headerlink" title="CPU Power Manager"></a>CPU Power Manager</h2><p><a href="https://extensions.gnome.org/extension/945/cpu-power-manager/">https://extensions.gnome.org/extension/945/cpu-power-manager/</a><br>在任务栏动态显示CPU的工作频率，同时可以调节CPU的工作模式</p><h2 id="NetSpeed"><a href="#NetSpeed" class="headerlink" title="NetSpeed"></a>NetSpeed</h2><p><a href="https://extensions.gnome.org/extension/104/netspeed/">https://extensions.gnome.org/extension/104/netspeed/</a><br>在任务栏实时动态显示网速</p><h2 id="Resource-Monitor"><a href="#Resource-Monitor" class="headerlink" title="Resource Monitor"></a>Resource Monitor</h2><p><a href="https://extensions.gnome.org/extension/1634/resource-monitor/">https://extensions.gnome.org/extension/1634/resource-monitor/</a><br>在任务栏显示CPU、内存、硬盘、网速等状态信息</p><h2 id="Pixel-Saver"><a href="#Pixel-Saver" class="headerlink" title="Pixel Saver"></a>Pixel Saver</h2><p><a href="https://extensions.gnome.org/extension/723/pixel-saver/">https://extensions.gnome.org/extension/723/pixel-saver/</a><br>把程序的菜单栏和最顶端的任务栏合并用于节省屏幕空间</p><h2 id="Hide-Top-Bar"><a href="#Hide-Top-Bar" class="headerlink" title="Hide Top Bar"></a>Hide Top Bar</h2><p><a href="https://extensions.gnome.org/extension/545/hide-top-bar/">https://extensions.gnome.org/extension/545/hide-top-bar/</a><br>隐藏最顶端的任务栏</p><h1 id="3、桌面主题美化"><a href="#3、桌面主题美化" class="headerlink" title="3、桌面主题美化"></a>3、桌面主题美化</h1><p>这里只推荐几个热门的主题，其他的可以在下面的网址上面慢慢找，一般github地址都有自动安装脚本。<br><strong>gnome主题下载官网</strong><br><a href="https://www.gnome-look.org/">https://www.gnome-look.org/</a></p><h2 id="vimx系列"><a href="#vimx系列" class="headerlink" title="vimx系列"></a>vimx系列</h2><p><strong>主题github地址</strong><br><a href="https://github.com/vinceliuice/vimix-gtk-themes">https://github.com/vinceliuice/vimix-gtk-themes</a></p><p><strong>图标github地址</strong><br><a href="https://github.com/vinceliuice/vimix-icon-theme">https://github.com/vinceliuice/vimix-icon-theme</a></p><p><strong>grub引导界面下载地址</strong><br><a href="https://www.gnome-look.org/p/1009236/">https://www.gnome-look.org/p/1009236/</a></p><h2 id="苹果mac系风格"><a href="#苹果mac系风格" class="headerlink" title="苹果mac系风格"></a>苹果mac系风格</h2><p><strong>Mojava主题github地址</strong><br><a href="https://github.com/vinceliuice/Mojave-gtk-theme">https://github.com/vinceliuice/Mojave-gtk-theme</a></p><p><strong>Sierra主题github地址</strong><br><a href="https://github.com/vinceliuice/Sierra-gtk-theme">https://github.com/vinceliuice/Sierra-gtk-theme</a></p><h1 id="4、手动离线安装"><a href="#4、手动离线安装" class="headerlink" title="4、手动离线安装"></a>4、手动离线安装</h1><p>在无法使用浏览器插件一键安装的时候，我们也可以进行手动下载安装包进行离线安装，需要注意还是要提前安装好gnome-tweaks。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看自己的gnome-shell版本</span><br>[tinychen@tiny-station unblank]$ gnome-shell --version<br>GNOME Shell 3.34.4<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里建议使用需要登录gnome桌面的用户操作</span><br><span class="hljs-meta">#</span><span class="bash"> 在用户的家目录下.<span class="hljs-built_in">local</span>/share/gnome-shell/新建一个extensions的文件夹</span><br>[tinychen@tiny-station Downloads]$ cd ~/.local/share/gnome-shell/<br>[tinychen@tiny-station gnome-shell]$ mkdir extensions<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将下载解压好的插件复制到extensions目录下</span><br>[tinychen@tiny-station gnome-shell]$ cd extensions/<br>[tinychen@tiny-station extensions]$ cp -r ~/Downloads/dash-to-paneljderose9.github.com.v29.shell-extension/ ./<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入插件目录中修改metadata.json文件</span><br><span class="hljs-meta">#</span><span class="bash"> 需要保证插件目录中的metadata.json文件的uuid属性值和插件存放的文件夹一致</span><br>[tinychen@tiny-station extensions]$ mv dash-to-paneljderose9.github.com.v29.shell-extension/ dash-to-panel<br>[tinychen@tiny-station extensions]$ cd dash-to-panel/<br>[tinychen@tiny-station dash-to-panel]$ cat metadata.json <br>&#123;<br>  &quot;_generated&quot;: &quot;Generated by SweetTooth, do not edit&quot;,<br>  &quot;description&quot;: &quot;An icon taskbar for the Gnome Shell. This extension moves the dash into the gnome main panel so that the application launchers and system tray are combined into a single panel, similar to that found in KDE Plasma and Windows 7+. A separate dock is no longer needed for easy access to running and favorited applications.\n\nFor a more traditional experience, you may also want to use Tweak Tool to enable Windows &amp;amp;amp;amp;amp;gt; Titlebar Buttons &amp;amp;amp;amp;amp;gt; Minimize &amp;amp;amp;amp;amp;amp; Maximize.\n\nFor the best support, please report any issues on Github. Dash-to-panel is developed and maintained by @jderose9 and @charlesg99.&quot;,<br>  &quot;extension-id&quot;: &quot;dash-to-panel&quot;,<br>  &quot;gettext-domain&quot;: &quot;dash-to-panel&quot;,<br>  &quot;name&quot;: &quot;Dash to Panel&quot;,<br>  &quot;shell-version&quot;: [<br>    &quot;3.18&quot;,<br>    &quot;3.20&quot;,<br>    &quot;3.22&quot;,<br>    &quot;3.24&quot;,<br>    &quot;3.26&quot;,<br>    &quot;3.28&quot;,<br>    &quot;3.30&quot;,<br>    &quot;3.34&quot;,<br>    &quot;3.32&quot;,<br>    &quot;3.36&quot;<br>  ],<br>  &quot;url&quot;: &quot;https://github.com/jderose9/dash-to-panel&quot;,<br>  &quot;uuid&quot;: &quot;dash-to-panel&quot;,<br>  &quot;version&quot;: 29<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们需要重启gnome-shell桌面，同时按下ALT+F2，然后在弹出的输入框中输入r再回车即可重启</span><br><span class="hljs-meta">#</span><span class="bash"> 此外还有gnome-tweaks也需要重启</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7上使用Gnome3.26版本进行安装测试，大多数的插件都可以正常运行，主题的工作情况良好，下面的推荐插件全部同时启用会发生冲突，实际需要启用那些插件大家可以根据自己的实际需求进行选择。&lt;/p&gt;
&lt;p&gt;注：grub界面的引导美化在CentOS7上面暂未成功。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中使用yum安装chrome浏览器</title>
    <link href="https://tinychen.com/20200105-centos-install-chrome/"/>
    <id>https://tinychen.com/20200105-centos-install-chrome/</id>
    <published>2020-01-05T00:00:00.000Z</published>
    <updated>2020-01-05T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS上使用yum安装chrome浏览器，实测在CentOS7和CentOS8中都可以正常操作，需要保证能够直接访问谷歌。</p><span id="more"></span><p>建立一个yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat &gt;&gt; /etc/yum.repos.d/google-chrome.repo &lt;&lt;EOF<br>[google-chrome]<br>name=google-chrome<br>baseurl=https://dl.google.com/linux/chrome/rpm/stable/\$basearch<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub<br>EOF<br></code></pre></div></td></tr></table></figure><p>使用yum命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum repolist<br>yum install google-chrome-stable<br><span class="hljs-comment"># 如果出现gpgkey认证或检验失败，可以添加 --nogpgcheck参数，效果和上面的把yum仓库的`gpgcheck`选项改为`0`一样，只不过前面是仅这次生效，后者是永久生效。</span><br>yum install google-chrome-stable --nogpgcheck<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS上使用yum安装chrome浏览器，实测在CentOS7和CentOS8中都可以正常操作，需要保证能够直接访问谷歌。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中使用nux源安装shutter</title>
    <link href="https://tinychen.com/20200103-centos7-nux-install-shutter/"/>
    <id>https://tinychen.com/20200103-centos7-nux-install-shutter/</id>
    <published>2020-01-03T07:00:00.000Z</published>
    <updated>2020-01-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>shutter和flameshot都是Linux下很强大的截图软件，之前在Ubuntu上面一直使用flameshot感觉不错，现在换到了CentOS7，改用NUX_Desktop源来安装shutter。</p><span id="more"></span><p><strong>nux desktop仓库官网：</strong><br><a href="http://li.nux.ro/repos.html">http://li.nux.ro/repos.html</a></p><blockquote><p>需要注意的是nux源目前只支持红帽系Linux的6和7系列，暂未支持8系的红帽Linux</p></blockquote><p>安装步骤十分简单，需要先启用epel源，再导入nux源，接着更新yum源，最后安装shutter即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum -y install epel-release<br>sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm<br>sudo yum repolist <br>sudo yum install shutter<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;shutter和flameshot都是Linux下很强大的截图软件，之前在Ubuntu上面一直使用flameshot感觉不错，现在换到了CentOS7，改用NUX_Desktop源来安装shutter。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7中使用RDO安装OpenStack-Stein-AIO</title>
    <link href="https://tinychen.com/20200102-centos7-rdo-install-openstack/"/>
    <id>https://tinychen.com/20200102-centos7-rdo-install-openstack/</id>
    <published>2020-01-02T07:00:00.000Z</published>
    <updated>2020-01-02T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了在CentOS7.7系统（物理机）下使用红帽官方的RDO工具进行OpenStack的all-in-one模式部署。关于宿主机的，在之前的文章中已经做过了详细的介绍和测试，这里不再赘述，有兴趣的同学可以<a href="https://tinychen.com/191212-my-hedt-intro/">点击这里</a>查看。</p><span id="more"></span><h1 id="1、RDO简介"><a href="#1、RDO简介" class="headerlink" title="1、RDO简介"></a>1、RDO简介</h1><p>我们先来看一下<a href="https://www.rdoproject.org/">官网</a>的介绍：</p><blockquote><p>RDO is a community of people using and deploying OpenStack on CentOS, Fedora, and Red Hat Enterprise Linux. We have documentation to help get started, mailing lists where you can connect with other users, and community-supported packages of the most up-to-date OpenStack releases available for download.</p></blockquote><p>简单来说RDO就是红帽推出的一个针对红帽系的操作系统（RHEL、CentOS、Fedora）的简化OpenStack安装的工具，定位类似于RHEL和Fedora的关系，是属于社区维护的免费版（也有类似RHEL的付费支持版），目前支持到最新的Stein版本的OpenStack的自动安装，而OpenStack的开发进度目前是处于Train版本。</p><p><strong>RDO和devstack的区别</strong></p><ul><li>devstack是由openstack官方进行维护的，而RDO是由红帽发起的，通过开源社区进行维护</li><li>devstack支持ubuntu、红帽系和opensuse三大主流的Linux操作系统，而RDO只支持红帽系</li><li>红帽系Linux部署OpenStack个人推荐使用RDO</li></ul><h1 id="2、部署安装"><a href="#2、部署安装" class="headerlink" title="2、部署安装"></a>2、部署安装</h1><p>官网的安装说明链接： <a href="https://www.rdoproject.org/install/packstack/">https://www.rdoproject.org/install/packstack/</a> </p><h2 id="2-1-硬件要求"><a href="#2-1-硬件要求" class="headerlink" title="2.1 硬件要求"></a>2.1 硬件要求</h2><p>部署仅支持64位操作系统，要求系统内存最少为16G，最少有一个网卡，最好为静态IP，且需要开启CPU虚拟化支持。</p><h2 id="2-2-环境语言设置"><a href="#2-2-环境语言设置" class="headerlink" title="2.2 环境语言设置"></a>2.2 环境语言设置</h2><p>如果CentOS的默认语言选择的是非英语，需要在  <code>/etc/environment</code>  文件中修改：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">LANG=en_US.utf-8<br>LC_ALL=en_US.utf-8<br></code></pre></div></td></tr></table></figure><h2 id="2-3-RDO库要求"><a href="#2-3-RDO库要求" class="headerlink" title="2.3 RDO库要求"></a>2.3 RDO库要求</h2><blockquote><p><strong>Enabling the Optional, Extras, and RH Common channels on RHEL</strong></p><p>If using RHEL it is assumed that you have registered your system using Red Hat Subscription Management and that you have the <code>rhel-7-server-rpms</code> repository enabled by default. RDO also needs the <code>Optional</code>, <code>Extras</code>, and <code>RH Common</code> channels to be enabled:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">$ sudo subscription-manager repos <span class="hljs-attribute">--enable</span>=rhel-7-server-optional-rpms \<br><span class="hljs-attribute">--enable</span>=rhel-7-server-extras-rpms <span class="hljs-attribute">--enable</span>=rhel-7-server-rh-common-rpms<br></code></pre></div></td></tr></table></figure><p>The <code>Optional</code> channel does not exist in CentOS or Scientific Linux. The required packages are included in the main repositories for those distributions. <code>Extras</code> is enabled by default on CentOS 7.</p></blockquote><p>对于CentOS7而言，只需要用到自带的主要的main和extras两个库，也就是默认的<code>/etc/yum.repos.d/CentOS-Base.repo</code>的<code>[base]</code>和<code>[extras]</code>两个库，有需要的同学可以自行换成国内的镜像源如阿里、网易、清华、中科大等镜像源来提高速度。</p><h2 id="2-4-网络设置"><a href="#2-4-网络设置" class="headerlink" title="2.4 网络设置"></a>2.4 网络设置</h2><p>这里需要配置网卡为静态IP，禁用防火墙，然后把默认的网络管理工具从<code>NetworkManager</code>换成<code>network</code>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo systemctl disable firewalld<br>sudo systemctl stop firewalld<br>sudo systemctl disable NetworkManager<br>sudo systemctl stop NetworkManager<br>sudo systemctl enable network<br>sudo systemctl start network<br></code></pre></div></td></tr></table></figure><h2 id="2-5-部署安装"><a href="#2-5-部署安装" class="headerlink" title="2.5 部署安装"></a>2.5 部署安装</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装OpenStack需要使用的yum仓库并确保仓库已经被正常启用</span><br><span class="hljs-meta">#</span><span class="bash"> 这里使用的是RDO支持的最新的stein版本，需要旧版本的可以在这里查找： http://rdoproject.org/repos/</span> <br>sudo yum install -y centos-release-openstack-stein<br>sudo yum-config-manager --enable openstack-stein<br><span class="hljs-meta">#</span><span class="bash"> 更新yum源</span><br>sudo yum update -y<br><span class="hljs-meta">#</span><span class="bash"> 安装packstack</span><br>sudo yum install -y openstack-packstack<br><span class="hljs-meta">#</span><span class="bash"> 使用packstack安装OpenStack</span><br>sudo packstack --allinone<br></code></pre></div></td></tr></table></figure><p>接下来的部署安装就十分简单了，只需要保证系统和网络正常，然后耐心等待，根据电脑的性能不同，安装的时间也不尽相同，我大概是花了15分钟左右就一次部署成功。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">  [root@tiny-openstack ~]<span class="hljs-comment"># sudo packstack --allinone</span><br>  Welcome to the Packstack setup utility<br><br>  The installation <span class="hljs-built_in">log</span> file is available at: /var/tmp/packstack/20200102-115042-h_xYXR/openstack-setup.log<br>  Packstack changed given value  to required value /root/.ssh/id_rsa.pub<br><br>  Installing:<br>  Clean Up                                             [ DONE ]<br>  Discovering ip protocol version                      [ DONE ]<br>  Setting up ssh keys                                  [ DONE ]<br>  Preparing servers                                    [ DONE ]<br>  Pre installing Puppet and discovering hosts<span class="hljs-string">&#x27; details [ DONE ]</span><br><span class="hljs-string">  Preparing pre-install entries                        [ DONE ]</span><br><span class="hljs-string">  Setting up CACERT                                    [ DONE ]</span><br><span class="hljs-string">  Preparing AMQP entries                               [ DONE ]</span><br><span class="hljs-string">  Preparing MariaDB entries                            [ DONE ]</span><br><span class="hljs-string">  Fixing Keystone LDAP config parameters to be undef if empty[ DONE ]</span><br><span class="hljs-string">  Preparing Keystone entries                           [ DONE ]</span><br><span class="hljs-string">  Preparing Glance entries                             [ DONE ]</span><br><span class="hljs-string">  Checking if the Cinder server has a cinder-volumes vg[ DONE ]</span><br><span class="hljs-string">  Preparing Cinder entries                             [ DONE ]</span><br><span class="hljs-string">  Preparing Nova API entries                           [ DONE ]</span><br><span class="hljs-string">  Creating ssh keys for Nova migration                 [ DONE ]</span><br><span class="hljs-string">  Gathering ssh host keys for Nova migration           [ DONE ]</span><br><span class="hljs-string">  Preparing Nova Compute entries                       [ DONE ]</span><br><span class="hljs-string">  Preparing Nova Scheduler entries                     [ DONE ]</span><br><span class="hljs-string">  Preparing Nova VNC Proxy entries                     [ DONE ]</span><br><span class="hljs-string">  Preparing OpenStack Network-related Nova entries     [ DONE ]</span><br><span class="hljs-string">  Preparing Nova Common entries                        [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron LBaaS Agent entries                [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron API entries                        [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron L3 entries                         [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron L2 Agent entries                   [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron DHCP Agent entries                 [ DONE ]</span><br><span class="hljs-string">  Preparing Neutron Metering Agent entries             [ DONE ]</span><br><span class="hljs-string">  Checking if NetworkManager is enabled and running    [ DONE ]</span><br><span class="hljs-string">  Preparing OpenStack Client entries                   [ DONE ]</span><br><span class="hljs-string">  Preparing Horizon entries                            [ DONE ]</span><br><span class="hljs-string">  Preparing Swift builder entries                      [ DONE ]</span><br><span class="hljs-string">  Preparing Swift proxy entries                        [ DONE ]</span><br><span class="hljs-string">  Preparing Swift storage entries                      [ DONE ]</span><br><span class="hljs-string">  Preparing Gnocchi entries                            [ DONE ]</span><br><span class="hljs-string">  Preparing Redis entries                              [ DONE ]</span><br><span class="hljs-string">  Preparing Ceilometer entries                         [ DONE ]</span><br><span class="hljs-string">  Preparing Aodh entries                               [ DONE ]</span><br><span class="hljs-string">  Preparing Puppet manifests                           [ DONE ]</span><br><span class="hljs-string">  Copying Puppet modules and manifests                 [ DONE ]</span><br><span class="hljs-string">  Applying 192.168.100.90_controller.pp</span><br><span class="hljs-string">  Testing if puppet apply is finished: 192.168.100.90_controller.pp  [ - ]</span><br><span class="hljs-string">  192.168.100.90_controller.pp:                        [ DONE ]           </span><br><span class="hljs-string">  Applying 192.168.100.90_network.pp</span><br><span class="hljs-string">  192.168.100.90_network.pp:                           [ DONE ]        </span><br><span class="hljs-string">  Applying 192.168.100.90_compute.pp</span><br><span class="hljs-string">  192.168.100.90_compute.pp:                           [ DONE ]        </span><br><span class="hljs-string">  Applying Puppet manifests                            [ DONE ]</span><br><span class="hljs-string">  Finalizing                                           [ DONE ]</span><br><span class="hljs-string"></span><br><span class="hljs-string">​    Installation completed successfully **</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Additional information:</span><br><span class="hljs-string"></span><br><span class="hljs-string">   * Parameter CONFIG_NEUTRON_L2_AGENT: You have choosen OVN neutron backend. Note that this backend does not support LBaaS, VPNaaS or FWaaS services. Geneve will be used as encapsulation method for tenant networks</span><br><span class="hljs-string">   * A new answerfile was created in: /root/packstack-answers-20200102-115042.txt</span><br><span class="hljs-string">   * Time synchronization installation was skipped. Please note that unsynchronized time on server instances might be problem for some OpenStack components.</span><br><span class="hljs-string">   * File /root/keystonerc_admin has been created on OpenStack client host 192.168.100.90. To use the command line tools you need to source the file.</span><br><span class="hljs-string">   * To access the OpenStack Dashboard browse to http://192.168.100.90/dashboard .</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Please, find your login credentials stored in the keystonerc_admin in your home directory.</span><br><span class="hljs-string">   * The installation log file is available at: /var/tmp/packstack/20200102-115042-h_xYXR/openstack-setup.log</span><br><span class="hljs-string">   * The generated manifests are available at: /var/tmp/packstack/20200102-115042-h_xYXR/manifests</span><br><span class="hljs-string"></span><br></code></pre></div></td></tr></table></figure><h2 id="2-6-登录运行"><a href="#2-6-登录运行" class="headerlink" title="2.6 登录运行"></a>2.6 登录运行</h2><p>留意上面的安装完成提示，我们可以获得几个重要信息：</p><ul><li>dashboard的登录链接一般就是<code>http://你用来部署OpenStack的网卡IP/dashboard</code></li><li>登录的账号密码文件在home目录下的<code>keystonerc_admin</code>文件，一般使用<code>root</code>账户部署，所以应该是在<code>/root/</code>下</li><li>部署的配置文件是<code>/root/packstack-answers-20200102-115042.txt</code>，根据部署的时间不同，后面的数字会不一样，这个answer-file可以用于下次继续部署，只要在部署的时候使用  <code>--answer-file</code> 选项即可</li></ul><p><img src="https://resource.tinychen.com/blog/20200103/8Gvy5OjVkQAo.png"></p><p><img src="https://resource.tinychen.com/blog/20200103/1L5stVvA5MkI.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录了在CentOS7.7系统（物理机）下使用红帽官方的RDO工具进行OpenStack的all-in-one模式部署。关于宿主机的，在之前的文章中已经做过了详细的介绍和测试，这里不再赘述，有兴趣的同学可以&lt;a href=&quot;https://tinychen.com/191212-my-hedt-intro/&quot;&gt;点击这里&lt;/a&gt;查看。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="openstack" scheme="https://tinychen.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7中使用elrepo源安装Nvidia显卡驱动</title>
    <link href="https://tinychen.com/20200102-centos7-elrepo-install-nvidia-driver/"/>
    <id>https://tinychen.com/20200102-centos7-elrepo-install-nvidia-driver/</id>
    <published>2020-01-02T01:00:00.000Z</published>
    <updated>2020-01-02T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7中使用elrepo源来进行英伟达显卡驱动的安装。</p><span id="more"></span><p>首先是elrepo源的官网地址： <a href="http://elrepo.org/tiki/tiki-index.php">http://elrepo.org/tiki/tiki-index.php</a> </p><p>ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。</p><p>ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等。</p><blockquote><p>如果觉得网络不稳定使用官方的elrepo源慢的话可以尝试一下指定镜像源为中科大的镜像源。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm<br>sudo yum install kmod-nvidia<br></code></pre></div></td></tr></table></figure><p>到这里就算是安装完成了，之后也可以通过yum来对驱动进行升级，同时英伟达官网也有提供安装驱动，具体使用哪个看同学们自己的实际需求了。</p><p>查看安装好驱动之后的显卡信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nvidia-smi<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20200104/d7d2OUGItwaR.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7中使用elrepo源来进行英伟达显卡驱动的安装。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Linux中升级pip和更换pip镜像源</title>
    <link href="https://tinychen.com/20191227-pip-source-upgrade/"/>
    <id>https://tinychen.com/20191227-pip-source-upgrade/</id>
    <published>2019-12-27T07:00:00.000Z</published>
    <updated>2019-12-27T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux中对Python的pip进行更新和镜像源替换为国内的镜像源。理论上操作对于Linux系统均适用，Python2和Python3也同样适用，不过Python2将在2020年1月1日停止支持，这里需要提醒一下大家记得尽快升级迁移自己项目和系统中使用的Python版本。</p><p>本文的操作会使用CentOS7+Python2和Ubuntu18.04.3+Python3来进行演示。</p><span id="more"></span><p>需要注意的是，如果系统中存在多个不同版本的<code>pip</code>，需要确定<code>pip</code>命令所指向的是否是需要更新的<code>pip</code>版本。</p><p><img src="https://resource.tinychen.com//20191227013058.png"></p><p><img src="https://resource.tinychen.com//20191227013145.png"></p><h1 id="1、升级pip"><a href="#1、升级pip" class="headerlink" title="1、升级pip"></a>1、升级pip</h1><h2 id="1-1-直接使用pip升级pip"><a href="#1-1-直接使用pip升级pip" class="headerlink" title="1.1 直接使用pip升级pip"></a>1.1 直接使用pip升级pip</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo python -m pip install --upgrade pip<br><span class="hljs-comment"># 或者适用这个命令，两个的效果是一样的</span><br>sudo pip install -U pip<br></code></pre></div></td></tr></table></figure><h2 id="1-2-重新安装pip"><a href="#1-2-重新安装pip" class="headerlink" title="1.2 重新安装pip"></a>1.2 重新安装pip</h2><p>如果<code>pip</code>出现了异常状况损坏了导致不能正常使用，这时候我们可以考虑尝试一下重新安装<code>pip</code>，需要注意的是<code>python-pip</code>默认指向的是<code>python2</code>的<code>pip</code>，<code>python3-pip</code>才是<code>python3</code>的<code>pip</code>，还是需要注意一下版本的问题。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu18.04.3</span><br>sudo apt list | egrep <span class="hljs-string">&#x27;python.*pip&#x27;</span><br>sudo apt remove python3-pip<br>sudo apt install python3-pip<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191227011749.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS7.7</span><br>sudo yum list | egrep <span class="hljs-string">&#x27;python.*pip&#x27;</span><br>sudo yum remove python3-pip<br>sudo yum install python3-pip<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191227011851.png"></p><p>重新安装完成之后，再次使用上面1.1的命令对<code>pip</code>进行升级即可。</p><h2 id="1-3-使用Pypa官网安装文件重装pip"><a href="#1-3-使用Pypa官网安装文件重装pip" class="headerlink" title="1.3 使用Pypa官网安装文件重装pip"></a>1.3 使用Pypa官网安装文件重装pip</h2><p>如果上面两种方法都不行，可以尝试一下使用Pypa官网的文件来进行pip的重新安装。</p><p>我们使用curl或者wget命令来下载安装文件，并使用对应版本的python进行安装。</p><p><img src="https://resource.tinychen.com//20191227014204.png"></p><p><img src="https://resource.tinychen.com//20191227014050.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用curl将文件另存为get-pip.py到本地</span><br>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py<br><span class="hljs-comment"># 或者直接使用wget下载</span><br>wget https://bootstrap.pypa.io/get-pip.py<br><span class="hljs-comment"># 使用python强制重新安装pip</span><br>python get-pip.py --force-reinstall<br></code></pre></div></td></tr></table></figure><p>使用这种方法安装的pip直接就是最新版本，不需要自己再额外手动升级。</p><p><img src="https://resource.tinychen.com//20191227014637.png"></p><h1 id="2、更换pip源"><a href="#2、更换pip源" class="headerlink" title="2、更换pip源"></a>2、更换pip源</h1><h2 id="2-1-国内pip镜像源"><a href="#2-1-国内pip镜像源" class="headerlink" title="2.1 国内pip镜像源"></a>2.1 国内pip镜像源</h2><ul><li>豆瓣 <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中科大 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>阿里云 <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li></ul><p>这四个是国内比较常用且稳定的镜像源，具体使用哪个大家可以根据自己的实际网络环境进行选择。</p><h2 id="2-2-永久切换镜像源"><a href="#2-2-永久切换镜像源" class="headerlink" title="2.2 永久切换镜像源"></a>2.2 永久切换镜像源</h2><p>永久切换镜像源需要我们在用户的家目录下新建一个.pip的隐藏文件夹并在里面新建一个<code>pip.conf</code>文件用于指定镜像源。这里我们以中科大的镜像源为例。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir ~/.pip/<br><br>cat &gt; ~/.pip/pip.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[global]</span><br><span class="hljs-string">index-url = https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="hljs-string">[install]</span><br><span class="hljs-string">trusted-host = https://pypi.mirrors.ustc.edu.cn/</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><p>我们安装一个库来看一下速度如何：</p><p><img src="https://resource.tinychen.com//20191227020927.png"></p><h2 id="2-3-临时指定镜像源"><a href="#2-3-临时指定镜像源" class="headerlink" title="2.3 临时指定镜像源"></a>2.3 临时指定镜像源</h2><p>如果需要在某个安装中指定镜像源，只需要添加<code>-i</code>参数并加上镜像源的地址即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用pip指定从清华镜像源中安装pandas库</span><br>sudo pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191227020514.png"></p><p>可以看到图中的下载速度几乎是可以达到满速的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Linux中对Python的pip进行更新和镜像源替换为国内的镜像源。理论上操作对于Linux系统均适用，Python2和Python3也同样适用，不过Python2将在2020年1月1日停止支持，这里需要提醒一下大家记得尽快升级迁移自己项目和系统中使用的Python版本。&lt;/p&gt;
&lt;p&gt;本文的操作会使用CentOS7+Python2和Ubuntu18.04.3+Python3来进行演示。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="python" scheme="https://tinychen.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04更改grub菜单引导选项和等待时间</title>
    <link href="https://tinychen.com/20191224-ubuntu-change-grub/"/>
    <id>https://tinychen.com/20191224-ubuntu-change-grub/</id>
    <published>2019-12-24T07:00:00.000Z</published>
    <updated>2019-12-24T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>双系统情况下的Ubuntu18.04更改grub菜单引导选项和等待时间。此处使用的是UEFI引导的物理机作为示范，而非是使用传统的BIOS进行引导的虚拟机。实际的各种引导情况可能会比较复杂，需要自己根据实际情况来进行判断。</p><span id="more"></span><p>对于修改grub参数，不建议直接对<code>/boot/grub/grub.cfg</code>文件进行修改，一般来说是对<code>/etc/default/grub</code>进行修改，然后执行<code>update-grub</code>命令重新生成grub引导文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vim /etc/default/grub<br></code></pre></div></td></tr></table></figure><p>然后这里有四个参数是我们需要注意修改的：</p><p><img src="https://resource.tinychen.com//20191225033419.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 这个是默认的启动项，一般来说默认为0，即Ubuntu的默认启动项,1则是Ubuntu的高级启动选项，包括了除了默认内核之外的其他内核，以及对应的紧急恢复救援模式，2就是一般情况下双系统的第二个系统，这里就是windows，因为grub实际上是可以引导windows启动的，所以在更新grub文件的时候会检索到磁盘上面的引导文件并且把windows加入到引导列表中来。</span><br>GRUB_DEFAULT=2<br><br><span class="hljs-comment"># 这个参数需要注释掉保证下面的两个参数生效</span><br><span class="hljs-comment">#GRUB_TIMEOUT_STYLE=hidden</span><br><br><span class="hljs-comment"># 这两个参数就是grub引导界面在登录的时候等待时间</span><br>GRUB_TIMEOUT=5<br>GRUB_RECORDFAIL_TIMEOUT=5<br></code></pre></div></td></tr></table></figure><p>我们查看<code>/boot/grub/grub.cfg</code>文件下面的内容，可以从代码中看出，这里引导时间的参数主要是<code>GRUB_RECORDFAIL_TIMEOUT</code>。</p><p><img src="https://resource.tinychen.com//20191226194433.png"></p><p><img src="https://resource.tinychen.com//20191226194529.png"></p><p>不同的配置文件可以参数不太一样，大家可以查看一下自己的grub文件，再尝试一下这两个参数。</p><p>接下来只要执行<code>sudo update-grub</code>就可以更新grub引导参数了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tinychen@Tiny-Studio:~$ sudo vim /etc/default/grub<br>tinychen@Tiny-Studio:~$ sudo update-grub<br>Sourcing file `/etc/default/grub<span class="hljs-string">&#x27;</span><br><span class="hljs-string">Generating grub configuration file ...</span><br><span class="hljs-string">Found linux image: /boot/vmlinuz-5.3.0-26-generic</span><br><span class="hljs-string">Found initrd image: /boot/initrd.img-5.3.0-26-generic</span><br><span class="hljs-string">Found linux image: /boot/vmlinuz-5.3.0-25-generic</span><br><span class="hljs-string">Found initrd image: /boot/initrd.img-5.3.0-25-generic</span><br><span class="hljs-string">Found Windows Boot Manager on /dev/nvme2n1p2@/efi/Microsoft/Boot/bootmgfw.efi</span><br><span class="hljs-string">Adding boot menu entry for EFI firmware configuration</span><br><span class="hljs-string">done</span><br></code></pre></div></td></tr></table></figure><p>对于系统中存在的<code>update-grub</code>和<code>update-grub2</code>两个命令，我们可以看到实际上都是指向同一个文件，现在的grub引导应该都是使用了grub2，早年的grub1应该已经被彻底换下来了。</p><p><img src="https://resource.tinychen.com//20191225031329.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看grub版本，可以看到确实是在使用grub2了</span><br>sudo grub-install -V<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191226205647.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;双系统情况下的Ubuntu18.04更改grub菜单引导选项和等待时间。此处使用的是UEFI引导的物理机作为示范，而非是使用传统的BIOS进行引导的虚拟机。实际的各种引导情况可能会比较复杂，需要自己根据实际情况来进行判断。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>为本科毕业设计搭建HEDT平台的硬件选型思路及测试</title>
    <link href="https://tinychen.com/20191212-my-hedt-introduction/"/>
    <id>https://tinychen.com/20191212-my-hedt-introduction/</id>
    <published>2019-12-12T07:00:00.000Z</published>
    <updated>2019-12-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从9月份开始计划搭建一台高性能的HEDT主机来进行毕设相关工作，前后折腾了两个多月总算是基本搞定，这里写一篇文章记录一下整个硬件选型的思路、过程以及测试，同时此文也作为毕业设计的硬件平台选型搭建部分。</p><span id="more"></span><h1 id="1、用途介绍"><a href="#1、用途介绍" class="headerlink" title="1、用途介绍"></a>1、用途介绍</h1><p>和大多数用户搭建HEDT平台的用途不同（影视剪辑后期制作、游戏直播），这次的HEDT平台并不单纯是用作服务器用途，而是主要用来在Linux下开虚拟机（KVM虚拟化），同时兼顾个人高性能台式机娱乐用途，因此主要的预算是花在CPU、内存、硬盘上面，对于显卡的要求很低，只要能硬解4K蓝光原盘电影即可。接下来是对主要的板U、内存、固态、显卡进行分析。</p><h2 id="1-1-主板-amp-CPU"><a href="#1-1-主板-amp-CPU" class="headerlink" title="1.1 主板&amp;CPU"></a>1.1 主板&amp;CPU</h2><p>首先是板U部分，硬性指标非常简单，需要CPU支持VT-d、VT-x这两项（AMD处理器也有对应的选项），简单来说就是CPU必须要支持硬件虚拟化，同时单核性能并不需要太强，但是核心数要尽可能多，且PCIE通道数量要尽可能多，配套的主板扩展性要尽可能好（PCIE插槽尽可能多），除了显卡之外还需要插入PCIE转NVME的转接卡、无线网卡和万兆有线网卡等设备。</p><p>这里首先排除了绝大多数的主流桌面CPU，因为他们的核心数都比较少，即使是9900K和3900X也才分别8C16T和12C24T，AMD这边的话3950X以上勉强够用，再往上的3960和3970当时还没有推出，当然就算是出了我也买不起，二代的线程撕裂者有设计缺陷，内存表现实在令人担忧，因此不作考虑，INTEL这边的话就是挤了好几代牙膏的HEDT的酷睿X平台，9960X或者9980XE算是够用。</p><p>再然后看向服务器平台，由于主要考虑的是二手硬件（全新的买不到也买不起），这里就是英特尔的主场了，因为AMD早年的不给力，x86服务器领域基本就是英特尔一直独秀，某宝上能买到的二手硬件也基本是英特尔的，主要还是大量的双路E5洋垃圾和部分的3647平台的QS、ES处理器（正式版非常贵），AMD这边虽然有少量的霄龙EPYC处理器，但是总的来说选择比较少，而且这方面的评测和教程都很少，个人并不是很想在这方面冒险，万一翻车了要耽误很长一段时间，而且还不好出二手。</p><p>再加上价格和稳定性的因素，AMD的选择就可以说被淘汰掉了，因为毕设需要用到的Linux系统主要还是CentOS7，内核版本是3.x系列，旧版本的Linux内核对AMD的支持并不算很好，综合各方面的因素考虑，AMD在这次的装机中并不算是特别优秀的选择，因此只能淘汰掉。</p><p>而在INTEL这边，高端的intel的HEDT平台不仅本身的CPU很贵，由于不能使用服务器内存，整机的价格预算还会上升很多，到这里就可以得出结论，主要进入备选列表的板U套餐就是二手的双路E5服务器套餐、铂金3647服务器平台这两种选择，这两个平台的CPU都有很多的PCIE通道数，能使用比家用内存条便宜很多的二手服务器内存（REG ECC内存）。</p><h2 id="1-2-内存"><a href="#1-2-内存" class="headerlink" title="1.2 内存"></a>1.2 内存</h2><p>对于内存的要求不算很高，容量至少需要128G，价格尽可能低一些，频率不需要太高（大多数服务器的CPU支持的最高内存频率为2933），时序不需要太低，没有大型游戏的需求，而且大多数服务器的CPU支持四通道内存（线程撕裂者支持四通道），铂金处理器还支持六通道内存（得益于CCX模块化设计，EPYC霄龙处理器还有八通道内存），如果是双路CPU的话，支持的内存通道则翻倍，多通道内存可以有效提升内存的读写性能。此外，ECC内存支持内存纠错，可以有效降低运行时候的蓝屏死机等情况，比较适合我这种24小时不关机的情况。（最重要的还是便宜，淘宝上面的32G 2666MHz的三星REG内存条单条才五百多，2400MHz的镁光/海力士只要四百多）</p><h2 id="1-3-硬盘"><a href="#1-3-硬盘" class="headerlink" title="1.3 硬盘"></a>1.3 硬盘</h2><p>这次的虚拟机硬盘主要还是以虚拟硬盘为主，使用一般的PCIe3.0x4的NVME固态就能满足需求，由于基本都是测试用途，并没有上线使用所产生的大量文件读写存储需求，预计使用NVME固态进行虚拟化，普通的机械硬盘进行备份即可，并没有打算直通固态或者是使用HBA卡或阵列卡等组合。</p><h2 id="1-4-显卡"><a href="#1-4-显卡" class="headerlink" title="1.4 显卡"></a>1.4 显卡</h2><p>考虑到以后可能会进行黑苹果安装，这里还是尽可能地选择了A卡，而且在二手的情况来看，千元以下的价位基本就是580的天下，其他的选择都没啥性价比。而且580足以满足硬解4K蓝光，外接4KHDR显示器等需求，由于不玩大型游戏，不剪辑，不用CUDA，所以就没有考虑N卡。当然最主要的原因还是为后期的黑苹果做好准备。</p><h2 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a>1.5 小结</h2><p>总的来说，由于预算的限制，选择二手的intel服务器平台是目前对于我来说综合各方面因素比较合适的选择，在128G内存这个选择下，使用服务器内存虽然牺牲了一部分的高频和低延迟特性，但是换来了整体预算的极大程度降低和ECC纠错功能。</p><p>不选择AMD和INTEL两家的主流HEDT平台（酷睿X和线程撕裂者）主要还是太贵了，不选择EPYC是因为二手流出配件太少，选择余地不大，而且没有太好的折腾方案。</p><p>显卡和网卡都是选择黑苹果兼容免驱的硬件方便后期折腾黑苹果，而网卡则由于只是一台主机，暂时没有和外部机器大量高速交换数据的需求，只需要预留一个PCIEx8的插槽用来后期升级万兆网络或者是IB、RDMA网络等。</p><h1 id="2、铂金8167M-C621"><a href="#2、铂金8167M-C621" class="headerlink" title="2、铂金8167M+C621"></a>2、铂金8167M+C621</h1><p>在因为体积和性能的原因淘汰了老双路E5平台之后，确定了购入铂金3647平台外加华擎的永擎C621D8A主板（永擎是华擎的服务器主板产品线），处理器买的是一块据说是华为云定制的处理器，铂金8167M，26核心52线程，待机2.0睿频2.4全核2.4，支持六通道内存，有一大堆的PCIE通道，整体来说还是非常不错的，但是败笔就在这块永擎的主板。</p><p>▼实拍看一下巴掌大的CPU</p><p><img src="https://resource.tinychen.com/blog/20191220/hLbwxpuL1jqh.png"></p><p>整机平台搭建好之后在自己做的测试平台上是这样的：</p><p><img src="https://resource.tinychen.com/blog/20191220/1p6NfG3klk5V.png"></p><p>上到机箱里面是这样的</p><p><img src="https://resource.tinychen.com/blog/20191220/P0exJR9pBsdx.png"></p><p>这套平台用起来还是有着挺多不错的地方的：</p><ol><li>主板是有redhat认证的，也就是说会有RHEL的驱动提供，不需要担心驱动的支持问题（这在Linux服务器上尤为重要）</li><li>主板自带4个X722千兆光口网卡、1个IPMI管理网口，在对网络要求比较高的多开虚拟机中有一定的优势</li><li>主板有板载集显且带VGA接口，不需要外接独显就能连接显示器DEBUG</li><li>主板自带超多SATA接口，在不使用扩展卡的情况下就可以接入10多个SATA硬盘</li><li>CPU支持6通道内存，PCIE通道数和插槽足够多</li><li>CPU核心数非常多，十分适合多开虚拟机进行核心分配</li></ol><p>上面的这些优点基本上都是服务器平台有的一些特性，那么下面来说一下我最终把它换掉的原因：</p><ol><li>非常孱弱的单核性能，由于这颗CPU的主频只有2.0，即便是睿频也只有2.4，稍微吃一点单核的应用在上面运行起来都会非常吃力，对于个人日常使用来说还是有一定的影响；</li><li>整套平台的Windows10支持比较一般，由于是服务器平台，主要还是支持的redhat和windows server系统较好，win10的驱动都能找到，但是总感觉差点意思；</li><li>主板的24pin供电和CPU的8pin供电位置调转了过来，和一般的家用ATX主板刚好相反，导致在使用普通机箱的时候一般电源的24pin线材不够长且理线很麻烦；</li><li>主板虽然有两个nvme的硬盘接口，但是居然只是PCIEx1的带宽，实在鸡肋；</li><li>3647平台的CPU安装方式非常奇葩，由于CPU太大，需要先把CPU装到散热器上，再把散热器装到主板上，且3647平台的散热器非常少，要么很贵，要么很丑。</li></ol><p>所以最后基于各种考虑，还是把这套平台换掉了。</p><h1 id="3、W2295-X299"><a href="#3、W2295-X299" class="headerlink" title="3、W2295+X299"></a>3、W2295+X299</h1><h2 id="3-1-配置简介"><a href="#3-1-配置简介" class="headerlink" title="3.1 配置简介"></a>3.1 配置简介</h2><p>最终在闲鱼上看到了一套整体价格和上面说的相当，而更适合我使用的志强W-2295 ES处理器加x299芯片组的主板，需要注意的是，正常的X299主板是并不支持REG ECC内存的，而正常的W2295处理器也是不能用这个x299芯片组的，但是由于这块U是ES不显版本，加上10代酷睿X的HEDT平台更新了之后带来的主板微码更新，使得可以在x299平台上使用这颗不显的ES版W-2295和REG ECC内存。</p><p>下面是整套平台的汇总配置：</p><table><thead><tr><th align="center">配件</th><th align="center">型号</th><th align="center">购买平台</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">CPU</td><td align="center">Xeon W-2295 ES不显 18核36线程</td><td align="center">闲鱼</td><td align="center">4750不包邮</td></tr><tr><td align="center">散热器</td><td align="center">采融ARTIST EVO 3</td><td align="center">京东</td><td align="center">289包邮</td></tr><tr><td align="center">主板</td><td align="center">华硕 TUF x299 mark2</td><td align="center">闲鱼</td><td align="center">899不包邮</td></tr><tr><td align="center">内存</td><td align="center">(SK海力士 32G DDR4 2R*4 2400MHz)x4</td><td align="center">淘宝</td><td align="center">1728包邮</td></tr><tr><td align="center">显卡</td><td align="center">蓝宝石RX580 8G超白金</td><td align="center">闲鱼</td><td align="center">750包邮</td></tr><tr><td align="center">硬盘1</td><td align="center">三星PM981 512G（5月份购买）</td><td align="center">淘宝</td><td align="center">465.9包邮</td></tr><tr><td align="center">硬盘2</td><td align="center">雷克沙NM610 1T</td><td align="center">天猫</td><td align="center">569包邮</td></tr><tr><td align="center">硬盘3</td><td align="center">雷克沙NM610 1T</td><td align="center">京东</td><td align="center">565包邮</td></tr><tr><td align="center">硬盘4</td><td align="center">西部数据 Elements 12TB 移动3.5寸机械硬盘拆盘</td><td align="center">亚马逊</td><td align="center">1436.5包邮</td></tr><tr><td align="center">硬盘5</td><td align="center">西部数据 Elements 12TB 移动3.5寸机械硬盘拆盘</td><td align="center">亚马逊</td><td align="center">1321.38包邮</td></tr><tr><td align="center">固态散热</td><td align="center">利民TR-M2固态散热器</td><td align="center">京东</td><td align="center">39.9包邮</td></tr><tr><td align="center">转接卡</td><td align="center">佳翼iHyper M2 PCIEx16拆分4NVME转接卡</td><td align="center">天猫</td><td align="center">149包邮</td></tr><tr><td align="center">无线模块</td><td align="center">博通BCM943602CS</td><td align="center">闲鱼</td><td align="center">200包邮</td></tr><tr><td align="center">电源</td><td align="center">安钛克HCG850W 金牌plus 十年保修包换</td><td align="center">闲鱼</td><td align="center">488不包邮</td></tr><tr><td align="center">机箱</td><td align="center">恩杰H510</td><td align="center">闲鱼</td><td align="center">300包邮</td></tr><tr><td align="center">风扇1</td><td align="center">(Arctic F12 PWM PST)x2</td><td align="center">京东</td><td align="center">79.8包邮</td></tr><tr><td align="center">风扇2</td><td align="center">(Arctic F14 PWM)x2</td><td align="center">淘宝</td><td align="center">79.5包邮</td></tr><tr><td align="center">RGB</td><td align="center">(乔思伯NC-3内存马甲)x4+VC-3显卡支架+RGB遥控器</td><td align="center">闲鱼</td><td align="center">268包邮</td></tr><tr><td align="center">邮费</td><td align="center">CPU+主板+电源</td><td align="center">顺丰</td><td align="center">大约100</td></tr><tr><td align="center">总计</td><td align="center"></td><td align="center"></td><td align="center">14477.98</td></tr></tbody></table><p>为了控制预算，大多数都是通过闲鱼购买的成色9成新以上或者是全新的配件，而在关键的存储方面则是在天猫和京东已经亚马逊购买带保修的硬盘，以确保数据的安全。</p><p>由于购买的时间从十月份到双十二，中间跨度很大，一些价格的波动也十分大，比如内存现在又开始小幅度涨价，而显卡则是在一路降价，其他的基本都没有太大的波动。</p><p>整机的全部价格下来在14500左右，其中硬盘占了大概有4000左右，但是也是得到了2.5T的NVME固态存储和24T的机械硬盘存储空间，相对来说还是不错的。</p><p>接下来对一些主要的部件进行介绍：</p><h2 id="3-2-CPU"><a href="#3-2-CPU" class="headerlink" title="3.2 CPU"></a>3.2 CPU</h2><p>CPU是在CHH上面看到的一位大佬评测的一款比较特别的处理器，先上CHH的链接：</p><p><a href="https://www.chiphell.com/thread-2102461-1-1.html">https://www.chiphell.com/thread-2102461-1-1.html</a></p><p>然后通过INTEL官网也可以查询到这块处理器的相关信息：</p><p><a href="https://ark.intel.com/content/www/cn/zh/ark/products/198011/intel-xeon-w-2295-processor-24-75m-cache-3-00-ghz.html">https://ark.intel.com/content/www/cn/zh/ark/products/198011/intel-xeon-w-2295-processor-24-75m-cache-3-00-ghz.html</a></p><p><img src="https://resource.tinychen.com/blog/20191222/k6WrStF4zrYr.png"></p><p>这里我们可以看到，这是一块19年第四季度才上市的工作站处理器，看起来应该是W-2195的升级版，依旧是14nm制程，18核36线程，165W的TDP，主频3.0G，睿频4.6G，还有一个特殊的英特尔® 睿频加速 Max 技术 3.0技术可以让几个核心能到4.8G。</p><blockquote><p>英特尔® 睿频加速 Max 技术 3.0 识别处理器上性能最佳的内核，同时通过提高利用电源和散热器空间时所必需的频率，提高这些内核的性能。英特尔® 睿频加速 Max 技术 3.0 的频率就是在这种模式下运行的CPU的时钟频率。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20191222/GS7KnqoT2DQw.png"></p><p>支持ECC内存，频率最高是2933，有48条PCIE通道，刚好够用。</p><h2 id="3-3-主板"><a href="#3-3-主板" class="headerlink" title="3.3 主板"></a>3.3 主板</h2><p>虽然是X299的主板基本都能点亮，但是据卖家描述，对ECC内存支持最好的就是华硕的板子，所以在闲鱼上面找到了一块899的华硕TUF X299 mark2的主板，虽然只有主板和挡板，但是成色还算不错，查询了一下保修到期时间是2024年的11月，相对而言还算是OK。</p><p><img src="https://resource.tinychen.com/blog/20191222/9zUO8dhSwTqt.png"></p><p>从官网的介绍图我们可以看到主板的设计布局还是相对比较合理的，尤其是较多的USB接口和在PCIE通道插槽的分配设置上比之前的永擎C621D8A来说要对个人用户好很多。</p><p><img src="https://resource.tinychen.com/blog/20191223/hV0AVLhfrSrj.png"></p><p>查询官网我们可以看到PCIE通道的分配情况如下</p><p><img src="https://resource.tinychen.com/blog/20191222/cAnI50SkqHnm.png"></p><p>由于插上了显卡之后，第一条X16插槽下面的X1插槽和X4插槽都用不了，第二条X16插槽用来扩展固态，下面的X1插槽用来扩展无线模块，最下面的看起来是X16实际上只有X8带宽的插槽用来扩展万兆网卡，正好全部插满，刚刚好够用。</p><h2 id="3-4-内存"><a href="#3-4-内存" class="headerlink" title="3.4 内存"></a>3.4 内存</h2><p>内存这里在淘宝上找了一家专门卖服务器拆机件和二手服务器的老店，买的是海力士的2400MHz的2R*4的32G单条，一共四条，由于X299可以超频，后面轻松超到2933MHz使用。</p><p><img src="https://resource.tinychen.com/blog/20191222/NpLS5WuxViig.png"></p><h2 id="3-5-硬盘"><a href="#3-5-硬盘" class="headerlink" title="3.5 硬盘"></a>3.5 硬盘</h2><p>硬盘这里比较特殊，之前5月份装机的时候买了一块三星的PM981，性能放到现在来说也还是非常强悍的，然后在双十一期间又买了两块雷克沙的NM610 1T版本，其中三星的PM981用来装宿主机的Linux系统，一块NM610用来装Windows，另一块NM610用来装虚拟机的镜像。</p><p>由于主板只有两个NVME的固态位，且其中一个是非常奇葩的竖装方式，然后卖家也没有这个竖装支架，所以相当于只能装一块固态，因此上淘宝买了一块佳翼的PCIE转接卡，它可以把一条X16的插槽拆分成4个X4的插槽（需要主板支持PCIE拆分功能），然后就可以插4块NVME的固态了。需要注意的是转接卡本身并不支持RAID，支持RAID的转接卡太贵了。</p><p><img src="https://resource.tinychen.com/blog/20191223/w9RrwQhWL23M.png"></p><p>然后在黑五期间购入了两块西部数据的Elements的12T的移动硬盘，一块拆盘用，另一块暂时不拆放着备用，机械硬盘的主要用途是存储蓝光电影以及备份各种文件。</p><p><img src="https://resource.tinychen.com/blog/20191223/aoC2yCHp4TMV.png"></p><p>拆开之后我们可以看到里面的是12TB的氦气降速盘（灯光问题拍出来的照片有点偏紫，实际硬盘是白色的），可以直接接入电脑使用，并不需要屏蔽3.3V阵脚。</p><h1 id="4、上机测试"><a href="#4、上机测试" class="headerlink" title="4、上机测试"></a>4、上机测试</h1><p>接下来上机测试一下：</p><p><img src="https://resource.tinychen.com/blog/20191222/je47xN5medAK.png"></p><p>由于是ES版的处理器，CPU表面并没有标明型号，不过由于同样都是2066阵脚，这里可以使用x299平台点亮，前提是需要把主板升级到最新的BIOS。</p><h2 id="4-1-CPU-Z-amp-GPU-Z"><a href="#4-1-CPU-Z-amp-GPU-Z" class="headerlink" title="4.1 CPU-Z&amp;GPU-Z"></a>4.1 CPU-Z&amp;GPU-Z</h2><p>然后我们使用CPU-Z进行查看，无法识别出具体的型号：</p><p><img src="https://resource.tinychen.com/blog/20191223/x0fe21vKwNP4.png"></p><p>顺便进行跑分测试：</p><p><img src="https://resource.tinychen.com/blog/20191223/GkPDQc5Yf5PM.png"></p><p>GPU-Z这边倒是没有什么大问题，满血版的580超白金，后期折腾黑苹果的时候可以直接免驱使用。</p><p><img src="https://resource.tinychen.com/blog/20191223/tJX2uAdxSBev.gif"></p><h2 id="4-2-HWinfo"><a href="#4-2-HWinfo" class="headerlink" title="4.2 HWinfo"></a>4.2 HWinfo</h2><p>接着我们打开HWinfo，这个软件倒是可以识别出CPU的准确信息：</p><p>同时还可以看到三块固态都工作正常：</p><p><img src="https://resource.tinychen.com/blog/20191223/qPgPtW9Q4ohQ.png"></p><p><img src="https://resource.tinychen.com/blog/20191223/lmXjkv11NvDE.png"></p><p>这里可以正确识别出CPU的睿频信息，以及AVX指令集下的最大睿频频率。</p><h2 id="4-3-AIDA64"><a href="#4-3-AIDA64" class="headerlink" title="4.3 AIDA64"></a>4.3 AIDA64</h2><p>接着我们使用AIDA64对内存性能和散热进行测试。</p><p>这里我们可以看到在四通道内存的状态下，内存的读写性能相比普通的双通道内存有了很大的提升，同时这时的内存在BIOS中简单的设置后便是工作在2933MHz C16的频率下，相对来说算是中规中矩。</p><p><img src="https://resource.tinychen.com/blog/20191223/4Crf14JgSbWs.png"></p><p>接下来我们在封闭机箱内进行烤机测试，看一下整机的负载情况和散热效果：</p><p>这里我们使用AIDA64的稳定性测试，烤机10分钟后整机功耗稳定在420W左右，正好在电源850W的一半左右，也就是理论转换率最高的占用率。</p><p><img src="https://resource.tinychen.com/blog/20191223/ug2uQ9dUu6b6.png"></p><p>再来看这时候整套平台的温度情况，在室温20度左右的情况下，CPU稳定在70度附近，显卡则是稳定在75度附近，整体散热情况还算是不错。</p><p><img src="https://resource.tinychen.com/blog/20191223/f3WVHE7muHDn.png"></p><h2 id="4-4-R20"><a href="#4-4-R20" class="headerlink" title="4.4 R20"></a>4.4 R20</h2><p>在卖家提供的R20截图中，跑到了8600+的高分，而在我的实际跑分测试中，只有7800左右，具体的原因还不太情况，可能是主板的原因或者是微码版本也或者是其他的因素，不管怎么说，将近10%的差距还是有些令人困惑的，同样的情况也出现在了CPU-Z的跑分上，虽然多核跑分相近，但是单核跑分成绩的440和卖家的520相比也是低了10%还不止。</p><p><img src="https://resource.tinychen.com/blog/20191223/idNhaMh9Jwvb.png"></p><h2 id="4-5-无线"><a href="#4-5-无线" class="headerlink" title="4.5 无线"></a>4.5 无线</h2><p>博通BCM943602CS这块网卡好处是在黑苹果下可以实现免驱，考虑到黑苹果对无线模块的硬件兼容性之差，这就显得格外重要，同样博通的无线网卡在RedHat和Debian系的Linux系统上都有较为友好成熟的闭源驱动支持，对Linux内核的版本要求不高。不过这块网卡在windows下的驱动并不完善，2.4G无线的速率只有216M，无法发挥标称的450M速率，不过好在5G频段能够实现1.3G的无线速率，这比几乎不怎么用到的2.4G来的更加实际一些。而驱动更为完善的94360CD则是要贵上一些，具体选择哪个就见仁见智了。</p><p><img src="https://resource.tinychen.com/blog/20191223/5JLUlYOb7rA6.png"></p><p><img src="https://resource.tinychen.com/blog/20191223/fyFrHxKovRrP.png"></p><p>接着我们使用Windows在局域网内通过华硕AC68U(1900P)进行速度测试，2.4G的表现情况十分差劲，不仅速度很慢，只能在10MB/s左右徘徊，而且这时候的蓝牙和2.4G鼠标都受到了严重的干扰，而在5G频段下则好很多，基本在90MB/s左右徘徊，偶尔能到100MB/s左右，相比2T2R的Intel AX200要好上很多（使用WiFi5的华硕AC68U路由器只有50~60MB/s的速度），当然943602CS的价格也是比AX200要贵上很多。</p><p>不过这里的无线主要还是在没有有线网络的场景下的补充，以及为台式机扩展蓝牙功能用来连接各种蓝牙键鼠耳机等设备，真正需要大量的文件数据传输工作还是需要使用稳定的有线千兆网络或者是万兆网络。</p><h2 id="4-6-鲁大师"><a href="#4-6-鲁大师" class="headerlink" title="4.6 鲁大师"></a>4.6 鲁大师</h2><p>最后当然少不了鲁大师了，这里顺便吐槽一下升级了新版的windows1909和AMD的2020年新款鸡血驱动之后，显卡的跑分反而更低了一些，也不知道是系统的问题还是驱动的问题，希望能尽快地优化好吧。</p><p><img src="https://resource.tinychen.com/blog/20191223/AuNAQry2vEQD.jpg"></p><h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1><p><img src="https://resource.tinychen.com/blog/20191223/pKCJ1WOj99KY.jpg"></p><p>总的来说，这次的这套主机还是相当让我满意的，除了满足了我的毕业性能需求（大概同时中度运行9~12台虚拟机）以及日常的数据存储需求，还可以兼任一定的中度游戏需求和视频剪辑需求（如果后期有的话），后期如果还有升级的话应该就是加钱买更多的NVME固态，毕竟还有两个槽位空着，以及机械硬盘增加到一定数量之后再增加万兆NAS和万兆网卡了。</p><p>当然最后还是希望AMD和INTEL的竞争能更加激烈一些，这样消费者们才能受益更多，我也才能捡到更多更好的二手洋垃圾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从9月份开始计划搭建一台高性能的HEDT主机来进行毕设相关工作，前后折腾了两个多月总算是基本搞定，这里写一篇文章记录一下整个硬件选型的思路、过程以及测试，同时此文也作为毕业设计的硬件平台选型搭建部分。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>win10开启卓越电源性能计划</title>
    <link href="https://tinychen.com/20191203-win10-extreperf-mode/"/>
    <id>https://tinychen.com/20191203-win10-extreperf-mode/</id>
    <published>2019-12-03T07:00:00.000Z</published>
    <updated>2019-12-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Win10中通过命令行开启卓越电源性能计划。</p><span id="more"></span><p>右键任务栏的开始菜单徽标，点击Windows Powershell(管理员)，在里面输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61<br></code></pre></div></td></tr></table></figure><p>然后回车。</p><p><img src="https://resource.tinychen.com/blog/20191223/PhMbh0TioQ1F.png"></p><p>接着在电源计划中选中卓越性能。</p><blockquote><p>电源计划可以在<strong>设置</strong>中直接<strong>搜索电源</strong>或者使用<strong>小娜搜索电源</strong>，笔记本也可以直接右键任务栏的电源图标来点击<strong>电源选项</strong>进入到对应设置界面。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20191223/U0etuL4FifGg.png"></p><p>实际体验上，卓越性能和高性能对于我的台式机来说基本感觉不到差异，可能是对于笔记本等设备来说用途会更大一些吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Win10中通过命令行开启卓越电源性能计划。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>搭建LNMP环境并配置wordpress网站</title>
    <link href="https://tinychen.com/20191123-lnmp-install-wordpress/"/>
    <id>https://tinychen.com/20191123-lnmp-install-wordpress/</id>
    <published>2019-11-23T07:00:00.000Z</published>
    <updated>2019-11-23T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS7中搭建nginx+MySQL8+PHP7的LNMP环境，并且安装wordpress来作为网站服务器。</p><span id="more"></span><p>linux的安装非常的简单，一般的云主机厂商都可以直接部署安装，安装方法我们这里就不再赘述了。本文使用的是CentOS7.7版本。</p><blockquote><p>这里是wordpress的官网对于安装环境的要求：</p><p>We recommend servers running version 7.3 or greater of <a href="https://secure.php.net/">PHP</a> and <a href="https://www.mysql.com/">MySQL</a> version 5.6 <em>OR</em> <a href="https://mariadb.org/">MariaDB</a> version 10.0 or greater.<br>We also recommend either <a href="https://httpd.apache.org/">Apache</a> or <a href="https://nginx.org/">Nginx</a> as the most robust options for running WordPress, but neither is required.</p></blockquote><h1 id="1、安装nginx"><a href="#1、安装nginx" class="headerlink" title="1、安装nginx"></a>1、安装nginx</h1><p>nginx这里为了使用较新的版本，我们使用nginx官网提供的yum源来进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个yum repo文件</span><br>cat &gt;&gt; /etc/yum.repo.d/nginx.repo &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[nginx] </span><br><span class="hljs-string">name=nginx repo </span><br><span class="hljs-string">baseurl=http://nginx.org/packages/mainline/centos/7/x86_64/</span><br><span class="hljs-string">gpgcheck=0 </span><br><span class="hljs-string">enabled=1 </span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 使用yum安装nginx</span><br>yum clean all<br>yum repolist<br>yum install nginx -y<br><br><br><span class="hljs-comment"># 启动nginx并设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> nginx.service<br>systemctl start nginx.service<br></code></pre></div></td></tr></table></figure><h1 id="2、安装PHP7-3"><a href="#2、安装PHP7-3" class="headerlink" title="2、安装PHP7.3"></a>2、安装PHP7.3</h1><p>centos系统源中自带的php版本较旧，这里我们需要使用epel源和<a href="https://rpms.remirepo.net/">remi源</a>来安装新版本的php。截止写这篇文章的时候php官网的稳定版本是7.3,7.4版本虽然已经发布但是好像还没有到稳定版。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum来安装epel源</span><br>yum install epel-release<br><span class="hljs-comment"># 这里使用清华镜像源的remi源</span><br>rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/remi/enterprise/remi-release-7.rpm<br><span class="hljs-comment"># 启用remi源中的php73</span><br>yum install yum-utils<br>yum-config-manager --<span class="hljs-built_in">enable</span> remi-php73<br>yum install php73 php-fpm php-opcache php-cli php-gd php-curl php-mysql php-intl php-mbstring php-soap php-xml php-xmlrpc php-zip<br></code></pre></div></td></tr></table></figure><p>安装完成之后我们查看一下php的版本，然后建立软链接把php指向php73。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看php73的版本信息</span><br>[root@aliyun ~]<span class="hljs-comment"># php73 -v</span><br>PHP 7.3.12 (cli) (built: Nov 19 2019 10:24:51) ( NTS )<br>Copyright (c) 1997-2018 The PHP Group<br>Zend Engine v3.3.12, Copyright (c) 1998-2018 Zend Technologies<br><br><span class="hljs-comment"># 确定php73的执行文件位置</span><br>[root@aliyun ~]<span class="hljs-comment"># which php73</span><br>/usr/bin/php73<br><br><span class="hljs-comment"># 建立软链接将php指向php73</span><br>[root@aliyun ~]<span class="hljs-comment"># ln -s /usr/bin/php73 /usr/bin/php</span><br><span class="hljs-comment"># 查看php指令对应的版本信息</span><br>[root@aliyun ~]<span class="hljs-comment"># php -v</span><br>PHP 7.3.12 (cli) (built: Nov 19 2019 10:24:51) ( NTS )<br>Copyright (c) 1997-2018 The PHP Group<br>Zend Engine v3.3.12, Copyright (c) 1998-2018 Zend Technologies<br></code></pre></div></td></tr></table></figure><h1 id="3、安装MYSQL8"><a href="#3、安装MYSQL8" class="headerlink" title="3、安装MYSQL8"></a>3、安装MYSQL8</h1><p>wordpress官网要求的数据库可以是MySQL或者是MariaDB，这里我们使用MySQL8。</p><p>详细的安装教程之前已经写过博客了，需要的同学可以查看这篇文章：</p><p><a href="https://tinychen.com/20190310-centos-install-mysql/">CentOS7安装MySQL</a></p><p><a href="https://tinychen.com/20191122-mysql8-reset-passwd/">MySQL8重置root密码</a></p><p>接下来就是在mysql中创建一个数据库和用户用来给wordpress使用。</p><p>首先我们使用root用户登录mysql，然后执行下面的命令来创建一个名为wordpress的数据库和一个wordpress的用户：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">CREATE DATABASE wordpress;<br>CREATE USER <span class="hljs-string">&#x27;wordpress&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;一个复杂的密码&#x27;</span>;<br>GRANT ALL PRIVILEGES ON wordpress.* TO wordpress;<br></code></pre></div></td></tr></table></figure><blockquote><p>这里的grant语句的授权方式和之前的mysql版本有些不太一样，还需要注意一下。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql&gt; create database wordpress;<br>Query OK, 1 row affected (0.01 sec)<br>mysql&gt; CREATE USER &#x27;wordpress&#x27; IDENTIFIED BY &#x27;一个复杂的密码&#x27;;<br>Query OK, 0 rows affected (0.01 sec)<br>mysql&gt; GRANT ALL PRIVILEGES ON wordpress.* TO wordpress;<br>Query OK, 0 rows affected (0.00 sec)<br><br>[root@aliyun ~]# mysql -u wordpress -p<br>Enter password: <br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 10<br>Server version: 8.0.18 MySQL Community Server - GPL<br><br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| wordpress          |<br>+--------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; <br></code></pre></div></td></tr></table></figure><h1 id="4、安装wordpress"><a href="#4、安装wordpress" class="headerlink" title="4、安装wordpress"></a>4、安装wordpress</h1><p>接下来的wordpress的配置就比较简单了，我们先去<a href="https://wordpress.org/download/">官网</a>下载最新版本的wordpress，解压之后配置一下配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用wget指令下载并使用tar -zxvf参数进行解压</span><br>wget https://wordpress.org/latest.tar.gz<br>tar -zxvf wordpress-5.3-zh_CN.tar.gz<br></code></pre></div></td></tr></table></figure><p>接下来我们需要对配置文件进行编辑，按照官网所述，我们最好将<code>wp-config-sample.php</code>复制成<code>wp-config.php</code>然后再进行编辑，不复制直接编辑<code>wp-config-sample.php</code>也是可以自动生成新的<code>wp-config.php</code>，但是出于备份一份源配置文件模板的考虑，最好还是复制一下。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> <span class="hljs-keyword">wp</span>-config-sample.php <span class="hljs-keyword">wp</span>-config.php <br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">wp</span>-config.php <br></code></pre></div></td></tr></table></figure><p>这里我们填入前面创建的数据库用户名和密码以及对应的数据库。</p><p><img src="https://resource.tinychen.com//20191123021459.png"></p><p>接下来这一步就是根据主机生成独一无二的密钥。这里我们使用<code>curl</code>命令来访问这个链接生成密钥并保持到<code>key.txt</code>文件中，然后把<code>key.txt</code>的文件里面的内容复制替换掉里面的<code>define</code>部分。</p><p><img src="https://resource.tinychen.com//20191126102630.png"></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>api.wordpress.org<span class="hljs-regexp">/secret-key/</span><span class="hljs-number">1.1</span><span class="hljs-regexp">/salt/</span> &gt; key.txt<br></code></pre></div></td></tr></table></figure><p>然后我们将整个解压出来的wordpress文件夹移动到我们的web服务器的目录下面，这里我使用的目录是<code>/etc/nginx/wordpress</code>，这里在后面的nginx配置文件中会用到。接下来我们对nginx进行配置。</p><p>下面的是我的nginx配置文件，文件位于<code>/etc/nginx/nginx.conf</code>，注意里面的目录和域名要换成自己对应的目录和域名，以及这里还额外配置了https证书加密认证和http强制跳转https，具体的操作和解释已经在这篇博客<a href="https://tiny777.github.io/190829httpd2Nginx/">（个人博客web服务器换用nginx）</a>里面有解释，有需要的同学可以看看。</p><p><img src="https://resource.tinychen.com//20191123035102.png"></p><p>我们使用root用户登录mysql，然后更新wordpress用户的加密方式为<code>mysql_native_password</code>，然后刷新配置即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">// 更改用户密码的加密形式<br>ALTER USER &#x27;wordpress&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;你的用户密码&#x27;;<br>// 刷新MySQL的系统权限相关表<br>FLUSH PRIVILEGES;<br></code></pre></div></td></tr></table></figure><p>再次登录就会发现已经可以连接数据库并正常设置了，简单配置过后就可以开始正常运行了。</p><p><img src="https://resource.tinychen.com//20191123035332.png"></p><p>设置过后就可以登录后台进行管理，登录的链接就是域名后面加上<code>/wp-admin/</code></p><p><img src="https://resource.tinychen.com//20191123035607.png"></p><p>使用默认主题的首页。</p><p><img src="https://resource.tinychen.com//20191123035731.png"></p><p>这就是wordpress的LNMP版本安装配置过程，整体还是相对简单，没有太大的难度，相对于hexo而言，wordpress的安装显得复杂很多，整体也可能被人诟病十分臃肿，但是两者各有各的好，wordpress的插件和主题丰富程度确实要比hexo强很多，但是不管是用哪个，坚持写作才是最重要的！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS7中搭建nginx+MySQL8+PHP7的LNMP环境，并且安装wordpress来作为网站服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>MySQL8重置root密码</title>
    <link href="https://tinychen.com/20191122-mysql8-reset-passwd/"/>
    <id>https://tinychen.com/20191122-mysql8-reset-passwd/</id>
    <published>2019-11-22T07:00:00.000Z</published>
    <updated>2019-11-22T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS7中MySQL8.0初始root密码的设置和忘记root密码的重置方法。</p><span id="more"></span><h1 id="1、初次登录"><a href="#1、初次登录" class="headerlink" title="1、初次登录"></a>1、初次登录</h1><p>如果是刚装好MySQL的话，它会默认生成一个随机密码在log文件中，我们使用该密码登录然后重置密码即可。</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">[root@aliyun ~]# sudo grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /var/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span><br><span class="hljs-number">2019</span><span class="hljs-number">-11</span><span class="hljs-number">-22</span>T16:<span class="hljs-number">40</span>:<span class="hljs-number">10.133730</span>Z <span class="hljs-number">5</span> [Note] [MY<span class="hljs-number">-010454</span>] [Server] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: &gt;KG6Ybt3%lgo<br>[root@aliyun ~]# mysql -u root -p<br>Enter password: <br></code></pre></div></td></tr></table></figure><p>重置密码可以使用这条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的新密码&#x27;;<br></code></pre></div></td></tr></table></figure><p>注意这里的<code>&#39;localhost&#39;</code>也有可能是别的参数，具体可以通过下面这条命令来进行查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select user, host, authentication_string, plugin from mysql.user;<br></code></pre></div></td></tr></table></figure><h1 id="2、遗忘root密码"><a href="#2、遗忘root密码" class="headerlink" title="2、遗忘root密码"></a>2、遗忘root密码</h1><p>如果是忘记了root密码，就比较麻烦了。首先我们停止<code>mysqld</code>服务。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl stop mysqld.service <br>systemctl status mysqld.service <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123012906.png"></p><p>接着我们编辑<code>/etc/my.conf</code>让其跳过登录密码检查。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> skip-grant-tables &gt;&gt; /etc/my.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123012513.png"></p><p>接着我们重启<code>mysqld</code>服务并登录，此时不需要使用密码。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl restart mysqld.service <br>systemctl status mysqld.service <br>mysql -u root<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123013022.png"></p><p>这里我们可以看到用户的账户信息都是存储在<code>mysql</code>这个数据库中的<code>user</code>表里面的。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases;<br>use mysql;<br>show tables;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123013306.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from user\G;<br>-- \G参数表示纵向输出格式<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123013507.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select host, user, authentication_string, plugin from user;<br>-- host: 允许用户登录的ip‘位置’%表示可以远程；<br>-- user:当前数据库的用户名；<br>-- authentication_string: 用户密码；在mysql 5.7.9以后废弃了password字段和password()函数；<br>-- plugin： 密码加密方式；<br>update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;;<br>select host, user, authentication_string, plugin from user;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com//20191123013849.png"></p><p>然后我们继续编辑<code>/etc/my.conf</code>删除掉刚刚添加的那一行<code>skip-grant-tables</code>，然后重启mysql。</p><p>然后我们登录进去，这时候还是不需要输入密码的。我们通过这条命令来进行设置新密码的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的新密码&#x27;;<br></code></pre></div></td></tr></table></figure><blockquote><p>这里要注意新密码要尽可能复杂。包含大小写字母数字和符号最好，否则可能会提示不符合要求。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">[root@aliyun ~]# systemctl restart mysqld.service <br>[root@aliyun ~]# mysql -u root -p<br>Enter password: <br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 8<br>Server version: 8.0.18<br><br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt; use mysql<br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<br>mysql&gt; show tables;<br>ERROR 1046 (3D000): No database selected<br>mysql&gt; ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;centos7&#x27;;<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br>mysql&gt; ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MySQLNB8@2333&#x27;;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; <br><br></code></pre></div></td></tr></table></figure><p>到这里再退出重新登录就可以看到我们设置的新密码已经生效了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS7中MySQL8.0初始root密码的设置和忘记root密码的重置方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu18.04中安装升级pip3并使用socks代理</title>
    <link href="https://tinychen.com/20191121-ubuntu-install-pip3/"/>
    <id>https://tinychen.com/20191121-ubuntu-install-pip3/</id>
    <published>2019-11-21T07:00:00.000Z</published>
    <updated>2019-11-21T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu18.04中自带了python3但是缺少了pip3，这里我们使用apt来进行安装，然后使用pip3自己对自己升级，再安装对应的socks依赖包，这样在系统使用了socks代理的时候能够使用代理下载各种包，有效提高速度。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用apt安装pip3</span><br><span class="hljs-comment"># 需要注意的是python3-pip和python-pip是不一样的，前者是python3而后者是python2</span><br>sudo apt-get install python3-pip<br><br><span class="hljs-comment"># 使用apt安装的版本很旧，大概是9.0+，我们将它升级到最新</span><br>sudo pip3 install --upgrade pip<br><br><span class="hljs-comment"># 这里顺便附上卸载pip3的命令</span><br>sudo apt-get remove python3-pip<br><br><span class="hljs-comment"># 安装socks所需要的依赖</span><br>sudo apt install qt5-qmake qtbase5-dev libqrencode-dev libappindicator-dev libzbar-dev libbotan1.10-dev<br>sudo pip3 install pysocks<br></code></pre></div></td></tr></table></figure><p>最后我们随便安装一个包来确定一下下载安装的速度</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tinychen@Tiny-Studio:~$ sudo pip3 install numpy<br>WARNING: The directory <span class="hljs-string">&#x27;/home/tinychen/.cache/pip/http&#x27;</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo<span class="hljs-string">&#x27;s -H flag.</span><br><span class="hljs-string">WARNING: The directory &#x27;</span>/home/tinychen/.cache/pip<span class="hljs-string">&#x27; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#x27;</span>s -H flag.<br>Collecting numpy<br>  Downloading https://files.pythonhosted.org/packages/d2/ab/43e678759326f728de861edbef34b8e2ad1b1490505f20e0d1f0716c3bf4/numpy-1.17.4-cp36-cp36m-manylinux1_x86_64.whl (20.0MB)<br>     |████████████████████████████████| 20.0MB 4.1MB/s <br>Installing collected packages: numpy<br>Successfully installed numpy-1.17.4<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ubuntu18.04中自带了python3但是缺少了pip3，这里我们使用apt来进行安装，然后使用pip3自己对自己升级，再安装对应的socks依赖包，这样在系统使用了socks代理的时候能够使用代理下载各种包，有效提高速度。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="python" scheme="https://tinychen.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中使用xrandr调整分辨率</title>
    <link href="https://tinychen.com/20191105-linux-use-xrandr/"/>
    <id>https://tinychen.com/20191105-linux-use-xrandr/</id>
    <published>2019-11-05T07:00:00.000Z</published>
    <updated>2019-11-05T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS8和Ubuntu18上使用<code>xrandr</code>调整显示器分辨率并设置重启后不失效。</p><span id="more"></span><p>最近在用主板自带的板载集显外接显示器的时候，最大应该是可以输出1080P的分辨率，但是由于各种原因好像不能自动识别出来，只能自己使用<code>xrandr</code>手动新建分辨率。</p><p>在<code>CentOS8</code>和<code>Ubuntu18.04.3</code>上面都实操过没有问题，步骤也都基本相同，只有最后一步的文件路径不太一样。（个人猜测CentOS7上面应该和CentOS8通用）</p><h1 id="1、CentOS8操作记录"><a href="#1、CentOS8操作记录" class="headerlink" title="1、CentOS8操作记录"></a>1、<code>CentOS8</code>操作记录</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 以下是CentOS8中的实际操作记录</span><br><br><span class="hljs-comment"># 使用xrandr查看目前支持的分辨率，这里我们可以看到只有三个，且和显示器的最佳分辨率都对不上</span><br>[tinychen@tiny-studio ~]$ xrandr<br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br><br><br><span class="hljs-comment"># 使用cvt命令生成对应分辨率的数据，后面的三个参数分别是横向分辨率和纵向分辨率以及刷新率</span><br><span class="hljs-comment"># 这里我们使用最常见的1080p 60帧</span><br><span class="hljs-comment"># 注意这里生成的Modeline这一行参数我们后面要用到，需要提前保存一下</span><br>[tinychen@tiny-studio ~]$ cvt 1920 1080 60<br><span class="hljs-comment"># 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz</span><br>Modeline <span class="hljs-string">&quot;1920x1080_60.00&quot;</span>  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync<br><br><span class="hljs-comment"># 在xrandr中添加新的分辨率选项，参数直接照搬上面的即可</span><br>[tinychen@tiny-studio ~]$ xrandr --newmode <span class="hljs-string">&quot;1920x1080_60.00&quot;</span>  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync<br><br><span class="hljs-comment"># 再次查看分辨率，可以看到新增加的已经在列表中了</span><br><span class="hljs-comment"># 额外需要注意的是下面的VGA-1选项，后面要用到，这里是用来定位显示器的（如果有多个显示器的话）</span><br>[tinychen@tiny-studio ~]$ xrandr <br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br>  1920x1080_60.00 (0x3ad) 173.000MHz -HSync +VSync<br>        h: width  1920 start 2048 end 2248 total 2576 skew    0 clock  67.16KHz<br>        v: height 1080 start 1083 end 1088 total 1120           clock  59.96Hz<br><br><span class="hljs-comment"># 将刚刚生成的分辨率选项添加到VGA-1这个显示器中</span><br>[tinychen@tiny-studio ~]$ xrandr --addmode VGA-1 <span class="hljs-string">&quot;1920x1080_60.00&quot;</span><br><span class="hljs-comment"># 再次查看可以发现已经是正常的了</span><br>[tinychen@tiny-studio ~]$ xrandr<br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br>   1920x1080_60.00  59.96  <br><br><span class="hljs-comment"># 手动调整分辨率为1080P，这时候应该就可以感觉到分辨率的变化了</span><br>[tinychen@tiny-studio ~]$ xrandr -s 1920x1080_60.00<br>[tinychen@tiny-studio ~]$ <br><br><br><span class="hljs-comment"># 为了保证重启后分辨率依旧生效，我们新建一个配置文件</span><br><span class="hljs-comment"># 需要注意的是文件中的Modeline这一行就是前面我们生成的参数，如果没保存的话再重新输一遍前面的cvt命令即可</span><br>[root@tiny-studio xorg.conf.d]<span class="hljs-comment"># vim /etc/X11/xorg.conf.d/monitor.conf</span><br>[root@tiny-studio xorg.conf.d]<span class="hljs-comment"># cat /etc/X11/xorg.conf.d/monitor.conf</span><br>Section <span class="hljs-string">&quot;Monitor&quot;</span><br>Identifier <span class="hljs-string">&quot;Configured Monitor&quot;</span><br>Modeline <span class="hljs-string">&quot;1920x1080_60.00&quot;</span>  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync<br>Option <span class="hljs-string">&quot;PreferredMode&quot;</span> <span class="hljs-string">&quot;1920x1080_60.00&quot;</span><br>EndSection<br>Section <span class="hljs-string">&quot;Screen&quot;</span><br>Identifier <span class="hljs-string">&quot;Default Screen&quot;</span><br>Monitor <span class="hljs-string">&quot;Configured Monitor&quot;</span><br>Device <span class="hljs-string">&quot;Configured Video Device&quot;</span><br>EndSection<br>Section <span class="hljs-string">&quot;Device&quot;</span><br>Identifier <span class="hljs-string">&quot;Configured Video Device&quot;</span><br>EndSection<br></code></pre></div></td></tr></table></figure><h1 id="2、Ubuntu18-04-3操作记录"><a href="#2、Ubuntu18-04-3操作记录" class="headerlink" title="2、Ubuntu18.04.3操作记录"></a>2、<code>Ubuntu18.04.3</code>操作记录</h1><p><code>Ubuntu</code>上面操作和<code>CentOS8</code>基本一样，除了最后的配置文件从<code>/etc/X11/xorg.conf.d/monitor.conf</code>变成了<code>/etc/X11/xorg.conf.d/monitor.conf</code>，其他的基本一样，这里就不再赘述。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 以下为ubuntu18.04.3上的操作记录</span><br><br>root@Tiny-Studio:~<span class="hljs-comment"># </span><br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr</span><br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br>root@Tiny-Studio:~<span class="hljs-comment"># cvt 1920 1080 60</span><br><span class="hljs-comment"># 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz</span><br>Modeline <span class="hljs-string">&quot;1920x1080_60.00&quot;</span>  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync<br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr --newmode &quot;1920x1080_60.00&quot; 173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</span><br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr</span><br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br>  1920x1080_60.00 (0x306) 173.000MHz -HSync +VSync<br>        h: width  1920 start 2048 end 2248 total 2576 skew    0 clock  67.16KHz<br>        v: height 1080 start 1083 end 1088 total 1120           clock  59.96Hz<br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr --addmode VGA-1 &quot;1920x1080_60.00&quot;</span><br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr</span><br>Screen 0: minimum 320 x 200, current 1024 x 768, maximum 1920 x 2048<br>VGA-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00* <br>   800x600       60.32    56.25  <br>   640x480       59.94  <br>   1920x1080_60.00  59.96  <br>root@Tiny-Studio:~<span class="hljs-comment"># xrandr -s 1920x1080_60.00</span><br><br>root@Tiny-Studio:~<span class="hljs-comment"># vim /etc/X11/xorg.conf</span><br>root@Tiny-Studio:~<span class="hljs-comment"># cat /etc/X11/xorg.conf </span><br>Section <span class="hljs-string">&quot;Monitor&quot;</span><br>Identifier <span class="hljs-string">&quot;Configured Monitor&quot;</span><br>Modeline <span class="hljs-string">&quot;1920x1080_60.00&quot;</span>  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync<br>Option <span class="hljs-string">&quot;PreferredMode&quot;</span> <span class="hljs-string">&quot;1920x1080_60.00&quot;</span><br>EndSection<br>Section <span class="hljs-string">&quot;Screen&quot;</span><br>Identifier <span class="hljs-string">&quot;Default Screen&quot;</span><br>Monitor <span class="hljs-string">&quot;Configured Monitor&quot;</span><br>Device <span class="hljs-string">&quot;Configured Video Device&quot;</span><br>EndSection<br>Section <span class="hljs-string">&quot;Device&quot;</span><br>Identifier <span class="hljs-string">&quot;Configured Video Device&quot;</span><br>EndSection<br>root@Tiny-Studio:~<span class="hljs-comment"># </span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS8和Ubuntu18上使用&lt;code&gt;xrandr&lt;/code&gt;调整显示器分辨率并设置重启后不失效。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS8中安装xrdp远程桌面</title>
    <link href="https://tinychen.com/20191029-centos8-install-xrdp/"/>
    <id>https://tinychen.com/20191029-centos8-install-xrdp/</id>
    <published>2019-10-29T07:00:00.000Z</published>
    <updated>2019-10-29T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS8上安装<code>xrdp</code>和<code>vnc</code>并在windows中使用<code>mstsc</code>进行远程控制。</p><span id="more"></span><p>这里我们使用的是<code>epel</code>源来进行安装，需要注意的是要在防火墙中放行端口，<code>xrdp</code>使用的是和<code>windows</code>自带的<code>mstsc</code>远程一样的默认<code>3389</code>端口，如果使用<code>vnc</code>进行远程，则还需要额外添加<code>5900</code>到<code>5905</code>端口。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 安装epel源并安装xrdp和vnc</span><br>yum install epel-release -y<br>yum install xrdp -y<br>yum install tigervnc-server -y<br><br><span class="hljs-comment"># 启动xrdp并设置开机启动</span><br>systemctl start xrdp.service<br>systemctl enable xrdp.service<br><br><span class="hljs-comment"># 在防火墙中放行vnc和xrdp</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-service=vnc-server</span> <br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=3389/tcp</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=3389/udp</span><br>firewall-cmd <span class="hljs-params">--reload</span><br>firewall-cmd <span class="hljs-params">--list-all</span><br></code></pre></div></td></tr></table></figure><p>以下是安装实录。</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">[root@tiny-studio ~]# yum install xrdp<br>上次元数据过期检查：0:00:04 前，执行于 Thu 31 Oct 2019 04:15:46 AM CST。<br><br><span class="hljs-section">依赖关系解决。</span><br><span class="hljs-section">================================================================================================================</span><br><br><span class="hljs-section"> 软件包                       架构                   版本                            仓库                  大小</span><br><span class="hljs-section">================================================================================================================</span><br><br>Installing:<br><span class="hljs-code"> xrdp                         x86_64                 1:0.9.11-5.el8                  epel                 441 k</span><br>安装弱的依赖:<br><span class="hljs-code"> xrdp-selinux                 x86_64                 1:0.9.11-5.el8                  epel                  21 k</span><br><br><span class="hljs-section">事务概要</span><br><span class="hljs-section">================================================================================================================</span><br><br>安装  2 软件包<br><br>总下载：461 k<br>安装大小：2.2 M<br>确定吗？[y/N]： y<br>下载软件包：<br>(1/2): xrdp-selinux-0.9.11-5.el8.x86_64.rpm                                      13 kB/s |  21 kB     00:01    <br><br><span class="hljs-section">(2/2): xrdp-0.9.11-5.el8.x86_64.rpm                                             205 kB/s | 441 kB     00:02    </span><br><span class="hljs-section">----------------------------------------------------------------------------------------------------------------</span><br><br>总计                                                                             62 kB/s | 461 kB     00:07     <br>运行事务检查<br>事务检查成功。<br>运行事务测试<br>事务测试成功。<br>运行事务<br><span class="hljs-code">  准备中      :                                                                                             1/1 </span><br><span class="hljs-code">  Installing  : xrdp-selinux-1:0.9.11-5.el8.x86_64                                                          1/2 </span><br><span class="hljs-code">  运行脚本    : xrdp-selinux-1:0.9.11-5.el8.x86_64                                                          1/2 </span><br><span class="hljs-code">  Installing  : xrdp-1:0.9.11-5.el8.x86_64                                                                  2/2 </span><br><span class="hljs-code">  运行脚本    : xrdp-1:0.9.11-5.el8.x86_64                                                                  2/2 </span><br><span class="hljs-code">  验证        : xrdp-1:0.9.11-5.el8.x86_64                                                                  1/2 </span><br><span class="hljs-code">  验证        : xrdp-selinux-1:0.9.11-5.el8.x86_64                                                          2/2 </span><br><br>已安装:<br><span class="hljs-code">  xrdp-1:0.9.11-5.el8.x86_64                         xrdp-selinux-1:0.9.11-5.el8.x86_64                        </span><br><br>完毕！<br><br><br><br>[root@tiny-studio ~]# yum install tigervnc-server<br>上次元数据过期检查：0:01:41 前，执行于 Thu 31 Oct 2019 04:15:46 AM CST。<br><br><span class="hljs-section">依赖关系解决。</span><br><span class="hljs-section">================================================================================================================</span><br><br><span class="hljs-section"> 软件包                         架构                  版本                       仓库                      大小</span><br><span class="hljs-section">================================================================================================================</span><br><br>Installing:<br><span class="hljs-code"> tigervnc-server                x86_64                1.9.0-9.el8                AppStream                252 k</span><br><br><span class="hljs-section">事务概要</span><br><span class="hljs-section">================================================================================================================</span><br><br>安装  1 软件包<br><br>总下载：252 k<br>安装大小：688 k<br>确定吗？[y/N]： y<br>下载软件包：<br><br><span class="hljs-section">tigervnc-server-1.9.0-9.el8.x86_64.rpm                                          186 kB/s | 252 kB     00:01    </span><br><span class="hljs-section">----------------------------------------------------------------------------------------------------------------</span><br><br>总计                                                                            186 kB/s | 252 kB     00:01     <br>运行事务检查<br>事务检查成功。<br>运行事务测试<br>事务测试成功。<br>运行事务<br><span class="hljs-code">  准备中      :                                                                                             1/1 </span><br><span class="hljs-code">  Installing  : tigervnc-server-1.9.0-9.el8.x86_64                                                          1/1 </span><br><span class="hljs-code">  运行脚本    : tigervnc-server-1.9.0-9.el8.x86_64                                                          1/1 </span><br><span class="hljs-code">  验证        : tigervnc-server-1.9.0-9.el8.x86_64                                                          1/1 </span><br><br>已安装:<br><span class="hljs-code">  tigervnc-server-1.9.0-9.el8.x86_64                                                                            </span><br><br>完毕！<br></code></pre></div></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-attr">[root@tiny-studio ~]</span># <span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">start</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span> <br><span class="hljs-selector-attr">[root@tiny-studio ~]</span># <span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">enable</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span> <br><span class="hljs-selector-tag">Created</span> <span class="hljs-selector-tag">symlink</span> /<span class="hljs-selector-tag">etc</span>/<span class="hljs-selector-tag">systemd</span>/<span class="hljs-selector-tag">system</span>/<span class="hljs-selector-tag">multi-user</span><span class="hljs-selector-class">.target</span><span class="hljs-selector-class">.wants</span>/<span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span> → /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib</span>/<span class="hljs-selector-tag">systemd</span>/<span class="hljs-selector-tag">system</span>/<span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span>.<br><span class="hljs-selector-attr">[root@tiny-studio ~]</span># <span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">status</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span> <br>● <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">xrdp</span> <span class="hljs-selector-tag">daemon</span><br>   <span class="hljs-selector-tag">Loaded</span>: <span class="hljs-selector-tag">loaded</span> (/usr/lib/systemd/system/xrdp.service; enabled; vendor <span class="hljs-attribute">preset</span>: disabled)<br>   <span class="hljs-selector-tag">Active</span>: <span class="hljs-selector-tag">active</span> (running)<br> <span class="hljs-selector-tag">since</span> <span class="hljs-selector-tag">Thu</span> <span class="hljs-selector-tag">2019-10-31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">CST</span>; <span class="hljs-selector-tag">22s</span> <span class="hljs-selector-tag">ago</span><br>     <span class="hljs-selector-tag">Docs</span>: <span class="hljs-selector-tag">man</span>:<span class="hljs-selector-tag">xrdp</span>(<span class="hljs-number">8</span>)<br>           <span class="hljs-selector-tag">man</span>:<span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.ini</span>(<span class="hljs-number">5</span>)<br> <span class="hljs-selector-tag">Main</span> <span class="hljs-selector-tag">PID</span>: <span class="hljs-selector-tag">23889</span> (xrdp)<br>    <span class="hljs-selector-tag">Tasks</span>: <span class="hljs-selector-tag">1</span> (<span class="hljs-attribute">limit</span>: <span class="hljs-number">42597</span>)<br>   <span class="hljs-selector-tag">Memory</span>: <span class="hljs-selector-tag">1016</span><span class="hljs-selector-class">.0K</span><br>   <span class="hljs-selector-tag">CGroup</span>: /<span class="hljs-selector-tag">system</span><span class="hljs-selector-class">.slice</span>/<span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-class">.service</span><br>           └─<span class="hljs-selector-tag">23889</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">sbin</span>/<span class="hljs-selector-tag">xrdp</span> <span class="hljs-selector-tag">--nodaemon</span><br><br><span class="hljs-selector-tag">Oct</span> <span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">tiny-studio</span> <span class="hljs-selector-tag">systemd</span><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">Started</span> <span class="hljs-selector-tag">xrdp</span> <span class="hljs-selector-tag">daemon</span>.<br><span class="hljs-selector-tag">Oct</span> <span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">tiny-studio</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-attr">[23889]</span>: (<span class="hljs-number">23889</span>)(<span class="hljs-number">139917736187328</span>)<span class="hljs-selector-attr">[INFO ]</span> <span class="hljs-selector-tag">starting</span> <span class="hljs-selector-tag">xrdp</span> <span class="hljs-selector-tag">with</span> <span class="hljs-selector-tag">pid</span> <span class="hljs-selector-tag">23889</span><br><span class="hljs-selector-tag">Oct</span> <span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">tiny-studio</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-attr">[23889]</span>: (<span class="hljs-number">23889</span>)(<span class="hljs-number">139917736187328</span>)<span class="hljs-selector-attr">[INFO ]</span> <span class="hljs-selector-tag">address</span> <span class="hljs-selector-attr">[0.0.0.0]</span> <span class="hljs-selector-tag">port</span> <span class="hljs-selector-attr">[3389]</span> <span class="hljs-selector-tag">mode</span> <span class="hljs-selector-tag">1</span><br><span class="hljs-selector-tag">Oct</span> <span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">tiny-studio</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-attr">[23889]</span>: (<span class="hljs-number">23889</span>)(<span class="hljs-number">139917736187328</span>)<span class="hljs-selector-attr">[INFO ]</span> <span class="hljs-selector-tag">listening</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">port</span> <span class="hljs-selector-tag">3389</span> <span class="hljs-selector-tag">on</span> <span class="hljs-selector-tag">0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><br><span class="hljs-selector-tag">Oct</span> <span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">04</span>:<span class="hljs-selector-tag">18</span>:<span class="hljs-selector-tag">31</span> <span class="hljs-selector-tag">tiny-studio</span> <span class="hljs-selector-tag">xrdp</span><span class="hljs-selector-attr">[23889]</span>: (<span class="hljs-number">23889</span>)(<span class="hljs-number">139917736187328</span>)<span class="hljs-selector-attr">[INFO ]</span> <span class="hljs-selector-tag">xrdp_listen_pp</span> <span class="hljs-selector-tag">done</span><br><br><br></code></pre></div></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">[root@tiny-studio ~]# firewall-cmd --permanent --add-service=vnc-server <br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>[root@tiny-studio ~]# firewall-cmd --permanent --add-port=3389/tcp<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>[root@tiny-studio ~]# firewall-cmd --permanent --add-port=3389/udp<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>[root@tiny-studio ~]# firewall-cmd --reload <br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>[root@tiny-studio ~]# firewall-cmd --list-all<br>public (active)<br>  target: default<br>  icmp-block-inversion: no<br>  interfaces: ens82f0<br>  sources: <br>  services: cockpit dhcpv6-client ssh vnc-server<br>  ports: 3389/tcp 3389/udp<br>  protocols: <br>  masquerade: no<br>  forward-ports: <br>  source-ports: <br>  icmp-blocks: <br>  rich rules: <br></code></pre></div></td></tr></table></figure><p>需要注意的是在登录使用的时候，直接使用windows自带的mstsc输入ip地址进行远程，然后就会进入到xrdp的界面，接着再输入账号密码登录，退出的时候要先在linux中注销用户，直接退出的话用户还是没有注销，没注销的桌面用户再用别的电脑是不能登录的。</p><p><img src="https://resource.tinychen.com/blog/20191109/0wYJg5qoffXA.png"></p><p><img src="https://resource.tinychen.com/blog/20191109/dk8PHlu4ofFx.png"></p><p><img src="https://resource.tinychen.com/blog/20191109/YNP8PCY1Bxiu.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS8上安装&lt;code&gt;xrdp&lt;/code&gt;和&lt;code&gt;vnc&lt;/code&gt;并在windows中使用&lt;code&gt;mstsc&lt;/code&gt;进行远程控制。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS8中安装VLC播放器</title>
    <link href="https://tinychen.com/20191028-centos8-install-vlc/"/>
    <id>https://tinychen.com/20191028-centos8-install-vlc/</id>
    <published>2019-10-28T07:00:00.000Z</published>
    <updated>2019-10-28T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS8上使用<code>epel</code>源和<code>rpmfusion</code>源安装VLC播放器。</p><span id="more"></span><p>我们查看官网可以看到对应的<a href="https://www.videolan.org/vlc/download-redhat.html">安装页面</a>已经有比较详细的安装指导说明了。</p><blockquote><p>RHEL/CentOS 8<br>Use RPM Fusion for EL8. Available for x86_64, aarch64 and ppc64le<br>This repository uses EPEL</p><p>The vlc-3.0x branch will be provided for EL8<br>Install rpmfusion-free-release-8.noarch.rpm for EL8.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$&gt; su -<br><span class="hljs-comment">#&gt; yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm</span><br><span class="hljs-comment">#&gt; yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm</span><br><span class="hljs-comment">#&gt; yum install vlc</span><br><span class="hljs-comment">#&gt; yum install vlc-core (for minimal headless/server install)</span><br><span class="hljs-comment">#&gt; yum install python-vlc (optionals)</span><br></code></pre></div></td></tr></table></figure></blockquote><p>大致的安装步骤和上面类似，需要注意的是，开始导入的<code>epel</code>源和<code>rpmfusion</code>源使用默认源可能会比较慢，需要替换为国内镜像源的同学可以查看<a href="https://tinychen.com/20191024-centos8-replace-yum-source/">这篇文章</a>。</p><p>需要注意的是，安装<code>vlc</code>的时候，<code>vlc-core</code>会作为依赖同时被安装，同时，<code>python-vlc</code>这个库需要使用<code>pip3</code>来进行安装。所以整理之后的安装步骤变成了下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># a安装epel库</span><br>yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm<br><span class="hljs-comment"># 安装rpmfusion库</span><br>yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm<br><span class="hljs-comment"># 安装vlc</span><br>yum install vlc vlc-core<br><span class="hljs-comment"># 安装python3，否则无法使用pip3</span><br>yum install python3<br><span class="hljs-comment"># 使用pip3安装python-vlc</span><br>pip3 install python-vlc<br></code></pre></div></td></tr></table></figure><blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> pip<span class="hljs-number">3</span> install packagename<br></code></pre></div></td></tr></table></figure><p>代表进行全局安装，安装后全局可用。如果是信任的安装包可用使用该命令进行安装。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">pip3 install --<span class="hljs-keyword">user</span> <span class="hljs-title">packagename</span><br></code></pre></div></td></tr></table></figure><p>代表仅该用户的安装，安装后仅该用户可用。处于安全考虑，尽量使用该命令进行安装。</p></blockquote><p>以下为安装实录，需要注意的是，linux版本的<code>vlc</code>好像对4K HDR视频的支持不太好，画面会有泛白的情况，暂时没找到设置里面的相关选项，使用<code>smplayer</code>+<code>mpvplayer</code>就可以正常播放。</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">[root@tiny-studio tinychen]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest<span class="hljs-string">-8</span>.noarch.rpm<br>Last metadata expiration check: 0:49:35 ago on Fri 01 Nov 2019 10:00:32 PM CST.<br>epel-release-latest<span class="hljs-string">-8</span>.noarch.rpm                                    6.7 kB/s |  21 kB     00:03    <br>Package epel-release<span class="hljs-string">-8</span><span class="hljs-string">-7</span>.el8.noarch is already installed.<br>Dependencies resolved.<br>Nothing to do.<br>Complete!<br>[root@tiny-studio tinychen]# yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release<span class="hljs-string">-8</span>.noarch.rpm<br>Last metadata expiration check: 0:49:57 ago on Fri 01 Nov 2019 10:00:32 PM CST.<br>rpmfusion-free-release<span class="hljs-string">-8</span>.noarch.rpm                                 3.4 kB/s |  11 kB     00:03    <br><br>Dependencies resolved.<br>====================================================================================================<br><br> Package                           Arch              Version          Repository               Size<br>====================================================================================================<br><br>Installing:<br> rpmfusion-free-release            noarch            8<span class="hljs-string">-0</span>.1            @commandline             11 k<br><br>Transaction Summary<br>====================================================================================================<br><br>Install  1 Package<br><br>Total size: 11 k<br>Installed size: 3.7 k<br>Is this ok [y/N]: y<br>Downloading Packages:<br>Running transaction check<br>Transaction check succeeded.<br>Running transaction test<br>Transaction test succeeded.<br>Running transaction<br>  Preparing        :                                                                            1/1 <br>  Installing       : rpmfusion-free-release<span class="hljs-string">-8</span><span class="hljs-string">-0</span>.1.noarch                                        1/1 <br>  Verifying        : rpmfusion-free-release<span class="hljs-string">-8</span><span class="hljs-string">-0</span>.1.noarch                                        1/1 <br><br>Installed:<br>  rpmfusion-free-release<span class="hljs-string">-8</span><span class="hljs-string">-0</span>.1.noarch                                                               <br><br>Complete!<br>[root@tiny-studio tinychen]# yum install vlc<br>RPM Fusion for EL 8 - Free - Updates                                 14 kB/s | 151 kB     00:11    <br><br>Dependencies resolved.<br>====================================================================================================<br><br> Package                    Arch    Version                           Repository               Size<br>====================================================================================================<br><br>Installing:<br> vlc                        x86_64  1:3.0.9<span class="hljs-string">-22</span>.el8                    rpmfusion-free-updates  1.9 M<br>Installing dependencies:<br> fftw-libs-double           x86_64  3.3.5<span class="hljs-string">-11</span>.el8                      AppStream               992 k<br> freeglut                   x86_64  3.0.0<span class="hljs-string">-8</span>.el8                       AppStream               191 k<br> libdc1394                  x86_64  2.2.2<span class="hljs-string">-10</span>.el8                      AppStream               126 k<br> libmad                     x86_64  0.15.1b<span class="hljs-string">-24</span>.el8                    AppStream                83 k<br> libva                      x86_64  2.1.0<span class="hljs-string">-1</span>.el8                       AppStream                92 k<br> libvdpau                   x86_64  1.1.1<span class="hljs-string">-7</span>.el8                       AppStream                40 k<br> ocl-icd                    x86_64  2.2.12<span class="hljs-string">-1</span>.el8                      AppStream                51 k<br> protobuf-lite              x86_64  3.5.0<span class="hljs-string">-7</span>.el8                       AppStream               150 k<br> qt5-qtsvg                  x86_64  5.11.1<span class="hljs-string">-2</span>.el8                      AppStream               182 k<br> qt5-qtx11extras            x86_64  5.11.1<span class="hljs-string">-2</span>.el8                      AppStream                34 k<br> libusb                     x86_64  1:0.1.5<span class="hljs-string">-12</span>.el8                    BaseOS                   42 k<br> aalib-libs                 x86_64  1.4.0<span class="hljs-string">-0</span>.37.rc5.el8                epel                     72 k<br> fluidsynth-libs            x86_64  1.1.11<span class="hljs-string">-6</span>.el8                      epel                    214 k<br> game-music-emu             x86_64  0.6.2<span class="hljs-string">-3</span>.el8                       epel                    155 k<br> jack-audio-connection-kit  x86_64  1.9.12<span class="hljs-string">-8</span>.el8                      epel                    519 k<br> libaom                     x86_64  1.0.0<span class="hljs-string">-8</span>.20190810git9666276.el8    epel                    1.6 M<br> libass                     x86_64  0.14.0<span class="hljs-string">-4</span>.el8                      epel                    110 k<br> libcaca                    x86_64  0.99<span class="hljs-string">-0</span>.43.beta19.el8              epel                    227 k<br> libcddb                    x86_64  1.3.2<span class="hljs-string">-30</span>.el8                      epel                     79 k<br> libchromaprint             x86_64  1.4.2<span class="hljs-string">-6</span>.el8                       epel                     54 k<br> libdav1d                   x86_64  0.5.0<span class="hljs-string">-1</span>.el8                       epel                    344 k<br> libdvbpsi                  x86_64  1.3.3<span class="hljs-string">-1</span>.el8                       epel                    105 k<br> libebml                    x86_64  1.3.7<span class="hljs-string">-2</span>.el8                       epel                     87 k<br> libkate                    x86_64  0.4.1<span class="hljs-string">-18</span>.el8                      epel                     59 k<br> libmatroska                x86_64  1.5.0<span class="hljs-string">-1</span>.el8                       epel                    170 k<br> libmfx                     x86_64  1.25<span class="hljs-string">-4</span>.el8                        epel                     36 k<br> libmicrodns                x86_64  0.0.10<span class="hljs-string">-4</span>.el8                      epel                     29 k<br> libmodplug                 x86_64  1:0.8.9.0<span class="hljs-string">-9</span>.el8                   epel                    171 k<br> libtiger                   x86_64  0.3.4<span class="hljs-string">-18</span>.el8                      epel                     43 k<br> libupnp                    x86_64  1.8.4<span class="hljs-string">-3</span>.el8                       epel                    115 k<br> libvmaf                    x86_64  1.3.15<span class="hljs-string">-1</span>.el8                      epel                    347 k<br> lirc-libs                  x86_64  0.10.0<span class="hljs-string">-19</span>.el8                     epel                    139 k<br> pugixml                    x86_64  1.9<span class="hljs-string">-1</span>.el8                         epel                     97 k<br> schroedinger               x86_64  1.0.11<span class="hljs-string">-21</span>.el8                     epel                    321 k<br> soxr                       x86_64  0.1.3<span class="hljs-string">-4</span>.el8                       epel                     97 k<br> vid.stab                   x86_64  1.1.0<span class="hljs-string">-12</span>.20190213gitaeabc8d.el8   epel                     47 k<br> zvbi                       x86_64  0.2.35<span class="hljs-string">-9</span>.el8                      epel                    424 k<br> faad2-libs                 x86_64  1:2.8.8<span class="hljs-string">-6</span>.el8                     rpmfusion-free-updates  177 k<br> ffmpeg-libs                x86_64  4.2.1<span class="hljs-string">-3</span>.el8                       rpmfusion-free-updates  7.2 M<br> libdca                     x86_64  0.0.6<span class="hljs-string">-4</span>.el8                       rpmfusion-free-updates  113 k<br> libmpeg2                   x86_64  0.5.1<span class="hljs-string">-17</span>.el8                      rpmfusion-free-updates   76 k<br> live555                    x86_64  2019.06.28<span class="hljs-string">-1</span>.el8                  rpmfusion-free-updates  404 k<br> opencore-amr               x86_64  0.1.5<span class="hljs-string">-7</span>.el8                       rpmfusion-free-updates  180 k<br> vlc-core                   x86_64  1:3.0.9<span class="hljs-string">-22</span>.el8                    rpmfusion-free-updates   10 M<br> vo-amrwbenc                x86_64  0.1.3<span class="hljs-string">-8</span>.el8                       rpmfusion-free-updates   77 k<br> x264-libs                  x86_64  0.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8   rpmfusion-free-updates  651 k<br> x265-libs                  x86_64  3.1.2<span class="hljs-string">-1</span>.el8                       rpmfusion-free-updates  1.9 M<br> xvidcore                   x86_64  1.3.5<span class="hljs-string">-5</span>.el8                       rpmfusion-free-updates  268 k<br><br>Transaction Summary<br>====================================================================================================<br><br>Install  49 Packages<br><br>Total download size: 31 M<br>Installed size: 121 M<br>Is this ok [y/N]: y<br>Downloading Packages:<br>(1/49): libdc1394<span class="hljs-string">-2</span>.2.2<span class="hljs-string">-10</span>.el8.x86_64.rpm                                       86 kB/s | 126 kB     00:01    <br>(2/49): libmad<span class="hljs-string">-0</span>.15.1b<span class="hljs-string">-24</span>.el8.x86_64.rpm                                       401 kB/s |  83 kB     00:00    <br>(3/49): freeglut<span class="hljs-string">-3</span>.0.0<span class="hljs-string">-8</span>.el8.x86_64.rpm                                         96 kB/s | 191 kB     00:01    <br>(4/49): libva<span class="hljs-string">-2</span>.1.0<span class="hljs-string">-1</span>.el8.x86_64.rpm                                           212 kB/s |  92 kB     00:00    <br>(5/49): libvdpau<span class="hljs-string">-1</span>.1.1<span class="hljs-string">-7</span>.el8.x86_64.rpm                                         83 kB/s |  40 kB     00:00    <br>(6/49): protobuf-lite<span class="hljs-string">-3</span>.5.0<span class="hljs-string">-7</span>.el8.x86_64.rpm                                   235 kB/s | 150 kB     00:00    <br>(7/49): fftw-libs-double<span class="hljs-string">-3</span>.3.5<span class="hljs-string">-11</span>.el8.x86_64.rpm                               303 kB/s | 992 kB     00:03    <br>(8/49): qt5-qtx11extras<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64.rpm                                177 kB/s |  34 kB     00:00    <br>(9/49): ocl-icd<span class="hljs-string">-2</span>.2.12<span class="hljs-string">-1</span>.el8.x86_64.rpm                                         35 kB/s |  51 kB     00:01    <br>(10/49): qt5-qtsvg<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64.rpm                                     351 kB/s | 182 kB     00:00    <br>(11/49): aalib-libs<span class="hljs-string">-1</span>.4.0<span class="hljs-string">-0</span>.37.rc5.el8.x86_64.rpm                              130 kB/s |  72 kB     00:00    <br>(12/49): fluidsynth-libs<span class="hljs-string">-1</span>.1.11<span class="hljs-string">-6</span>.el8.x86_64.rpm                               256 kB/s | 214 kB     00:00    <br>(13/49): game-music-emu<span class="hljs-string">-0</span>.6.2<span class="hljs-string">-3</span>.el8.x86_64.rpm                                 259 kB/s | 155 kB     00:00    <br>(14/49): jack-audio-connection-kit<span class="hljs-string">-1</span>.9.12<span class="hljs-string">-8</span>.el8.x86_64.rpm                     308 kB/s | 519 kB     00:01    <br>(15/49): libusb<span class="hljs-string">-0</span>.1.5<span class="hljs-string">-12</span>.el8.x86_64.rpm                                         16 kB/s |  42 kB     00:02    <br>(16/49): libass<span class="hljs-string">-0</span>.14.0<span class="hljs-string">-4</span>.el8.x86_64.rpm                                        113 kB/s | 110 kB     00:00    <br>(17/49): libaom<span class="hljs-string">-1</span>.0.0<span class="hljs-string">-8</span>.20190810git9666276.el8.x86_64.rpm                      451 kB/s | 1.6 MB     00:03    <br>(18/49): libcddb<span class="hljs-string">-1</span>.3.2<span class="hljs-string">-30</span>.el8.x86_64.rpm                                        56 kB/s |  79 kB     00:01    <br>(19/49): libchromaprint<span class="hljs-string">-1</span>.4.2<span class="hljs-string">-6</span>.el8.x86_64.rpm                                 202 kB/s |  54 kB     00:00    <br>(20/49): libdav1d<span class="hljs-string">-0</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64.rpm                                       574 kB/s | 344 kB     00:00    <br>(21/49): libdvbpsi<span class="hljs-string">-1</span>.3.3<span class="hljs-string">-1</span>.el8.x86_64.rpm                                      150 kB/s | 105 kB     00:00    <br>(22/49): libebml<span class="hljs-string">-1</span>.3.7<span class="hljs-string">-2</span>.el8.x86_64.rpm                                        225 kB/s |  87 kB     00:00    <br>(23/49): libcaca<span class="hljs-string">-0</span>.99<span class="hljs-string">-0</span>.43.beta19.el8.x86_64.rpm                                66 kB/s | 227 kB     00:03    <br>(24/49): libkate<span class="hljs-string">-0</span>.4.1<span class="hljs-string">-18</span>.el8.x86_64.rpm                                       182 kB/s |  59 kB     00:00    <br>(25/49): libmatroska<span class="hljs-string">-1</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64.rpm                                    454 kB/s | 170 kB     00:00    <br>(26/49): libmfx<span class="hljs-string">-1</span>.25<span class="hljs-string">-4</span>.el8.x86_64.rpm                                          106 kB/s |  36 kB     00:00    <br>(27/49): libmicrodns<span class="hljs-string">-0</span>.0.10<span class="hljs-string">-4</span>.el8.x86_64.rpm                                    76 kB/s |  29 kB     00:00    <br>(28/49): libmodplug<span class="hljs-string">-0</span>.8.9.0<span class="hljs-string">-9</span>.el8.x86_64.rpm                                   507 kB/s | 171 kB     00:00    <br>(29/49): libtiger<span class="hljs-string">-0</span>.3.4<span class="hljs-string">-18</span>.el8.x86_64.rpm                                      116 kB/s |  43 kB     00:00    <br>(30/49): libupnp<span class="hljs-string">-1</span>.8.4<span class="hljs-string">-3</span>.el8.x86_64.rpm                                        234 kB/s | 115 kB     00:00    <br>(31/49): libvmaf<span class="hljs-string">-1</span>.3.15<span class="hljs-string">-1</span>.el8.x86_64.rpm                                       420 kB/s | 347 kB     00:00    <br>(32/49): lirc-libs<span class="hljs-string">-0</span>.10.0<span class="hljs-string">-19</span>.el8.x86_64.rpm                                    136 kB/s | 139 kB     00:01    <br>(33/49): pugixml<span class="hljs-string">-1</span>.9<span class="hljs-string">-1</span>.el8.x86_64.rpm                                          102 kB/s |  97 kB     00:00    <br>(34/49): schroedinger<span class="hljs-string">-1</span>.0.11<span class="hljs-string">-21</span>.el8.x86_64.rpm                                 366 kB/s | 321 kB     00:00    <br>(35/49): soxr<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-4</span>.el8.x86_64.rpm                                           134 kB/s |  97 kB     00:00    <br>(36/49): vid.stab<span class="hljs-string">-1</span>.1.0<span class="hljs-string">-12</span>.20190213gitaeabc8d.el8.x86_64.rpm                    76 kB/s |  47 kB     00:00    <br>(37/49): zvbi<span class="hljs-string">-0</span>.2.35<span class="hljs-string">-9</span>.el8.x86_64.rpm                                          530 kB/s | 424 kB     00:00    <br>(38/49): libdca<span class="hljs-string">-0</span>.0.6<span class="hljs-string">-4</span>.el8.x86_64.rpm                                          66 kB/s | 113 kB     00:01    <br>(39/49): libmpeg2<span class="hljs-string">-0</span>.5.1<span class="hljs-string">-17</span>.el8.x86_64.rpm                                      177 kB/s |  76 kB     00:00    <br>(40/49): live555<span class="hljs-string">-2019</span>.06.28<span class="hljs-string">-1</span>.el8.x86_64.rpm                                   330 kB/s | 404 kB     00:01    <br>(41/49): faad2-libs<span class="hljs-string">-2</span>.8.8<span class="hljs-string">-6</span>.el8.x86_64.rpm                                      39 kB/s | 177 kB     00:04    <br>(42/49): opencore-amr<span class="hljs-string">-0</span>.1.5<span class="hljs-string">-7</span>.el8.x86_64.rpm                                   213 kB/s | 180 kB     00:00    <br>(43/49): ffmpeg-libs<span class="hljs-string">-4</span>.2.1<span class="hljs-string">-3</span>.el8.x86_64.rpm                                    329 kB/s | 7.2 MB     00:22    <br>(44/49): vlc<span class="hljs-string">-3</span>.0.9<span class="hljs-string">-22</span>.el8.x86_64.rpm                                            86 kB/s | 1.9 MB     00:22    <br>(45/49): vo-amrwbenc<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-8</span>.el8.x86_64.rpm                                     15 kB/s |  77 kB     00:05    <br>(46/49): x264-libs<span class="hljs-string">-0</span>.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8.x86_64.rpm                  296 kB/s | 651 kB     00:02    <br>(47/49): xvidcore<span class="hljs-string">-1</span>.3.5<span class="hljs-string">-5</span>.el8.x86_64.rpm                                        29 kB/s | 268 kB     00:09    <br>(48/49): x265-libs<span class="hljs-string">-3</span>.1.2<span class="hljs-string">-1</span>.el8.x86_64.rpm                                      167 kB/s | 1.9 MB     00:11    <br><br>(49/49): vlc-core<span class="hljs-string">-3</span>.0.9<span class="hljs-string">-22</span>.el8.x86_64.rpm                                      293 kB/s |  10 MB     00:35    <br>---------------------------------------------------------------------------------------------------------------<br><br>Total                                                                          533 kB/s |  31 MB     00:58     <br>warning: /var/cache/dnf/rpmfusion-free-updates<span class="hljs-string">-4</span>f04908c20c55925/packages/faad2-libs<span class="hljs-string">-2</span>.8.8<span class="hljs-string">-6</span>.el8.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID 158b3811: NOKEY<br>RPM Fusion for EL 8 - Free - Updates                                           1.6 MB/s | 1.7 kB     00:00    <br>Importing GPG key 0x158B3811:<br> Userid     : &quot;RPM Fusion free repository for EL (8) &lt;rpmfusion-buildsys@lists.rpmfusion.org&gt;&quot;<br> Fingerprint: 8379 35CD 19E1 23AA 7F8A 8E69 979F 0C69 158B 3811<br> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el<span class="hljs-string">-8</span><br>Is this ok [y/N]: y<br>Key imported successfully<br>Running transaction check<br>Transaction check succeeded.<br>Running transaction test<br>Transaction test succeeded.<br>Running transaction<br>  Preparing        :                                                                                       1/1 <br>  Installing       : libva<span class="hljs-string">-2</span>.1.0<span class="hljs-string">-1</span>.el8.x86_64                                                             1/49 <br>  Installing       : libmfx<span class="hljs-string">-1</span>.25<span class="hljs-string">-4</span>.el8.x86_64                                                             2/49 <br>  Installing       : x265-libs<span class="hljs-string">-3</span>.1.2<span class="hljs-string">-1</span>.el8.x86_64                                                         3/49 <br>  Installing       : zvbi<span class="hljs-string">-0</span>.2.35<span class="hljs-string">-9</span>.el8.x86_64                                                             4/49 <br>  Running scriptlet: zvbi<span class="hljs-string">-0</span>.2.35<span class="hljs-string">-9</span>.el8.x86_64                                                             4/49 <br>  Installing       : soxr<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-4</span>.el8.x86_64                                                              5/49 <br>  Installing       : libkate<span class="hljs-string">-0</span>.4.1<span class="hljs-string">-18</span>.el8.x86_64                                                          6/49 <br>  Installing       : libebml<span class="hljs-string">-1</span>.3.7<span class="hljs-string">-2</span>.el8.x86_64                                                           7/49 <br>  Installing       : libdav1d<span class="hljs-string">-0</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                                                          8/49 <br>  Installing       : libass<span class="hljs-string">-0</span>.14.0<span class="hljs-string">-4</span>.el8.x86_64                                                           9/49 <br>  Installing       : libaom<span class="hljs-string">-1</span>.0.0<span class="hljs-string">-8</span>.20190810git9666276.el8.x86_64                                        10/49 <br>  Running scriptlet: jack-audio-connection-kit<span class="hljs-string">-1</span>.9.12<span class="hljs-string">-8</span>.el8.x86_64                                       11/49 <br>  Installing       : jack-audio-connection-kit<span class="hljs-string">-1</span>.9.12<span class="hljs-string">-8</span>.el8.x86_64                                       11/49 <br>  Installing       : ocl-icd<span class="hljs-string">-2</span>.2.12<span class="hljs-string">-1</span>.el8.x86_64                                                         12/49 <br>  Running scriptlet: ocl-icd<span class="hljs-string">-2</span>.2.12<span class="hljs-string">-1</span>.el8.x86_64                                                         12/49 <br>  Installing       : x264-libs<span class="hljs-string">-0</span>.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8.x86_64                                    13/49 <br>  Running scriptlet: x264-libs<span class="hljs-string">-0</span>.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8.x86_64                                    13/49 <br>  Installing       : fluidsynth-libs<span class="hljs-string">-1</span>.1.11<span class="hljs-string">-6</span>.el8.x86_64                                                 14/49 <br>  Installing       : libmatroska<span class="hljs-string">-1</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                                                      15/49 <br>  Installing       : libtiger<span class="hljs-string">-0</span>.3.4<span class="hljs-string">-18</span>.el8.x86_64                                                        16/49 <br>  Installing       : xvidcore<span class="hljs-string">-1</span>.3.5<span class="hljs-string">-5</span>.el8.x86_64                                                         17/49 <br>  Installing       : vo-amrwbenc<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-8</span>.el8.x86_64                                                      18/49 <br>  Installing       : opencore-amr<span class="hljs-string">-0</span>.1.5<span class="hljs-string">-7</span>.el8.x86_64                                                     19/49 <br>  Installing       : live555<span class="hljs-string">-2019</span>.06.28<span class="hljs-string">-1</span>.el8.x86_64                                                     20/49 <br>  Installing       : libmpeg2<span class="hljs-string">-0</span>.5.1<span class="hljs-string">-17</span>.el8.x86_64                                                        21/49 <br>  Installing       : libdca<span class="hljs-string">-0</span>.0.6<span class="hljs-string">-4</span>.el8.x86_64                                                           22/49 <br>  Installing       : faad2-libs<span class="hljs-string">-1</span>:2.8.8<span class="hljs-string">-6</span>.el8.x86_64                                                     23/49 <br>  Installing       : vid.stab<span class="hljs-string">-1</span>.1.0<span class="hljs-string">-12</span>.20190213gitaeabc8d.el8.x86_64                                     24/49 <br>  Installing       : schroedinger<span class="hljs-string">-1</span>.0.11<span class="hljs-string">-21</span>.el8.x86_64                                                   25/49 <br>  Installing       : pugixml<span class="hljs-string">-1</span>.9<span class="hljs-string">-1</span>.el8.x86_64                                                            26/49 <br>  Running scriptlet: pugixml<span class="hljs-string">-1</span>.9<span class="hljs-string">-1</span>.el8.x86_64                                                            26/49 <br>  Installing       : libvmaf<span class="hljs-string">-1</span>.3.15<span class="hljs-string">-1</span>.el8.x86_64                                                         27/49 <br>  Installing       : libupnp<span class="hljs-string">-1</span>.8.4<span class="hljs-string">-3</span>.el8.x86_64                                                          28/49 <br>  Installing       : libmodplug<span class="hljs-string">-1</span>:0.8.9.0<span class="hljs-string">-9</span>.el8.x86_64                                                   29/49 <br>  Installing       : libmicrodns<span class="hljs-string">-0</span>.0.10<span class="hljs-string">-4</span>.el8.x86_64                                                     30/49 <br>  Installing       : libdvbpsi<span class="hljs-string">-1</span>.3.3<span class="hljs-string">-1</span>.el8.x86_64                                                        31/49 <br>  Installing       : libcddb<span class="hljs-string">-1</span>.3.2<span class="hljs-string">-30</span>.el8.x86_64                                                         32/49 <br>  Installing       : game-music-emu<span class="hljs-string">-0</span>.6.2<span class="hljs-string">-3</span>.el8.x86_64                                                   33/49 <br>  Installing       : aalib-libs<span class="hljs-string">-1</span>.4.0<span class="hljs-string">-0</span>.37.rc5.el8.x86_64                                                34/49 <br>  Installing       : libusb<span class="hljs-string">-1</span>:0.1.5<span class="hljs-string">-12</span>.el8.x86_64                                                        35/49 <br>  Installing       : lirc-libs<span class="hljs-string">-0</span>.10.0<span class="hljs-string">-19</span>.el8.x86_64                                                      36/49 <br>  Installing       : qt5-qtx11extras<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                                                 37/49 <br>  Installing       : qt5-qtsvg<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                                                       38/49 <br>  Installing       : protobuf-lite<span class="hljs-string">-3</span>.5.0<span class="hljs-string">-7</span>.el8.x86_64                                                    39/49 <br>  Installing       : libvdpau<span class="hljs-string">-1</span>.1.1<span class="hljs-string">-7</span>.el8.x86_64                                                         40/49 <br>  Running scriptlet: libvdpau<span class="hljs-string">-1</span>.1.1<span class="hljs-string">-7</span>.el8.x86_64                                                         40/49 <br>  Installing       : ffmpeg-libs<span class="hljs-string">-4</span>.2.1<span class="hljs-string">-3</span>.el8.x86_64                                                      41/49 <br>  Installing       : libmad<span class="hljs-string">-0</span>.15.1b<span class="hljs-string">-24</span>.el8.x86_64                                                        42/49 <br>  Running scriptlet: libmad<span class="hljs-string">-0</span>.15.1b<span class="hljs-string">-24</span>.el8.x86_64                                                        42/49 <br>  Installing       : libdc1394<span class="hljs-string">-2</span>.2.2<span class="hljs-string">-10</span>.el8.x86_64                                                       43/49 <br>  Running scriptlet: libdc1394<span class="hljs-string">-2</span>.2.2<span class="hljs-string">-10</span>.el8.x86_64                                                       43/49 <br>  Installing       : freeglut<span class="hljs-string">-3</span>.0.0<span class="hljs-string">-8</span>.el8.x86_64                                                         44/49 <br>  Running scriptlet: freeglut<span class="hljs-string">-3</span>.0.0<span class="hljs-string">-8</span>.el8.x86_64                                                         44/49 <br>  Installing       : libcaca<span class="hljs-string">-0</span>.99<span class="hljs-string">-0</span>.43.beta19.el8.x86_64                                                 45/49 <br>  Installing       : fftw-libs-double<span class="hljs-string">-3</span>.3.5<span class="hljs-string">-11</span>.el8.x86_64                                                46/49 <br>  Installing       : libchromaprint<span class="hljs-string">-1</span>.4.2<span class="hljs-string">-6</span>.el8.x86_64                                                   47/49 <br>  Installing       : vlc-core<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                      48/49 <br>  Installing       : vlc<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                           49/49 <br>  Running scriptlet: vlc<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                           49/49 <br>  Running scriptlet: vlc-core<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                      49/49 <br>  Running scriptlet: vlc<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                           49/49 <br>  Verifying        : fftw-libs-double<span class="hljs-string">-3</span>.3.5<span class="hljs-string">-11</span>.el8.x86_64                                                 1/49 <br>  Verifying        : freeglut<span class="hljs-string">-3</span>.0.0<span class="hljs-string">-8</span>.el8.x86_64                                                          2/49 <br>  Verifying        : libdc1394<span class="hljs-string">-2</span>.2.2<span class="hljs-string">-10</span>.el8.x86_64                                                        3/49 <br>  Verifying        : libmad<span class="hljs-string">-0</span>.15.1b<span class="hljs-string">-24</span>.el8.x86_64                                                         4/49 <br>  Verifying        : libva<span class="hljs-string">-2</span>.1.0<span class="hljs-string">-1</span>.el8.x86_64                                                             5/49 <br>  Verifying        : libvdpau<span class="hljs-string">-1</span>.1.1<span class="hljs-string">-7</span>.el8.x86_64                                                          6/49 <br>  Verifying        : ocl-icd<span class="hljs-string">-2</span>.2.12<span class="hljs-string">-1</span>.el8.x86_64                                                          7/49 <br>  Verifying        : protobuf-lite<span class="hljs-string">-3</span>.5.0<span class="hljs-string">-7</span>.el8.x86_64                                                     8/49 <br>  Verifying        : qt5-qtsvg<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                                                        9/49 <br>  Verifying        : qt5-qtx11extras<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                                                 10/49 <br>  Verifying        : libusb<span class="hljs-string">-1</span>:0.1.5<span class="hljs-string">-12</span>.el8.x86_64                                                        11/49 <br>  Verifying        : aalib-libs<span class="hljs-string">-1</span>.4.0<span class="hljs-string">-0</span>.37.rc5.el8.x86_64                                                12/49 <br>  Verifying        : fluidsynth-libs<span class="hljs-string">-1</span>.1.11<span class="hljs-string">-6</span>.el8.x86_64                                                 13/49 <br>  Verifying        : game-music-emu<span class="hljs-string">-0</span>.6.2<span class="hljs-string">-3</span>.el8.x86_64                                                   14/49 <br>  Verifying        : jack-audio-connection-kit<span class="hljs-string">-1</span>.9.12<span class="hljs-string">-8</span>.el8.x86_64                                       15/49 <br>  Verifying        : libaom<span class="hljs-string">-1</span>.0.0<span class="hljs-string">-8</span>.20190810git9666276.el8.x86_64                                        16/49 <br>  Verifying        : libass<span class="hljs-string">-0</span>.14.0<span class="hljs-string">-4</span>.el8.x86_64                                                          17/49 <br>  Verifying        : libcaca<span class="hljs-string">-0</span>.99<span class="hljs-string">-0</span>.43.beta19.el8.x86_64                                                 18/49 <br>  Verifying        : libcddb<span class="hljs-string">-1</span>.3.2<span class="hljs-string">-30</span>.el8.x86_64                                                         19/49 <br>  Verifying        : libchromaprint<span class="hljs-string">-1</span>.4.2<span class="hljs-string">-6</span>.el8.x86_64                                                   20/49 <br>  Verifying        : libdav1d<span class="hljs-string">-0</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                                                         21/49 <br>  Verifying        : libdvbpsi<span class="hljs-string">-1</span>.3.3<span class="hljs-string">-1</span>.el8.x86_64                                                        22/49 <br>  Verifying        : libebml<span class="hljs-string">-1</span>.3.7<span class="hljs-string">-2</span>.el8.x86_64                                                          23/49 <br>  Verifying        : libkate<span class="hljs-string">-0</span>.4.1<span class="hljs-string">-18</span>.el8.x86_64                                                         24/49 <br>  Verifying        : libmatroska<span class="hljs-string">-1</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                                                      25/49 <br>  Verifying        : libmfx<span class="hljs-string">-1</span>.25<span class="hljs-string">-4</span>.el8.x86_64                                                            26/49 <br>  Verifying        : libmicrodns<span class="hljs-string">-0</span>.0.10<span class="hljs-string">-4</span>.el8.x86_64                                                     27/49 <br>  Verifying        : libmodplug<span class="hljs-string">-1</span>:0.8.9.0<span class="hljs-string">-9</span>.el8.x86_64                                                   28/49 <br>  Verifying        : libtiger<span class="hljs-string">-0</span>.3.4<span class="hljs-string">-18</span>.el8.x86_64                                                        29/49 <br>  Verifying        : libupnp<span class="hljs-string">-1</span>.8.4<span class="hljs-string">-3</span>.el8.x86_64                                                          30/49 <br>  Verifying        : libvmaf<span class="hljs-string">-1</span>.3.15<span class="hljs-string">-1</span>.el8.x86_64                                                         31/49 <br>  Verifying        : lirc-libs<span class="hljs-string">-0</span>.10.0<span class="hljs-string">-19</span>.el8.x86_64                                                      32/49 <br>  Verifying        : pugixml<span class="hljs-string">-1</span>.9<span class="hljs-string">-1</span>.el8.x86_64                                                            33/49 <br>  Verifying        : schroedinger<span class="hljs-string">-1</span>.0.11<span class="hljs-string">-21</span>.el8.x86_64                                                   34/49 <br>  Verifying        : soxr<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-4</span>.el8.x86_64                                                             35/49 <br>  Verifying        : vid.stab<span class="hljs-string">-1</span>.1.0<span class="hljs-string">-12</span>.20190213gitaeabc8d.el8.x86_64                                     36/49 <br>  Verifying        : zvbi<span class="hljs-string">-0</span>.2.35<span class="hljs-string">-9</span>.el8.x86_64                                                            37/49 <br>  Verifying        : faad2-libs<span class="hljs-string">-1</span>:2.8.8<span class="hljs-string">-6</span>.el8.x86_64                                                     38/49 <br>  Verifying        : ffmpeg-libs<span class="hljs-string">-4</span>.2.1<span class="hljs-string">-3</span>.el8.x86_64                                                      39/49 <br>  Verifying        : libdca<span class="hljs-string">-0</span>.0.6<span class="hljs-string">-4</span>.el8.x86_64                                                           40/49 <br>  Verifying        : libmpeg2<span class="hljs-string">-0</span>.5.1<span class="hljs-string">-17</span>.el8.x86_64                                                        41/49 <br>  Verifying        : live555<span class="hljs-string">-2019</span>.06.28<span class="hljs-string">-1</span>.el8.x86_64                                                     42/49 <br>  Verifying        : opencore-amr<span class="hljs-string">-0</span>.1.5<span class="hljs-string">-7</span>.el8.x86_64                                                     43/49 <br>  Verifying        : vlc<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                           44/49 <br>  Verifying        : vlc-core<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                                                      45/49 <br>  Verifying        : vo-amrwbenc<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-8</span>.el8.x86_64                                                      46/49 <br>  Verifying        : x264-libs<span class="hljs-string">-0</span>.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8.x86_64                                    47/49 <br>  Verifying        : x265-libs<span class="hljs-string">-3</span>.1.2<span class="hljs-string">-1</span>.el8.x86_64                                                        48/49 <br>  Verifying        : xvidcore<span class="hljs-string">-1</span>.3.5<span class="hljs-string">-5</span>.el8.x86_64                                                         49/49 <br><br>Installed:<br>  vlc<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                               fftw-libs-double<span class="hljs-string">-3</span>.3.5<span class="hljs-string">-11</span>.el8.x86_64                <br>  freeglut<span class="hljs-string">-3</span>.0.0<span class="hljs-string">-8</span>.el8.x86_64                             libdc1394<span class="hljs-string">-2</span>.2.2<span class="hljs-string">-10</span>.el8.x86_64                       <br>  libmad<span class="hljs-string">-0</span>.15.1b<span class="hljs-string">-24</span>.el8.x86_64                            libva<span class="hljs-string">-2</span>.1.0<span class="hljs-string">-1</span>.el8.x86_64                            <br>  libvdpau<span class="hljs-string">-1</span>.1.1<span class="hljs-string">-7</span>.el8.x86_64                             ocl-icd<span class="hljs-string">-2</span>.2.12<span class="hljs-string">-1</span>.el8.x86_64                         <br>  protobuf-lite<span class="hljs-string">-3</span>.5.0<span class="hljs-string">-7</span>.el8.x86_64                        qt5-qtsvg<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                       <br>  qt5-qtx11extras<span class="hljs-string">-5</span>.11.1<span class="hljs-string">-2</span>.el8.x86_64                     libusb<span class="hljs-string">-1</span>:0.1.5<span class="hljs-string">-12</span>.el8.x86_64                        <br>  aalib-libs<span class="hljs-string">-1</span>.4.0<span class="hljs-string">-0</span>.37.rc5.el8.x86_64                    fluidsynth-libs<span class="hljs-string">-1</span>.1.11<span class="hljs-string">-6</span>.el8.x86_64                 <br>  game-music-emu<span class="hljs-string">-0</span>.6.2<span class="hljs-string">-3</span>.el8.x86_64                       jack-audio-connection-kit<span class="hljs-string">-1</span>.9.12<span class="hljs-string">-8</span>.el8.x86_64       <br>  libaom<span class="hljs-string">-1</span>.0.0<span class="hljs-string">-8</span>.20190810git9666276.el8.x86_64            libass<span class="hljs-string">-0</span>.14.0<span class="hljs-string">-4</span>.el8.x86_64                          <br>  libcaca<span class="hljs-string">-0</span>.99<span class="hljs-string">-0</span>.43.beta19.el8.x86_64                     libcddb<span class="hljs-string">-1</span>.3.2<span class="hljs-string">-30</span>.el8.x86_64                         <br>  libchromaprint<span class="hljs-string">-1</span>.4.2<span class="hljs-string">-6</span>.el8.x86_64                       libdav1d<span class="hljs-string">-0</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                         <br>  libdvbpsi<span class="hljs-string">-1</span>.3.3<span class="hljs-string">-1</span>.el8.x86_64                            libebml<span class="hljs-string">-1</span>.3.7<span class="hljs-string">-2</span>.el8.x86_64                          <br>  libkate<span class="hljs-string">-0</span>.4.1<span class="hljs-string">-18</span>.el8.x86_64                             libmatroska<span class="hljs-string">-1</span>.5.0<span class="hljs-string">-1</span>.el8.x86_64                      <br>  libmfx<span class="hljs-string">-1</span>.25<span class="hljs-string">-4</span>.el8.x86_64                                libmicrodns<span class="hljs-string">-0</span>.0.10<span class="hljs-string">-4</span>.el8.x86_64                     <br>  libmodplug<span class="hljs-string">-1</span>:0.8.9.0<span class="hljs-string">-9</span>.el8.x86_64                       libtiger<span class="hljs-string">-0</span>.3.4<span class="hljs-string">-18</span>.el8.x86_64                        <br>  libupnp<span class="hljs-string">-1</span>.8.4<span class="hljs-string">-3</span>.el8.x86_64                              libvmaf<span class="hljs-string">-1</span>.3.15<span class="hljs-string">-1</span>.el8.x86_64                         <br>  lirc-libs<span class="hljs-string">-0</span>.10.0<span class="hljs-string">-19</span>.el8.x86_64                          pugixml<span class="hljs-string">-1</span>.9<span class="hljs-string">-1</span>.el8.x86_64                            <br>  schroedinger<span class="hljs-string">-1</span>.0.11<span class="hljs-string">-21</span>.el8.x86_64                       soxr<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-4</span>.el8.x86_64                             <br>  vid.stab<span class="hljs-string">-1</span>.1.0<span class="hljs-string">-12</span>.20190213gitaeabc8d.el8.x86_64         zvbi<span class="hljs-string">-0</span>.2.35<span class="hljs-string">-9</span>.el8.x86_64                            <br>  faad2-libs<span class="hljs-string">-1</span>:2.8.8<span class="hljs-string">-6</span>.el8.x86_64                         ffmpeg-libs<span class="hljs-string">-4</span>.2.1<span class="hljs-string">-3</span>.el8.x86_64                      <br>  libdca<span class="hljs-string">-0</span>.0.6<span class="hljs-string">-4</span>.el8.x86_64                               libmpeg2<span class="hljs-string">-0</span>.5.1<span class="hljs-string">-17</span>.el8.x86_64                        <br>  live555<span class="hljs-string">-2019</span>.06.28<span class="hljs-string">-1</span>.el8.x86_64                         opencore-amr<span class="hljs-string">-0</span>.1.5<span class="hljs-string">-7</span>.el8.x86_64                     <br>  vlc-core<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64                          vo-amrwbenc<span class="hljs-string">-0</span>.1.3<span class="hljs-string">-8</span>.el8.x86_64                      <br>  x264-libs<span class="hljs-string">-0</span>.157<span class="hljs-string">-12</span>.20190717git34c06d1.el8.x86_64        x265-libs<span class="hljs-string">-3</span>.1.2<span class="hljs-string">-1</span>.el8.x86_64                        <br>  xvidcore<span class="hljs-string">-1</span>.3.5<span class="hljs-string">-5</span>.el8.x86_64                            <br><br>Complete!<br><br>[root@tiny-studio tinychen]# yum install vlc-core<br>Last metadata expiration check: 0:01:24 ago on Fri 01 Nov 2019 10:50:54 PM CST.<br>Package vlc-core<span class="hljs-string">-1</span>:3.0.9<span class="hljs-string">-22</span>.el8.x86_64 is already installed.<br>Dependencies resolved.<br>Nothing to do.<br>Complete!<br><br>[root@tiny-studio ~]# pip3 install python-vlc<br>WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.<br>Collecting python-vlc<br>  Downloading https://files.pythonhosted.org/packages/23/12/fd44ed5d105891a061b1aad7d554905e4586a3b43766250616a565d8c5c9/python_vlc<span class="hljs-string">-3</span>.0.7110-py3-none-any.whl (80kB)<br>    100% |████████████████████████████████| 81kB 9.8kB/s <br>Installing collected packages: python-vlc<br>Successfully installed python-vlc<span class="hljs-string">-3</span>.0.7110<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS8上使用&lt;code&gt;epel&lt;/code&gt;源和&lt;code&gt;rpmfusion&lt;/code&gt;源安装VLC播放器。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>常用网络服务及默认端口</title>
    <link href="https://tinychen.com/20191027-common-server-port/"/>
    <id>https://tinychen.com/20191027-common-server-port/</id>
    <published>2019-10-27T07:00:00.000Z</published>
    <updated>2019-10-27T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows中常用的一些服务和默认的端口。</p><span id="more"></span><p>在windows系统中的这个目录下<code>C:\Windows\System32\drivers\etc\services</code>有完整的文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span>                7/tcp<br><span class="hljs-built_in">echo</span>                7/udp<br>discard             9/tcp    sink null<br>discard             9/udp    sink null<br>systat             11/tcp    users                  <span class="hljs-comment">#Active users</span><br>systat             11/udp    users                  <span class="hljs-comment">#Active users</span><br>daytime            13/tcp<br>daytime            13/udp<br>qotd               17/tcp    quote                  <span class="hljs-comment">#Quote of the day</span><br>qotd               17/udp    quote                  <span class="hljs-comment">#Quote of the day</span><br>chargen            19/tcp    ttytst <span class="hljs-built_in">source</span>          <span class="hljs-comment">#Character generator</span><br>chargen            19/udp    ttytst <span class="hljs-built_in">source</span>          <span class="hljs-comment">#Character generator</span><br>ftp-data           20/tcp                           <span class="hljs-comment">#FTP, data</span><br>ftp                21/tcp                           <span class="hljs-comment">#FTP. control</span><br>ssh                22/tcp                           <span class="hljs-comment">#SSH Remote Login Protocol</span><br>telnet             23/tcp<br>smtp               25/tcp    mail                   <span class="hljs-comment">#Simple Mail Transfer Protocol</span><br>time               37/tcp    timserver<br>time               37/udp    timserver<br>rlp                39/udp    resource               <span class="hljs-comment">#Resource Location Protocol</span><br>nameserver         42/tcp    name                   <span class="hljs-comment">#Host Name Server</span><br>nameserver         42/udp    name                   <span class="hljs-comment">#Host Name Server</span><br>nicname            43/tcp    whois<br>domain             53/tcp                           <span class="hljs-comment">#Domain Name Server</span><br>domain             53/udp                           <span class="hljs-comment">#Domain Name Server</span><br>bootps             67/udp    dhcps                  <span class="hljs-comment">#Bootstrap Protocol Server</span><br>bootpc             68/udp    dhcpc                  <span class="hljs-comment">#Bootstrap Protocol Client</span><br>tftp               69/udp                           <span class="hljs-comment">#Trivial File Transfer</span><br>gopher             70/tcp<br>finger             79/tcp<br>http               80/tcp    www www-http           <span class="hljs-comment">#World Wide Web</span><br>hosts2-ns          81/tcp                           <span class="hljs-comment">#HOSTS2 Name Server</span><br>hosts2-ns          81/udp                           <span class="hljs-comment">#HOSTS2 Name Server</span><br>kerberos           88/tcp    krb5 kerberos-sec      <span class="hljs-comment">#Kerberos</span><br>kerberos           88/udp    krb5 kerberos-sec      <span class="hljs-comment">#Kerberos</span><br>hostname          101/tcp    hostnames              <span class="hljs-comment">#NIC Host Name Server</span><br>iso-tsap          102/tcp                           <span class="hljs-comment">#ISO-TSAP Class 0</span><br>rtelnet           107/tcp                           <span class="hljs-comment">#Remote Telnet Service</span><br>pop2              109/tcp    postoffice             <span class="hljs-comment">#Post Office Protocol - Version 2</span><br>pop3              110/tcp                           <span class="hljs-comment">#Post Office Protocol - Version 3</span><br>sunrpc            111/tcp    rpcbind portmap        <span class="hljs-comment">#SUN Remote Procedure Call</span><br>sunrpc            111/udp    rpcbind portmap        <span class="hljs-comment">#SUN Remote Procedure Call</span><br>auth              113/tcp    ident tap              <span class="hljs-comment">#Identification Protocol</span><br>uucp-path         117/tcp<br>sqlserv           118/tcp                           <span class="hljs-comment">#SQL Services</span><br>nntp              119/tcp    usenet                 <span class="hljs-comment">#Network News Transfer Protocol</span><br>ntp               123/udp                           <span class="hljs-comment">#Network Time Protocol</span><br>epmap             135/tcp    loc-srv                <span class="hljs-comment">#DCE endpoint resolution</span><br>epmap             135/udp    loc-srv                <span class="hljs-comment">#DCE endpoint resolution</span><br>netbios-ns        137/tcp    nbname                 <span class="hljs-comment">#NETBIOS Name Service</span><br>netbios-ns        137/udp    nbname                 <span class="hljs-comment">#NETBIOS Name Service</span><br>netbios-dgm       138/udp    nbdatagram             <span class="hljs-comment">#NETBIOS Datagram Service</span><br>netbios-ssn       139/tcp    nbsession              <span class="hljs-comment">#NETBIOS Session Service</span><br>imap              143/tcp    imap4                  <span class="hljs-comment">#Internet Message Access Protocol</span><br>sql-net           150/tcp<br>sqlsrv            156/tcp<br>pcmail-srv        158/tcp                           <span class="hljs-comment">#PCMail Server</span><br>snmp              161/udp                           <span class="hljs-comment">#SNMP</span><br>snmptrap          162/udp    snmp-trap              <span class="hljs-comment">#SNMP trap</span><br>print-srv         170/tcp                           <span class="hljs-comment">#Network PostScript</span><br>bgp               179/tcp                           <span class="hljs-comment">#Border Gateway Protocol</span><br>irc               194/tcp                           <span class="hljs-comment">#Internet Relay Chat Protocol        </span><br>ipx               213/udp                           <span class="hljs-comment">#IPX over IP</span><br>rtsps             322/tcp<br>rtsps             322/udp<br>mftp              349/tcp<br>mftp              349/udp<br>ldap              389/tcp                           <span class="hljs-comment">#Lightweight Directory Access Protocol</span><br>https             443/tcp    MCom                   <span class="hljs-comment">#HTTP over TLS/SSL</span><br>https             443/udp    MCom                   <span class="hljs-comment">#HTTP over TLS/SSL</span><br>microsoft-ds      445/tcp<br>microsoft-ds      445/udp<br>kpasswd           464/tcp                           <span class="hljs-comment"># Kerberos (v5)</span><br>kpasswd           464/udp                           <span class="hljs-comment"># Kerberos (v5)</span><br>isakmp            500/udp    ike                    <span class="hljs-comment">#Internet Key Exchange</span><br>crs               507/tcp                           <span class="hljs-comment">#Content Replication System</span><br>crs               507/udp                           <span class="hljs-comment">#Content Replication System</span><br><span class="hljs-built_in">exec</span>              512/tcp                           <span class="hljs-comment">#Remote Process Execution</span><br>biff              512/udp    comsat<br>login             513/tcp                           <span class="hljs-comment">#Remote Login</span><br>who               513/udp    whod<br>cmd               514/tcp    shell<br>syslog            514/udp<br>printer           515/tcp    spooler<br>talk              517/udp<br>ntalk             518/udp<br>efs               520/tcp                           <span class="hljs-comment">#Extended File Name Server</span><br>router            520/udp    route routed<br>ulp               522/tcp    <br>ulp               522/udp    <br>timed             525/udp    timeserver<br>tempo             526/tcp    newdate<br>irc-serv          529/tcp<br>irc-serv          529/udp<br>courier           530/tcp    rpc<br>conference        531/tcp    chat<br>netnews           532/tcp    readnews<br>netwall           533/udp                           <span class="hljs-comment">#For emergency broadcasts</span><br>uucp              540/tcp    uucpd<br>klogin            543/tcp                           <span class="hljs-comment">#Kerberos login</span><br>kshell            544/tcp    krcmd                  <span class="hljs-comment">#Kerberos remote shell</span><br>dhcpv6-client     546/tcp                           <span class="hljs-comment">#DHCPv6 Client</span><br>dhcpv6-client     546/udp                           <span class="hljs-comment">#DHCPv6 Client</span><br>dhcpv6-server     547/tcp                           <span class="hljs-comment">#DHCPv6 Server</span><br>dhcpv6-server     547/udp                           <span class="hljs-comment">#DHCPv6 Server</span><br>afpovertcp        548/tcp                           <span class="hljs-comment">#AFP over TCP</span><br>afpovertcp        548/udp                           <span class="hljs-comment">#AFP over TCP</span><br>new-rwho          550/udp    new-who<br>rtsp              554/tcp                           <span class="hljs-comment">#Real Time Stream Control Protocol</span><br>rtsp              554/udp                           <span class="hljs-comment">#Real Time Stream Control Protocol</span><br>remotefs          556/tcp    rfs rfs_server<br>rmonitor          560/udp    rmonitord<br>monitor           561/udp<br>nntps             563/tcp    snntp                  <span class="hljs-comment">#NNTP over TLS/SSL</span><br>nntps             563/udp    snntp                  <span class="hljs-comment">#NNTP over TLS/SSL</span><br>whoami            565/tcp<br>whoami            565/udp<br>ms-shuttle        568/tcp                           <span class="hljs-comment">#Microsoft shuttle</span><br>ms-shuttle        568/udp                           <span class="hljs-comment">#Microsoft shuttle</span><br>ms-rome           569/tcp                           <span class="hljs-comment">#Microsoft rome</span><br>ms-rome           569/udp                           <span class="hljs-comment">#Microsoft rome</span><br>http-rpc-epmap    593/tcp                           <span class="hljs-comment">#HTTP RPC Ep Map</span><br>http-rpc-epmap    593/udp                           <span class="hljs-comment">#HTTP RPC Ep Map</span><br>hmmp-ind          612/tcp                           <span class="hljs-comment">#HMMP Indication</span><br>hmmp-ind          612/udp                           <span class="hljs-comment">#HMMP Indication</span><br>hmmp-op           613/tcp                           <span class="hljs-comment">#HMMP Operation</span><br>hmmp-op           613/udp                           <span class="hljs-comment">#HMMP Operation</span><br>ldaps             636/tcp    sldap                  <span class="hljs-comment">#LDAP over TLS/SSL</span><br>doom              666/tcp                           <span class="hljs-comment">#Doom Id Software</span><br>doom              666/udp                           <span class="hljs-comment">#Doom Id Software</span><br>msexch-routing    691/tcp                           <span class="hljs-comment">#MS Exchange Routing</span><br>msexch-routing    691/udp                           <span class="hljs-comment">#MS Exchange Routing</span><br>kerberos-adm      749/tcp                           <span class="hljs-comment">#Kerberos administration</span><br>kerberos-adm      749/udp                           <span class="hljs-comment">#Kerberos administration</span><br>kerberos-iv       750/udp                           <span class="hljs-comment">#Kerberos version IV</span><br>mdbs_daemon       800/tcp<br>mdbs_daemon       800/udp<br>ftps-data         989/tcp                           <span class="hljs-comment">#FTP data, over TLS/SSL</span><br>ftps              990/tcp                           <span class="hljs-comment">#FTP control, over TLS/SSL</span><br>telnets           992/tcp                           <span class="hljs-comment">#Telnet protocol over TLS/SSL</span><br>imaps             993/tcp                           <span class="hljs-comment">#IMAP4 protocol over TLS/SSL</span><br>ircs              994/tcp                           <span class="hljs-comment">#IRC protocol over TLS/SSL</span><br>pop3s             995/tcp    spop3                  <span class="hljs-comment">#pop3 protocol over TLS/SSL (was spop3)</span><br>pop3s             995/udp    spop3                  <span class="hljs-comment">#pop3 protocol over TLS/SSL (was spop3)</span><br>kpop             1109/tcp                           <span class="hljs-comment">#Kerberos POP</span><br>nfsd-status      1110/tcp                           <span class="hljs-comment">#Cluster status info</span><br>nfsd-keepalive   1110/udp                           <span class="hljs-comment">#Client status info</span><br>nfa              1155/tcp                           <span class="hljs-comment">#Network File Access</span><br>nfa              1155/udp                           <span class="hljs-comment">#Network File Access</span><br>activesync       1034/tcp                           <span class="hljs-comment">#ActiveSync Notifications</span><br>phone            1167/udp                           <span class="hljs-comment">#Conference calling</span><br>opsmgr           1270/tcp                           <span class="hljs-comment">#Microsoft Operations Manager</span><br>opsmgr           1270/udp                           <span class="hljs-comment">#Microsoft Operations Manager</span><br>ms-sql-s         1433/tcp                           <span class="hljs-comment">#Microsoft-SQL-Server </span><br>ms-sql-s         1433/udp                           <span class="hljs-comment">#Microsoft-SQL-Server </span><br>ms-sql-m         1434/tcp                           <span class="hljs-comment">#Microsoft-SQL-Monitor</span><br>ms-sql-m         1434/udp                           <span class="hljs-comment">#Microsoft-SQL-Monitor                </span><br>ms-sna-server    1477/tcp<br>ms-sna-server    1477/udp<br>ms-sna-base      1478/tcp<br>ms-sna-base      1478/udp<br>wins             1512/tcp                           <span class="hljs-comment">#Microsoft Windows Internet Name Service</span><br>wins             1512/udp                           <span class="hljs-comment">#Microsoft Windows Internet Name Service</span><br>ingreslock       1524/tcp    ingres<br>stt              1607/tcp<br>stt              1607/udp<br>l2tp             1701/udp                           <span class="hljs-comment">#Layer Two Tunneling Protocol</span><br>pptconference    1711/tcp<br>pptconference    1711/udp<br>pptp             1723/tcp                           <span class="hljs-comment">#Point-to-point tunnelling protocol</span><br>msiccp           1731/tcp<br>msiccp           1731/udp<br>remote-winsock   1745/tcp<br>remote-winsock   1745/udp<br>ms-streaming     1755/tcp<br>ms-streaming     1755/udp<br>msmq             1801/tcp                           <span class="hljs-comment">#Microsoft Message Queue</span><br>msmq             1801/udp                           <span class="hljs-comment">#Microsoft Message Queue</span><br>radius           1812/udp                           <span class="hljs-comment">#RADIUS authentication protocol</span><br>radacct          1813/udp                           <span class="hljs-comment">#RADIUS accounting protocol</span><br>msnp             1863/tcp<br>msnp             1863/udp<br>ssdp             1900/tcp<br>ssdp             1900/udp<br>close-combat     1944/tcp<br>close-combat     1944/udp<br>nfsd             2049/udp    nfs                    <span class="hljs-comment">#NFS server</span><br>knetd            2053/tcp                           <span class="hljs-comment">#Kerberos de-multiplexor</span><br>mzap             2106/tcp                           <span class="hljs-comment">#Multicast-Scope Zone Announcement Protocol</span><br>mzap             2106/udp                           <span class="hljs-comment">#Multicast-Scope Zone Announcement Protocol</span><br>qwave            2177/tcp                           <span class="hljs-comment">#QWAVE</span><br>qwave            2177/udp                           <span class="hljs-comment">#QWAVE Experiment Port</span><br>directplay       2234/tcp                           <span class="hljs-comment">#DirectPlay</span><br>directplay       2234/udp                           <span class="hljs-comment">#DirectPlay</span><br>ms-olap3         2382/tcp                           <span class="hljs-comment">#Microsoft OLAP 3</span><br>ms-olap3         2382/udp                           <span class="hljs-comment">#Microsoft OLAP 3</span><br>ms-olap4         2383/tcp                           <span class="hljs-comment">#Microsoft OLAP 4</span><br>ms-olap4         2383/udp                           <span class="hljs-comment">#Microsoft OLAP 4</span><br>ms-olap1         2393/tcp                           <span class="hljs-comment">#Microsoft OLAP 1</span><br>ms-olap1         2393/udp                           <span class="hljs-comment">#Microsoft OLAP 1</span><br>ms-olap2         2394/tcp                           <span class="hljs-comment">#Microsoft OLAP 2</span><br>ms-olap2         2394/udp                           <span class="hljs-comment">#Microsoft OLAP 2</span><br>ms-theater       2460/tcp<br>ms-theater       2460/udp<br>wlbs             2504/tcp                           <span class="hljs-comment">#Microsoft Windows Load Balancing Server</span><br>wlbs             2504/udp                           <span class="hljs-comment">#Microsoft Windows Load Balancing Server</span><br>ms-v-worlds      2525/tcp                           <span class="hljs-comment">#Microsoft V-Worlds </span><br>ms-v-worlds      2525/udp                           <span class="hljs-comment">#Microsoft V-Worlds </span><br>sms-rcinfo       2701/tcp                           <span class="hljs-comment">#SMS RCINFO</span><br>sms-rcinfo       2701/udp                           <span class="hljs-comment">#SMS RCINFO</span><br>sms-xfer         2702/tcp                           <span class="hljs-comment">#SMS XFER</span><br>sms-xfer         2702/udp                           <span class="hljs-comment">#SMS XFER</span><br>sms-chat         2703/tcp                           <span class="hljs-comment">#SMS CHAT</span><br>sms-chat         2703/udp                           <span class="hljs-comment">#SMS CHAT</span><br>sms-remctrl      2704/tcp                           <span class="hljs-comment">#SMS REMCTRL</span><br>sms-remctrl      2704/udp                           <span class="hljs-comment">#SMS REMCTRL</span><br>msolap-ptp2      2725/tcp                           <span class="hljs-comment">#MSOLAP PTP2</span><br>msolap-ptp2      2725/udp                           <span class="hljs-comment">#MSOLAP PTP2</span><br>icslap           2869/tcp<br>icslap           2869/udp<br>cifs             3020/tcp<br>cifs             3020/udp<br>xbox             3074/tcp                           <span class="hljs-comment">#Microsoft Xbox game port</span><br>xbox             3074/udp                           <span class="hljs-comment">#Microsoft Xbox game port</span><br>ms-dotnetster    3126/tcp                           <span class="hljs-comment">#Microsoft .NET ster port</span><br>ms-dotnetster    3126/udp                           <span class="hljs-comment">#Microsoft .NET ster port</span><br>ms-rule-engine   3132/tcp                           <span class="hljs-comment">#Microsoft Business Rule Engine Update Service</span><br>ms-rule-engine   3132/udp                           <span class="hljs-comment">#Microsoft Business Rule Engine Update Service</span><br>msft-gc          3268/tcp                           <span class="hljs-comment">#Microsoft Global Catalog</span><br>msft-gc          3268/udp                           <span class="hljs-comment">#Microsoft Global Catalog</span><br>msft-gc-ssl      3269/tcp                           <span class="hljs-comment">#Microsoft Global Catalog with LDAP/SSL</span><br>msft-gc-ssl      3269/udp                           <span class="hljs-comment">#Microsoft Global Catalog with LDAP/SSL</span><br>ms-cluster-net   3343/tcp                           <span class="hljs-comment">#Microsoft Cluster Net</span><br>ms-cluster-net   3343/udp                           <span class="hljs-comment">#Microsoft Cluster Net</span><br>ms-wbt-server    3389/tcp                           <span class="hljs-comment">#MS WBT Server</span><br>ms-wbt-server    3389/udp                           <span class="hljs-comment">#MS WBT Server</span><br>ms-la            3535/tcp                           <span class="hljs-comment">#Microsoft Class Server</span><br>ms-la            3535/udp                           <span class="hljs-comment">#Microsoft Class Server</span><br>pnrp-port        3540/tcp                           <span class="hljs-comment">#PNRP User Port</span><br>pnrp-port        3540/udp                           <span class="hljs-comment">#PNRP User Port</span><br>teredo           3544/tcp                           <span class="hljs-comment">#Teredo Port</span><br>teredo           3544/udp                           <span class="hljs-comment">#Teredo Port</span><br>p2pgroup         3587/tcp                           <span class="hljs-comment">#Peer to Peer Grouping</span><br>p2pgroup         3587/udp                           <span class="hljs-comment">#Peer to Peer Grouping</span><br>ws-discovery     3702/udp                           <span class="hljs-comment">#WS-Discovery</span><br>ws-discovery     3702/tcp                           <span class="hljs-comment">#WS-Discovery</span><br>dvcprov-port     3776/tcp                           <span class="hljs-comment">#Device Provisioning Port</span><br>dvcprov-port     3776/udp                           <span class="hljs-comment">#Device Provisioning Port</span><br>msfw-control     3847/tcp                           <span class="hljs-comment">#Microsoft Firewall Control</span><br>msdts1           3882/tcp                           <span class="hljs-comment">#DTS Service Port</span><br>sdp-portmapper   3935/tcp                           <span class="hljs-comment">#SDP Port Mapper Protocol</span><br>sdp-portmapper   3935/udp                           <span class="hljs-comment">#SDP Port Mapper Protocol</span><br>net-device       4350/tcp                           <span class="hljs-comment">#Net Device</span><br>net-device       4350/udp                           <span class="hljs-comment">#Net Device</span><br>ipsec-msft       4500/tcp                           <span class="hljs-comment">#Microsoft IPsec NAT-T</span><br>ipsec-msft       4500/udp                           <span class="hljs-comment">#Microsoft IPsec NAT-T</span><br>llmnr            5355/tcp                           <span class="hljs-comment">#LLMNR </span><br>llmnr            5355/udp                           <span class="hljs-comment">#LLMNR </span><br>wsd              5357/tcp                           <span class="hljs-comment">#Web Services on devices </span><br>wsd              5358/tcp                           <span class="hljs-comment">#Web Services on devices</span><br>rrac             5678/tcp                           <span class="hljs-comment">#Remote Replication Agent Connection</span><br>rrac             5678/udp                           <span class="hljs-comment">#Remote Replication Agent Connection</span><br>dccm             5679/tcp                           <span class="hljs-comment">#Direct Cable Connect Manager</span><br>dccm             5679/udp                           <span class="hljs-comment">#Direct Cable Connect Manager</span><br>ms-licensing     5720/tcp                           <span class="hljs-comment">#Microsoft Licensing</span><br>ms-licensing     5720/udp                           <span class="hljs-comment">#Microsoft Licensing </span><br>directplay8      6073/tcp                           <span class="hljs-comment">#DirectPlay8</span><br>directplay8      6073/udp                           <span class="hljs-comment">#DirectPlay8</span><br>ms-do            7680/tcp                           <span class="hljs-comment">#Microsoft Delivery Optimization</span><br>ms-do            7680/udp                           <span class="hljs-comment">#Microsoft Delivery Optimization</span><br>man              9535/tcp                           <span class="hljs-comment">#Remote Man Server</span><br>rasadv           9753/tcp<br>rasadv           9753/udp<br>imip-channels   11320/tcp                           <span class="hljs-comment">#IMIP Channels Port</span><br>imip-channels   11320/udp                           <span class="hljs-comment">#IMIP Channels Port</span><br>directplaysrvr  47624/tcp                           <span class="hljs-comment">#Direct Play Server</span><br>directplaysrvr  47624/udp                           <span class="hljs-comment">#Direct Play Server</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows中常用的一些服务和默认的端口。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>NTP和Chrony以及常用NTP时间同步服务器</title>
    <link href="https://tinychen.com/20191026-ntp-servers/"/>
    <id>https://tinychen.com/20191026-ntp-servers/</id>
    <published>2019-10-26T07:00:00.000Z</published>
    <updated>2019-10-26T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>国内常用的NTP时间服务器，可以用于Linux中的NTP时间同步或者是chrony时间同步。</p><span id="more"></span><h1 id="1、NTP时间服务器域名"><a href="#1、NTP时间服务器域名" class="headerlink" title="1、NTP时间服务器域名"></a>1、NTP时间服务器域名</h1><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 国家授时中心</span><br>ntp.ntsc.ac.cn<br><br><span class="hljs-meta"># 阿里云</span><br>ntp.aliyun.com<br><br><span class="hljs-meta"># 北京邮电大学</span><br>s1a.time.edu.cn <br><br><span class="hljs-meta"># 清华大学</span><br>s2b.time.edu.cn <br><br><span class="hljs-meta"># 北京邮电大学</span><br>s2c.time.edu.cn <br><br><span class="hljs-meta"># 西南地区网络中心</span><br>s2d.time.edu.cn <br><br><span class="hljs-meta"># 西北地区网络中心</span><br>s2e.time.edu.cn <br><br><span class="hljs-meta"># 东北地区网络中心</span><br>s2f.time.edu.cn <br></code></pre></div></td></tr></table></figure><h1 id="2、使用crontab-ntpdate同步"><a href="#2、使用crontab-ntpdate同步" class="headerlink" title="2、使用crontab+ntpdate同步"></a>2、使用crontab+ntpdate同步</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用root用户每小时同步一次</span><br>crontab -e -u root<br>* */1 * * * (/usr/sbin/ntpdate ntp.ntsc.ac.cn)<br></code></pre></div></td></tr></table></figure><h1 id="3、使用chrony同步"><a href="#3、使用chrony同步" class="headerlink" title="3、使用chrony同步"></a>3、使用chrony同步</h1><p>此处我们使用CentOS8作为展示。</p><p><img src="https://resource.tinychen.com/blog/20191108/3CQLIRpx3B6r.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum安装chrony</span><br>yum install chrony -y<br><br><span class="hljs-comment"># 设置开机启动并开启chony并查看运行状态</span><br>systemctl <span class="hljs-built_in">enable</span> chronyd.service<br>systemctl start chronyd.service<br>systemctl status chronyd.service<br></code></pre></div></td></tr></table></figure><p>chrony的配置文件目录位于<code>/etc/chrony.conf</code>，我们将里面默认的服务器注释掉，换成阿里云和国家时间中心的服务器。</p><p><img src="https://resource.tinychen.com/blog/20191108/Cq7erDf8XvOt.png"></p><p>然后我们重启服务查看一下状态</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 重启服务使配置文件生效</span><br>systemctl restart chronyd.service<br><br><span class="hljs-comment"># 查看chrony的ntp服务器状态</span><br>chronyc sourcestats -v<br>chronyc sources -v<br><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20191108/MS35bzfuDDom.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地时间</span><br>timedatectl<br>hwclock<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20191108/TVEHiCfMKfpL.png"></p><p>如上图所示显示<code>System clock synchronized</code>状态为<code>yes</code>并且<code>NTP service</code>显示为<code>active</code>则说明已经配置成功了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;国内常用的NTP时间服务器，可以用于Linux中的NTP时间同步或者是chrony时间同步。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8上启动系统web管理工具cockpit</title>
    <link href="https://tinychen.com/20191025-centos8-use-cockpit/"/>
    <id>https://tinychen.com/20191025-centos8-use-cockpit/</id>
    <published>2019-10-25T07:00:00.000Z</published>
    <updated>2019-10-25T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8和RHEL8中新加入了一项功能<code>cockpit</code>，可以使用web浏览器来管理系统的一些常用状态，比如用户管理、软件更新、SELinux以及ssh等操作。</p><span id="more"></span><p>首先我们使用<code>yum</code>来安装<code>cockpit</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install cockpit -y<br></code></pre></div></td></tr></table></figure><p>安装完成之后我们设置开机启动，同时注意需要在防火墙里面设置放行端口，<code>cockpit</code>默认使用的是<code>9090</code>端口，在CentOS8中的<code>firewall</code>里面有<code>cockpit</code>这个<code>service</code>，所以我们不需要自己手动指定端口放行。</p><blockquote><p>需要特别注意的是这里的服务是<code>cockpit.socket</code>而不是<code>cockpit.service</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> cockpit.socket<br><span class="hljs-comment"># 开启服务</span><br>systemctl start cockpit.socket<br><span class="hljs-comment"># 在防火墙中永久放行服务</span><br>firewall-cmd --permanent --add-service=cockpit<br><span class="hljs-comment"># 重启防火墙</span><br>firewall-cmd --reload<br><span class="hljs-comment"># 查看是否放行成功</span><br>firewall-cmd --list-all<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20191109/CjWPtcc0C8Jh.png"></p><p>查看运行状态</p><p><img src="https://resource.tinychen.com/blog/20191109/sJj8mJYlfI5k.png"></p><p>再次使用ssh登录的时候我们就会看到终端上也会提示我们可以使用web控制台进行管理。</p><p><img src="https://resource.tinychen.com/blog/20191109/hk1wTVssorCR.png"></p><p>我们使用浏览器打开来看看。可以使用IP或者域名来进行登录，注意需要使用https协议并且指定端口为9090。</p><p><img src="https://resource.tinychen.com/blog/20191109/LvlIwPMH1C7h.png"></p><p>这里浏览器会提示我们不安全，因为使用的是https协议，而我们并没有导入权威CA颁发的证书，如果有需要的话也可以在<code>/etc/cockpit/ws-certs.d</code>这个目录下面导入cert证书来进行认证。同时我们可以使用<code>sudo remotectl certificate</code>命令来查看正在使用的是什么证书</p><p>接着我们使用系统中的用户账号密码登录。</p><p><img src="https://resource.tinychen.com/blog/20191109/q8igqLYDrTeG.png"></p><p>登录进去之后可以查看系统的各种状态和服务，也可以在浏览器中使用终端进行更多操作。</p><p><img src="https://resource.tinychen.com/blog/20191109/PL8Xo1dCI0xN.png"></p><p><img src="https://resource.tinychen.com/blog/20191109/NL4ljV1Y1EcX.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8和RHEL8中新加入了一项功能&lt;code&gt;cockpit&lt;/code&gt;，可以使用web浏览器来管理系统的一些常用状态，比如用户管理、软件更新、SELinux以及ssh等操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8yum源替换为国内镜像源</title>
    <link href="https://tinychen.com/20191024-centos8-replace-yum-source/"/>
    <id>https://tinychen.com/20191024-centos8-replace-yum-source/</id>
    <published>2019-10-24T07:00:00.000Z</published>
    <updated>2019-10-24T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8中主要的内置yum源、elrepo源、epel源和rpmfusion源的国内镜像版本，直接复制替换即可使用。</p><span id="more"></span><h1 id="1、CentOS8内置yum源"><a href="#1、CentOS8内置yum源" class="headerlink" title="1、CentOS8内置yum源"></a>1、CentOS8内置yum源</h1><p>这里使用的是网易163的镜像源和清华的镜像源。</p><p>其中<code>CentOS-Debug.repo</code>、<code>CentOS-Media.repo</code>、<code>CentOS-Sources.repo</code>、<code>CentOS-Vault.repo</code>这四个repo无需替换。</p><h2 id="CentOS-AppStream-repo"><a href="#CentOS-AppStream-repo" class="headerlink" title="CentOS-AppStream.repo"></a>CentOS-AppStream.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-AppStream.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br>[AppStream]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - AppStream<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/AppStream/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/AppStream/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h2 id="CentOS-Base-repo"><a href="#CentOS-Base-repo" class="headerlink" title="CentOS-Base.repo"></a>CentOS-Base.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-Base.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br>[BaseOS]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - Base<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/BaseOS/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/BaseOS/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h2 id="CentOS-centosplus-repo"><a href="#CentOS-centosplus-repo" class="headerlink" title="CentOS-centosplus.repo"></a>CentOS-centosplus.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-centosplus.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment">#additional packages that extend functionality of existing packages</span><br>[centosplus]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - Plus<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/centosplus/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/centosplus/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br><br><br></code></pre></div></td></tr></table></figure><h2 id="CentOS-CR-repo"><a href="#CentOS-CR-repo" class="headerlink" title="CentOS-CR.repo"></a>CentOS-CR.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-CR.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The Continuous Release ( CR )  repository contains rpms that are due in the next</span><br><span class="hljs-comment"># release for a specific CentOS Version ( eg. next release in CentOS-8 ); these rpms</span><br><span class="hljs-comment"># are far less tested, with no integration checking or update path testing having</span><br><span class="hljs-comment"># taken place. They are still built from the upstream sources, but might not map</span><br><span class="hljs-comment"># to an exact upstream distro release.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># These packages are made available soon after they are built, for people willing</span><br><span class="hljs-comment"># to test their environments, provide feedback on content for the next release, and</span><br><span class="hljs-comment"># for people looking for early-access to next release content.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The CR repo is shipped in a disabled state by default; its important that users</span><br><span class="hljs-comment"># understand the implications of turning this on.</span><br><span class="hljs-comment">#</span><br><br>[cr]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - cr<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=cr&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/cr/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/cr/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h2 id="CentOS-Extras-repo"><a href="#CentOS-Extras-repo" class="headerlink" title="CentOS-Extras.repo"></a>CentOS-Extras.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-Extras.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment">#additional packages that may be useful</span><br>[extras]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - Extras<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/extras/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h2 id="CentOS-fasttrack-repo"><a href="#CentOS-fasttrack-repo" class="headerlink" title="CentOS-fasttrack.repo"></a>CentOS-fasttrack.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS-fasttrack.repo</span><br><br>[fasttrack]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - fasttrack<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=fasttrack&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/fasttrack/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/fasttrack/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h2 id="CentOS-HA-repo"><a href="#CentOS-HA-repo" class="headerlink" title="CentOS-HA.repo"></a>CentOS-HA.repo</h2><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># CentOS-HA.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-section">[HighAvailability]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-variable">$releasever</span> - HA<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=HighAvailability&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/HighAvailability/$basearch/os/</span><br><span class="hljs-attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="hljs-variable">$releasever</span>/HighAvailability/<span class="hljs-variable">$basearch</span>/os/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="hljs-literal">off</span>icial<br><br><br></code></pre></div></td></tr></table></figure><h2 id="CentOS-PowerTools-repo"><a href="#CentOS-PowerTools-repo" class="headerlink" title="CentOS-PowerTools.repo"></a>CentOS-PowerTools.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS-PowerTools.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br>[PowerTools]<br>name=CentOS-<span class="hljs-variable">$releasever</span> - PowerTools<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=PowerTools&amp;infra=$infra</span><br><span class="hljs-comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/PowerTools/$basearch/os/</span><br>baseurl=http://mirrors.163.com/centos/<span class="hljs-variable">$releasever</span>/PowerTools/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<br></code></pre></div></td></tr></table></figure><h1 id="2、elrepo源"><a href="#2、elrepo源" class="headerlink" title="2、elrepo源"></a>2、elrepo源</h1><p>这里使用的是中科大的镜像源</p><h2 id="elrepo-repo"><a href="#elrepo-repo" class="headerlink" title="elrepo.repo"></a>elrepo.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### Name: ELRepo.org Community Enterprise Linux Repository for el8</span><br><span class="hljs-comment">### URL: http://elrepo.org/</span><br><br>[elrepo]<br>name=ELRepo.org Community Enterprise Linux Repository - el8<br>baseurl=https://mirrors.ustc.edu.cn/elrepo/elrepo/el8/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#baseurl=http://elrepo.org/linux/elrepo/el8/$basearch/</span><br><span class="hljs-comment">#http://mirrors.coreix.net/elrepo/elrepo/el8/$basearch/</span><br><span class="hljs-comment">#http://jur-linux.org/download/elrepo/elrepo/el8/$basearch/</span><br><span class="hljs-comment">#http://repos.lax-noc.com/elrepo/elrepo/el8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.elrepo.org/mirrors-elrepo.el8</span><br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org<br>protect=0<br><br>[elrepo-testing]<br>name=ELRepo.org Community Enterprise Linux Testing Repository - el8<br>baseurl=https://mirrors.ustc.edu.cn/elrepo/testing/el8/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#baseurl=http://elrepo.org/linux/testing/el8/$basearch/</span><br><span class="hljs-comment">#http://mirrors.coreix.net/elrepo/testing/el8/$basearch/</span><br><span class="hljs-comment">#http://jur-linux.org/download/elrepo/testing/el8/$basearch/</span><br><span class="hljs-comment">#http://repos.lax-noc.com/elrepo/testing/el8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.elrepo.org/mirrors-elrepo-testing.el8</span><br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org<br>protect=0<br><br>[elrepo-kernel]<br>name=ELRepo.org Community Enterprise Linux Kernel Repository - el8<br>baseurl=https://mirrors.ustc.edu.cn/elrepo/kernel/el8/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#baseurl=http://elrepo.org/linux/kernel/el8/$basearch/</span><br><span class="hljs-comment">#http://mirrors.coreix.net/elrepo/kernel/el8/$basearch/</span><br><span class="hljs-comment">#http://jur-linux.org/download/elrepo/kernel/el8/$basearch/</span><br><span class="hljs-comment">#http://repos.lax-noc.com/elrepo/kernel/el8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.elrepo.org/mirrors-elrepo-kernel.el8</span><br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org<br>protect=0<br><br>[elrepo-extras]<br>name=ELRepo.org Community Enterprise Linux Extras Repository - el8<br>baseurl=https://mirrors.ustc.edu.cn/elrepo/extras/el8/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#baseurl=http://elrepo.org/linux/extras/el8/$basearch/</span><br><span class="hljs-comment">#http://mirrors.coreix.net/elrepo/extras/el8/$basearch/</span><br><span class="hljs-comment">#http://jur-linux.org/download/elrepo/extras/el8/$basearch/</span><br><span class="hljs-comment">#http://repos.lax-noc.com/elrepo/extras/el8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.elrepo.org/mirrors-elrepo-extras.el8</span><br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org<br>protect=0<br></code></pre></div></td></tr></table></figure><h1 id="3、epel源"><a href="#3、epel源" class="headerlink" title="3、epel源"></a>3、epel源</h1><p>这里使用的是阿里云的epel源</p><h2 id="epel-modular-repo"><a href="#epel-modular-repo" class="headerlink" title="epel-modular.repo"></a>epel-modular.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[epel-modular]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Modular/$basearch</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-modular-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Modular/<span class="hljs-variable">$basearch</span><br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br><br>[epel-modular-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Modular/$basearch/debug</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-modular-debug-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Modular/<span class="hljs-variable">$basearch</span>/debug<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br>[epel-modular-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Modular/SRPMS</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-modular-source-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Modular/SRPMS<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br></code></pre></div></td></tr></table></figure><h2 id="epel-playground-repo"><a href="#epel-playground-repo" class="headerlink" title="epel-playground.repo"></a>epel-playground.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[epel-playground]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Playground - <span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/playground/$releasever/Everything/$basearch/os</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=playground-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/playground/8/Everything/<span class="hljs-variable">$basearch</span>/os<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br><br>[epel-playground-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Playground - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/playground/$releasever/Everything/$basearch/debug</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=playground-debug-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/playground/8/Everything/<span class="hljs-variable">$basearch</span>/debug<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br>[epel-playground-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Playground - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/playground/$releasever/Everything/source/tree/</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=playground-source-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/playground/8/Everything/<span class="hljs-built_in">source</span>/tree/<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br></code></pre></div></td></tr></table></figure><h2 id="epel-testing-modular-repo"><a href="#epel-testing-modular-repo" class="headerlink" title="epel-testing-modular.repo"></a>epel-testing-modular.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[epel-testing-modular]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Modular/$basearch</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-modular-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Modular/<span class="hljs-variable">$basearch</span><br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br><br>[epel-testing-modular-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Modular/$basearch/debug</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-modular-debug-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Modular/<span class="hljs-variable">$basearch</span>/debug<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br>[epel-testing-modular-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux Modular <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Modular/SRPMS</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-modular-source-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Modular/SRPMS<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br></code></pre></div></td></tr></table></figure><h2 id="epel-testing-repo"><a href="#epel-testing-repo" class="headerlink" title="epel-testing.repo"></a>epel-testing.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[epel-testing]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Everything/$basearch</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Everything/<span class="hljs-variable">$basearch</span><br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br><br>[epel-testing-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Everything/$basearch/debug</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-debug-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Everything/<span class="hljs-variable">$basearch</span>/debug<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br>[epel-testing-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - Testing - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/testing/$releasever/Everything/SRPMS</span><br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-source-epel$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>baseurl=https://mirrors.aliyun.com/epel/testing/8/Everything/SRPMS<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1     <br></code></pre></div></td></tr></table></figure><h2 id="epel-repo"><a href="#epel-repo" class="headerlink" title="epel.repo"></a>epel.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[epel]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Everything/$basearch</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Everything/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br><br>[epel-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Everything/$basearch/debug</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Everything/<span class="hljs-variable">$basearch</span>/debug/<br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br><br>[epel-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux <span class="hljs-variable">$releasever</span> - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-comment">#baseurl=https://download.fedoraproject.org/pub/epel/$releasever/Everything/SRPMS</span><br>baseurl=https://mirrors.aliyun.com/epel/8/Everything/SRPMS/<br><span class="hljs-comment">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-source-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<br>gpgcheck=1<br></code></pre></div></td></tr></table></figure><h1 id="4、rpmfusion源"><a href="#4、rpmfusion源" class="headerlink" title="4、rpmfusion源"></a>4、rpmfusion源</h1><p>这里使用的是清华的rpmfusion镜像源</p><h2 id="rpmfusion-free-updates-testing-repo"><a href="#rpmfusion-free-updates-testing-repo" class="headerlink" title="rpmfusion-free-updates-testing.repo"></a>rpmfusion-free-updates-testing.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[rpmfusion-free-updates-testing]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Test Updates<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/testing/8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-testing-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/testing/8/<span class="hljs-variable">$basearch</span>/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br>[rpmfusion-free-updates-testing-debuginfo]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Test Updates Debug<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/testing/8/$basearch/debug/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-testing-debug-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/testing/8/<span class="hljs-variable">$basearch</span>/debug/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br>[rpmfusion-free-updates-testing-source]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Test Updates Source<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/testing/8/SRPMS/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-testing-source-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/testing/8/SRPMS/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br></code></pre></div></td></tr></table></figure><h2 id="rpmfusion-free-updates-repo"><a href="#rpmfusion-free-updates-repo" class="headerlink" title="rpmfusion-free-updates.repo"></a>rpmfusion-free-updates.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[rpmfusion-free-updates]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Updates<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-released-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/8/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br>[rpmfusion-free-updates-debuginfo]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Updates Debug<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/8/$basearch/debug/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-released-debug-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/8/<span class="hljs-variable">$basearch</span>/debug/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br>[rpmfusion-free-updates-source]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Free - Updates Source<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/free/el/updates/8/SRPMS/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=free-el-updates-released-source-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/free/el/updates/8/SRPMS/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-8<br><br></code></pre></div></td></tr></table></figure><h2 id="rpmfusion-nonfree-updates-testing-repo"><a href="#rpmfusion-nonfree-updates-testing-repo" class="headerlink" title="rpmfusion-nonfree-updates-testing.repo"></a>rpmfusion-nonfree-updates-testing.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[rpmfusion-nonfree-updates-testing]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Test Updates<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/testing/8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-testing-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/testing/8/<span class="hljs-variable">$basearch</span>/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br><br>[rpmfusion-nonfree-updates-testing-debuginfo]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Test Updates Debug<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/testing/8/$basearch/debug/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-testing-debug-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/testing/8/<span class="hljs-variable">$basearch</span>/debug/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br><br>[rpmfusion-nonfree-updates-testing-source]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Test Updates Source<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/testing/8/SRPMS/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-testing-source-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/testing/8/SRPMS/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br></code></pre></div></td></tr></table></figure><h2 id="rpmfusion-nonfree-updates-repo"><a href="#rpmfusion-nonfree-updates-repo" class="headerlink" title="rpmfusion-nonfree-updates.repo"></a>rpmfusion-nonfree-updates.repo</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[rpmfusion-nonfree-updates]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Updates<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/8/$basearch/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-released-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/8/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br><br>[rpmfusion-nonfree-updates-debuginfo]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Updates Debug<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/8/$basearch/debug/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-released-debug-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/8/<span class="hljs-variable">$basearch</span>/debug/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br><br>[rpmfusion-nonfree-updates-source]<br>name=RPM Fusion <span class="hljs-keyword">for</span> EL 8 - Nonfree - Updates Source<br><span class="hljs-comment">#baseurl=http://download1.rpmfusion.org/nonfree/el/updates/8/SRPMS/</span><br><span class="hljs-comment">#mirrorlist=http://mirrors.rpmfusion.org/mirrorlist?repo=nonfree-el-updates-released-source-8&amp;arch=$basearch</span><br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/rpmfusion/nonfree/el/updates/8/SRPMS/<br>enabled=0<br><span class="hljs-built_in">type</span>=rpm-md<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-el-8<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8中主要的内置yum源、elrepo源、epel源和rpmfusion源的国内镜像版本，直接复制替换即可使用。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>配置bash补全忽略大小写</title>
    <link href="https://tinychen.com/20191023-bash-completion-ignore-case/"/>
    <id>https://tinychen.com/20191023-bash-completion-ignore-case/</id>
    <published>2019-10-23T07:00:00.000Z</published>
    <updated>2019-10-23T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux上使用bash补全的时候忽略大小写。</p><span id="more"></span><p>一般在centos和ubuntu中使用bash的时候，都会使用<code>bash-completion</code>来进行自动补全命令，在默认情况下，补全是区分大小写的，关闭区分大小写功能只需要在<code>inputrc</code>文件中修改一下即可。</p><p>如果是最小化安装，可能没有安装这个补全工具。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在centos中使用yum安装</span><br>yum install bash-completion -y<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20191107/k2pvgEqxfS1C.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在/etc/inputrc中添加使全局所有用户生效</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;set completion-ignore-case on&#x27;</span> &gt;&gt; /etc/inputrc<br><br><span class="hljs-comment"># 对于个别用户，则可以在用户home目录下添加</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;set completion-ignore-case on&#x27;</span> &gt;&gt; ~/.inputrc<br></code></pre></div></td></tr></table></figure><p>添加完成之后我们重新启动bash命令行或者是重新登录一下就可以生效了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Linux上使用bash补全的时候忽略大小写。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中安装VisualStudioCode</title>
    <link href="https://tinychen.com/20191022-centos-install-vsc/"/>
    <id>https://tinychen.com/20191022-centos-install-vsc/</id>
    <published>2019-10-22T07:00:00.000Z</published>
    <updated>2019-10-22T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS上使用yum repo安装VSC，实测CentOS7和CentOS8均可正常安装。</p><span id="more"></span><p>VSC的安装非常简单，因为微软官方有提供yum repo，因此我们直接添加repo然后使用yum安装即可，注意在CentOS8中的yum实际上已经被替换成了dnf，所以使用yum或者是dnf都是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 导入gpgkey</span><br>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc<br><span class="hljs-comment"># 新建repo文件</span><br>sudo sh -c <span class="hljs-string">&#x27;echo -e &quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#x27;</span><br><span class="hljs-comment"># 更新repo list</span><br>sudo yum check-update<br><span class="hljs-comment"># 安装vsc</span><br>sudo yum install code<br></code></pre></div></td></tr></table></figure><p>VSC官网提供了非常详细的安装教程，需要的同学可以点击<a href="https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions">这里查看</a>。下面只贴出安装记录。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@tiny-studio ~]<span class="hljs-comment"># sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br>[root@tiny-studio ~]<span class="hljs-comment"># sudo sh -c &#x27;echo -e &quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#x27;</span><br><br><br>[root@tiny-studio ~]<span class="hljs-comment"># cat /etc/yum.repos.d/vscode.repo </span><br>[code]<br>name=Visual Studio Code<br>baseurl=https://packages.microsoft.com/yumrepos/vscode<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://packages.microsoft.com/keys/microsoft.asc<br><br>[root@tiny-studio ~]<span class="hljs-comment"># sudo dnf check-update</span><br>Visual Studio Code                                                              122 kB/s | 2.2 MB     00:18    <br><br>[root@tiny-studio ~]<span class="hljs-comment"># dnf install code</span><br><br>依赖关系解决。<br>================================================================================================================<br><br> 软件包               架构                   版本                                    仓库                  大小<br>================================================================================================================<br><br>Installing:<br> code                 x86_64                 1.39.2-1571154220.el7                   code                  77 M<br><br>事务概要<br>================================================================================================================<br><br>安装  1 软件包<br><br>总下载：77 M<br>安装大小：230 M<br>确定吗？[y/N]： y<br>下载软件包：<br><br>code-1.39.2-1571154220.el7.x86_64.rpm                                           4.5 MB/s |  77 MB     00:17    <br>----------------------------------------------------------------------------------------------------------------<br><br>总计                                                                            4.5 MB/s |  77 MB     00:17     <br>运行事务检查<br>事务检查成功。<br>运行事务测试<br>事务测试成功。<br>运行事务<br>  准备中      :                                                                                             1/1 <br>  Installing  : code-1.39.2-1571154220.el7.x86_64                                                           1/1 <br>  运行脚本    : code-1.39.2-1571154220.el7.x86_64                                                           1/1 <br>  验证        : code-1.39.2-1571154220.el7.x86_64                                                           1/1 <br><br>已安装:<br>  code-1.39.2-1571154220.el7.x86_64                                                                             <br><br>完毕！<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS上使用yum repo安装VSC，实测CentOS7和CentOS8均可正常安装。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中安装wps</title>
    <link href="https://tinychen.com/20191020-centos-install-wps/"/>
    <id>https://tinychen.com/20191020-centos-install-wps/</id>
    <published>2019-10-20T07:00:00.000Z</published>
    <updated>2019-10-20T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS上使用rpm安装wps并导入相关的缺失字体,实测CentOS7和8均可正常安装。</p><span id="more"></span><h1 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h1><p>wps官网的下载地址： <a href="https://www.wps.cn/product/wpslinux">https://www.wps.cn/product/wpslinux</a> </p><p>对于CentOS，我们需要下载rpm格式的安装包。</p><p><img src="https://resource.tinychen.com/blog/20191031/jq51RqXIIjrr.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 定位到下载目录</span><br><span class="hljs-built_in">cd</span> /home/tinychen/Downloads/<br><br><span class="hljs-comment"># 对安装包权限进行修改，使所有用户获取x权限（执行权限）</span><br>sudo chmod a+x wps-office-11.1.0.8865-1.x86_64.rpm <br><br><span class="hljs-comment"># 先使用yum安装所需要的库</span><br>sudo yum install libGLU<br><br><span class="hljs-comment"># 使用rpm命令进行安装</span><br>sudo rpm -ivh wps-office-11.1.0.8865-1.x86_64.rpm <br></code></pre></div></td></tr></table></figure><h1 id="2-、导入字体"><a href="#2-、导入字体" class="headerlink" title="2 、导入字体"></a>2 、导入字体</h1><p>字体的下载连接：</p><p>链接：<a href="https://pan.baidu.com/s/1Dth_WFtphSuKnIpDcTWT_Q">https://pan.baidu.com/s/1Dth_WFtphSuKnIpDcTWT_Q</a><br>提取码：oc#zs </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载完成后使用unzip命令解压</span><br>unzip -d ./wps_symbol_fonts wps_symbol_fonts.zip<br><br><span class="hljs-comment"># 定位到wps字体存放目录</span><br><span class="hljs-built_in">cd</span> /usr/share/fonts/wps-office/<br><br><span class="hljs-comment"># 将下载解压的字体复制到该目录中</span><br>cp /home/tinychen/Downloads/wps_symbol_fonts/* .<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS上使用rpm安装wps并导入相关的缺失字体,实测CentOS7和8均可正常安装。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中安装特定版本的docker</title>
    <link href="https://tinychen.com/20190912-centos-install-docker/"/>
    <id>https://tinychen.com/20190912-centos-install-docker/</id>
    <published>2019-09-12T07:00:00.000Z</published>
    <updated>2019-09-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7和CentOS8上卸载已安装的docker并安装特定版本的docker。</p><span id="more"></span><h1 id="1、卸载已存在版本"><a href="#1、卸载已存在版本" class="headerlink" title="1、卸载已存在版本"></a>1、卸载已存在版本</h1><p>首先我们卸载已经安装的版本</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">yum remove docker-ce docker-ce-cli containerd.io<br><br>yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190912/AXP894UtJxYY.png"></p><h1 id="2、导入yum源"><a href="#2、导入yum源" class="headerlink" title="2、导入yum源"></a>2、导入yum源</h1><p>导入docker官方提供的yum源，如果网络不好使用官网yum源比较慢的同学也可以使用阿里云提供的镜像yum源。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><br>sudo yum-config-manager --add-repo  https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>大家可以直接复制下面的yum源直接保存到<code>/etc/yum.repo.d/</code>目录下。</p><p>下面的这个是阿里云的镜像源版本：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[docker-ce-stable]<br>name=Docker CE Stable - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>stable<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-stable-debuginfo]<br>name=Docker CE Stable - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>stable<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-stable-source]<br>name=Docker CE Stable - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>stable<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge]<br>name=Docker CE Edge - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge-debuginfo]<br>name=Docker CE Edge - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge-source]<br>name=Docker CE Edge - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test]<br>name=Docker CE Test - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test-debuginfo]<br>name=Docker CE Test - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test-source]<br>name=Docker CE Test - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly]<br>name=Docker CE Nightly - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly-debuginfo]<br>name=Docker CE Nightly - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly-source]<br>name=Docker CE Nightly - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br></code></pre></div></td></tr></table></figure><p>下面的这个是清华的镜像源版本：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[docker-ce-stable]<br>name=Docker CE Stable - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>stable<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-stable-debuginfo]<br>name=Docker CE Stable - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>stable<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-stable-source]<br>name=Docker CE Stable - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>stable<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge]<br>name=Docker CE Edge - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge-debuginfo]<br>name=Docker CE Edge - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-edge-source]<br>name=Docker CE Edge - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>edge<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test]<br>name=Docker CE Test - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test-debuginfo]<br>name=Docker CE Test - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-test-source]<br>name=Docker CE Test - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>test<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly]<br>name=Docker CE Nightly - <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/$basearch/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly-debuginfo]<br>name=Docker CE Nightly - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/debug-$basearch/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br><br>[docker-ce-nightly-source]<br>name=Docker CE Nightly - Sources<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/source/</span>nightly<br>enabled=<span class="hljs-number">0</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/g</span>pg<br></code></pre></div></td></tr></table></figure><h1 id="3、安装docker"><a href="#3、安装docker" class="headerlink" title="3、安装docker"></a>3、安装docker</h1><p>接着我们从高到低列出yum源中各个版本的docker</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190912/BCmdKz9vYj4L.png"></p><p>安装特定版本的命令如下</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">yum install docker-<span class="hljs-keyword">ce</span>-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="hljs-keyword">ce</span>-cli-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> containerd.io<br></code></pre></div></td></tr></table></figure><p>如果需要安装最新版本的话，我们直接这样：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></div></td></tr></table></figure><p>这里我们安装18.9.0的版本</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install docker-ce-<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el<span class="hljs-number">7</span> docker-ce-cli-<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el<span class="hljs-number">7</span> containerd.io<br></code></pre></div></td></tr></table></figure><blockquote><p>Install a specific version by its fully qualified package name, which is the package name (<code>docker-ce</code>) plus the version string (2nd column) starting at the first colon (<code>:</code>), up to the first hyphen, separated by a hyphen (<code>-</code>). For example, <code>docker-ce-18.09.1</code>.</p></blockquote><p>这里和官网的说明有一点不一样，这里我们需要加上后面的<code>-3.el7</code>，否则检测不到安装包。</p><p><img src="https://resource.tinychen.com/blog/20190912/tN7YNvDFtuim.png"></p><h1 id="4、更换cgroup驱动"><a href="#4、更换cgroup驱动" class="headerlink" title="4、更换cgroup驱动"></a>4、更换cgroup驱动</h1><p>k8s推荐docker的cgroup驱动使用systemd，说是会更稳定，所以这里我们还需要修改一下，同时这里更换docker的镜像源为中科大的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## Create /etc/docker directory.</span><br>mkdir /etc/docker<br><br><span class="hljs-comment"># Setup daemon.</span><br>cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ],</span><br><span class="hljs-string">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>mkdir -p /etc/systemd/system/docker.service.d<br><br><span class="hljs-comment"># Restart Docker</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></div></td></tr></table></figure><h1 id="5、配置普通用户"><a href="#5、配置普通用户" class="headerlink" title="5、配置普通用户"></a>5、配置普通用户</h1><p>默认情况下，普通用户需要使用sudo才能操作docker，我们这里需要进行一些修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到普通用户</span><br>su 普通用户名<br><br><span class="hljs-comment"># 创建docker组</span><br>sudo groupadd docker<br><br><span class="hljs-comment"># 将当前用户加入docker用户组</span><br>sudo gpasswd -a <span class="hljs-variable">$&#123;USER&#125;</span> docker<br><br><span class="hljs-comment"># 重启docker服务</span><br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure><h1 id="6、配置内核参数"><a href="#6、配置内核参数" class="headerlink" title="6、配置内核参数"></a>6、配置内核参数</h1><p>保险起见，我们还需要配置内核参数确保docker的网络正常</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p<br><br>reboot<br></code></pre></div></td></tr></table></figure><h1 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h1><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 启动docker</span><br>sudo systemctl start docker<br><br><span class="hljs-comment"># 最后我们还要设置一下开机启动</span><br>sudo systemctl <span class="hljs-builtin-name">enable</span> docker<br><br><span class="hljs-comment"># 跑个helloworld看看</span><br>sudo docker <span class="hljs-builtin-name">run</span> hello-world<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190912/F4Hch4y4HYd0.png"></p><p>如果成功运行则说明docker安装成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7和CentOS8上卸载已安装的docker并安装特定版本的docker。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="docker" scheme="https://tinychen.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>个人博客web服务器换用nginx</title>
    <link href="https://tinychen.com/20190829-http-to-nginx/"/>
    <id>https://tinychen.com/20190829-http-to-nginx/</id>
    <published>2019-08-29T07:00:00.000Z</published>
    <updated>2019-08-29T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下个人博客的web服务器从apache换成nginx的过程。</p><span id="more"></span><h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>关于apache和nginx的对比有很多，小七就不在这里赘述了，之前大一搭建博客的时候还没有接触过nginx就用了apache，后来考RHCE的时候也学习配置的是apache，最近开始学习nginx，考虑到对于小七自己的静态博客和渣渣服务器性能来说，nginx应该更合适一些，因此这里就把web服务器换成了nginx。</p><h1 id="1、备份快照"><a href="#1、备份快照" class="headerlink" title="1、备份快照"></a>1、备份快照</h1><p>在阿里云的官网控制台里面创建快照备份。如果不小心翻车了，还能用快照恢复。</p><p><img src="https://resource.tinychen.com/blog/20190829/zSXLRVHpyovS.png"></p><h1 id="2、停用apache服务"><a href="#2、停用apache服务" class="headerlink" title="2、停用apache服务"></a>2、停用apache服务</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@aliyun ~]# systemctl stop httpd.service <br>[root@aliyun ~]# systemctl disable httpd.service <br>Removed symlink /etc/systemd/system/multi-user.target.wants/httpd.service.<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190829/AnLNm50hcuQi.png"></p><h1 id="3、安装nginx"><a href="#3、安装nginx" class="headerlink" title="3、安装nginx"></a>3、安装nginx</h1><h2 id="3-1-导入yum源"><a href="#3-1-导入yum源" class="headerlink" title="3.1 导入yum源"></a>3.1 导入yum源</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat &gt;&gt; /etc/yum.repo.d/nginx.repo &lt;&lt; EOF<br>[nginx] <br>name=nginx repo <br>baseurl=http://nginx.org/packages/mainline/centos/7/x86_64/<br>gpgcheck=0 <br>enabled=1 <br>EOF<br><br>yum clean all<br>yum repolist<br>yum install nginx -y<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190829/KPKuzP1YKqDo.png"></p><blockquote><p>这里小七使用的是nginx提供的yum源，因此版本可能会稍微新一点。</p><p>想要安装最新版的同学可以前往官网下载源码进行编译安装。</p><p>官网地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p></blockquote><h2 id="3-2-启用nginx服务并设置开机启动"><a href="#3-2-启用nginx服务并设置开机启动" class="headerlink" title="3.2 启用nginx服务并设置开机启动"></a>3.2 启用nginx服务并设置开机启动</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@aliyun ~]<span class="hljs-comment"># systemctl enable nginx.service </span><br>Created symlink from <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants<span class="hljs-regexp">/nginx.service to /u</span>sr<span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>nginx.service.<br>[root@aliyun ~]<span class="hljs-comment"># systemctl start nginx.service</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190829/5FFk81nESijB.png"></p><p>访问服务器IP。可以看到nginx已经开始工作。</p><p><img src="https://resource.tinychen.com/blog/20190829/5EtVh023LmPH.png"></p><blockquote><p>这里有可能会出现<code>Failed to read PID from file /run/nginx.pid</code>的错误</p><p>原因是<code>nginx</code>还没有完全启动，<code>systemd</code>就去读取该进程的PID导致无法读取报错，解决方法是让<code>systemd</code>晚一点读取。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /etc/systemd/system/nginx.service.d<br><br>cat &gt;&gt; /etc/systemd/system/nginx.service.d/override.conf &lt;&lt; EOF<br>[Service]<br>ExecStartPost=/bin/sleep 0.1<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启服务再次查看</span><br>systemctl daemon-reload<br>systemctl restart nginx.service<br>systemctl status nginx.service <br></code></pre></div></td></tr></table></figure></blockquote><h1 id="4、配置nginx"><a href="#4、配置nginx" class="headerlink" title="4、配置nginx"></a>4、配置nginx</h1><p>由于小七安装的版本里面的配置文件默认并没有nginx的web的相关配置，所以我们一次把<code>http</code>、<code>https</code>和<code>http</code>自动跳转<code>https</code>配好。</p><h2 id="4-1-查看版本"><a href="#4-1-查看版本" class="headerlink" title="4.1 查看版本"></a>4.1 查看版本</h2><p><img src="https://resource.tinychen.com/blog/20190829/IFjsD5ibg8XI.png"></p><h2 id="4-2-配置https"><a href="#4-2-配置https" class="headerlink" title="4.2 配置https"></a>4.2 配置https</h2><p>从申请ssl认证的供应商那里下载nginx服务器对应的https认证证书，并存放在<code>/etc/pki/CA/certs</code>目录下。（如果没有就新建该目录）</p><blockquote><p>如果不知道怎么申请的可以查看这篇博客：</p><p><a href="https://tinychen.com/20190407-aliyun-centos-apache-https/">阿里云轻量级应用服务器CentOS系统Apache配置Https</a></p></blockquote><p><img src="https://resource.tinychen.com/blog/20190829/XpbISE5RvAyB.png"></p><h2 id="4-3-编辑配置文件："><a href="#4-3-编辑配置文件：" class="headerlink" title="4.3 编辑配置文件："></a>4.3 编辑配置文件：</h2><p>这里小七直接放出整个配置文件给大家参考：</p><p>默认的配置文件位于<code>/etc/nginx/nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 执行进程操作的用户，默认nginx</span><br>user  nginx;<br><span class="hljs-meta">#</span><span class="bash"> 这里的数字最好设置成和自己服务的核心数一样</span><br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    keepalive_timeout  65;<br><br>    #gzip  on;<br><br>    include /etc/nginx/conf.d/*.conf;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Settings <span class="hljs-keyword">for</span> a TLS enabled server.</span><br><span class="hljs-meta">#</span><span class="bash"> 这里我们把80和443端口一起配置</span><br>    server &#123;<br>listen       80 default_server;<br>        listen       443 ssl;<br>        listen       [::]:443 ssl;<br>        # 这里填写自己的域名<br>        server_name  tiny777.com www.tiny777.com;<br>        # 判断端口，如果是http的80端口就跳转到https的443端口<br>if ($server_port = 80) &#123;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">return</span> 301 https://$server_name<span class="hljs-variable">$request_uri</span>;</span><br>return 301 https://$host$request_uri;<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> 这里是对应的html文件的目录</span><br>        root         /etc/nginx/html;<br>index index.html index.htm;<br><br><span class="hljs-meta">#</span><span class="bash"> 这里是https证书的密钥和证书存放位置</span><br>        ssl_certificate &quot;/etc/pki/CA/certs/tiny777.com.pem&quot;;<br>        ssl_certificate_key &quot;/etc/pki/CA/certs/tiny777.com.key&quot;;<br>        <br>        ssl_session_cache shared:SSL:1m;<br>        ssl_session_timeout  10m;<br>        # 这里是支持的加密方式<br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>        ssl_prefer_server_ciphers on;<br><br>        # Load configuration files for the default server block.<br>        include /etc/nginx/default.d/*.conf;<br><br>        location / &#123;<br>root/etc/nginx/html;<br>index index.html index.htm;<br>        &#125;<br><br>        error_page 404 /404.html;<br>            location = /40x.html &#123;<br>        &#125;<br><br>        error_page 500 502 503 504 /50x.html;<br>            location = /50x.html &#123;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>最后我们重启<code>nginx</code>服务，就能查看到博客已经可以正常工作了。</p><p><img src="https://resource.tinychen.com/blog/20190829/VbjsXnN1MF7L.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下个人博客的web服务器从apache换成nginx的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="nginx" scheme="https://tinychen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ansible入门初试</title>
    <link href="https://tinychen.com/20190823-ansible-intro/"/>
    <id>https://tinychen.com/20190823-ansible-intro/</id>
    <published>2019-08-23T07:00:00.000Z</published>
    <updated>2019-08-23T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible的基本概念和入门安装配置。</p><span id="more"></span><h1 id="1、Intro"><a href="#1、Intro" class="headerlink" title="1、Intro"></a>1、Intro</h1><p>Ansible是一款使用python开发的自动化运维工具，实现了批量系统配置、批量程序部署、批量运行命令等功能。Ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是Ansible所运行的模块，Ansible只是提供一种框架。</p><p>Ansible默认是通过SSH协议来远程连接集群中的各台设备并进行相关操作，因此我们只需要在一台设备上安装Ansible即可，安装、升级和卸载都只需要对一台设备进行操作，其余的设备上面并不会有软件的安装残留之类的问题。同时，由于是使用的SSH连接，Ansible也不需要在系统后台维持相关进程一直运行。</p><h1 id="2、Version"><a href="#2、Version" class="headerlink" title="2、Version"></a>2、Version</h1><p>因为Ansible的只需要在一台机器上安装，所以它的升级和卸载都十分简单，因此很多人会选择安装最新版的Ansible甚至是github上的开发版。Ansible的更新周期非常短，只有四个月，因此即使是出现了BUG，也能很快的在下一个版本中解决。</p><h1 id="3、Install"><a href="#3、Install" class="headerlink" title="3、Install"></a>3、Install</h1><p><strong>在centos7上安装最新版本的ansible</strong></p><blockquote><p>Currently Ansible can be run from any machine with Python 2 (version 2.7) or Python 3 (versions 3.5 and higher) installed. Windows isn’t supported for the control node.</p><p>This includes Red Hat, Debian, CentOS, macOS, any of the BSDs, and so on.</p></blockquote><p>从官网上我们可以看到，截止目前（2019.8.23），安装ansible需要python2.7以上或者是python3.5以上版本。</p><p>这里为了方便管理，我选择了epel源里面的python3.6版本进行安装，需要安装最新的python3可以<a href="https://tinychen.com/20190413-centos-install-python/">参考这里</a>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先我们需要安装epel库</span><br>yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装python3.6</span><br>yum install python36 -y<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190823/Wdn84odF5qsl.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 接着我们查看一下ansible的最新版本</span><br>yum list | grep ansible<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190823/IPmqRSypkcNm.png"></p><p>这里我们可以看到最新版是<code>2.8.4</code>，官网上显示的最新版也是2.8，这就没问题了。</p><p>然后我们直接安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install ansible -y<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190823/0zR6j2O50qFA.png"></p><h1 id="4、Conf"><a href="#4、Conf" class="headerlink" title="4、Conf"></a>4、Conf</h1><h2 id="存放目录"><a href="#存放目录" class="headerlink" title="存放目录"></a>存放目录</h2><p>ansible的配置文件存放在<code>/etc/ansible</code>目录下：</p><p><img src="https://resource.tinychen.com/blog/20190823/JaN8V9A7Xdn3.png"></p><p>图中的<code>ansible.cfg</code>文件就是对应的配置文件，默认情况下，里面的所有配置都是注释掉的，也就是说里面是没有任何默认配置的。</p><h2 id="读取顺序"><a href="#读取顺序" class="headerlink" title="读取顺序"></a>读取顺序</h2><p>ansible读取配置文件的先后顺序如下：</p><ul><li><code>ANSIBLE_CONFIG</code> (environment variable if set)</li><li><code>ansible.cfg</code> (in the current directory)</li><li><code>~/.ansible.cfg</code> (in the home directory)</li><li><code>/etc/ansible/ansible.cfg</code></li></ul><p>ansible会根据上述顺序读取配置文件，并且使用第一个找到的配置文件并忽略剩余的配置文件。</p><blockquote><p><code>ansible.cfg</code>配置文件是ini配置文件，因此可以使用<code>#</code>和<code>;</code>作为注释，但是如果需要在已经写了配置的同一行后添加注释，则只能使用<code>;</code></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># some basic default values...</span><br><span class="hljs-attr">inventory</span> = /etc/ansible/hosts  <span class="hljs-comment">; This points to the file that lists your hosts</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="ansible-cfg"><a href="#ansible-cfg" class="headerlink" title="ansible.cfg"></a><code>ansible.cfg</code></h2><p>这里为了方便我们配合git来进行版本控制，我们在github上面创建一个repo，然后clone到本地，接着把配置文件和之后会使用到的playbook都放入到这个文件夹内。</p><p>具体的git使用方法比较简单，我们不在这里赘述。</p><p><img src="https://resource.tinychen.com/blog/20190826/H3hMQaSXFWh2.png"></p><p><code>ansible.cfg</code>文件的配置比较简单：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[defaults]</span><br><span class="hljs-comment"># hosts文件的存放位置</span><br><span class="hljs-attr">inventory</span>       = ./hosts<br><span class="hljs-comment"># 执行超级命令的用户</span><br><span class="hljs-attr">sudo_user</span>      = root<br><span class="hljs-comment"># 传输方式</span><br><span class="hljs-attr">transport</span>      = smart<br><span class="hljs-comment"># ssh的端口</span><br><span class="hljs-attr">remote_port</span>    = <span class="hljs-number">22</span><br><span class="hljs-comment"># 执行sudo命令的时候使用的命令</span><br><span class="hljs-attr">sudo_exe</span> = sudo<br><span class="hljs-comment"># 远程执行命令的默认用户</span><br><span class="hljs-attr">remote_user</span> = tinychen<br><span class="hljs-comment"># log日志存放的地方</span><br><span class="hljs-attr">log_path</span> = /var/log/ansible.log<br><span class="hljs-comment"># 默认使用的模块</span><br><span class="hljs-attr">module_name</span> = command<br><span class="hljs-comment"># 默认使用的shell</span><br><span class="hljs-attr">executable</span> = /bin/sh<br><span class="hljs-comment"># 使用rsa密钥进行验证登录而不是密码</span><br><span class="hljs-attr">private_key_file</span> = /home/tinychen/.ssh/id_rsa<br></code></pre></div></td></tr></table></figure><p><code>hosts</code>文件中我们可以添加需要控制的主机的IP或者是hostname</p><p><img src="https://resource.tinychen.com/blog/20190826/i1bwHLiAYiMT.png"></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[k8s]</span><br>192.168.100.22<span class="hljs-section">[0:6]</span><br></code></pre></div></td></tr></table></figure><p>这里因为我的被控制主机的IP地址是连续的，因此我直接使用<code>[]</code>来表示，这里的<code>k8s</code>是这一堆被控制主机的组名，一个IP可以加入多个组，也可以一个组都不加入。</p><h1 id="5、Test"><a href="#5、Test" class="headerlink" title="5、Test"></a>5、Test</h1><p>接下来我们执行几条命令来测试一下</p><p>先执行一下ping模块看看能否连通</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible k8s -m ping<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190826/aUiXKeT36Sik.png"></p><p>这里可以看到是没有问题的（结果太长没有全部截图出来）</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ansible</span> k<span class="hljs-number">8</span>s -m command -a <span class="hljs-string">&quot;id&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190826/xjrjiELxILjf.png"></p><p>可以看到这里已经是顺利执行了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ansible的基本概念和入门安装配置。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="ansible" scheme="https://tinychen.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>线程和进程的区别</title>
    <link href="https://tinychen.com/20190821-thread-n-process/"/>
    <id>https://tinychen.com/20190821-thread-n-process/</id>
    <published>2019-08-21T07:00:00.000Z</published>
    <updated>2019-08-21T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下线程和进程的区别。</p><span id="more"></span><h1 id="1、何为线程"><a href="#1、何为线程" class="headerlink" title="1、何为线程"></a>1、何为线程</h1><p>线程是进程中能并发执行的实体，是进程的组成部分，也是系统调度和分派的基本单位，运行在进程的上下文中,并使用进程的资源和环境。</p><h1 id="2、引入线程的理由"><a href="#2、引入线程的理由" class="headerlink" title="2、引入线程的理由"></a>2、引入线程的理由</h1><p>为了减少程序并发执行时所付出的时空开销，使得并发粒度更细、并发性更好。</p><h1 id="3、与进程的区别"><a href="#3、与进程的区别" class="headerlink" title="3、与进程的区别"></a>3、与进程的区别</h1><ul><li>线程是进程的组成部分</li><li>线程切换较快</li><li>线程通信易于实现</li><li>线程并发程度比进程高</li></ul><hr><ul><li>一个程序至少有一个进程,一个进程至少有一个线程。</li></ul><hr><ul><li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li><li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</li></ul><hr><ul><li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li></ul><hr><ul><li>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li></ul><hr><ul><li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动</li><li>进程是系统进行资源分配和调度的一个独立单位。</li></ul><hr><ul><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。</li><li>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是线程可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li></ul><hr><ul><li>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行。</li></ul><hr><ul><li>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。</li><li>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。</li><li>线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。<strong>但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</strong></li></ul><hr><hr><blockquote><p><a href="https://www.zhihu.com/question/25532384">https://www.zhihu.com/question/25532384</a></p></blockquote><p>首先来一句概括的总论：<strong>进程和线程都是一个时间段的描述，是CPU工作时间段的描述。</strong></p><p><strong>下面细说背景</strong>：<br>CPU+RAM+各种资源（比如显卡，光驱，键盘，GPS, 等等外设）构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。</p><p><strong>一个最最基础的事实</strong>：CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在CPU看来就是轮流着来。</p><p><strong>一个必须知道的事实</strong>：执行一段程序代码，实现一个功能的过程介绍 ，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的执行环境，也就是我们所定义的程序上下文。当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。</p><p><strong>串联起来的事实</strong>：前面讲过在CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：进程和线程<strong>，两个名词不过是对应的CPU时间段的描述，名词就是这样的功能。</strong></p><p><strong>线程是什么呢？</strong>进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成：</p><p>程序A得到CPU =》CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。</p><p>这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境的更为细小的CPU时间段。到此全文结束，再一个总结：进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下线程和进程的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用python导出华为网络设备中的配置为excel文件</title>
    <link href="https://tinychen.com/20190816-hw-auto-get-profile/"/>
    <id>https://tinychen.com/20190816-hw-auto-get-profile/</id>
    <published>2019-08-16T09:00:00.000Z</published>
    <updated>2019-08-16T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目github地址：<a href="https://github.com/tiny777/ServersManagementTools">https://github.com/tiny777/ServersManagementTools</a></p><span id="more"></span><h1 id="0、概述"><a href="#0、概述" class="headerlink" title="0、概述"></a>0、概述</h1><p>这个脚本需要实现的功能很简单，就是自动ssh登录到网络设备上，查询相应的白名单，然后将结果导出成excel表格，具体的操作命令如下，对应的设备是华为的AC6605。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">操作步骤<br><br># 执行命令<span class="hljs-built_in">system</span>-<span class="hljs-keyword">view</span>，进入系统视图。<br><span class="hljs-built_in">system</span>-<span class="hljs-keyword">view</span><br><br># 执行命令wlan，进入WLAN视图。<br>wlan<br><br># 查看特定白名单内的信息<br><span class="hljs-keyword">display</span> <span class="hljs-keyword">sta</span>-whitelist-<span class="hljs-keyword">profile</span> name profilename<br><br></code></pre></div></td></tr></table></figure><ul><li>由于这里使用的是<code>netmiko</code>库，所以除了华为的网络设备，思科的设备也能支持，只需要在代码文件中稍作修改即可。</li><li>相应的命令也可以进行修改成其他的系列命令</li></ul><h1 id="1、软件版本"><a href="#1、软件版本" class="headerlink" title="1、软件版本"></a>1、软件版本</h1><p>eNSP的BUG非常多，这里搭建拓扑来进行测试使用的软件版本是</p><ul><li><code>eNSP 1.2.00.500 V100R002C00</code></li><li><code>VirtualBox Graphical User Interface Version 5.1.26r117224(Qt5.6.2)</code></li><li><code>WinPcap_4_1_3</code></li><li>Wireshark没有用到，版本应该无所谓</li><li>操作系统是<code>win10 pro</code>，<code>Microsoft Windows Version 1903(OS Build 18362.239)</code></li></ul><h1 id="2、配置eNSP桥接真机"><a href="#2、配置eNSP桥接真机" class="headerlink" title="2、配置eNSP桥接真机"></a>2、配置eNSP桥接真机</h1><p>这里使用的是AC6605，对真机进行桥接，使用的桥接网卡是VMware WorkStation 15.1 的VMnet8网卡，即NAT模式的网卡，不是eNSP上面的192.168.56.1的那个网卡（这个老是有问题，各种ping不同）。</p><p><img src="https://resource.tinychen.com/blog/20190816/cpwtbe7uUvBF.png"></p><p>接下来的eNSP内的桥接配置就十分简单了，添加一个UDP端口，然后添加一个网卡，再添加端口映射，就可以了。可以参考下面的这张图。</p><p><img src="https://resource.tinychen.com/blog/20190816/TxJqKjGMH9CU.png"></p><p>接着我们拖入一个设备，我这里使用的是华为的AC6605。</p><p>给它配置一个IP地址然后测试一下。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[AC6605]</span>vlan batch <span class="hljs-number">10</span><br>Info: This operation may take <span class="hljs-selector-tag">a</span> few seconds. Please wait <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">a</span> moment..<span class="hljs-selector-class">.done</span>.<br><span class="hljs-selector-attr">[AC6605]</span>int Vlanif <span class="hljs-number">10</span><br><span class="hljs-selector-attr">[AC6605-Vlanif10]</span>ip <span class="hljs-selector-tag">address</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">59.2</span> <span class="hljs-number">24</span><br><span class="hljs-selector-attr">[AC6605-Vlanif10]</span><span class="hljs-selector-tag">q</span><br><span class="hljs-selector-attr">[AC6605]</span>int GigabitEthernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-selector-attr">[AC6605-GigabitEthernet0/0/1]</span>port link-type access <br><span class="hljs-selector-attr">[AC6605-GigabitEthernet0/0/1]</span>port default vlan <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190816/g43DkiCQiUkV.png"></p><p>然后我们ping一下真机的网卡，能通就说明桥接成功了。</p><p><img src="https://resource.tinychen.com/blog/20190816/ySXeeAXjIs3a.png"></p><h1 id="3、配置SSH服务"><a href="#3、配置SSH服务" class="headerlink" title="3、配置SSH服务"></a>3、配置SSH服务</h1><p>首先进行系统视图，然后创建<code>rsa key</code>，全部选择默认，接着启动<code>stelnet</code>服务。</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-keyword">system</span>-<span class="hljs-built_in">view</span> <br>rsa <span class="hljs-keyword">local</span>-<span class="hljs-built_in">key</span>-pair <span class="hljs-keyword">create</span><br>stelnet server <span class="hljs-keyword">enable</span><br></code></pre></div></td></tr></table></figure><p>接着配置用来远程的终端</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">system</span>-<span class="hljs-keyword">view</span><br><span class="hljs-keyword">user</span>-interface vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br>authentication-mode aaa<br>protocol inbound ssh<br></code></pre></div></td></tr></table></figure><p>然后创建用户并设置密码。然后启动ssh服务。</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">system</span>-<span class="hljs-keyword">view</span> <br>aaa<br><span class="hljs-keyword">local</span>-<span class="hljs-keyword">user</span> tinychen <span class="hljs-keyword">password</span> irreversible-cipher easy1234<br><span class="hljs-keyword">local</span>-<span class="hljs-keyword">user</span> tinychen privilege <span class="hljs-keyword">level</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">local</span>-<span class="hljs-keyword">user</span> tinychen service-<span class="hljs-keyword">type</span> ssh<br>quit<br></code></pre></div></td></tr></table></figure><p>最后回到系统视图下，设置ssh用户的登录方式为密码登录。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">tinychen</span> authentication-<span class="hljs-keyword">type</span> password<br></code></pre></div></td></tr></table></figure><h1 id="4、保存配置"><a href="#4、保存配置" class="headerlink" title="4、保存配置"></a>4、保存配置</h1><p><strong>上面的所有配置如果不保存，当前的终端退出就会失效，所以要记得保存配置，方法是退到最开始的登录视图输入save就能保存了。</strong></p><h1 id="5、def-sshLogin"><a href="#5、def-sshLogin" class="headerlink" title="5、def sshLogin"></a>5、<code>def sshLogin</code></h1><p>这里使用<code>netmiko</code>来对网络设备进行<code>ssh</code>登录，考虑到获取到的结果是包含了命令执行过程中的所有套接字，因此得到结果之后，先将其全部写入一个<code>debug.log</code>文件中保存记录，再将该次的操作结果写入<code>cache</code>文件用于下一步处理。</p><h1 id="6、def-sort-to-csv"><a href="#6、def-sort-to-csv" class="headerlink" title="6、def sort_to_csv"></a>6、<code>def sort_to_csv</code></h1><p>对于输出的结果进行筛选处理，我们需要用到<code>re</code>库的正则表达式，以及<code>split()</code>，因为大多数的输出结果是以空格来分列的，因此使用<code>split()</code>来处理这些字符是最好不过的了。</p><p>最后导出成<code>csv</code>文件而不是直接导出excel的<code>xlsx</code>文件则是因为<code>csv</code>相比<code>xlsx</code>更容易读取处理，转成其他格式也更加方便。</p><h1 id="7、def-csv-to-xlsx-pd"><a href="#7、def-csv-to-xlsx-pd" class="headerlink" title="7、def csv_to_xlsx_pd"></a>7、<code>def csv_to_xlsx_pd</code></h1><p>这里就是使用<code>pandas</code>库来将上一步生成的<code>csv</code>转为<code>xlsx</code>文件了，非常的简单，需要的注意的就是添加的行名和列名参数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目github地址：&lt;a href=&quot;https://github.com/tiny777/ServersManagementTools&quot;&gt;https://github.com/tiny777/ServersManagementTools&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
    <category term="python" scheme="https://tinychen.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在k8s中删除和添加节点的方法</title>
    <link href="https://tinychen.com/20190801-k8s-del-n-add-node/"/>
    <id>https://tinychen.com/20190801-k8s-del-n-add-node/</id>
    <published>2019-08-01T02:00:00.000Z</published>
    <updated>2019-08-01T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下在k8s集群中删除节点和添加节点的方法。</p><span id="more"></span><h1 id="1、删除节点"><a href="#1、删除节点" class="headerlink" title="1、删除节点"></a>1、删除节点</h1><p>如果需要在k8s集群中删除节点，首先需要在master节点上删除该节点的相关数据，再删除该节点，接着在该节点上进行reset操作，接着删除相关文件。</p><h2 id="在master节点上"><a href="#在master节点上" class="headerlink" title="在master节点上"></a>在master节点上</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 其中&lt; node name &gt;是在k8s集群中使用&lt; kubectl get nodes &gt;查询到的节点名称</span><br>kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets<br>kubectl delete node &lt;node name&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/EORre3VEGpKk.png"></p><h2 id="在需要删除的节点上"><a href="#在需要删除的节点上" class="headerlink" title="在需要删除的节点上"></a>在需要删除的节点上</h2><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment"># 重置k8s</span><br>sudo kubeadm <span class="hljs-keyword">reset</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/dWqs7mrdCIB8.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 删除残留的文件</span><br>sudo rm -rf /etc/kubernetes/<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 清除iptables或者ipvs的配置</span><br>sudo iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X<br>sudo ipvsadm --clear<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/HnuNsnOApNKD.png"></p><blockquote><p>如果删除的是master节点，还需要删除用户目录下的<code>.kube</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -rf ~/.kube<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>最后重启设备完成操作。</strong></p><h1 id="2、添加节点"><a href="#2、添加节点" class="headerlink" title="2、添加节点"></a>2、添加节点</h1><h2 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h2><p>一般来说在k8s集群初始化完成的时候，会输出一条<code>token</code>来让我们添加其他的节点，但是这个<code>token</code>的有效时间只有24小时。我们可以这样查询<code>token</code>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查询token</span><br>kubeadm token list<br><span class="hljs-meta">#</span><span class="bash"> 创建一个token</span><br>kubeadm token create<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/sbjkRzBJGqrv.png"></p><blockquote><p>这里我们可以看到ttl值就是这个token对应的有效时间了</p></blockquote><h2 id="生成sha256加密字符串"><a href="#生成sha256加密字符串" class="headerlink" title="生成sha256加密字符串"></a>生成sha256加密字符串</h2><p>除了<code>token</code>之外，我们还需要一个<code>sha256</code>的加密字符串，这个我们可以这样获得</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/yqHmvgaXDult.png"></p><p>接下来我们就可以把node节点添加到集群中了</p><p>命令的格式如下：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">kubeadm <span class="hljs-keyword">join</span> &lt;集群master节点IP：端口&gt; --token <span class="hljs-symbol">&lt;token&gt;</span> --discovery-token-<span class="hljs-keyword">ca</span>-cert-hash <span class="hljs-built_in">sha256</span>:<span class="hljs-symbol">&lt;sha256&gt;</span> <br></code></pre></div></td></tr></table></figure><p>对应到小七这里的操作命令如下：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">kubeadm <span class="hljs-keyword">join</span> kubernetes.haproxy.<span class="hljs-keyword">com</span>:<span class="hljs-number">8443</span> --token d98xt5.<span class="hljs-number">6</span>xvz7nldv2niknnv \<br>    --discovery-token-<span class="hljs-keyword">ca</span>-cert-hash <span class="hljs-built_in">sha256</span>:ae8d99e389a6a3109c188b5c27792c490e6a18e438bb4fc81a0a44b9542f3835 <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190820/93of3AtxBuny.png"></p><p>接着我们在master节点中就可以查看到新添加的这个节点了。</p><p><img src="https://resource.tinychen.com/blog/20190820/IsfDdJlLP44O.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一下在k8s集群中删除节点和添加节点的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>shell简介</title>
    <link href="https://tinychen.com/20190724-shell-intro/"/>
    <id>https://tinychen.com/20190724-shell-intro/</id>
    <published>2019-07-24T02:00:00.000Z</published>
    <updated>2019-07-24T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下shell的概念、分类以及脚本的几种执行方式。</p><span id="more"></span><h1 id="1、什么是shell"><a href="#1、什么是shell" class="headerlink" title="1、什么是shell"></a>1、什么是shell</h1><p>Shell的中文翻译名是贝壳的意思，也就是相当于下图所示，是一个命令解释器，它的作用是解释执行用户输入的命令及程序等，用户每输入一条命令，Shell就解释执行一条。这种从键盘一输入命令，就可以立即得到回应的对话方式，称为交互的方式。</p><p><img src="https://resource.tinychen.com/blog/20190724/YUxMu7nNMIvx.png"></p><p>Shell存在于操作系统的最外层，负责与用户直接对话，把用户的输入解释给操作系统，并处理各种各样的操作系统的输出结果，然后输出到屏幕返回给用户。输入系统用户名和密码并登录到Linux后的所有操作都是由Shell解释与执行的。</p><h1 id="2、什么是shell脚本"><a href="#2、什么是shell脚本" class="headerlink" title="2、什么是shell脚本"></a>2、什么是shell脚本</h1><p><strong>当命令或程序语句不在命令行下执行，而是通过一个程序文件来执行时，该程序就被称为Shell脚本。</strong></p><p>如果在Shell脚本里内置了很多条命令、语句及循环控制，然后将这些命令一次性执行完毕，<strong>这种通过文件执行脚本的方式称为非交互的方式</strong>。Shel脚本类似于DOS或windows系统下的批处理程序（扩展名一般为“*.bat”）。用户可以在Shell脚本中敲入一系列的命令及命令语句组合。这些命令、变量和流程控制语句等有机地结合起来，就形成了一个功能强大的Shell脚本。</p><p>比如下面的这个脚本，就是用来清空log日志中的messages文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">cd</span> /var/<span class="hljs-built_in">log</span><br><br>cat /dev/null &gt; messages<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Logs clean up done&quot;</span><br></code></pre></div></td></tr></table></figure><p>上面的这个脚本就是最简单的由命令直接堆砌而成的脚本文件，需要注意的是，脚本在执行的时候可能会有权限限制，一般需要使用<code>chmod +x</code>给脚本加执行权限，还可能需要切换到<code>root</code>用户或者使用<code>sudo</code>。</p><p>实际上我们可以看到上面的脚本其实一条命令就能解决</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /dev/null &gt; /var/<span class="hljs-built_in">log</span>/messages &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Logs clean up done&quot;</span><br></code></pre></div></td></tr></table></figure><p>接下来我们对上面的脚本进行改进，加入执行用户和切换目录的判断以及根据执行结果返回不同的信息。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> A shell script that use to clean the system<span class="hljs-string">&#x27;s logs.</span></span><br>CLEAN_DIR=/var/log<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> $UID=0 means the user must be root</span></span><br>ROOT_UID=0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> This script need the root to execute</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> We have to judge whether the user is root or not</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> If not, echo warning and then exit</span></span><br>if [&quot;$UID&quot; -ne &quot;$ROOT_UID&quot;]<br>        then<br>                echo &quot; Must be root to execute this script &quot;<br>                exit 1<br>if<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> If change directory fail, give the tip and then exit</span></span><br>cd $CLEAN_DIR || &#123;<br>        echo &quot;Cannot change to necessary directory&quot;<br>        exit 1<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> Begin to clean the log</span></span> <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> Echo the tips whether it success or not</span></span><br>cat /dev/null &gt; messages &amp;&amp; &#123;<br>        echo &quot;Logs cleaned up&quot;<br>        exit 0<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> eixt 0 means success and exit 1 means fail</span></span><br>&#125;<br>echo &quot;Logs cleaned up fail&quot;<br>exit 1<br></code></pre></div></td></tr></table></figure><h1 id="3、shell脚本语言的种类"><a href="#3、shell脚本语言的种类" class="headerlink" title="3、shell脚本语言的种类"></a>3、shell脚本语言的种类</h1><p>Shell脚本语言是弱类型语言（无须定义变量的类型即可使用），在Unix/Linux中主要有两大类Shell：一类是<code>Bourne shell</code>，另一类是<code>Cshell</code>。</p><h2 id="3-1-Bourne-shell"><a href="#3-1-Bourne-shell" class="headerlink" title="3.1 Bourne shell"></a>3.1 Bourne shell</h2><p><strong>Bourne shell又包括Bourne shell（sh）、Korn shell（ksh）、Bourne Again Shell（bash）三种类型。</strong></p><ul><li>Bourne shell（sh）由AT&amp;T的Steve Bourne开发，是标准的UNIX Shell，很多UNIX系统都配有sh。</li><li>Korn shell（ksh）由David Korn开发，是Bourne shell（sh）的超集合，并且添加了csh引入的新功能，是目前很多UNIX系统标准配置的Shell，这些系统上的<code>/bin/sh</code>往往是指向<code>/bin/ksh</code>的符号链接。</li><li>Bourne Again Shell（bash）由GNU项目组开发，主要目标是与POSIX标准保持一致，同时兼顾对sh的兼容，bash从csh和ksh借鉴了很多功能，是各种Linux发行版默认配置的Shell，Linux系统上的/bin/sh往往是指向/bin/bash的符号链接。</li></ul><p>尽管如此，bash和sh还是有很多的不同之处：一方面，bash扩展了一些命令和参数；另一方面，bash并不完全和sh兼容，它们有些行为并不一致，但在大多数企业运维的情况下区别不大，特殊场景可以使用bash替代sh。</p><blockquote><p>在Linux中，一般使用的shell是bash，所以说bash其实是shell的一个子集，当然也还有其他的一些流行的shell工具。如果我们想要Linux中的一个用户无法登录使用shell交互，最简单的方法就是在<code>/etc/passwd</code>文件中设置该用户的默认shell为<code>/sbin/nologin</code>即可。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20190724/LItaEMzDYlnW.png"></p><h2 id="3-2-Cshell"><a href="#3-2-Cshell" class="headerlink" title="3.2 Cshell"></a>3.2 Cshell</h2><p><strong>Cshel又包括csh、tcsh两种类型。</strong></p><ul><li>csh由Berkeley大学开发，随BSDUNIX发布，它的流程控制语句很像C语言，支持很多Bourne shell所不支持的功能，例如：作业控制、别名、系统算术、命令历史、命令行编辑等。</li><li>tcsh是csh的增强版，加入了命令补全等功能，在FreeBSD、Mac OSX等系统上替代了csh。</li></ul><h2 id="3-3-shell目前形势"><a href="#3-3-shell目前形势" class="headerlink" title="3.3 shell目前形势"></a>3.3 shell目前形势</h2><p><strong>以上介绍的这些Shell中，较为通用的是标准的Bourne shell（sh）和Cshell（csh）。其中Bourne shell（sh）已经被Bourne Again shell（bash）所取代。</strong></p><p><img src="https://resource.tinychen.com/blog/20190724/rgp7MQKSWKMu.png"></p><p>Linux系统中的主流Shell是bash，bash是由Bourne Shell（sh）发展而来的，同时bash还包含了csh和ksh的特色，<strong>但大多数脚本都可以不加修改地在sh上运行</strong>，如果使用了sh后发现结果和预期有差异，那么可以尝试用bash替代sh。</p><p>Shel脚本语言的优势在于处理偏操作系统底层的业务，例如：Linux系统内部的很多应用（有的是应用的一部分）都是使用Shell脚本语言开发的，因为有1000多个Linux系统命令为它做支撑，特别是Linux正则表达式及三剑客grep、awk、sed等命令。</p><p>对于一些常见的系统脚本，使用Shell开发会更简单、更快速，例如：让软件一键自动化安装、优化，监控报警脚本，软件启动脚本，日志分析脚本等，虽然PHP/Python语言也能够做到这些，但是，考虑到掌握难度、开发效率、开发习惯等因素，它们可能就不如Shell脚本语言流行及有优势了。对于一些常规的业务应用，使用Shell更符合Linux运维简单、易用、高效的三大基本原则。</p><p>在常用的操作系统中，Linux下默认的Shell是Bourne Again shell（bash）；Solaris和FreeBSD下默认的是Bourne shell（sh）；AIX下默认的是Korn Shell（ksh）。</p><p><img src="https://resource.tinychen.com/blog/20190724/EekkCM51sSsy.png"></p><h1 id="4、脚本的执行"><a href="#4、脚本的执行" class="headerlink" title="4、脚本的执行"></a>4、脚本的执行</h1><p>Shell脚本的执行通常可以采用以下几种方式。</p><h2 id="4-1-bash-script-name或sh-script-name："><a href="#4-1-bash-script-name或sh-script-name：" class="headerlink" title="4.1 bash script-name或sh script-name："></a>4.1 <code>bash script-name</code>或<code>sh script-name</code>：</h2><p>这是当脚本文件本身没有可执行权限（即文件权限属性x位为-号）时常使用的方法，或者脚本文件开头没有指定解释器时需要使用的方法。</p><p><img src="https://resource.tinychen.com/blog/20190724/BMuhLA6FawdE.png"></p><h2 id="4-2-path-script-name或-script-name："><a href="#4-2-path-script-name或-script-name：" class="headerlink" title="4.2 path/script-name或./script-name："></a>4.2 <code>path/script-name</code>或<code>./script-name</code>：</h2><p>指在当前路径下执行脚本（脚本需要有执行权限），需要将脚本文件的权限先改为可执行（即文件权限属性加x位），具体方法为<code>chmod +x script-name</code>。然后通过脚本绝对路径或相对路径就可以直接执行脚本了。</p><p><img src="https://resource.tinychen.com/blog/20190724/ohxGhlr79Jy8.png"></p><p><img src="https://resource.tinychen.com/blog/20190724/sXG8QB6lIRv4.png"></p><h2 id="4-3-source-script-name或-script-name："><a href="#4-3-source-script-name或-script-name：" class="headerlink" title="4.3 source script-name或.script-name："></a>4.3 <code>source script-name</code>或<code>.script-name</code>：</h2><p>这种方法通常是使用<code>source</code>或<code>.</code>（点号）读入或加载指定的Shel脚本文件（如san.sh），然后，依次执行指定的Shell脚本文件san.sh中的所有语句。这些语句将在当前父Shell脚本father.sh进程中运行（其他几种模式都会启动新的进程执行子脚本）。</p><p>因此，使用<code>source</code>或<code>.</code>可以将san.sh自身脚本中的变量值或函数等的返回值传递到当前父Shel脚本father.sh中使用。这是它和其他几种方法最大的区别，也是值得读者特别注意的地方。</p><p>这里说起来可能不好理解，我们用一个简单脚本来操作一下。</p><p><img src="https://resource.tinychen.com/blog/20190724/EvkK3azJ1Hpx.png"></p><p>这里我们可以看到，这个脚本的主要操作是使用<code>pwd</code>命令打印出当前的目录</p><p>然后我们分别用上面的方法1和这里的方法3来执行这个脚本</p><p><img src="https://resource.tinychen.com/blog/20190724/LMCQJm9SH8pf.png"></p><p>这里我们可以看到，使用方法1的时候，并没有打印出当前目录<code>userdir</code>，或者说，当前目录<code>userdir</code>这个变量为空。再使用方法3来执行该脚本，我们可以看到这时候的变量<code>userdir</code>就不为空了。</p><p>结论：通过<code>source</code>或<code>.</code>加载执行过的脚本，由于是在当前Shell中执行脚本，因此在脚本结束之后，脚本中的变量（包括函数）值在当前Shell中依然存在；而sh和bash执行脚本都会启动新的子Shell执行，执行完后退回到父Shell，因此，变量（包括函数）值等无法保留。</p><p>实在不懂就看下小七画的这个<code>灵魂流程图</code>。</p><p><img src="https://resource.tinychen.com/blog/20190724/Twgn6oyxpjdx.png"></p><p>在进行Shell脚本开发时，如果脚本中有引用或执行其他脚本的内容或配置文件的需求时，最好用.”或source先加载该脚本或配置文件，处理完之后，再将它们加载到脚本的下面，就可以调用source加载的脚本及配置文件中的变量及函数等内容了。</p><blockquote><p><code>source</code>或<code>.</code>命令的功能是：在当前Shell中执行<code>source</code>或<code>.</code>加载并执行的相关脚本文件中的命令及语句，而不是产生一个子Shell来执行文件中的命令。</p><p><code>source</code>或<code>.</code>的实际功能相同，都是读入脚本并执行。</p><p><strong>注意<code>.</code>和后面的脚本名之间要有空格。</strong></p><p>如果大家学过PHP开发就知道，<code>source</code>或<code>.</code>相当于include的功能。HTTP服务软件Apache、Nginx等配置文件里都支持这样的用法。</p></blockquote><h2 id="4-4-sh-lt-script-name或cat-scripts-namelsh："><a href="#4-4-sh-lt-script-name或cat-scripts-namelsh：" class="headerlink" title="4.4 sh&lt;script-name或cat scripts-namelsh："></a>4.4 <code>sh&lt;script-name</code>或<code>cat scripts-namelsh</code>：</h2><p>同样适用于bash，不过这种用法不是很常见。一般都是用来实现拼接字符串等<code>骚操作</code>的，留个坑，以后有机会再来试一下。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一下shell的概念、分类以及脚本的几种执行方式。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>在k8s中的Service简介</title>
    <link href="https://tinychen.com/20190723-k8s-service/"/>
    <id>https://tinychen.com/20190723-k8s-service/</id>
    <published>2019-07-23T07:00:00.000Z</published>
    <updated>2019-07-23T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下k8s中的Service组件。</p><span id="more"></span><h1 id="1、Service简介"><a href="#1、Service简介" class="headerlink" title="1、Service简介"></a>1、Service简介</h1><p>老规矩，我们先来看一下<a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">官网对service的描述</a>：</p><blockquote><p>Kubernetes <code>Pod</code> 是有生命周期的，它们可以被创建，也可以被销毁，然而一旦被销毁生命就永远结束。 通过 <code>ReplicaSets</code> 能够动态地创建和销毁 <code>Pod</code>（例如，需要进行扩缩容，或者执行 滚动升级）。 每个 <code>Pod</code> 都会获取它自己的 IP 地址，即使这些 IP 地址不总是稳定可依赖的。 这会导致一个问题：在 Kubernetes 集群中，如果一组 <code>Pod</code>（称为 backend）为其它 <code>Pod</code> （称为 frontend）提供服务，那么那些 frontend 该如何发现，并连接到这组 <code>Pod</code> 中的哪些 backend 呢？</p><p><strong>关于 <code>Service</code></strong></p><p>Kubernetes <code>Service</code> 定义了这样一种抽象：逻辑上的一组 <code>Pod</code>，一种可以访问它们的策略 —— 通常称为微服务。 这一组 <code>Pod</code> 能够被 <code>Service</code> 访问到，通常是通过 <code>Label Selector</code>（查看下面了解，为什么可能需要没有 selector 的 <code>Service</code>）实现的。</p><p>举个例子，考虑一个图片处理 backend，它运行了3个副本。这些副本是可互换的 —— frontend 不需要关心它们调用了哪个 backend 副本。 然而组成这一组 backend 程序的 <code>Pod</code> 实际上可能会发生变化，frontend 客户端不应该也没必要知道，而且也不需要跟踪这一组 backend 的状态。 <code>Service</code> 定义的抽象能够解耦这种关联。</p><p>对 Kubernetes 集群中的应用，Kubernetes 提供了简单的 <code>Endpoints</code> API，只要 <code>Service</code> 中的一组 <code>Pod</code> 发生变更，应用程序就会被更新。 对非 Kubernetes 集群中的应用，Kubernetes 提供了基于 VIP 的网桥的方式访问 <code>Service</code>，再由 <code>Service</code> 重定向到 backend <code>Pod</code>。</p></blockquote><p>官网的这段话可能有些不好理解，我们用最简单的web服务器软件apache举个例子。一般来说，我们在一台电脑上安装了apache服务之后，它默认监听的是80端口（http），也就是说我们如果需要访问这个apache服务，我们只需要使用浏览器访问这台电脑的IP地址加上80端口号即可，对于其他的应用也是一样，一般都是以主机IP加上应用的监听端口来进行访问。</p><p>那么在k8s的集群中，我们都知道应用服务被打包成容器，而容器放在<code>pod</code>中运行，每个<code>pod</code>都会被分配到一个IP地址，当然我们还是可以按照上述的方式来访问这些<code>pod</code>里面的服务，但是，一个应用往往会部署多个<code>pod</code>（保证可靠性和健壮性），而不同的<code>pod</code>也会因为需求的不同或者节点宕机等原因被销毁或者新建（对应又是新的IP），所以k8s定义了<code>service</code>这一层抽象层，用来解决这个问题，将同一应用下的一组pod进行打包，然后通过<code>service</code>来进行统一访问（主要通过<code>label</code>来实现），用户只需要访问<code>service</code>这一层，而不需要在意<code>service</code>之后的<code>pod</code>是怎么调度运行的。也就是说，<code>service</code>会负责把用户的访问请求转发到<code>pod</code>对应的端口上，或者是说<code>service</code>会将<code>pod</code>对应的端口和<code>service</code>上暴露给用户访问的端口建立映射关系。</p><h1 id="2、使用service"><a href="#2、使用service" class="headerlink" title="2、使用service"></a>2、使用service</h1><p>接下来我们来尝试着使用一下service。</p><p>首先我们创建一个pod，对应的配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">http-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></div></td></tr></table></figure><p>需要特别注意的是这里我们使用了一个<code>labels</code>，使用这个配置文件创建的<code>pod</code>都会带上一个<code>app=httpd</code>的<code>labels</code>，这个是后面创建的<code>service</code>用来区分<code>pod</code>的。</p><p>这里我们使用curl直接对部署的三个pod进行访问，可以看到都是能够访问成功的。</p><p><img src="https://resource.tinychen.com/blog/20190723/P9LU7PSYuWCX.png"></p><p>接下来我们创建一个service，配置文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">http-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">httpd</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">7777</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><p>上述配置将创建一个名称为 “http-service” 的 <code>Service</code> 对象，它会将请求代理到使用 TCP 端口 80，并且具有<code>标签(labels)</code> <code>&quot;app=httpd&quot;</code> 的 <code>Pod</code> 上。 这个 <code>Service</code> 将被指派一个 IP 地址（通常称为 “Cluster IP”），它会被服务的代理使用（见下面）。 该 <code>Service</code> 的 selector 将会持续评估，处理结果将被 POST 到一个名称为 <code>“http-service”</code> 的 <code>Endpoints</code> 对象上。</p><p>需要注意的是， <code>Service</code> 能够将一个接收端口映射到任意的 <code>targetPort</code>。 默认情况下，<code>targetPort</code> 将被设置为与 <code>port</code> 字段相同的值。 </p><p><img src="https://resource.tinychen.com/blog/20190723/g4EDrExzjTyM.png"></p><p>创建成功之后我们可以使用下面的这个命令来查看<code>service</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl get service -o wide<br></code></pre></div></td></tr></table></figure><p>这里我们可以看到这个<code>service</code>被分配了一个<code>10.96.16.218</code>的IP地址（这个IP地址称为<code>ClusterIP</code>），服务对应的端口号是<code>7777</code>。我们试着使用curl来对其进行访问。</p><p><img src="https://resource.tinychen.com/blog/20190723/naCMoORvomnL.png"></p><p>这里可以看到是可以成功访问的。</p><p>我们再来看一下详细的情况：</p><p><img src="https://resource.tinychen.com/blog/20190723/Qxcmbfvgz5OV.png"></p><p>这里可以看到已经和上面的三个pods的80端口建立了映射关系。</p><h1 id="3、ipvs和iptables"><a href="#3、ipvs和iptables" class="headerlink" title="3、ipvs和iptables"></a>3、ipvs和iptables</h1><p>我们现在已经知道，<code>service</code>这个抽象层是将这个<code>service</code>的IP（<code>10.96.16.218</code>）的7777端口和<code>Endpoints</code>的pod的80端口建立映射关系来实现这个抽象的。那么这个映射关系的建立，就是由<code>iptables</code>来实现的，而<code>ipvs</code>在这里也能实现一样的功能，但是更加强大，我们可以将它简单看作是<code>iptables</code>的增强版。</p><h2 id="3-1-ipvs和iptables的区别"><a href="#3-1-ipvs和iptables的区别" class="headerlink" title="3.1 ipvs和iptables的区别"></a>3.1 ipvs和iptables的区别</h2><p>k8s中默认使用的是<code>iptables</code>，但是<code>ipvs</code>要更加强大，</p><ul><li><code>ipvs</code> 为大型集群提供了更好的可扩展性和性能</li><li><code>ipvs</code> 支持比 <code>iptables</code> 更复杂的复制均衡算法（最小负载、最少连接、加权等等）</li><li><code>ipvs</code> 支持服务器健康检查和连接重试等功能</li></ul><p><strong><code>ipvs</code> (IP Virtual Server)</strong> 实现了传输层负载均衡，也就是我们常说的4层<code>LAN</code>交换（基于TCP四层(IP+端口)的负载均衡软件），作为 Linux 内核的一部分。<code>ipvs</code>运行在主机上，在真实服务器集群前充当负载均衡器。<code>ipvs</code>可以将基于<code>TCP</code>和<code>UDP</code>的服务请求转发到真实服务器上，并使真实服务器的服务在单个 IP 地址上显示为虚拟服务。</p><p><code>ipvs</code>是在<code>kubernetes v1.8</code>版本中引进的，小七这里使用的是<code>v1.15</code>版本，<a href="https://tinychen.com/20190718-centos7-install-k8s-ha/">之前配置的时候</a>就是使用了<code>ipvs</code>来替换<code>iptables</code>。</p><h2 id="3-2-查看ipvs"><a href="#3-2-查看ipvs" class="headerlink" title="3.2 查看ipvs"></a>3.2 查看ipvs</h2><p><strong>不管是<code>ipvs</code>还是<code>iptables</code>，都是需要<code>root</code>权限才能查看</strong>，因此我们需要在命令前加上<code>sudo</code>或者是切换到<code>root</code>用户。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo ipvsadm -ln<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190723/DvxtRHLUuVum.png"></p><p>从这里的规则中我们可以看到。<code>ipvs</code>将对<code>10.96.16.218:7777</code>的访问转发到下面对应的三个IP地址的80端口上。</p><p>接下来我们对这个deployment进行修改，将副本数量从3改到6，再看这个ipvs规则的变化</p><p><img src="https://resource.tinychen.com/blog/20190723/JCiKR2H5uBhM.png"></p><p>副本数量增加到了6个，对应的<code>ipvs</code>规则也完成了更新：</p><p><img src="https://resource.tinychen.com/blog/20190723/fxjkNMdBIUF0.png"></p><p>接下来我们删除掉这个service，可以看到ipvs中的规则并没有进行删除</p><p><img src="https://resource.tinychen.com/blog/20190723/h4Bd7IBFQjoG.png"></p><p>这里我们可以知道，k8s对ipvs的规则可以说是只增不减。</p><blockquote><p>这里留一个坑，后面再开一篇来详细研究一下<code>ipvs</code></p></blockquote><h2 id="3-3-使用DNS访问"><a href="#3-3-使用DNS访问" class="headerlink" title="3.3 使用DNS访问"></a>3.3 使用DNS访问</h2><p>实际上，k8s集群中内置有dns解析服务，我们可以通过<code>&lt;SERVICE_NAME&gt;.&lt;NAMESPACE_NAME&gt;</code>来对service进行访问。</p><blockquote><p><code>v1.11</code>版本之后，<code>coredns</code>取    代<code>kube-dns</code>成为k8s中默认的dns解析服务器。</p></blockquote><p>我们在pod中运行一个shell来实验一下：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> busybox --rm -ti <span class="hljs-attribute">--image</span>=busybox /bin/sh<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190723/JeaNq64gqmpG.png"></p><p><code>busybox</code>对<code>nslookup</code>的支持似乎有些问题，不一定能成功查询到<code>dns</code>，而且并没有内置<code>curl</code>命令，我们只能用<code>wget</code>来进行访问。<strong>事实上<code>wget</code>能成功就说明<code>dns</code>服务是正常的。</strong></p><p><img src="https://resource.tinychen.com/blog/20190723/IIYnXUyxiDkL.png"></p><p>然后我们使用它的测试版本，这时候<code>nslookup</code>命令正常了，<code>wget</code>命令又不正常了。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">kubectl run dig --rm -it --image=docker.io<span class="hljs-regexp">/azukiapp/</span>dig <span class="hljs-regexp">/bin/</span>sh<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190723/Fxbv9dHLo0QQ.png"></p><p><img src="https://resource.tinychen.com/blog/20190723/VVldLTbs4PbY.png"></p><p>这里面的<code>10.96.0.10</code>地址正是我们的<code>coredns</code>的地址：</p><p><img src="https://resource.tinychen.com/blog/20190723/EcxMr38HWqqS.png"></p><h1 id="4、外网访问service"><a href="#4、外网访问service" class="headerlink" title="4、外网访问service"></a>4、外网访问service</h1><h2 id="4-1-NodePort简介"><a href="#4-1-NodePort简介" class="headerlink" title="4.1 NodePort简介"></a>4.1 NodePort简介</h2><p>前面我们已经可以通过clusterIP来访问service了，但是显然这只能局限于在k8s集群内的主机进行，集群外的机器无法对其进行访问，这显然是不行的。我们先看一下官网给出的解决方案：</p><blockquote><p>对一些应用（如 Frontend）的某些部分，可能希望通过外部（Kubernetes 集群外部）IP 地址暴露 Service。</p><p>Kubernetes <code>ServiceTypes</code> 允许指定一个需要的类型的 Service，默认是 <code>ClusterIP</code> 类型。</p><p><code>Type</code> 的取值以及行为如下：</p><ul><li><code>ClusterIP</code>：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的 <code>ServiceType</code>。</li><li><code>NodePort</code>：通过每个 Node 上的 IP 和静态端口（<code>NodePort</code>）暴露服务。<code>NodePort</code> 服务会路由到 <code>ClusterIP</code> 服务，这个 <code>ClusterIP</code> 服务会自动创建。通过请求 <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>，可以从集群的外部访问一个 <code>NodePort</code> 服务。</li><li><code>LoadBalancer</code>：使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务。</li><li><code>ExternalName</code>：通过返回 <code>CNAME</code> 和它的值，可以将服务映射到 <code>externalName</code> 字段的内容（例如， <code>foo.bar.example.com</code>）。 没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 <code>kube-dns</code> 才支持。</li></ul></blockquote><p><strong>可以看到，这里我们主要将用到的就是NodePort了。</strong></p><p>如果设置 <code>type</code> 的值为 <code>&quot;NodePort&quot;</code>，Kubernetes master 将从给定的配置范围内（默认：30000-32767）分配端口，每个 Node 将从该端口（每个 Node 上的同一端口）代理到 <code>Service</code>。该端口将通过 <code>Service</code> 的 <code>spec.ports[*].nodePort</code>字段被指定。</p><p>如果需要指定的端口号，可以配置 <code>nodePort</code> 的值，系统将分配这个端口，否则调用 API 将会失败（比如，需要关心端口冲突的可能性）。</p><p>这可以让开发人员自由地安装他们自己的负载均衡器，并配置 Kubernetes 不能完全支持的环境参数，或者直接暴露一个或多个 Node 的 IP 地址。</p><p>需要注意的是，Service 将能够通过 <code>&lt;NodeIP&gt;:spec.ports[*].nodePort</code> 和<code>spec.clusterIp:spec.ports[*].port</code> 而对外可见。</p><h2 id="4-2-自动分配端口"><a href="#4-2-自动分配端口" class="headerlink" title="4.2 自动分配端口"></a>4.2 自动分配端口</h2><p>接下来我们来修改一下刚刚的service配置文件，先尝试一下让master自动分配一个端口。</p><p><img src="https://resource.tinychen.com/blog/20190723/ATIjgIhqAAxK.png"></p><p>然后我们重新应用一下该配置文件，就能看到分配的端口：</p><p><img src="https://resource.tinychen.com/blog/20190723/5LhvE8622rSf.png"></p><p>我们查看ipvs规则，可以看到本机对应的IP都已经建立了相应的映射转发规则</p><p><img src="https://resource.tinychen.com/blog/20190723/xBo6fK5W6cW8.png"></p><p>正好小七用的是虚拟机，使用集群外的电脑用浏览器访问<strong>任意一个master节点</strong>均可：</p><p><img src="https://resource.tinychen.com/blog/20190723/NBFeLpK5c0a1.png"></p><p><img src="https://resource.tinychen.com/blog/20190723/hYpBcXWYVJyp.png"></p><p><img src="https://resource.tinychen.com/blog/20190723/qzQIsQiEafSA.png"></p><h2 id="4-3-手动指定端口"><a href="#4-3-手动指定端口" class="headerlink" title="4.3 手动指定端口"></a>4.3 手动指定端口</h2><p>我们在下面的port选项中添加<code>nodePort: 32333</code>，然后重新应用配置文件。</p><p><img src="https://resource.tinychen.com/blog/20190723/sez3VyymGdY7.png"></p><p>使用浏览器尝试访问：</p><p><img src="https://resource.tinychen.com/blog/20190723/3y4OejGxkAFl.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一下k8s中的Service组件。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
    <category term="docker" scheme="https://tinychen.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在k8s中的controller简介</title>
    <link href="https://tinychen.com/20190722-k8s-controller/"/>
    <id>https://tinychen.com/20190722-k8s-controller/</id>
    <published>2019-07-22T09:00:00.000Z</published>
    <updated>2019-07-22T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>运行容器化应用是Kubernetes最重要的核心功能。为满足不同的业务需要，Kubernetes提供了多种Controller，主要包括<code>Deployment</code>、<code>DaemonSet</code>、<code>Job</code>、<code>CronJob</code>等。</p><span id="more"></span><h1 id="1、创建资源的两种方式"><a href="#1、创建资源的两种方式" class="headerlink" title="1、创建资源的两种方式"></a>1、创建资源的两种方式</h1><p>创建资源主要有<strong>通过命令行配置参数</strong>和<strong>通过配置文件</strong>这两种方式。</p><ul><li><p>通过命令行主要是使用<code>kubectl</code>命令来进行创建，主要可能用到的是<code>kubectl run</code>和<code>kubectl create</code>，具体的用法我们可以在命令后面加上<code>–-help</code>参数来查看帮助文档。</p><p>  这种方式的好处就是简单快捷，部署的速度比较快，但是遇到要求比较复杂多样的资源部署，后面就要附带一大串参数，容易出错，所以这种方式一般来说比较适用于小规模的简单资源部署或者是上线前的简单测试</p></li><li><p>通过配置文件则主要是<code>json</code>格式或<code>yaml</code>格式的文件，好处是可以详细配置各种参数，保留的配置文件还可以用到其他的集群上进行大规模的部署操作，缺点就是部署比较麻烦，并且需要一定的门槛（要求对<code>json</code>或<code>yaml</code>有一定的了解）</p><p>  配置文件主要是通过<code>kubectl apply -f</code>和<code>kubectl create -f</code>来进行配置。</p></li></ul><h1 id="2、Deployment"><a href="#2、Deployment" class="headerlink" title="2、Deployment"></a>2、Deployment</h1><h2 id="2-1-cli部署"><a href="#2-1-cli部署" class="headerlink" title="2.1 cli部署"></a>2.1 cli部署</h2><p>我们先使用命令行（cli）创建一个deployment，名字（<code>NAME</code>）是<code>nginx-clideployment</code>，使用的镜像（<code>image</code>）版本为<code>1.17</code>，创建的副本（<code>replicas</code>）数量为<code>3</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">run</span> nginx-clideployment <span class="hljs-attribute">--image</span>=nginx:1.17 <span class="hljs-attribute">--replicas</span>=3<br></code></pre></div></td></tr></table></figure><p>我们查看一下部署是否成功：</p><p><img src="https://resource.tinychen.com/blog/20190722/mClOrDnEL2WF.png"></p><p>这里的<code>kubectl get rs</code>中的<code>rs</code>其实就是<code>ReplicaSet（RS）</code></p><p>我们还可以发现ReplicaSet的命名就是在我们指定的<code>NAME</code>后面加上了一串哈希数值。</p><p><code>&lt;the name of the Deployment&gt;-&lt;hash value of the pod template&gt;</code>.</p><p>想要查看更详细的pod情况，我们可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl get pod -o wide<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/AL5Cu1h0amel.png"></p><p>这里我们可以发现三个pod被k8s自动的分配到了三个节点上而实现集群中的负载均衡（LB），而这里的IP是创建pod的时候进行随机分配的，我们并不能预知。</p><p>如果想要查看某一个pod部署之后的情况，我们可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl describe pods nginx-clideployment-5696d55d9d-gdtrt<br></code></pre></div></td></tr></table></figure><p>如果我们只是输入<code>nginx-clideployment</code>的话就会把所有相关的<code>nginx-clideployment</code>都列出来。</p><p><img src="https://resource.tinychen.com/blog/20190722/Jutvf3JCdqkU.png"></p><p>这里的信息很多，我们可以看到<code>namespace</code>是使用的默认<code>default</code>（一般都是<code>default</code>，除非是数十人以上在同时使用这个集群，否则一般不建议新建<code>namespace</code>来区分<code>pod</code>，大多数情况下使用<code>label</code>即可区分各类<code>pod</code>。）</p><p><code>Controlled By: </code>则说明了这个deployment是由<code>ReplicaSet</code>控制的。</p><p><code>Conditions:</code>则表明了当前的pod状况</p><p><img src="https://resource.tinychen.com/blog/20190722/Ed0q6L0SUtY0.png"></p><p><code>Volumes</code>称之为卷，这个概念我们暂时还没有接触到，等到我们的宿主机需要与容器内的服务进行数据交互的时候再进行了解。</p><p><code>Events</code>则相当于log，记录了pod运行的所有情况，如果遇到了运行不正常的情况，我们也可以查看这里来了解详情。</p><h2 id="2-2-yaml配置文件部署"><a href="#2-2-yaml配置文件部署" class="headerlink" title="2.2 yaml配置文件部署"></a>2.2 yaml配置文件部署</h2><p>接下来我们尝试使用yaml文件来进行部署。我们新建一个文件，命名为<code>nginx-yamldeployment.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-yamldeployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">template:</span> <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">web_server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.17.1</span><br></code></pre></div></td></tr></table></figure><ul><li>apiVersion是当前配置格式的版本。</li><li>kind是要创建的资源类型，这里是Deployment。</li><li>metadata是该资源的元数据，name是必需的元数据项。</li><li>spec部分是该Deployment的规格说明。</li><li>replicas 指明副本数量，默认为1。</li><li>template 定义Pod的模板，这是配置文件的重要部分。</li><li>metadata定义Pod的元数据，至少要定义一个label。label的key和value可以任意指定。</li><li>spec 描述Pod的规格，此部分定义Pod中每一个容器的属性，name和image是必需的。</li></ul><p>接下来我们使用<code>kubectl apply</code>指令进行部署。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl apply -f nginx-yamldeployment.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/1qNQA1MogwjW.png"></p><p><img src="https://resource.tinychen.com/blog/20190722/UeztE4dn2Akf.png"></p><p>我们可以看到这里是已经运行正常了，那么如果我们想要修改这个deployment的属性，比如说副本数量从5改为6，那么我们可以直接编辑刚刚的<code>nginx-yamldeployment.yml</code>文件，然后再执行<code>kubectl apply -f nginx-yamldeployment.yml</code>，但是如果文件找不到了，我们可以使用另外的方法：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">edit</span> deployments.apps nginx-yamldeployment<br></code></pre></div></td></tr></table></figure><p>这样子我们就能直接编辑这个deployment的yaml配置文件，编辑的操作方式和vim相同，修改完成后会自动生效。</p><p><img src="https://resource.tinychen.com/blog/20190722/X9zrozUlt8TB.png"></p><p>我们修改保存退出后，可以看到这里已经生效了。</p><p><img src="https://resource.tinychen.com/blog/20190722/Y0t7LlK0agLC.png"></p><blockquote><p>对于使用命令行创建的deployment，我们可以使用命令行来进行修改，也可以直接<code>kubectl edit</code>来编辑对应的<code>yaml</code>配置文件。</p></blockquote><h1 id="3、DaemonSet"><a href="#3、DaemonSet" class="headerlink" title="3、DaemonSet"></a>3、DaemonSet</h1><p>我们先来看一下<a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/">官网对DaemonSet的解释</a>：</p><p><strong>DaemonSet</strong> 确保全部（或者某些）节点上运行一个 Pod 的副本。当有节点加入集群时，也会为他们新增一个 Pod 。 当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p><p>使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个节点上运行 <code>glusterd</code>、<code>ceph</code>。</li><li>在每个节点上运行日志收集 daemon，例如<code>fluentd</code>、<code>logstash</code>。</li><li>在每个节点上运行监控 daemon，例如 <code>Prometheus Node Exporter</code>、<code>collectd</code>、<code>Datadog</code> 代理、<code>New Relic</code> 代理，或 <code>Ganglia gmond</code>。</li></ul><p>一个简单的用法是在所有的节点上都启动一个 DaemonSet，将被作为每种类型的 daemon 使用。 一个稍微复杂的用法是单独对每种 daemon 类型使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU要求。</p><p>实际上，k8s本身的一些系统组件服务就是以DaemonSet的形式运行在各个节点上的。</p><p><img src="https://resource.tinychen.com/blog/20190722/urEELjhVL5pJ.png"></p><h1 id="4、Job"><a href="#4、Job" class="headerlink" title="4、Job"></a>4、Job</h1><h2 id="4-1-部署job"><a href="#4-1-部署job" class="headerlink" title="4.1 部署job"></a>4.1 部署job</h2><ul><li>Job创建一个或多个Pod并确保指定数量的Pod成功终止。当pod成功完成后，Job会跟踪成功的完成情况。达到指定数量的成功完成时，Job完成。</li><li>删除Job将清理它创建的Pod。</li><li>一个简单的例子是创建一个Job对象，以便可靠地运行一个Pod并成功完成指定任务。如果第一个Pod失败或被删除（例如由于节点硬件故障或节点重启），Job对象将启动一个新的Pod。</li><li>我们还可以使用Job并行运行多个Pod。</li></ul><p>直接照搬官网的解释可能会有些难以理解，我们来运行一个例子就能很好的说明情况了。</p><p>我们先新建一个job的配置文件，命名为<code>pijob.yml</code>,这个任务是将pi计算到小数点后两千位，然后再打印出来。我们运行一下看看。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">perl</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;perl&quot;</span>,  <span class="hljs-string">&quot;-Mbignum=bpi&quot;</span>, <span class="hljs-string">&quot;-wle&quot;</span>, <span class="hljs-string">&quot;print bpi(2000)&quot;</span>]<br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-attr">backoffLimit:</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/VP8WHET3smgj.png"></p><p>我们查看它的详细情况</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">kubectl describe jobs/<span class="hljs-literal">pi</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/0A67XaVCvl2R.png"></p><p>这里可以看到，运行了37s后成功计算出结果。</p><p><img src="https://resource.tinychen.com/blog/20190722/CXlbvVrzRVCF.png"></p><p>查看pod也可以看到它的状态是<code>Completed</code>，说明已经完成了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看创建的pod的名称</span><br>pods=$(kubectl get pods --selector=job-name=pi --output=jsonpath=<span class="hljs-string">&#x27;&#123;.items[*].metadata.name&#125;&#x27;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$pods</span><br><br><span class="hljs-comment"># 查看pod的运行结果</span><br>kubectl logs <span class="hljs-variable">$pods</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/Rfm3s2p7aiIR.png"></p><h2 id="4-2-job运行错误"><a href="#4-2-job运行错误" class="headerlink" title="4.2 job运行错误"></a>4.2 job运行错误</h2><p>我们现在来看一下运行失败的情况，我们把command里面的路径改错，使得它无法正常运行。</p><p><img src="https://resource.tinychen.com/blog/20190722/bRkqerw0wXID.png"></p><p>注意这里的<code>restartPolicy: Never</code>意味着pod运行失败了也不会重启。但是这个时候job会检测到运行失败，然后再新建一个pod来执行这个任务。</p><p><code>backoffLimit: 4</code>意味着最多只会新建4个pod，避免一直失败一直新建从而耗尽系统资源。</p><p><img src="https://resource.tinychen.com/blog/20190722/IoI2e03IUEYS.png"></p><p>我们查看event可以看到，确实是由于路径修改错误而导致无法正常运行。</p><p><img src="https://resource.tinychen.com/blog/20190722/ulE53nGBqDJ4.png"></p><p>接下来我们把<code>restartPolicy:</code> 改为 <code>OnFailure</code></p><p>这时候我们可以看到并没有启动多个pod，二是对发生错误的pod进行重启操作。</p><p><img src="https://resource.tinychen.com/blog/20190722/BL0yke4Je6d6.png"></p><h2 id="4-3-job并行化"><a href="#4-3-job并行化" class="headerlink" title="4.3 job并行化"></a>4.3 job并行化</h2><p>在多线程早已普及的今天，很多任务我们都可以使用并行化来进行加速运行，这里也不例外。</p><p>我们在配置文件中的<code>spec</code>中加入  <code>completions:</code> 和<code>parallelism:</code> 。</p><p><img src="https://resource.tinychen.com/blog/20190722/2BmkmHGd2MmS.png"></p><p>图中表示需要运行12个，每次并行运行6个。</p><p><img src="https://resource.tinychen.com/blog/20190722/Hnip5ybbyy35.png"></p><p>从图中我们可以看到确实是每次运行6个（运行时间相同说明同时开始运行）。</p><p>等待一段时候之后，我们再次查看而已看到任务已经顺利完成了。</p><p><img src="https://resource.tinychen.com/blog/20190722/BKb4TYvbfLuU.png"></p><h1 id="5、CronJob"><a href="#5、CronJob" class="headerlink" title="5、CronJob"></a>5、CronJob</h1><p>熟悉linux的同学一定不会对cron感到陌生，因为cron就是用来管理linux中的定时任务的工具，所以CronJob我们可以理解为定时版的Job，其定时任务的编写格式也和Cron相似。关于Cron可以<a href="https://tinychen.com/20190710-rhel7-cron/">点击这里</a>查看小七之前的博客。</p><blockquote><p>需要注意的是，CronJob的时间以启动该CronJob任务的Master节点的时间为准。</p></blockquote><p>Cronjob只负责创建与其计划相匹配的Job，而Job则负责管理它所代表的Pod。也就是说，CronJob只负责创建Job，具体的管理操作还是由Job来负责。</p><p>这里是CronJob的<a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">官方文档</a>。</p><p>我们新建一个<code>hellocronjob.yml</code>来查看一下它的工作情况。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>            <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">date;</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">cluster</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></div></td></tr></table></figure><p>这个定时任务的操作就是每分钟输出一次时间和<code>Hello from the Kubernetes cluster</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看cronjob的运行状态</span><br>kubectl get cronjobs.batch<br><br>kubectl get jobs.batch --watch<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190722/N47BvxckinQ4.png"></p><p>我们随便查看其中的一个log可以看到输出的结果：</p><p><img src="https://resource.tinychen.com/blog/20190722/6fA1eJo9cNwU.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;运行容器化应用是Kubernetes最重要的核心功能。为满足不同的业务需要，Kubernetes提供了多种Controller，主要包括&lt;code&gt;Deployment&lt;/code&gt;、&lt;code&gt;DaemonSet&lt;/code&gt;、&lt;code&gt;Job&lt;/code&gt;、&lt;code&gt;CronJob&lt;/code&gt;等。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
    <category term="docker" scheme="https://tinychen.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上部署高可用的k8s集群(v1.15)</title>
    <link href="https://tinychen.com/20190718-centos7-install-k8s-ha/"/>
    <id>https://tinychen.com/20190718-centos7-install-k8s-ha/</id>
    <published>2019-07-18T03:00:00.000Z</published>
    <updated>2019-07-18T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在VMware虚拟机中的CentOS7集群部署高可用的k8s集群环境(v1.15)。</p><p>这里有两篇基础知识的补充和单master节点集群的搭建过程，有需要的同学可以看一下。</p><p><a href="https://tinychen.com/20190715-k8s-concepts-intro/">k8s重要概念及各组件简介</a></p><p><a href="https://tinychen.com/20190716-centos7-install-k8s/">在CentOS7上部署k8s集群(v1.15)</a></p><span id="more"></span><h1 id="1、前期工作"><a href="#1、前期工作" class="headerlink" title="1、前期工作"></a>1、前期工作</h1><h2 id="1-1-什么是高可用集群？"><a href="#1-1-什么是高可用集群？" class="headerlink" title="1.1 什么是高可用集群？"></a>1.1 什么是高可用集群？</h2><p>简单来说就是master节点不止一个的集群，我们知道k8s的node节点中，非master节点都需要听从master节点来进行任务的调度分配和负载均衡等操作，这样的好处就是我们只需要操作master节点就可以调度所有的node节点，坏处就是如果master节点崩了，那么整个集群也就崩掉了。所以这里的解决方案就是配置多个master节点，如果一个崩掉了还有别的备用备用节点顶上，不至于出现崩溃的情况。</p><h2 id="1-2-集群机器"><a href="#1-2-集群机器" class="headerlink" title="1.2 集群机器"></a>1.2 集群机器</h2><p>这里必须要说一下，k8s对每个节点的机器配置的最低要求是2C2G，即两核心的CPU，2G的内存，低于这个配置也不是不能用，只是在初始化的时候会警告而已。这里小七采用的是虚拟机的方法（穷学生没有真机集群），具体的配置如下表。</p><table><thead><tr><th align="center">名称</th><th align="center">配置</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">VIP</td><td align="center">不需要虚拟机，留一个IP即可</td><td align="center">192.168.100.10</td></tr><tr><td align="center">master20</td><td align="center">8C4G，CentOS7.6</td><td align="center">192.168.100.20</td></tr><tr><td align="center">master21</td><td align="center">8C4G，CentOS7.6</td><td align="center">192.168.100.21</td></tr><tr><td align="center">master22</td><td align="center">8C4G，CentOS7.6</td><td align="center">192.168.100.22</td></tr><tr><td align="center">node30</td><td align="center">8C8G，CentOS7.6</td><td align="center">192.168.100.30</td></tr><tr><td align="center">node31</td><td align="center">8C8G，CentOS7.6</td><td align="center">192.168.100.31</td></tr><tr><td align="center">node32</td><td align="center">8C8G，CentOS7.6</td><td align="center">192.168.100.32</td></tr></tbody></table><p>真机用的是一块渣渣i7-8700和64G的内存，勉强能撑一下。</p><h2 id="1-3-集群间免密登录"><a href="#1-3-集群间免密登录" class="headerlink" title="1.3 集群间免密登录"></a>1.3 集群间免密登录</h2><p>之前专门写过一篇文章，这里不再赘述。<a href="https://tinychen.com/20190709-multi-ssh/">多主机间实现SSH免密登录</a></p><p>需要注意的是，在hosts文件中，我们还需要为<code>192.168.100.10</code>添加一下解析。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.100.10  kubernetes.haproxy.com&quot;</span> &gt;&gt; /etc/hosts<br></code></pre></div></td></tr></table></figure><p>这里的<code>kubernetes.haproxy.com</code>可以改成别的名字，但是注意后面要用到，建议改成有意义的名字。</p><h2 id="1-4-时间同步-所有机器"><a href="#1-4-时间同步-所有机器" class="headerlink" title="1.4 时间同步(所有机器)"></a>1.4 时间同步(所有机器)</h2><p>这里我们使用ntpdate来进行时间同步</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum安装ntpdate工具</span><br>yum install ntpdate -y<br><br><span class="hljs-comment"># 使用阿里云的源同步时间</span><br>ntpdate ntp1.aliyun.com<br><br><span class="hljs-comment"># 最后查看一下时间</span><br>hwclock<br></code></pre></div></td></tr></table></figure><blockquote><p>我们也可以在<code>/etc/cron.hourly/</code>下面直接新建一个文件，将<code>ntpdate ntp1.aliyun.com</code>这条命令写进去，这样cron就会每小时执行一次这个同步时间操作。<a href="https://tinychen.com/20190710-rhel7-cron/">关于cron可以点击这里了解。</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt;/etc/cron.hourly/synctime &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">ntpdate ntp1.aliyun.com</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="1-5-升级内核-所有机器"><a href="#1-5-升级内核-所有机器" class="headerlink" title="1.5 升级内核(所有机器)"></a>1.5 升级内核(所有机器)</h2><p>建议直接升级centos官方的内核，这样兼容性最好。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前内核版本</span><br>uname -r<br><br><span class="hljs-comment"># 更新yum源</span><br>yum update -y<br><br><span class="hljs-comment"># 升级yum源中的最新版内核</span><br>yum install -y kernel<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190718/3WGsaJ3zAOPe.png"></p><p>此外我们还需要设置一下内核的namespace</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">grubby --args=<span class="hljs-string">&quot;user_namespace.enable=1&quot;</span> --update-kernel=<span class="hljs-string">&quot;<span class="hljs-subst">$(grubby --default-kernel)</span>&quot;</span><br><br><span class="hljs-comment"># 重新加载内核</span><br>reboot<br></code></pre></div></td></tr></table></figure><h2 id="1-6-关闭防火墙-所有机器"><a href="#1-6-关闭防火墙-所有机器" class="headerlink" title="1.6 关闭防火墙(所有机器)"></a>1.6 关闭防火墙(所有机器)</h2><p>因为k8s涉及的端口非常多，我们先把防火墙关了，<strong>如果安装了iptable也先关掉。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭centos7自带的firewall防火墙</span><br>systemctl disable firewalld.service <br>systemctl stop firewalld.service <br></code></pre></div></td></tr></table></figure><h2 id="1-7-设置selinux-所有机器"><a href="#1-7-设置selinux-所有机器" class="headerlink" title="1.7 设置selinux(所有机器)"></a>1.7 设置selinux(所有机器)</h2><p><strong>来自官网的说明，必须把selinux改为permissive（直接生效无需重启）或者disabled（需要重启生效）</strong></p><blockquote><p>通过命令 <code>setenforce 0</code> 和 <code>sed ...</code> 可以将 SELinux 设置为 permissive 模式(将其禁用)。 只有执行这一操作之后，容器才能访问宿主的文件系统，进而能够正常使用 Pod 网络。您必须这么做，直到 kubelet 做出升级支持 SELinux 为止。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setenforce 0<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment"># 也可以直接修改/etc/selinux/config文件</span><br></code></pre></div></td></tr></table></figure><blockquote><p>关于SELinux的简单介绍，<a href="https://tinychen.com/20190707-rhel7-selinux/">可以点击这里查看之前的博客。</a></p></blockquote><h2 id="1-8-关闭swap（所有机器）"><a href="#1-8-关闭swap（所有机器）" class="headerlink" title="1.8 关闭swap（所有机器）"></a>1.8 关闭swap（所有机器）</h2><p>k8s官方不推荐我们使用swap分区，所以这里我们也关闭掉。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">swapoff -a<br><br>vim /etc/fstab<br><span class="hljs-comment"># 注释掉swap分区启动挂载的那一行</span><br><br><span class="hljs-comment"># 重启机器</span><br>reboot<br></code></pre></div></td></tr></table></figure><h1 id="2、配置ipvs-所有机器"><a href="#2、配置ipvs-所有机器" class="headerlink" title="2、配置ipvs(所有机器)"></a>2、配置ipvs(所有机器)</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum源安装ipvs</span><br>yum install ipvsadm ipset -y<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使配置生效</span><br>sysctl --system<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 加载模块</span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br><br><span class="hljs-comment"># 查看是否加载</span><br>lsmod | grep ip_vs<br><br><span class="hljs-comment"># 配置开机自加载</span><br>cat &lt;&lt;<span class="hljs-string">EOF &gt;&gt; /etc/rc.local</span><br><span class="hljs-string">modprobe -- ip_vs</span><br><span class="hljs-string">modprobe -- ip_vs_rr</span><br><span class="hljs-string">modprobe -- ip_vs_wrr</span><br><span class="hljs-string">modprobe -- ip_vs_sh</span><br><span class="hljs-string">modprobe -- nf_conntrack_ipv4</span><br><span class="hljs-string">EOF</span><br><br>chmod +x /etc/rc.d/rc.local<br></code></pre></div></td></tr></table></figure><h1 id="3、配置k8s相关网络参数-所有机器"><a href="#3、配置k8s相关网络参数-所有机器" class="headerlink" title="3、配置k8s相关网络参数(所有机器)"></a>3、配置k8s相关网络参数(所有机器)</h1><p>接着我们需要编辑一个k8s的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 需要设定/etc/sysctl.d/k8s.conf的系统参数。</span><br>cat &lt;&lt;<span class="hljs-string">EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_time = 600</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_probes = 10</span><br><span class="hljs-string">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class="hljs-string">net.ipv4.conf.all.rp_filter = 0</span><br><span class="hljs-string">net.ipv4.conf.default.rp_filter = 0</span><br><span class="hljs-string">net.ipv4.conf.default.arp_announce = 2</span><br><span class="hljs-string">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="hljs-string">net.ipv4.conf.all.arp_announce = 2</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="hljs-string">net.ipv4.tcp_syncookies = 1</span><br><span class="hljs-string">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class="hljs-string">net.ipv4.tcp_synack_retries = 2</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.netfilter.nf_conntrack_max = 2310720</span><br><span class="hljs-string">fs.inotify.max_user_watches=89100</span><br><span class="hljs-string">fs.may_detach_mounts = 1</span><br><span class="hljs-string">fs.file-max = 52706963</span><br><span class="hljs-string">fs.nr_open = 52706963</span><br><span class="hljs-string">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="hljs-string">vm.swappiness = 0</span><br><span class="hljs-string">vm.overcommit_memory=1</span><br><span class="hljs-string">vm.panic_on_oom=0</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><h1 id="4、配置iptables-所有机器"><a href="#4、配置iptables-所有机器" class="headerlink" title="4、配置iptables(所有机器)"></a>4、配置iptables(所有机器)</h1><p>保险起见，我们还需要配置iptables</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><br>yum install -y bridge-utils.x86_64<br>modprobe bridge<br>modprobe br_netfilter<br><br>sysctl -p<br><br>reboot<br></code></pre></div></td></tr></table></figure><h1 id="5、检查配置-所有机器"><a href="#5、检查配置-所有机器" class="headerlink" title="5、检查配置(所有机器)"></a>5、检查配置(所有机器)</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 检查系统内核和模块是否适合运行 docker (仅适用于 linux 系统)</span><br>curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh &gt; check-config.sh<br><br>bash ./check-config.sh<br></code></pre></div></td></tr></table></figure><p>这里只需要保证必要项通过就可以了。</p><h1 id="6、安装docker-所有机器"><a href="#6、安装docker-所有机器" class="headerlink" title="6、安装docker(所有机器)"></a>6、安装docker(所有机器)</h1><h2 id="6-1-安装docker"><a href="#6-1-安装docker" class="headerlink" title="6.1 安装docker"></a>6.1 安装docker</h2><p>centos版本的decker-ce官方安装指导：</p><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>这里我们主要是通过yum的方式来安装，如果出现无法连接docker官网的情况，建议检查一下网络，或者使用rpm的方式进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 导入官网提供的repo</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br><span class="hljs-comment"># 安装docker及其相关组件</span><br>sudo yum install -y docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment"># 启动docker</span><br>sudo systemctl start docker<br><br><span class="hljs-comment"># 跑个helloworld看看</span><br>sudo docker run hello-world<br><br><span class="hljs-comment"># 最后我们还要设置一下开机启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></div></td></tr></table></figure><h2 id="6-2-配置cgroup"><a href="#6-2-配置cgroup" class="headerlink" title="6.2 配置cgroup"></a>6.2 配置cgroup</h2><p>k8s推荐docker的cgroup驱动使用systemd，说是会更稳定，所以这里我们还需要修改一下。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## Create /etc/docker directory.</span><br>mkdir /etc/docker<br><br><span class="hljs-comment"># Setup daemon.</span><br>cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>mkdir -p /etc/systemd/system/docker.service.d<br><br><span class="hljs-comment"># Restart Docker</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></div></td></tr></table></figure><h2 id="6-3-配置普通用户"><a href="#6-3-配置普通用户" class="headerlink" title="6.3 配置普通用户"></a>6.3 配置普通用户</h2><p>默认情况下，普通用户需要使用sudo才能操作docker，我们这里需要进行一些修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到普通用户</span><br>su 普通用户名<br><br><span class="hljs-comment"># 创建docker组</span><br>sudo groupadd docker<br><br><span class="hljs-comment"># 将当前用户加入docker用户组</span><br>sudo gpasswd -a <span class="hljs-variable">$&#123;USER&#125;</span> docker<br><br><span class="hljs-comment"># 重启docker服务</span><br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure><h1 id="7、安装配置keepalived、haproxy-所有master节点"><a href="#7、安装配置keepalived、haproxy-所有master节点" class="headerlink" title="7、安装配置keepalived、haproxy(所有master节点)"></a>7、安装配置keepalived、haproxy(所有master节点)</h1><h2 id="7-1-安装"><a href="#7-1-安装" class="headerlink" title="7.1 安装"></a>7.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum源直接安装</span><br>yum install socat keepalived haproxy -y<br><br><span class="hljs-comment"># 设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> haproxy<br>systemctl <span class="hljs-built_in">enable</span> keepalived<br><br><span class="hljs-comment"># 备份一下原来的配置文件以防万一</span><br>mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak<br>mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak<br></code></pre></div></td></tr></table></figure><h2 id="7-2-编辑haproxy配置文件"><a href="#7-2-编辑haproxy配置文件" class="headerlink" title="7.2 编辑haproxy配置文件"></a>7.2 编辑haproxy配置文件</h2><p>首先我们开启系统的日志功能</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>rsyslog.conf     <span class="hljs-comment">#为其添加日志功能</span><br><span class="hljs-comment"># Provides UDP syslog reception</span><br><span class="hljs-variable">$ModLoad</span> imudp<br><span class="hljs-variable">$UDPServerRun</span> <span class="hljs-number">514</span>                   ------&gt;启动udp，启动端口后将作为服务器工作<br> <br><span class="hljs-comment"># Provides TCP syslog reception</span><br><span class="hljs-variable">$ModLoad</span> imtcp<br><span class="hljs-variable">$InputTCPServerRun</span> <span class="hljs-number">514</span>            ------&gt;启动tcp监听端口<br>local2.*                                                <span class="hljs-regexp">/var/</span>log/haproxy.log<br></code></pre></div></td></tr></table></figure><p>注意配置文件里面的IP要根据自己的master节点实际情况进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; /etc/haproxy/haproxy.cfg &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">global</span><br><span class="hljs-string">    log127.0.0.1local2</span><br><span class="hljs-string">    chroot      /var/lib/haproxy</span><br><span class="hljs-string">    pidfile     /var/run/haproxy.pid</span><br><span class="hljs-string">    maxconn     1024</span><br><span class="hljs-string">    user        haproxy</span><br><span class="hljs-string">    group       haproxy</span><br><span class="hljs-string">    daemon</span><br><span class="hljs-string">    nbproc      1</span><br><span class="hljs-string">    stats socket /var/lib/haproxy/stats</span><br><span class="hljs-string"></span><br><span class="hljs-string">defaults</span><br><span class="hljs-string">    mode                    tcp</span><br><span class="hljs-string">    log                     global</span><br><span class="hljs-string">    option                  tcplog</span><br><span class="hljs-string">    option                  dontlognull</span><br><span class="hljs-string">    option                  redispatch</span><br><span class="hljs-string">    retries                 3</span><br><span class="hljs-string">    timeout queue           1m</span><br><span class="hljs-string">    timeout connect         10s</span><br><span class="hljs-string">    timeout client          1m</span><br><span class="hljs-string">    timeout server          1m</span><br><span class="hljs-string">    timeout check           10s</span><br><span class="hljs-string"></span><br><span class="hljs-string">listen stats</span><br><span class="hljs-string">    mode   http</span><br><span class="hljs-string">    bind0.0.0.0:12345</span><br><span class="hljs-string">    stats   enable</span><br><span class="hljs-string">log127.0.0.1local2</span><br><span class="hljs-string">statsrealm  Haproxy\ Statistics</span><br><span class="hljs-string">    stats   uri     /stats</span><br><span class="hljs-string">    stats   auth    admin:admin</span><br><span class="hljs-string">    stats   admin   if TRUE</span><br><span class="hljs-string"></span><br><span class="hljs-string">frontend  k8s</span><br><span class="hljs-string">bind0.0.0.0:8443</span><br><span class="hljs-string">    mode      tcp</span><br><span class="hljs-string">    maxconn      200</span><br><span class="hljs-string">    default_backend     k8s-https</span><br><span class="hljs-string"></span><br><span class="hljs-string">backend k8s-https</span><br><span class="hljs-string">    balance      roundrobin</span><br><span class="hljs-string">modetcp</span><br><span class="hljs-string">    server master220 192.168.100.20:6443  check inter 10000 fall 2 rise 2 weight 1</span><br><span class="hljs-string">    server master221 192.168.100.21:6443  check inter 10000 fall 2 rise 2 weight 1</span><br><span class="hljs-string">    server master222 192.168.100.22:6443  check inter 10000 fall 2 rise 2 weight 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><h2 id="7-3-编辑keepalived配置文件"><a href="#7-3-编辑keepalived配置文件" class="headerlink" title="7.3 编辑keepalived配置文件"></a>7.3 编辑keepalived配置文件</h2><p><strong>注意，三个节点keepalived配置文件存在区别：</strong></p><ul><li>router_id分别为master20、master21、master22</li><li>state分别为MASTER、BACKUP、BACKUP</li><li>priority分别为100、90、80</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; /etc/keepalived/keepalived.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">global_defs &#123;</span><br><span class="hljs-string">   router_id master20</span><br><span class="hljs-string">   script_user root</span><br><span class="hljs-string">   enable_script_security</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_script check_haproxy &#123;</span><br><span class="hljs-string">    script /etc/keepalived/check_haproxy.sh</span><br><span class="hljs-string">    interval 3</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_instance VI_1 &#123;</span><br><span class="hljs-string">    state MASTER</span><br><span class="hljs-string">    interface ens32</span><br><span class="hljs-string">    virtual_router_id 80</span><br><span class="hljs-string">    priority 100</span><br><span class="hljs-string">    advert_int 1</span><br><span class="hljs-string">    authentication &#123;</span><br><span class="hljs-string">        auth_type PASS</span><br><span class="hljs-string">        auth_pass 1111</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    virtual_ipaddress &#123;</span><br><span class="hljs-string">        192.168.100.10/24</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    track_script &#123;   </span><br><span class="hljs-string">        check_haproxy</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><p>此外我们还需要编辑一个检查的脚本来确保正常</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; /etc/keepalived/check_haproxy.sh &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">NUM=`ps -C haproxy --no-header |wc -l`</span><br><span class="hljs-string">if [ $NUM -eq 0 ];then</span><br><span class="hljs-string">    systemctl stop keepalived</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><h1 id="8、安装k8s-所有机器"><a href="#8、安装k8s-所有机器" class="headerlink" title="8、安装k8s(所有机器)"></a>8、安装k8s(所有机器)</h1><p>k8s官网提供的yum源并不太好用，我们这里使用阿里云的yum镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个yum源</span><br>cat &gt;&gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">exclude=kube*</span><br><span class="hljs-string">EOF</span><br><br>yum clean all<br><br>yum repolist<br><br>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><span class="hljs-comment"># 启动kubelet并设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet<br></code></pre></div></td></tr></table></figure><p>关于SELinux的简单介绍，可以点击这里查看之前的博客。</p><h2 id="9-1-获取默认配置文件"><a href="#9-1-获取默认配置文件" class="headerlink" title="9.1 获取默认配置文件"></a>9.1 获取默认配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获得默认配置文件。</span><br>kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm.conf<br><br><span class="hljs-comment"># 查看需要的镜像</span><br>kubeadm config images list --config kubeadm.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/sqMD0W66d4AF.png"><br>不知道为啥这里显示的居然是1.14版本的，小七安装的明明是1.15版本，我们把<code>kubeadm.conf</code>里面的版本号改成1.15再查看</p><p><img src="https://resource.tinychen.com/blog/20190717/przVGhQPmirw.png"></p><h2 id="9-2-编辑自定义配置文件"><a href="#9-2-编辑自定义配置文件" class="headerlink" title="9.2 编辑自定义配置文件"></a>9.2 编辑自定义配置文件</h2><p>注意下面的ip地址和版本号需要根据实际情况来进行改动。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置文件kubuadm_master20.conf</span><br><br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: 192.168.100.20<br>  bindPort: 6443<br>---<br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.15.0<br>controlPlaneEndpoint: <span class="hljs-string">&quot;kubernetes.haproxy.com:8443&quot;</span><br>imageRepository: registry.aliyuncs.com/google_containers<br>apiServer:<br>  certSANs:<br>  - <span class="hljs-string">&quot;master20&quot;</span><br>  - <span class="hljs-string">&quot;master21&quot;</span><br>  - <span class="hljs-string">&quot;master22&quot;</span><br>  - 192.168.100.10<br>  - 192.168.100.20<br>  - 192.168.100.21<br>  - 192.168.100.22<br><br>networking:<br>  podSubnet: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br><br>etcd:<br>  <span class="hljs-built_in">local</span>:<br>    extraArgs:<br>      listen-client-urls: <span class="hljs-string">&quot;https://127.0.0.1:2379,https://192.168.100.20:2379&quot;</span><br>      advertise-client-urls: <span class="hljs-string">&quot;https://192.168.100.20:2379&quot;</span><br>      listen-peer-urls: <span class="hljs-string">&quot;https://192.168.100.20:2380&quot;</span><br>      initial-advertise-peer-urls: <span class="hljs-string">&quot;https://192.168.100.20:2380&quot;</span><br>      initial-cluster: <span class="hljs-string">&quot;master20=https://192.168.100.20:2380&quot;</span><br>      initial-cluster-state: new<br>    serverCertSANs:<br>      - master20<br>      - 192.168.100.20<br>    peerCertSANs:<br>      - master20<br>      - 192.168.100.20<br>---<br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>kind: KubeProxyConfiguration<br>mode: ipvs<br><br></code></pre></div></td></tr></table></figure><h2 id="9-3-初始化"><a href="#9-3-初始化" class="headerlink" title="9.3 初始化"></a>9.3 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取需要的镜像</span><br>kubeadm config images pull --config kubuadm_master20.conf<br><br><span class="hljs-comment"># 初始化</span><br>kubeadm init --config kubuadm_master20.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/BM1ThaHUbcgV.png"></p><p>这里的token需要记下来。然后我们需要切换到非root用户来进行配置。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo chown $(id -u):$(id -g)<br> <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 添加kubectl的自动补全功能</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure><h1 id="10、安装flannel网络（master20）"><a href="#10、安装flannel网络（master20）" class="headerlink" title="10、安装flannel网络（master20）"></a>10、安装flannel网络（master20）</h1><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br></code></pre></div></td></tr></table></figure><p>我们先下载一下配置文件，为了保险起见，我们手动指定网卡</p><p><img src="https://resource.tinychen.com/blog/20190717/bFdDgyBt897N.png"></p><p>然后我们执行初始化安装操作。</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f kube-flannel.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/XQdoAPF9dvBU.png"></p><p>这时候我们再查看节点就会发现，coredns已经正常工作了。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pods -A<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/ok3yVOxN6vYc.png"></p><h1 id="11、分发证书（master20）"><a href="#11、分发证书（master20）" class="headerlink" title="11、分发证书（master20）"></a>11、分发证书（master20）</h1><p>我们在master20节点上编写一个脚本进行证书的分发，只需要分发到其他的master节点即可。<strong>注意里面的ip地址和用户名需要根据实际情况进行修改。</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt; districert &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">for index in 21 22; do</span><br><span class="hljs-string">  ip=192.168.100.$&#123;index&#125;</span><br><span class="hljs-string">  ssh $ip &quot;mkdir -p /etc/kubernetes/pki/etcd/; mkdir -p /home/tinychen/.kube/&quot;</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/ca.crt $ip:/etc/kubernetes/pki/ca.crt</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/ca.key $ip:/etc/kubernetes/pki/ca.key</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/sa.key $ip:/etc/kubernetes/pki/sa.key</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/sa.pub $ip:/etc/kubernetes/pki/sa.pub</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/front-proxy-ca.crt $ip:/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/front-proxy-ca.key $ip:/etc/kubernetes/pki/front-proxy-ca.key</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/etcd/ca.crt $ip:/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="hljs-string">  scp /etc/kubernetes/pki/etcd/ca.key $ip:/etc/kubernetes/pki/etcd/ca.key</span><br><span class="hljs-string">  scp /etc/kubernetes/admin.conf $ip:/etc/kubernetes/admin.conf</span><br><span class="hljs-string">  scp /etc/kubernetes/admin.conf $ip:/home/tinychen/.kube/config</span><br><span class="hljs-string">done</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><h1 id="12、配置master21"><a href="#12、配置master21" class="headerlink" title="12、配置master21"></a>12、配置master21</h1><h2 id="12-1-编辑自定义配置文件"><a href="#12-1-编辑自定义配置文件" class="headerlink" title="12.1 编辑自定义配置文件"></a>12.1 编辑自定义配置文件</h2><p>注意下面的ip地址和版本号需要根据实际情况来进行改动。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置文件kubeadm_master21.conf</span><br><br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: 192.168.100.21<br>  bindPort: 6443<br>---<br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.15.0<br>controlPlaneEndpoint: <span class="hljs-string">&quot;kubernetes.haproxy.com:8443&quot;</span><br>imageRepository: registry.aliyuncs.com/google_containers<br>apiServer:<br>  certSANs:<br>  - <span class="hljs-string">&quot;master20&quot;</span><br>  - <span class="hljs-string">&quot;master21&quot;</span><br>  - <span class="hljs-string">&quot;master22&quot;</span><br>  - 192.168.100.10<br>  - 192.168.100.20<br>  - 192.168.100.21<br>  - 192.168.100.22<br>networking:<br>  podSubnet: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br><br>etcd:<br>  <span class="hljs-built_in">local</span>:<br>    extraArgs:<br>      listen-client-urls: <span class="hljs-string">&quot;https://127.0.0.1:2379,https://192.168.100.21:2379&quot;</span><br>      advertise-client-urls: <span class="hljs-string">&quot;https://192.168.100.21:2379&quot;</span><br>      listen-peer-urls: <span class="hljs-string">&quot;https://192.168.100.21:2380&quot;</span><br>      initial-advertise-peer-urls: <span class="hljs-string">&quot;https://192.168.100.21:2380&quot;</span><br>      initial-cluster: <span class="hljs-string">&quot;master20=https://192.168.100.20:2380,master21=https://192.168.100.21:2380&quot;</span><br>      initial-cluster-state: existing<br>    serverCertSANs:<br>      - master21<br>      - 192.168.100.21<br>    peerCertSANs:<br>      - master21<br>      - 192.168.100.21<br>---<br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>kind: KubeProxyConfiguration<br>mode: ipvs<br></code></pre></div></td></tr></table></figure><h2 id="12-2-配置非root用户"><a href="#12-2-配置非root用户" class="headerlink" title="12.2 配置非root用户"></a>12.2 配置非root用户</h2><p>前面我们在脚本那里已经创建好了文件夹，我们这里只需要修改权限和添加自动补全就好了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo chown $(id -u):$(id -g)<br> <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 添加kubectl的自动补全功能</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure><h2 id="12-3-初始化"><a href="#12-3-初始化" class="headerlink" title="12.3 初始化"></a>12.3 初始化</h2><p>注意这里的文件名和IP地址要根据实际情况进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置证书</span><br>kubeadm init phase certs all --config kubeadm_master21.conf<br><span class="hljs-comment"># 配置etcd</span><br>kubeadm init phase etcd <span class="hljs-built_in">local</span> --config kubeadm_master21.conf<br><span class="hljs-comment"># 生成kubelet配置文件</span><br>kubeadm init phase kubeconfig kubelet --config kubeadm_master21.conf<br><span class="hljs-comment"># 启动kubelet</span><br>kubeadm init phase kubelet-start --config kubeadm_master21.conf<br></code></pre></div></td></tr></table></figure><p><strong>然后这一步要切换到非root用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将master21的etcd加入集群</span><br>kubectl <span class="hljs-built_in">exec</span> -n kube-system etcd-master20 -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://192.168.100.20:2379 member add master21 https://192.168.100.21:2380<br><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/KMrEwDxiDf17.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 启动 kube-apiserver、kube-controller-manager、kube-scheduler</span><br>kubeadm init phase kubeconfig all --config kubeadm_master21.conf<br>kubeadm init phase control-plane all --config kubeadm_master21.conf<br><br><span class="hljs-comment"># 将节点标记为master</span><br>kubeadm init phase mark-control-plane --config kubeadm_master21.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/E50I4UqxbbuR.png"></p><h1 id="13、配置master22"><a href="#13、配置master22" class="headerlink" title="13、配置master22"></a>13、配置master22</h1><h2 id="13-1-编辑自定义配置文件"><a href="#13-1-编辑自定义配置文件" class="headerlink" title="13.1 编辑自定义配置文件"></a>13.1 编辑自定义配置文件</h2><p>注意下面的ip地址和版本号需要根据实际情况来进行改动。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置文件kubeadm_master22.conf</span><br><br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: 192.168.100.22<br>  bindPort: 6443<br>---<br>apiVersion: kubeadm.k8s.io/v1beta2<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.15.0<br>controlPlaneEndpoint: <span class="hljs-string">&quot;kubernetes.haproxy.com:8443&quot;</span><br>imageRepository: registry.aliyuncs.com/google_containers<br>apiServer:<br>  certSANs:<br>  - <span class="hljs-string">&quot;master20&quot;</span><br>  - <span class="hljs-string">&quot;master21&quot;</span><br>  - <span class="hljs-string">&quot;master22&quot;</span><br>  - 192.168.100.10<br>  - 192.168.100.20<br>  - 192.168.100.21<br>  - 192.168.100.22<br>networking:<br>  podSubnet: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br><br>etcd:<br>  <span class="hljs-built_in">local</span>:<br>    extraArgs:<br>      listen-client-urls: <span class="hljs-string">&quot;https://127.0.0.1:2379,https://192.168.100.22:2379&quot;</span><br>      advertise-client-urls: <span class="hljs-string">&quot;https://192.168.100.22:2379&quot;</span><br>      listen-peer-urls: <span class="hljs-string">&quot;https://192.168.100.22:2380&quot;</span><br>      initial-advertise-peer-urls: <span class="hljs-string">&quot;https://192.168.100.22:2380&quot;</span><br>      initial-cluster: <span class="hljs-string">&quot;master20=https://192.168.100.20:2380,master21=https://192.168.100.21:2380,master22=https://192.168.100.22:2380&quot;</span><br>      initial-cluster-state: existing<br>    serverCertSANs:<br>      - master22<br>      - 192.168.100.22<br>    peerCertSANs:<br>      - master22<br>      - 192.168.100.22<br>---<br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>kind: KubeProxyConfiguration<br>mode: ipvs<br><br></code></pre></div></td></tr></table></figure><h2 id="13-2-配置非root用户"><a href="#13-2-配置非root用户" class="headerlink" title="13.2 配置非root用户"></a>13.2 配置非root用户</h2><p>前面我们在脚本那里已经创建好了文件夹，我们这里只需要修改权限和添加自动补全就好了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo chown $(id -u):$(id -g)<br> <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 添加kubectl的自动补全功能</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure><h2 id="13-3-初始化"><a href="#13-3-初始化" class="headerlink" title="13.3 初始化"></a>13.3 初始化</h2><p>注意这里的文件名和IP地址要根据实际情况进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置证书</span><br>kubeadm init phase certs all --config kubeadm_master22.conf<br><span class="hljs-comment"># 配置etcd</span><br>kubeadm init phase etcd <span class="hljs-built_in">local</span> --config kubeadm_master22.conf<br><span class="hljs-comment"># 生成kubelet配置文件</span><br>kubeadm init phase kubeconfig kubelet --config kubeadm_master22.conf<br><span class="hljs-comment"># 启动kubelet</span><br>kubeadm init phase kubelet-start --config kubeadm_master22.conf<br></code></pre></div></td></tr></table></figure><p><strong>然后这一步要切换到非root用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将master22的etcd加入集群</span><br><br>kubectl <span class="hljs-built_in">exec</span> -n kube-system etcd-master20 -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://192.168.100.20:2379 member add master22 https://192.168.100.22:2380<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 启动 kube-apiserver、kube-controller-manager、kube-scheduler</span><br>kubeadm init phase kubeconfig all --config kubeadm_master22.conf<br>kubeadm init phase control-plane all --config kubeadm_master22.conf<br><br><span class="hljs-comment"># 将节点标记为master</span><br>kubeadm init phase mark-control-plane --config kubeadm_master22.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/LHqaqwhqRgIj.png"></p><h1 id="14、添加node节点"><a href="#14、添加node节点" class="headerlink" title="14、添加node节点"></a>14、添加node节点</h1><p>node节点的添加我们只需要切换到root用户执行之前master20初始化成功提示的指令即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubeadm join kubernetes.haproxy.com:8443 --token m42q2v.y8sffomwkgjlhx8h \<br>    --discovery-token-ca-cert-hash sha256:1829cbaf37e968b43f91e6f0b65e2f2b7985a2d3d17ec66f3af70e0d15db01de <br></code></pre></div></td></tr></table></figure><h1 id="15、查看最终效果"><a href="#15、查看最终效果" class="headerlink" title="15、查看最终效果"></a>15、查看最终效果</h1><h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><p><img src="https://resource.tinychen.com/blog/20190717/c2MnYCxxCJiQ.png"></p><h2 id="查看pods"><a href="#查看pods" class="headerlink" title="查看pods"></a>查看pods</h2><p><img src="https://resource.tinychen.com/blog/20190717/QnXPwJikRui0.png"></p><h2 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">exec</span> -n kube-system etcd-master20 \<br> -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \<br> --cert-file /etc/kubernetes/pki/etcd/peer.crt \<br> --key-file /etc/kubernetes/pki/etcd/peer.key \<br> --endpoints=https://192.168.100.20:2379 member list<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190717/Eo0C4JnfTGsg.png"></p><h2 id="查看ipvs情况"><a href="#查看ipvs情况" class="headerlink" title="查看ipvs情况"></a>查看ipvs情况</h2><p><img src="https://resource.tinychen.com/blog/20190717/Tt8eD0VvRoVw.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在VMware虚拟机中的CentOS7集群部署高可用的k8s集群环境(v1.15)。&lt;/p&gt;
&lt;p&gt;这里有两篇基础知识的补充和单master节点集群的搭建过程，有需要的同学可以看一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tinychen.com/20190715-k8s-concepts-intro/&quot;&gt;k8s重要概念及各组件简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tinychen.com/20190716-centos7-install-k8s/&quot;&gt;在CentOS7上部署k8s集群(v1.15)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
    <category term="docker" scheme="https://tinychen.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上部署单Master节点k8s集群(v1.15)</title>
    <link href="https://tinychen.com/20190716-centos7-install-k8s/"/>
    <id>https://tinychen.com/20190716-centos7-install-k8s/</id>
    <published>2019-07-16T09:00:00.000Z</published>
    <updated>2019-07-16T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在虚拟机中的CentOS7集群中部署单master节点的k8s环境(v1.15)。</p><span id="more"></span><h1 id="1、安装docker-ce"><a href="#1、安装docker-ce" class="headerlink" title="1、安装docker-ce"></a>1、安装docker-ce</h1><h2 id="1-1-docker简介"><a href="#1-1-docker简介" class="headerlink" title="1.1 docker简介"></a>1.1 docker简介</h2><p>最早的时候docker其实不是开源的，后来docker混得不太好，无奈之下创始人决定将docker开源（然后docker就火了），然后就有了docker这个开源项目，现在主要是由docker公司维护。</p><p>2017年年初，docker公司将原先的docker项目改名为moby，并创建了docker-ce和docker-ee。</p><p>这三者的关系是：</p><ul><li><p>moby是继承了原先的docker的项目，是社区维护的的开源项目，谁都可以在moby的基础打造自己的容器产品</p></li><li><p>docker-ce（ Community Edition）是docker公司维护的开源项目，是一个基于moby项目的<strong>免费</strong>的容器产品</p></li><li><p>docker-ee（ Enterprise Edition）是docker公司维护的闭源产品，是docker公司的<strong>商业</strong>产品。</p></li></ul><p>我们这里还是使用docker-ce的稳定版本，关于ce版本其实也有三个分支：</p><p>我们来看一下官网的解释：</p><ul><li><strong>Stable</strong> gives you latest releases for general availability.</li><li><strong>Test</strong> gives pre-releases that are ready for testing before general availability.</li><li><strong>Nightly</strong> gives you latest builds of work in progress for the next major release.</li></ul><p>简单的打个比方来说就是：<strong>Stable</strong>就是稳定版，<strong>Test</strong>就是开发版，<strong>Nightly</strong>就是内测版</p><h2 id="1-2-安装docker-ce"><a href="#1-2-安装docker-ce" class="headerlink" title="1.2 安装docker-ce"></a>1.2 安装docker-ce</h2><p>centos版本的decker-ce官方安装指导：</p><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>这里我们主要是通过yum的方式来安装，如果出现无法连接docker官网的情况，建议检查一下网络，或者使用rpm的方式进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 导入官网提供的repo</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装docker及其相关组件</span><br>sudo yum install docker-ce docker-ce-cli containerd.io<br><br></code></pre></div></td></tr></table></figure><p>注意这里我们需要校对一下密钥，确保和官网提供的无误。</p><p><img src="https://resource.tinychen.com/blog/20190712/BP9JtWLG2gfP.png"></p><p><img src="https://resource.tinychen.com/blog/20190712/Je1FaoVF0MN5.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动docker</span><br>sudo systemctl start docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 跑个helloworld看看</span><br>sudo docker run hello-world<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 最后我们还要设置一下开机启动</span><br>sudo systemctl enable docker<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190712/R2uWM3SndVT0.png"></p><h1 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h1><h2 id="2-1-修改host文件-所有机器"><a href="#2-1-修改host文件-所有机器" class="headerlink" title="2.1 修改host文件(所有机器)"></a>2.1 修改host文件(所有机器)</h2><p>为了保证通信方便，<strong>每台主机</strong>上的<code>/etc/hosts</code>文件都需要进行修改，添加节点的<code>IP地址</code>和<code>hostname</code></p><p><img src="https://resource.tinychen.com/blog/20190712/hJQG4vsWGvdv.png"></p><p><strong>同时最好把每台主机的hostname也修改成和上面的host文件一样。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 可以直接编辑文件</span><br>vim /etc/hostname<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者使用命令</span><br>hostnamectl set-hostname<br></code></pre></div></td></tr></table></figure><h2 id="2-2-关闭防火墙-所有机器"><a href="#2-2-关闭防火墙-所有机器" class="headerlink" title="2.2 关闭防火墙(所有机器)"></a>2.2 关闭防火墙(所有机器)</h2><p>因为k8s涉及的端口非常多，我们先把防火墙关了，如果安装了iptable也先关掉。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭centos7自带的firewall防火墙</span><br>systemctl disable firewalld.service <br>systemctl stop firewalld.service <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190712/XK1VTkSOoj8S.png"></p><p>我们来看一下官网对这些端口的描述。</p><p><strong>Master 节点</strong></p><table><thead><tr><th align="left">规则</th><th align="left">方向</th><th align="left">端口范围</th><th align="left">作用</th><th align="left">使用者</th></tr></thead><tbody><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">6443*</td><td align="left">Kubernetes API server</td><td align="left">All</td></tr><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">2379-2380</td><td align="left">etcd server client API</td><td align="left">kube-apiserver, etcd</td></tr><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">10250</td><td align="left">Kubelet API</td><td align="left">Self, Control plane</td></tr><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">10251</td><td align="left">kube-scheduler</td><td align="left">Self</td></tr><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">10252</td><td align="left">kube-controller-manager</td><td align="left">Self</td></tr></tbody></table><p> <strong>Worker 节点</strong></p><table><thead><tr><th align="left">规则</th><th align="left">方向</th><th align="left">端口范围</th><th align="left">作用</th><th align="left">使用者</th></tr></thead><tbody><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">10250</td><td align="left">Kubelet API</td><td align="left">Self, Control plane</td></tr><tr><td align="left">TCP</td><td align="left">Inbound</td><td align="left">30000-32767</td><td align="left">NodePort Services**</td><td align="left">All</td></tr></tbody></table><p>** <a href="https://kubernetes.io/docs/concepts/services-networking/service/">NodePort 服务</a> 的默认端口范围。</p><p>任何使用 * 标记的端口号都有可能被覆盖，所以您需要保证您的自定义端口的状态是开放的。</p><p>虽然主节点已经包含了 etcd 的端口，您也可以使用自定义的外部 etcd 集群，或是指定自定义端口。 您使用的 pod 网络插件 (见下) 也可能需要某些特定端口开启。由于各个 pod 网络插件都有所不同，请参阅他们各自文档中对端口的要求。</p><blockquote><p>如果对安全性有要求，不放心关闭防火墙的话，最好还是修改一下防火墙的配置，放行这些端口。</p></blockquote><h2 id="2-3-同步时间-所有机器"><a href="#2-3-同步时间-所有机器" class="headerlink" title="2.3 同步时间(所有机器)"></a>2.3 同步时间(所有机器)</h2><p>这里我们使用ntpdate来进行时间同步</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用yum安装ntpdate工具</span><br>yum install ntpdate -y<br><br><span class="hljs-comment"># 使用阿里云的源同步时间</span><br>ntpdate ntp1.aliyun.com<br><br><span class="hljs-comment"># 最后查看一下时间</span><br>hwclock<br></code></pre></div></td></tr></table></figure><blockquote><p>我们也可以在<code>/etc/cron.hourly/</code>下面直接新建一个文件，将<code>ntpdate ntp1.aliyun.com</code>这条命令写进去，这样cron就会每小时执行一次这个同步时间操作。<a href="https://tinychen.com/20190710-rhel7-cron/">关于cron可以点击这里了解。</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &gt;&gt;/etc/cron.hourly/synctime &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">ntpdate ntp1.aliyun.com</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="2-4-设置selinux-所有机器"><a href="#2-4-设置selinux-所有机器" class="headerlink" title="2.4 设置selinux(所有机器)"></a>2.4 设置selinux(所有机器)</h2><p><strong>来自官网的说明，必须把selinux改为permissive（直接生效无需重启）或者disabled（需要重启生效）</strong></p><blockquote><p>通过命令 <code>setenforce 0</code> 和 <code>sed ...</code> 可以将 SELinux 设置为 permissive 模式(将其禁用)。 只有执行这一操作之后，容器才能访问宿主的文件系统，进而能够正常使用 Pod 网络。您必须这么做，直到 kubelet 做出升级支持 SELinux 为止。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setenforce 0<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment"># 也可以直接修改/etc/selinux/config文件</span><br></code></pre></div></td></tr></table></figure><blockquote><p>关于SELinux的简单介绍，可以<a href="https://tinychen.com/20190707-rhel7-selinux/">点击这里</a>查看之前的博客。</p></blockquote><h1 id="3、安装kubeadm-kubelet-和-kubectl"><a href="#3、安装kubeadm-kubelet-和-kubectl" class="headerlink" title="3、安装kubeadm, kubelet 和 kubectl"></a>3、安装kubeadm, kubelet 和 kubectl</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>我们需要在<strong>每台机器</strong>上都安装以下的软件包：</p><ul><li><code>kubeadm</code>: 用来初始化集群的指令。</li><li><code>kubelet</code>: 在集群中的每个节点上用来启动 pod 和 container 等。</li><li><code>kubectl</code>: 用来与集群通信的命令行工具。</li></ul><p>kubeadm <strong>不能</strong> 帮我们安装或管理 <code>kubelet</code> 或 <code>kubectl</code> ，所以我们需要保证他们满足通过 kubeadm 安装的 Kubernetes 控制层对版本的要求。然而控制层与 kubelet 间的 <em>小版本号</em> 不一致无伤大雅，不过请记住 kubelet 的版本不可以超过 API server 的版本。<strong>例如 1.8.0 的 API server 可以适配 1.7.0 的 kubelet，反之就不行了。</strong></p><h2 id="3-2-添加yum仓库-所有机器"><a href="#3-2-添加yum仓库-所有机器" class="headerlink" title="3.2 添加yum仓库(所有机器)"></a>3.2 添加yum仓库(所有机器)</h2><p>由于众所周知的原因，k8s官网提供的yum源并不能在国内正常使用，好在我们还可以使用阿里的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个yum源</span><br>vim /etc/yum.repos.d/kubernetes.repo<br><br><span class="hljs-comment"># 添加下列内容到repo中</span><br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>exclude=kube*<br></code></pre></div></td></tr></table></figure><p>使用yum安装kubeadm, kubelet 和 kubectl</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum clean all<br>yum repolist<br><br>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><span class="hljs-comment"># 启动kubelet并设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet<br></code></pre></div></td></tr></table></figure><h2 id="3-3-修改cgroup相关配置-所有机器"><a href="#3-3-修改cgroup相关配置-所有机器" class="headerlink" title="3.3 修改cgroup相关配置(所有机器)"></a>3.3 修改cgroup相关配置(所有机器)</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## Create /etc/docker directory.</span><br>mkdir /etc/docker<br><br><span class="hljs-comment"># Setup daemon.</span><br>cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>mkdir -p /etc/systemd/system/docker.service.d<br><br><span class="hljs-comment"># Restart Docker</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></div></td></tr></table></figure><h2 id="3-4-编辑环境变量-所有机器"><a href="#3-4-编辑环境变量-所有机器" class="headerlink" title="3.4 编辑环境变量(所有机器)"></a>3.4 编辑环境变量(所有机器)</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/sysctl.conf<br><span class="hljs-comment"># 添加两行</span><br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br><br>sysctl -p<br>systemctl daemon-reload<br><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/RjGz0wYLLfz8.png"></p><h2 id="3-5-关闭swap分区-所有机器"><a href="#3-5-关闭swap分区-所有机器" class="headerlink" title="3.5 关闭swap分区(所有机器)"></a>3.5 关闭swap分区(所有机器)</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">swapoff -a<br><br>vim /etc/fstab<br><span class="hljs-comment"># 注释掉swap分区启动挂载的那一行</span><br><br><span class="hljs-comment"># 重启机器</span><br>reboot<br></code></pre></div></td></tr></table></figure><h2 id="3-6-拉取镜像"><a href="#3-6-拉取镜像" class="headerlink" title="3.6 拉取镜像"></a>3.6 拉取镜像</h2><p>我们可以使用<code>kubeadm config images pull</code>看看需要拉取哪些镜像版本，然后根据错误提示来对下面的版本进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-apiserver/tags</span><br>docker pull mirrorgooglecontainers/kube-apiserver:v1.15.0<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-proxy/tags</span><br>docker pull mirrorgooglecontainers/kube-proxy:v1.15.0<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-controller-manager/tags</span><br>docker pull mirrorgooglecontainers/kube-controller-manager:v1.15.0<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-scheduler/tags</span><br>docker pull mirrorgooglecontainers/kube-scheduler:v1.15.0<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/etcd/tags</span><br>docker pull mirrorgooglecontainers/etcd:3.3.10<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/pause/tags</span><br>docker pull mirrorgooglecontainers/pause:3.1<br><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kubernetes-dashboard-amd64/tags</span><br>docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1<br><br><span class="hljs-comment"># https://hub.docker.com/r/coredns/coredns/tags</span><br>docker pull coredns/coredns:1.3.1<br></code></pre></div></td></tr></table></figure><p>由于国内不能访问k8s官网，所以我们需要先使用docker拉取镜像，然后使用tag对其更改名称。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取docker上的镜像到本地</span><br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-apiserver/tags</span><br>docker pull mirrorgooglecontainers/kube-apiserver:v1.15.0<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-proxy/tags</span><br>docker pull mirrorgooglecontainers/kube-proxy:v1.15.0<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-controller-manager/tags</span><br>docker pull mirrorgooglecontainers/kube-controller-manager:v1.15.0<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kube-scheduler/tags</span><br>docker pull mirrorgooglecontainers/kube-scheduler:v1.15.0<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/etcd/tags</span><br>docker pull mirrorgooglecontainers/etcd:3.3.10<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/pause/tags</span><br>docker pull mirrorgooglecontainers/pause:3.1<br><span class="hljs-comment"># https://hub.docker.com/r/mirrorgooglecontainers/kubernetes-dashboard-amd64/tags</span><br>docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1<br><span class="hljs-comment"># https://hub.docker.com/r/coredns/coredns/tags</span><br>docker pull coredns/coredns:1.3.1<br><br><br><span class="hljs-comment"># 使用tag对其改名，方便kubeadm直接拉取使用</span><br>docker tag mirrorgooglecontainers/kube-apiserver:v1.15.0 k8s.gcr.io/kube-apiserver:v1.15.0<br>docker tag mirrorgooglecontainers/kube-proxy:v1.15.0 k8s.gcr.io/kube-proxy:v1.15.0<br>docker tag mirrorgooglecontainers/kube-controller-manager:v1.15.0 k8s.gcr.io/kube-controller-manager:v1.15.0<br>docker tag mirrorgooglecontainers/kube-scheduler:v1.15.0 k8s.gcr.io/kube-scheduler:v1.15.0<br>docker tag mirrorgooglecontainers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10<br>docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1<br>docker tag mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1<br>docker tag coredns/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1<br><br><br><span class="hljs-comment"># 删除掉多余的images</span><br>docker rmi mirrorgooglecontainers/kube-apiserver:v1.15.0<br>docker rmi mirrorgooglecontainers/kube-proxy:v1.15.0<br>docker rmi mirrorgooglecontainers/kube-controller-manager:v1.15.0<br>docker rmi mirrorgooglecontainers/kube-scheduler:v1.15.0<br>docker rmi mirrorgooglecontainers/etcd:3.3.10<br>docker rmi mirrorgooglecontainers/pause:3.1<br>docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1<br>docker rmi coredns/coredns:1.3.1<br><br></code></pre></div></td></tr></table></figure><p>最后效果如下</p><p><img src="https://resource.tinychen.com/blog/20190715/UFeKeu1f2ExI.png"></p><h2 id="3-7-初始化master节点"><a href="#3-7-初始化master节点" class="headerlink" title="3.7 初始化master节点"></a>3.7 初始化master节点</h2><ul><li><p><code>--kubernetes-version</code>就是我们这里使用的k8s版本</p></li><li><p><code>--apiserver-advertise-address</code> 指明用Master的哪个interface与Cluster的其他节点通信。如果Master有多个interface，建议明确指定，如果不指定，kubeadm会自动选择有默认网关的interface</p></li><li><p><code>--pod-network-cidr</code> 指定Pod网络的范围。Kubernetes支持多种网络方案，而且不同网络方案对–pod-network-cidr有自己的要求，这里设置为10.244.0.0/16是因为我们将使用flannel网络方案，必须设置成这个CIDR</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubeadm init --kubernetes-version=v1.15.0 --apiserver-advertise-address 192.168.100.50 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/SUFO45fFoCFu.png"></p><p><strong>注意红框中的那一串密钥要保存好，后面我们添加节点的时候需要用到。</strong></p><h2 id="3-8在master上配置kubectl"><a href="#3-8在master上配置kubectl" class="headerlink" title="3.8在master上配置kubectl"></a>3.8在master上配置kubectl</h2><p><strong>注意这里要切换到普通用户而不能使用root用户！</strong></p><p><strong>注意这里要切换到普通用户而不能使用root用户！</strong></p><p><strong>注意这里要切换到普通用户而不能使用root用户！</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo chown $(id -u):$(id -g)<br> <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># 多加一个kubectl的自动补全动能方便我们使用</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/I8fH62Yw0lGO.png"></p><p>到这里我们检查一下是否安装顺利</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获取集群状态</span><br>kubectl get cs<br><span class="hljs-comment"># 获取集群节点信息</span><br>kubectl get nodes<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/aKGUvuJIU440.png"></p><h1 id="4、安装flannel网络-Master"><a href="#4、安装flannel网络-Master" class="headerlink" title="4、安装flannel网络(Master)"></a>4、安装flannel网络(Master)</h1><p>安装flannel</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml -O kube-flannel.yml<br>kubectl apply -f kube-flannel.yml<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/txGwdrFwgVbw.png"></p><p>到这里master节点上面的操作就算是完成了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看pod运行情况</span><br>kubectl get pods -n kube-system<br><span class="hljs-comment"># 查看并验证节点信息是否成功</span><br>kubectl get nodes<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/sC3ASl1YgTcS.png"></p><h1 id="5、添加node"><a href="#5、添加node" class="headerlink" title="5、添加node"></a>5、添加node</h1><p>在node节点上使用root用户运行下列命令将node节点加入到集群中，下面的密钥就是刚刚前面生成的密钥，而这个<code>192.168.100.50:6443</code>就是master节点的IP地址和对应端口。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> join --token <span class="hljs-number">3</span>pyvba.siol<span class="hljs-number">4</span>xy<span class="hljs-number">1</span>rvf<span class="hljs-number">2</span>om<span class="hljs-number">8</span>k --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:c<span class="hljs-number">61</span>cdd<span class="hljs-number">8</span>b<span class="hljs-number">8</span>ad<span class="hljs-number">5</span>d<span class="hljs-number">34</span>faece<span class="hljs-number">61867</span>e<span class="hljs-number">76</span>d<span class="hljs-number">539</span>dbc<span class="hljs-number">243</span>c<span class="hljs-number">1</span>f<span class="hljs-number">206</span>eacbab<span class="hljs-number">163895777</span>c<span class="hljs-number">099</span>e <span class="hljs-number">192.168.100.50:6443</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190715/ANXz4UKJdrPP.png"></p><p>最后顺利启动之后应该是如下图所示</p><p><img src="https://resource.tinychen.com/blog/20190715/IC3JIliuKcWP.png"></p><blockquote><p>提示：</p><p><strong>如果node节点上没有顺利出现running的话，很有可能是因为镜像被墙了无法顺利拉取镜像，这时我们需要按照步骤3.6中的操作来手动拉取镜像。</strong></p></blockquote><p>查看pod运行情况的命令</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">kubectl describe pod &lt;PodName&gt; --<span class="hljs-keyword">namespace</span>=&lt;<span class="hljs-keyword">namespace</span>&gt;<br></code></pre></div></td></tr></table></figure><blockquote><p>输出内容太长了，这里只截取一部分。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20190715/ysakuW2dsKJF.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在虚拟机中的CentOS7集群中部署单master节点的k8s环境(v1.15)。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
    <category term="docker" scheme="https://tinychen.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>k8s重要概念及各组件简介</title>
    <link href="https://tinychen.com/20190715-k8s-concepts-intro/"/>
    <id>https://tinychen.com/20190715-k8s-concepts-intro/</id>
    <published>2019-07-15T02:00:00.000Z</published>
    <updated>2019-07-15T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>解析k8s的重要概念和介绍其工作原理。</p><p>简单介绍一下k8s中的重要概念和各个主要的工作组件，主要参考了官方的技术文档和《每天5分钟玩转kubernetes》。</p><span id="more"></span><h1 id="1、重要概念"><a href="#1、重要概念" class="headerlink" title="1、重要概念"></a>1、重要概念</h1><h2 id="1-k8s-kubernetes"><a href="#1-k8s-kubernetes" class="headerlink" title="1. k8s/kubernetes"></a>1. k8s/kubernetes</h2><p><strong>Kubernetes</strong> 源于希腊语，意为 “舵手” 或 “飞行员”， 且是英文<code>governor</code>和 <code>cybernetic</code>的词根。 <strong>K8s</strong> 是通过将 8 个字母<code>ubernete</code>替换为 8 而导出的缩写。</p><p><code>k8s</code>是谷歌在2014年发布的一个开源项目，其主要用途就是用来管理大量的容器。Kubernetes 建立在 Google 公司超过十余年的运维经验基础之上，Google 所有的应用都运行在容器上。在谷歌内部，使用的容器管理系统叫<code>Borg</code>，现在已经改名叫<code>Omega</code>。（就是数学里面经常用到的那个欧米茄符合的读音）所以<code>k8s</code>其实相当于是<code>Borg</code>的开源版本。</p><blockquote><p>我们再来看一下k8s官网的说法：</p><p>Kubernetes 是一个跨主机集群的 开源的容器调度平台，它可以自动化应用容器的部署、扩展和操作 , 提供以容器为中心的基础架构。</p></blockquote><p><strong>Kubernetes 具有如下特点:</strong></p><ul><li><strong>便携性</strong>: 无论公有云、私有云、混合云还是多云架构都全面支持</li><li><strong>可扩展</strong>: 它是模块化、可插拔、可挂载、可组合的，支持各种形式的扩展</li><li><strong>自修复:</strong> 它可以自保持应用状态、可自重启、自复制、自缩放的，通过声明式语法提供了强大的自修复能力</li></ul><h2 id="2-Cluster"><a href="#2-Cluster" class="headerlink" title="2. Cluster"></a>2. Cluster</h2><p>Cluster就是集群的意思，即整个k8s管理的所有机器和容器等等的总称。它是计算、存储和网络资源的集合，k8s利用这些资源运行各种基于容器的应用。</p><h2 id="3-Master"><a href="#3-Master" class="headerlink" title="3. Master"></a>3. Master</h2><p>Master是Cluster中的管理者，即该集群中所有节点的老大或老大们，因为Master可能不止一个，如果是有多个Master节点的集群我们一般称之为<strong>高可用集群</strong>。它的主要职责是调度，即决定将应用放在哪里运行。</p><h2 id="4-Node"><a href="#4-Node" class="headerlink" title="4. Node"></a>4. Node</h2><p>Node的职责是运行容器应用。Node由Master管理，Node负责监控并汇报容器的状态，同时根据Master的要求管理容器的生命周期。</p><h2 id="5-Pod"><a href="#5-Pod" class="headerlink" title="5. Pod"></a>5. Pod</h2><p>Pod是Kubernetes的最小工作单元。每个Pod包含一个或多个容器。Pod中的容器会作为一个整体被Master调度到一个Node上运行。这意味着，即使是只有一个容器，Master也是要把它作为一个Pod调度运行的。</p><p>Kubernetes 引入Pod主要基于下面两个目的：<br>（1）可管理性。<br>有些容器天生就是需要紧密联系，一起工作。Pod提供了比容器更高层次的抽象，将它们封装到一个部署单元中。Kubernetes以Pod为最小单位进行调度、扩展、共享资源、管理生命周期。<br>（2）通信和资源共享。<br>Pod 中的所有容器使用同一个网络namespace，即相同的IP地址和Port空间。它们可以直接用localhost通信。同样的，这些容器可以共享存储，当Kubernetes挂载 volume到Pod，本质上是将volume挂载到Pod中的每一个容器。</p><h2 id="6-namespace"><a href="#6-namespace" class="headerlink" title="6. namespace"></a>6. namespace</h2><p>Kubernetes支持由同一物理集群支持的多个虚拟集群。这些虚拟集群称为namespace。</p><p>namespace旨在用于多个用户分布在多个团队或项目中的环境中。对于具有几个到几十个用户的集群，您根本不需要创建或考虑名称空间。当您需要它们提供的功能时，请开始使用命名空间。</p><ul><li>namespace提供名称范围。</li><li>资源名称在namespace中必须是唯一的，但是在不同的namespace中不必唯一。</li><li>namespace不能彼此嵌套，并且每个Kubernetes资源只能位于一个namespace中。</li><li>namespace是一种在多个用户之间划分群集资源的方法（通过资源配额）。</li><li>在Kubernetes的未来版本中，默认情况下，同一namespace中的对象将具有相同的访问控制策略。</li><li>没有必要使用多个namespace来分隔略有不同的资源，例如同一软件的不同版本：可以使用标签来区分同一namespace中的资源。</li></ul><h1 id="2、Master节点"><a href="#2、Master节点" class="headerlink" title="2、Master节点"></a>2、Master节点</h1><p>Master 组件提供的集群控制。Master 组件对集群做出全局性决策(例如：调度)，以及检测和响应集群事件(副本控制器的<code>replicas</code>字段不满足时,启动新的副本)。</p><p>Master 组件可以在集群中的任何节点上运行。然而，为了简单起见，设置脚本通常会启动同一个虚拟机上所有 Master 组件，并且不会在此虚拟机上运行用户容器。</p><h2 id="2-1-kube-apiserver"><a href="#2-1-kube-apiserver" class="headerlink" title="2.1 kube-apiserver"></a>2.1 kube-apiserver</h2><p><code>kube-apiserver</code>对外暴露了Kubernetes API。它是的 Kubernetes 前端控制层。它被设计为水平扩展，即通过部署更多实例来缩放。</p><p>API Server 提供<code>HTTP/HTTPS</code> <code>RESTful</code> API，即Kubernetes API。API Server是Kubernetes Cluster的前端接口，各种客户端工具（CLI或UI）以及Kubernetes其他组件可以通过它管理Cluster的各种资源。</p><h2 id="2-2-etcd"><a href="#2-2-etcd" class="headerlink" title="2.2 etcd"></a>2.2 etcd</h2><p><code>etcd</code>用于 Kubernetes 的后端存储。etcd 负责保存Kubernetes Cluster的配置信息和各种资源的状态信息，始终为 Kubernetes 集群的 etcd 数据提供备份计划。当数据发生变化时，etcd 会快速地通知Kubernetes相关组件。</p><h2 id="2-3-kube-controller-manager"><a href="#2-3-kube-controller-manager" class="headerlink" title="2.3 kube-controller-manager"></a>2.3 kube-controller-manager</h2><p><code>kube-controller-manager</code>运行控制器，它们是处理集群中常规任务的后台线程。逻辑上，每个控制器是一个单独的进程，但为了降低复杂性，它们都被编译成独立的可执行文件，并在单个进程中运行。</p><p>这些控制器包括:</p><ul><li>节点控制器(<code>Node Controller</code>): 当节点移除时，负责注意和响应。</li><li>副本控制器(<code>Replication Controller</code>): 负责维护系统中每个副本控制器对象正确数量的 Pod。</li><li>端点控制器(<code>Endpoints Controller</code>): 填充 端点(Endpoints) 对象(即连接 Services &amp; Pods)。</li><li>服务帐户和令牌控制器(<code>Service Account &amp; Token Controllers</code>): 为新的namespace创建默认帐户和 API 访问令牌.</li></ul><h2 id="2-4-kube-scheduler"><a href="#2-4-kube-scheduler" class="headerlink" title="2.4 kube-scheduler"></a>2.4 kube-scheduler</h2><p><code>kube-scheduler</code>主要的工作就是调度新创建的<code>Pod</code>，当集群中出现了新的Pod还没有确定分配到哪一个Node节点的时候，<code>kube-scheduler</code>会根据各个节点的负载，以及应用对高可用、性能、数据亲和性的需求等各个方面进行分析并将其分配到最合适的节点上。</p><h2 id="2-5-Pod-网络"><a href="#2-5-Pod-网络" class="headerlink" title="2.5 Pod 网络"></a>2.5 Pod 网络</h2><p>Pod 要能够相互通信，Kubernetes Cluster必须部署Pod网络，Pod网络也能算是属于虚拟化网络/SDN的一种，比较常见的有<a href="https://docs.projectcalico.org/v3.11/getting-started/kubernetes/installation/calico">Calico</a>、<a href="https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml">Flannel</a>等，也有其他更复杂高级的提供同时多种组合网络如<a href="https://github.com/tigera/canal/tree/master/k8s-install">Canal</a>、<a href="https://github.com/ZTE/Knitter/">Knitter</a>、<a href="https://github.com/Intel-Corp/multus-cni">Multus</a>等。</p><h1 id="3、Node节点"><a href="#3、Node节点" class="headerlink" title="3、Node节点"></a>3、Node节点</h1><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行时环境。</p><h2 id="3-1-kubelet"><a href="#3-1-kubelet" class="headerlink" title="3.1 kubelet"></a>3.1 kubelet</h2><p>kubelet是k8s集群中的每个节点上（包括master节点）都会运行的代理。 它能够保证容器都运行在 Pod 中。kubelet 不会管理不是由 Kubernetes 创建的容器。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 当Scheduler确定在某个Node上运行Pod后，会将Pod的具体配置信息（image、volume等）发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向Master报告运行状态。</p><h2 id="3-2-kube-proxy"><a href="#3-2-kube-proxy" class="headerlink" title="3.2 kube-proxy"></a>3.2 kube-proxy</h2><p><a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a> 是集群中每个节点上运行的网络代理， kube-proxy通过维护主机上的网络规则并执行连接转发，实现了Kubernetes服务抽象。</p><p>service在逻辑上代表了后端的多个Pod，外界通过service访问Pod。service接收到的请求就是通过kube-proxy转发到Pod上的，kube-proxy服务负责将访问service的TCP/UDP数据流转发到后端的容器。<strong>如果有多个副本，kube-proxy会实现负载均衡。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;解析k8s的重要概念和介绍其工作原理。&lt;/p&gt;
&lt;p&gt;简单介绍一下k8s中的重要概念和各个主要的工作组件，主要参考了官方的技术文档和《每天5分钟玩转kubernetes》。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="k8s" scheme="https://tinychen.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上安装Zabbix4.2监控系统</title>
    <link href="https://tinychen.com/20190712-centos7-install-zabbix42/"/>
    <id>https://tinychen.com/20190712-centos7-install-zabbix42/</id>
    <published>2019-07-12T02:00:00.000Z</published>
    <updated>2019-07-12T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在五台CentOS7的虚拟机上尝试安装Zabbix4.2用来监控各个主机的运行状况。</p><span id="more"></span><h1 id="1、master前期准备工作"><a href="#1、master前期准备工作" class="headerlink" title="1、master前期准备工作"></a>1、master前期准备工作</h1><h2 id="1-1-关闭防火墙和SELinux"><a href="#1-1-关闭防火墙和SELinux" class="headerlink" title="1.1 关闭防火墙和SELinux"></a>1.1 关闭防火墙和SELinux</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<br>sed -i &#x27;s/SELINUXTYPE=targeted/#&amp;/&#x27; /etc/selinux/config<br><span class="hljs-meta">#</span><span class="bash"> 可以设置配置文件永久关闭</span><br>setenforce 0<br><span class="hljs-meta">#</span><span class="bash"> 更改selinux需要重启系统才会生效</span><br>reboot<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭防火墙</span><br><span class="hljs-meta">#</span><span class="bash"> 一般来说centos7里面默认没有iptables</span><br>systemctl stop iptables.service<br>systemctl stop firewalld.service<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/XJkmA7JtKFYn.png"></p><h2 id="1-2-修改字符集"><a href="#1-2-修改字符集" class="headerlink" title="1.2 修改字符集"></a>1.2 修改字符集</h2><p>修改字符集，确保输出中文的时候不会报错</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8<br>export LC_ALL=zh_CN.UTF-8<br>echo &#x27;LANG=zh_CN.UTF-8&#x27; &gt; /etc/locale.conf<br></code></pre></div></td></tr></table></figure><h1 id="2、master安装Mariadb"><a href="#2、master安装Mariadb" class="headerlink" title="2、master安装Mariadb"></a>2、master安装Mariadb</h1><h2 id="2-1-安装Mariadb"><a href="#2-1-安装Mariadb" class="headerlink" title="2.1 安装Mariadb"></a>2.1 安装Mariadb</h2><p>需要安装一个数据库来存储zabbix监控时产生的数据，在centos7中，mysql被换成了mariadb</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">yum install mariadb mariadb-devel mariadb-<span class="hljs-keyword">server</span>  <br>systemctl <span class="hljs-keyword">enable</span> mariadb<br>systemctl <span class="hljs-keyword">start</span> mariadb<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/K53Ynls1J3bV.png"></p><h2 id="2-2-导入zabbix初始数据"><a href="#2-2-导入zabbix初始数据" class="headerlink" title="2.2 导入zabbix初始数据"></a>2.2 导入zabbix初始数据</h2><p>这里是官方的指导文档</p><p><a href="https://www.zabbix.com/documentation/4.2/manual/appendix/install/db_scripts">https://www.zabbix.com/documentation/4.2/manual/appendix/install/db_scripts</a></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 设置数据库root密码</span><br>mysqladmin <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>h localhost password <span class="hljs-string">&#x27;xxxxxxxx&#x27;</span><br><br><span class="hljs-comment">-- 进入mysql创建zabbix数据库</span><br>mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br><br><span class="hljs-comment">-- 创建zabbix数据库并设定字符集和校对集为UTF8</span><br><span class="hljs-keyword">create</span> database zabbix <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_bin;<br><br><span class="hljs-comment">-- 创建zabbix用户并授权zabbix用户对zabbix数据库有完全操作权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> zabbix.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> zabbix<span class="hljs-variable">@localhost</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;xxxxxxxx&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/tWH2935tMEX0.png"></p><p><img src="https://resource.tinychen.com/blog/20190711/b0YmoXtBxwpe.png"></p><h1 id="3、master上安装zabbix-server"><a href="#3、master上安装zabbix-server" class="headerlink" title="3、master上安装zabbix-server"></a>3、master上安装zabbix-server</h1><h2 id="3-1-安装zabbix-server"><a href="#3-1-安装zabbix-server" class="headerlink" title="3.1 安装zabbix-server"></a>3.1 安装zabbix-server</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># 导入官网对应的centos7的rpm包</span><br><span class="hljs-comment"># 从链接中可以看到centos7和rhel7使用的版本是一样的</span><br><span class="hljs-attribute">rpm</span> -Uvh https://repo.zabbix.com/zabbix/<span class="hljs-number">4</span>.<span class="hljs-number">2</span>/rhel/<span class="hljs-number">7</span>/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/zabbix-release-<span class="hljs-number">4</span>.<span class="hljs-number">2</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><br><span class="hljs-attribute">yum</span> clean <span class="hljs-literal">all</span><br></code></pre></div></td></tr></table></figure><p>官网的yum源有些时候可能会连不上，我们也可以使用阿里云的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[zabbix]<br>name=Zabbix Official Repository - <span class="hljs-variable">$basearch</span><br>baseurl=https://mirrors.aliyun.com/zabbix/zabbix/4.2/rhel/7/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591<br><br>[zabbix-non-supported]<br>name=Zabbix Official Repository non-supported - <span class="hljs-variable">$basearch</span> <br><br>baseurl=https://mirrors.aliyun.com/zabbix/non-supported/rhel/7/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX<br>gpgcheck=1<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/yeJKGWd3MeMt.png"></p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">yum install zabbix-<span class="hljs-keyword">server</span>-mysql zabbix-web-mysql zabbix-agent<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/Y6quP0urwdd4.png"></p><h2 id="3-2-修改配置文件"><a href="#3-2-修改配置文件" class="headerlink" title="3.2 修改配置文件"></a>3.2 修改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改server的配置文件，填入刚刚的数据库账户密码和数据库名</span><br>vim /etc/zabbix/zabbix_server.conf<br><br>DBHost=localhost<br>DBName=zabbix<br>DBUser=zabbix<br>DBPassword=xxxxxxxx<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改PHP时区</span><br>vim /etc/httpd/conf.d/zabbix.conf<br><span class="hljs-meta">#</span><span class="bash"> 将下面这行修改为亚洲上海</span><br>php_value date.timezone Asia/Shanghai<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/TxWi3uoQhcfr.png"></p><h2 id="3-3-修改防火墙设置"><a href="#3-3-修改防火墙设置" class="headerlink" title="3.3 修改防火墙设置"></a>3.3 修改防火墙设置</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 添加httpd的80、zabbix-server的10051和zabbix-agent的10050监听端口</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=80/tcp</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=10050/tcp</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=10051/tcp</span><br><span class="hljs-comment"># 查看是否成功</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--list-all</span><br></code></pre></div></td></tr></table></figure><p><strong>最后我们需要重启zabbix服务、httpd服务和firewall服务使得修改的配置生效。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl restart zabbix-server zabbix-agent httpd firewalld<br>systemctl enable zabbix-server zabbix-agent httpd firewalld<br></code></pre></div></td></tr></table></figure><h2 id="3-4-导入数据库"><a href="#3-4-导入数据库" class="headerlink" title="3.4 导入数据库"></a>3.4 导入数据库</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将zabbix初始数据导入到刚刚创建的zabbix数据库中</span><br>zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p&#x27;xxxxxxxx&#x27; zabbix<br></code></pre></div></td></tr></table></figure><h1 id="4、设置zabbix-server的web端"><a href="#4、设置zabbix-server的web端" class="headerlink" title="4、设置zabbix-server的web端"></a>4、设置zabbix-server的web端</h1><p>在和master同一局域网内的任意电脑的浏览器上输入<code>zabbix-server</code>的<code>IP地址</code>加上<code>/zabbix</code></p><p><img src="https://resource.tinychen.com/blog/20190711/bp9cgXcqELl9.png"></p><p><img src="https://resource.tinychen.com/blog/20190711/glqLIRrlBs2V.png"></p><p>点击next step，我们回发现有一堆的前置要求，如无意外，应该全部都是ok</p><p><img src="https://resource.tinychen.com/blog/20190711/CnvAKaN5zPgx.png"></p><p>接下来我们输入之前在数据库中创建的zabbix用户的账号密码</p><p><img src="https://resource.tinychen.com/blog/20190711/DWPhGAGEmQg9.png"></p><p>name这里我们输入一个自定义的名字方便确认，当然也可以不输入留空</p><p><img src="https://resource.tinychen.com/blog/20190711/HvE4VaGBut8Y.png"></p><p>最后我们确认一下即可。</p><p><img src="https://resource.tinychen.com/blog/20190711/AHMsvz2PNTrb.png"></p><p>我们可以看到上面的所有配置都保存在了<code>/etc/zabbix/web/zabbix.conf.php</code>这个配置文件中，需要的话我们可以随时修改。</p><p><img src="https://resource.tinychen.com/blog/20190711/1cqO19qNfH06.png"></p><p>默认的账号是<code>Admin</code>密码是<code>zabbix</code>,注意A要大写。</p><p><img src="https://resource.tinychen.com/blog/20190711/7Dm3Sa5tr9uI.png"></p><p>接下来我们要修改密码并开启中文支持</p><p><img src="https://resource.tinychen.com/blog/20190711/leSRHa44T4Nh.png"></p><p><img src="https://resource.tinychen.com/blog/20190711/Ub6zrPgTLHNJ.png"></p><p>然后重新登录就能够生效了。</p><p>如果在语言列表里面没有找到中文的，检查一下<code>/usr/share/zabbix/include/locales.inc.php</code>这个文件的<code>chinese</code>这一栏是否为true，如果不是，修改之后重启zabbix即可。</p><p><img src="https://resource.tinychen.com/blog/20190711/C24TlHmUKUw9.png"></p><blockquote><p>这里补充说明一下，如果需要在外网能够访问zabbix的web监控端，需要给该master分配公网IP或者是端口转发或者是<a href="https://tinychen.com/20190706-frp/">设置frp反向代理</a>。</p></blockquote><h1 id="5、agent上安装zabbix-agent"><a href="#5、agent上安装zabbix-agent" class="headerlink" title="5、agent上安装zabbix-agent"></a>5、agent上安装zabbix-agent</h1><h2 id="5-1-安装zabbix-agent"><a href="#5-1-安装zabbix-agent" class="headerlink" title="5.1 安装zabbix-agent"></a>5.1 安装zabbix-agent</h2><p>这里我们基本是重复上面3.1的步骤，但是最后安装的模块有点不同。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh https://repo.zabbix.com/zabbix/<span class="hljs-number">4</span>.<span class="hljs-number">2</span>/rhel/<span class="hljs-number">7</span>/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/zabbix-release-<span class="hljs-number">4</span>.<span class="hljs-number">2</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm<br><br><span class="hljs-attribute">yum</span> clean <span class="hljs-literal">all</span><br><br><span class="hljs-attribute">yum</span> install -y zabbix-agent zabbix-get<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/9G9Rm4626BxR.png"></p><h2 id="5-2-修改zabbix-agent配置文件"><a href="#5-2-修改zabbix-agent配置文件" class="headerlink" title="5.2 修改zabbix-agent配置文件"></a>5.2 修改zabbix-agent配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/zabbix/zabbix_agentd.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 然后我们修改下列内容</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> zabbix-server内网IP</span><br>Server=zabbix-server内网IP <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> zabbix-server内网IP，Active表示agent主动推送</span><br>ServerActive=zabbix-server内网IP<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> zabbix-agent节点名称，需要和web端添加的名称一致</span><br>Hostname=该agent节点的命名<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动zabbix-agent并设置开机启动</span><br>systemctl start zabbix-agent<br>systemctl enable zabbix-agent<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看zabbix-agent运行状态</span><br>systemctl status zabbix-agent<br><br></code></pre></div></td></tr></table></figure><h2 id="5-3-修改防火墙设置"><a href="#5-3-修改防火墙设置" class="headerlink" title="5.3 修改防火墙设置"></a>5.3 修改防火墙设置</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加zabbix-agent的10050监听端口例外</span><br>firewall-cmd --permanent --add-port=10050/tcp<br><span class="hljs-meta">#</span><span class="bash"> 查看是否成功</span><br>firewall-cmd --permanent --list-all<br><span class="hljs-meta">#</span><span class="bash"> 重启firewall和zabbix</span><br>systemctl restart firewalld.service zabbix-agent.service<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190712/lHOG0j9d3p04.png"></p><p><img src="https://resource.tinychen.com/blog/20190712/G7qoS8xRQtCz.png"></p><h2 id="5-4-在web端添加监控主机"><a href="#5-4-在web端添加监控主机" class="headerlink" title="5.4 在web端添加监控主机"></a>5.4 在web端添加监控主机</h2><p>登录web端，点击配置→主机→创建主机</p><p><img src="https://resource.tinychen.com/blog/20190712/JNzD6sPwy1SV.png"></p><p>注意这里的主机名称要和配置文件中的<code>hostname</code>一致</p><p><img src="https://resource.tinychen.com/blog/20190712/N4GB0VLmR22j.png"></p><p>模板这里有提供很多预设的监控模板，我们可以直接选择</p><p><img src="https://resource.tinychen.com/blog/20190712/Y9AWDM714eYX.png"></p><p><img src="https://resource.tinychen.com/blog/20190712/WsKRcNjLa1gE.png"></p><p>最后我们点击主机下面的添加，就可以成功添加主机了。</p><p>最后的整体效果如下</p><p><img src="https://resource.tinychen.com/blog/20190712/AmBqnKhKrI12.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在五台CentOS7的虚拟机上尝试安装Zabbix4.2用来监控各个主机的运行状况。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://tinychen.com/categories/devops/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
    <category term="zabbix" scheme="https://tinychen.com/tags/zabbix/"/>
    
    <category term="monitor" scheme="https://tinychen.com/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7的ACL简介</title>
    <link href="https://tinychen.com/20190711-rhel7-acl/"/>
    <id>https://tinychen.com/20190711-rhel7-acl/</id>
    <published>2019-07-11T03:00:00.000Z</published>
    <updated>2019-07-11T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>RHEL7中的ACL的简单介绍。</p><h1 id="1、ACL简介"><a href="#1、ACL简介" class="headerlink" title="1、ACL简介"></a>1、ACL简介</h1><p><code>ACL</code>是<code>Access Control List</code>的缩写，主要的目的是在提供传统的<code>owner</code>，<code>group</code>，<code>others</code>的<code>read(r)</code>，<code>write(w)</code>，<code>execute(x)</code> 权限之外的细部权限设定。</p><p>ACL可以针对单一使用者，单一文件或目录来进行r，w，x的权限规范，对于需要特殊权限的使用状况非常有帮助。<br>ACL主要可以针对以下三者：</p><ul><li>使用者（user）：可以针对使用者来设定权限</li><li>群组（group）：针对群组为对象来设定其权限</li><li>默认属性（mask）：还可以针对在该目录下在建立新文件/目录时，规范新数据的默认权限</li></ul><span id="more"></span><p>也就是说，如果你有一个目录，需要给一堆人使用，每个人或每个群组所需要的权限并不相同时，在过去，传统的Linux三种身份的三种权限是无法达到的，<strong>因为基本上，传统的Linux权限只能针对一个用户、一个群组及非此群组的其他人设定权限而己，无法针对单一用户或个人来设计权限。</strong>而ACL的出现就是为了解决这个问题，实现更加细化的账户文件权限控制。</p><h1 id="2、setfacl"><a href="#2、setfacl" class="headerlink" title="2、setfacl"></a>2、setfacl</h1><p><strong><code>ACL</code>的实现主要是通过<code>setfacl</code>和<code>getfacl</code>命令来操作。</strong></p><ul><li><code>getfacl</code>：取得某个文件/目录的ACL设定项目</li><li><code>setfacl</code>：设定某个文件/目录的ACL规范</li></ul><blockquote><p><code>getfacl</code>的使用和<code>setfacl</code>一样，主要是用来查看acl权限，因此我们主要来看一下<code>setfacl</code>的用法。</p></blockquote><p><code>setfacl</code>的英文全称是<code>set file access control list </code>,即“设置文件访问控制列表”。改命令可以更精确的控制权限的分配，比如让某一个用户对某一个文件具有某种权限。</p><p>ACL指文件的所有者、所属组、其他人的读/写/执行之外的特殊的权限， 对于需要特殊权限的使用状况有一定帮助。 如，某一个文件，不让单一的某个用户访问。</p><p><strong>语法格式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...<br></code></pre></div></td></tr></table></figure><p>我们输入<code>setfacl -h</code>查看一下帮助文档，可以看到里面的参数比较多</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setfacl 2.2.51 -- <span class="hljs-built_in">set</span> file access control lists<br>Usage: setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...<br>  -m, --modify=acl        modify the current ACL(s) of file(s)<br>  -M, --modify-file=file  <span class="hljs-built_in">read</span> ACL entries to modify from file<br>  -x, --remove=acl        remove entries from the ACL(s) of file(s)<br>  -X, --remove-file=file  <span class="hljs-built_in">read</span> ACL entries to remove from file<br>  -b, --remove-all        remove all extended ACL entries<br>  -k, --remove-default    remove the default ACL<br>      --<span class="hljs-built_in">set</span>=acl           <span class="hljs-built_in">set</span> the ACL of file(s), replacing the current ACL<br>      --set-file=file     <span class="hljs-built_in">read</span> ACL entries to <span class="hljs-built_in">set</span> from file<br>      --mask              <span class="hljs-keyword">do</span> recalculate the effective rights mask<br>  -n, --no-mask           don<span class="hljs-string">&#x27;t recalculate the effective rights mask</span><br><span class="hljs-string">  -d, --default           operations apply to the default ACL</span><br><span class="hljs-string">  -R, --recursive         recurse into subdirectories</span><br><span class="hljs-string">  -L, --logical           logical walk, follow symbolic links</span><br><span class="hljs-string">  -P, --physical          physical walk, do not follow symbolic links</span><br><span class="hljs-string">      --restore=file      restore ACLs (inverse of `getfacl -R&#x27;</span>)<br>      --<span class="hljs-built_in">test</span>              <span class="hljs-built_in">test</span> mode (ACLs are not modified)<br>  -v, --version           <span class="hljs-built_in">print</span> version and <span class="hljs-built_in">exit</span><br>  -h, --<span class="hljs-built_in">help</span>              this <span class="hljs-built_in">help</span> text<br></code></pre></div></td></tr></table></figure><blockquote><p>这里需要说明一下，-m和-M以及-x和-X的区别就在于，<strong>小写字母是后面直接跟需要设置的acl规则，而大写字母则是在后面跟着一个文件，文件里面写着acl规则，</strong>后者适用于比较复杂的acl规则设定情况。</p></blockquote><p>接下来我们看一些比较常用的选项参数：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setfacl [-bkRd] [&#123;-ml-x）ac1参数]目标文件名选项与参数：<br>-m：设定后续的ac1参数给文件使用，不可与-x合用；<br>-x：删除后续的ac1参数，不可与-m合用；<br>-b：移除[所有的]ACL设定参数；<br>-k：移除[预设的]ACL参数，关于所谓的预设]参数于后续范例中介绍；<br>-R：递归设定acl，亦即包括次目录都会被设定起来；<br>-d：设定预设ac1参数]的意思！只对目录有效，在该目录新建的数据会引用此默认值<br></code></pre></div></td></tr></table></figure><h1 id="3、实例示范"><a href="#3、实例示范" class="headerlink" title="3、实例示范"></a>3、实例示范</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置用户tinychen对acltest1有读写执行权限</span><br>setfacl -m u:tinychen:rwx acltest1<br><span class="hljs-comment"># 设置用户tinychen对acltest2无任何权限</span><br>setfacl -m u:tinychen:- acltest2<br><span class="hljs-comment"># 设置用户组tinychen对acltest3无任何权限</span><br>setfacl -m g:tinychen:- acltest3<br></code></pre></div></td></tr></table></figure><p>设定了ACL权限之后，我们查看该文件权限的时候会发现多了一个<code>+</code>号。</p><p><img src="https://resource.tinychen.com/blog/20190711/L8jsUw36k13x.png"></p><p><strong>然后我们使用<code>getfacl</code>命令查看文件的权限:</strong></p><p><img src="https://resource.tinychen.com/blog/20190710/tc5cvq601YfM.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除acltest1的所有acl权限设置</span><br>setfacl -b acltest1<br>getfacl acltest1<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190711/2b52XYa9ye38.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RHEL7中的ACL的简单介绍。&lt;/p&gt;
&lt;h1 id=&quot;1、ACL简介&quot;&gt;&lt;a href=&quot;#1、ACL简介&quot; class=&quot;headerlink&quot; title=&quot;1、ACL简介&quot;&gt;&lt;/a&gt;1、ACL简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ACL&lt;/code&gt;是&lt;code&gt;Access Control List&lt;/code&gt;的缩写，主要的目的是在提供传统的&lt;code&gt;owner&lt;/code&gt;，&lt;code&gt;group&lt;/code&gt;，&lt;code&gt;others&lt;/code&gt;的&lt;code&gt;read(r)&lt;/code&gt;，&lt;code&gt;write(w)&lt;/code&gt;，&lt;code&gt;execute(x)&lt;/code&gt; 权限之外的细部权限设定。&lt;/p&gt;
&lt;p&gt;ACL可以针对单一使用者，单一文件或目录来进行r，w，x的权限规范，对于需要特殊权限的使用状况非常有帮助。&lt;br&gt;ACL主要可以针对以下三者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者（user）：可以针对使用者来设定权限&lt;/li&gt;
&lt;li&gt;群组（group）：针对群组为对象来设定其权限&lt;/li&gt;
&lt;li&gt;默认属性（mask）：还可以针对在该目录下在建立新文件/目录时，规范新数据的默认权限&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7中的CRON简介</title>
    <link href="https://tinychen.com/20190710-rhel7-cron/"/>
    <id>https://tinychen.com/20190710-rhel7-cron/</id>
    <published>2019-07-10T02:50:00.000Z</published>
    <updated>2019-07-10T02:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>RHEL7中的CRON功能以及使用方式简介。</p><h1 id="1、cron简介"><a href="#1、cron简介" class="headerlink" title="1、cron简介"></a>1、cron简介</h1><p>crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程<strong>每分钟</strong>会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><span id="more"></span><blockquote><p>注意Cron在设置定时任务的时候，最多只能精确到分钟而无法精确到秒。</p></blockquote><p>Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p><ul><li><p>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。**/etc/crontab文件是系统任务调度的配置文件。**</p></li><li><p>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。<strong>所有用户定义的crontab 文件都被保存在 /var/spool/cron目录中。其文件名与用户名一致。</strong></p></li></ul><h1 id="2、cron安装"><a href="#2、cron安装" class="headerlink" title="2、cron安装"></a>2、cron安装</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># cron的安装进程是cronie</span><br>yum install -y cronie<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190709/O6eDpJ2adV2B.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置cron开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> crond.service<br><br><span class="hljs-comment"># 关闭cron开机启动</span><br>systemctl <span class="hljs-built_in">disable</span> crond.service<br><br><span class="hljs-comment"># 启动cron</span><br>systemctl start crond.service<br><br><span class="hljs-comment"># 查看cron运行状态</span><br>systemctl status crond.service<br><br><span class="hljs-comment"># 重启cron</span><br>systemctl restart crond.service<br><br><span class="hljs-comment"># 关闭cron</span><br>systemctl stop crond.service<br></code></pre></div></td></tr></table></figure><h1 id="3、cron相关文件"><a href="#3、cron相关文件" class="headerlink" title="3、cron相关文件"></a>3、cron相关文件</h1><p>我们先看一下在<code>/etc</code>目录下和cron相关的文件主要有哪些，接下来我们逐个对其进行分析。</p><p><img src="https://resource.tinychen.com/blog/20190710/fY25X17dYdiG.png"></p><h2 id="3-1-etc-crontab"><a href="#3-1-etc-crontab" class="headerlink" title="3.1 /etc/crontab"></a>3.1 /etc/crontab</h2><p>我们cat一下<code>/etc/crontab</code>这个文件看看里面的内容</p><p><img src="https://resource.tinychen.com/blog/20190709/UUFUSB1FVE07.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用哪种she11接口</span><br>SHELL=/bin/bash<br><span class="hljs-comment"># 执行文件搜寻路径</span><br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br><span class="hljs-comment"># 若有额外STDOUT，以email将数据送给谁</span><br>MAILTO=root<br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be executed</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>MAILTO=root：</strong>这个项目是说，当<code>/etc/crontab</code>这个文件中的例行性工作的指令发生错误时，或者是该工作的执行结果有STDOUT/STDERR时，默认是由系统直接寄发一封mail给root。由于root 并无法在客户端中以POP3之类的协议接收邮件，因此你也可以改成自己的邮箱。</li><li><strong>PATH：</strong>这里就是输入执行文件的搜寻路径，一般使用默认的路径即可</li><li><strong>分-时-日-月-周-执行用户-执行指令：</strong>七个字段的设定，这个<code>/etc/crontab</code>里面可以设定的基本语法就在这个文件里面，当我们忘了格式的时候可以cat这个文件看一下，<strong>需要注意的是不填写的字段需要使用星号<code>*</code>来占位，同一个字段要写多个数字的时候用英文逗号隔开；执行用户方面，系统默认是以root的身份来进行的。</strong></li></ul><blockquote><p>这里需要注意的是，在设定时间的时候，不能同时使用周和日月，即我们只能设定该任务在周几执行或者是几月几日执行，不能同时满足这两个条件，否则系统可能会无法正确识别。</p></blockquote><h2 id="3-2-etc-cron-allow和-etc-cron-deny"><a href="#3-2-etc-cron-allow和-etc-cron-deny" class="headerlink" title="3.2 /etc/cron.allow和/etc/cron.deny"></a>3.2 /etc/cron.allow和/etc/cron.deny</h2><p><code>/etc/cron.allow</code>和<code>/etc/cron.deny</code>这两个文件主要是对使用<code>cron</code>的用户进行管理。</p><p>这里可以分为四种情况。</p><ol><li>如果这两个文件<strong>都不存在</strong>，那么就只有<code>root</code>用户能够使用<code>crontab</code>命令</li><li>如果<strong>只存在</strong><code>cron.allow</code>，那么就只有<code>cron.allow</code>上面的用户<strong>能</strong>使用<code>crontab</code>命令，<strong>如果<code>root</code>用户也不在里面，则root用户也不能使用<code>crontab</code></strong></li><li>如果<strong>只存在</strong><code>cron.deny</code>，那么就只有<code>cron.deny</code>上面的用户<strong>不能</strong>使用<code>crontab</code>命令</li><li>如果两个文件<strong>都存在</strong>，则列在<code>cron.allow</code>文件中<strong>而且没有</strong>列在<code>cron.deny</code>中的用户可以使用<code>crontab</code>，<strong>如果两个文件中都有同一个用户，以cron.allow文件里面是否有该用户为准，</strong>如果<code>cron.allow</code>中有该用户，则可以使用<code>crontab</code>命令</li></ol><blockquote><p><code>crontab</code>命令我们将在本文后面讲解</p></blockquote><h2 id="3-3-etc-cron-d"><a href="#3-3-etc-cron-d" class="headerlink" title="3.3 /etc/cron.d"></a>3.3 /etc/cron.d</h2><p><code>/etc/cron.d/</code> 这个目录用来存放任何要执行的<code>crontab</code>文件或脚本</p><h2 id="3-4-etc-cron-ly"><a href="#3-4-etc-cron-ly" class="headerlink" title="3.4./etc/cron.*ly/"></a>3.4./etc/cron.*ly/</h2><p><code>cron.monthly/</code>，<code> cron.weekly/</code> ， <code>cron.daily/</code> ， <code>cron.hourly/</code>这四个目录下面存放的文件会在对应的时间内被执行，如 <code>cron.hourly/</code>里面的文件会在每个小时被执行一次，<strong>需要注意的是，这里放置的是直接执行的脚本文件，而不是上述的crontab格式的定时任务描述文件。</strong></p><h2 id="3-5-var-spool-cron"><a href="#3-5-var-spool-cron" class="headerlink" title="3.5 /var/spool/cron/"></a>3.5 /var/spool/cron/</h2><p><code>/var/spool/cron/</code>目录下存放着每个用户自己的<code>crontab</code>文件。</p><p><img src="https://resource.tinychen.com/blog/20190710/15mBjRkwAUoR.png"></p><h1 id="4、crontab命令"><a href="#4、crontab命令" class="headerlink" title="4、crontab命令"></a>4、crontab命令</h1><p><strong>语法格式：</strong>crontab [参数]</p><p><strong>常用参数：</strong></p><table><thead><tr><th align="right">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="right">-e</td><td align="left">编辑该用户的计时器设置</td></tr><tr><td align="right">-l</td><td align="left">列出该用户的计时器设置</td></tr><tr><td align="right">-r</td><td align="left">删除该用户的计时器设置</td></tr><tr><td align="right">-u</td><td align="left">指定要设定计时器的用户名称</td></tr><tr><td align="right">–help</td><td align="left">显示帮助信息</td></tr></tbody></table><p><strong>参考实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用tinychen用户，每年的1月1日输出HappyNewYear！</span><br>crontab -e -u tinychen<br><span class="hljs-comment"># 然后和vim一样的编辑模式，输入下列参数</span><br>0 0 1 1 * /bin/<span class="hljs-built_in">echo</span> HappyNewYear! &gt; /dev/pts/0<br></code></pre></div></td></tr></table></figure><blockquote><p>需要注意的是，和<code>/etc/crontab</code>文件不同，使用<code>crontab</code>命令进入到编辑模式的时候不需要再加执行用户这一参数，默认是使用当前的登录账户，如果需要指定，使用<code>-u</code>参数即可。</p></blockquote><p><strong>此外，crontab中还有几种简化的写法需要我们了解一下</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">*</span>代表所有的取值范围内的数字<br><br>/代表每的意思,如/5表示每5个单位<br><br><span class="hljs-bullet">-</span>代表从某个数字到某个数字<br><br>,分开几个离散的数字<br></code></pre></div></td></tr></table></figure><p><strong>需要注意的是，<code>crontab -r</code>是删除该用户的所有定时任务。</strong></p><p><img src="https://resource.tinychen.com/blog/20190710/NEkfbtYTLoMU.png"></p><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><ul><li><p>个人化的行为使用<code>crontab-e</code>：</p><p>  如果你是依据个人需求来建立的例行工作排程，建议直接使用<code>crontab-e</code>。这样也能保障你的指令行为不会被大家看到（<code>/etc/crontab</code>是大家都能读取的）；</p></li><li><p>系统维护管理使用<code>vim/etc/crontab</code>：</p><p>  如果这个例行工作排程是系统的重要工作，为了让自己管理方便，同时容易追踪，建议直接写入<code>/etc/crontab</code>较佳！</p></li><li><p>自己开发软件使用<code>vim/etc/cron.d/newfile</code>：</p><p>  如果是想要自己开发软件，那当然最好就是使用全新的配置文件，并且放置于<code>/etc/cron.d/</code>目录内即可。</p></li><li><p>固定每小时、每日、每周、每天执行的特别工作：</p><p>  如果与系统维护有关，还是建议放置到<code>/etc/crontab</code>中来集中管理较好。如果想要偷懒，或者是一定要再某个周期内进行的任务，也可以放置到上面谈到的几个目录中，直接写入指令即可！</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RHEL7中的CRON功能以及使用方式简介。&lt;/p&gt;
&lt;h1 id=&quot;1、cron简介&quot;&gt;&lt;a href=&quot;#1、cron简介&quot; class=&quot;headerlink&quot; title=&quot;1、cron简介&quot;&gt;&lt;/a&gt;1、cron简介&lt;/h1&gt;&lt;p&gt;crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程&lt;strong&gt;每分钟&lt;/strong&gt;会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>多主机间实现SSH免密登录</title>
    <link href="https://tinychen.com/20190709-multi-ssh/"/>
    <id>https://tinychen.com/20190709-multi-ssh/</id>
    <published>2019-07-09T07:30:00.000Z</published>
    <updated>2019-07-09T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>K8S部署的前期准备工作，多台CentOS主机之间使用SSH免密登录。</p><span id="more"></span><h1 id="1、实现原理"><a href="#1、实现原理" class="headerlink" title="1、实现原理"></a>1、实现原理</h1><p>这里我们需要实现的一共有两个效果，一个是这五台CentOS主机之间任意两台之间都能使用ssh免密登录，另一个就是能够直接使用 <code>ssh hostname</code> 的方式登录而不需要使用 <code>ssh account@ip_addr</code>的方式登录。</p><h2 id="1-1-rsa密钥对"><a href="#1-1-rsa密钥对" class="headerlink" title="1.1 rsa密钥对"></a>1.1 rsa密钥对</h2><p>一般来说我们的SSH使用的是RSA类型的密钥对，使用<code>ssh-keygen</code>默认生成的也是RSA类型的密钥对。一般来说会产生两个文件，分别是<code>id_rsa</code>和<code>id_rsa.pub</code>,其中前者是私钥，后者是公钥。私钥不能泄露，而公钥是放置在目标主机的<code>authorized_keys</code>文件中，从而实现免密登录的效果。</p><p>要实现五台CentOS主机之间任意两台之间都能使用ssh免密登录，只需要将这五台主机的<code>id_rsa.pub</code>都存放到一个<code>authorized_keys</code>文件中，然后再将这个文件复制到每一台主机上即可。</p><h2 id="1-2-hosts文件"><a href="#1-2-hosts文件" class="headerlink" title="1.2 hosts文件"></a>1.2 hosts文件</h2><p>CentOS中的<code>/etc/hosts</code>文件中存放着主机名和对应的ip地址等信息，想要实现直接使用 <code>ssh hostname</code> 的方式登录的效果，只要在hosts文件中添加ip地址和对应hostname（主机名）即可。</p><h1 id="2、操作步骤"><a href="#2、操作步骤" class="headerlink" title="2、操作步骤"></a>2、操作步骤</h1><h2 id="2-1-安装启用ssh"><a href="#2-1-安装启用ssh" class="headerlink" title="2.1 安装启用ssh"></a>2.1 安装启用ssh</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># master和每台node节点上安装ssh</span><br>sudo yum install -y openssl openssh-server<br><br><span class="hljs-comment"># master和每台node节点上启动ssh并设置开机自启</span><br>systemctl start sshd.service<br>systemctl <span class="hljs-built_in">enable</span> sshd.service<br></code></pre></div></td></tr></table></figure><h2 id="2-2-生成密钥对"><a href="#2-2-生成密钥对" class="headerlink" title="2.2 生成密钥对"></a>2.2 生成密钥对</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># master和每台node节点上都生成ssh密钥,接下来一路回车</span><br>ssh-keygen<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190709/Wi2hKbDWk2QQ.png"></p><blockquote><p>需要注意的是，这里提示输入的<code>passphrase</code>相当于ssh密钥对的密码，不输入的话直接回车跳过即可，输入了之后，每次使用ssh免密登录的时候会再要求输入<code>passphrase</code>以保证安全。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将每台node节点的id_rsa.pub复制到master上面，注意要重新命名避免覆盖</span><br>scp /home/tinychen/.ssh/id_rsa.pub tinychen@192.168.100.50:/home/tinychen/.ssh/node5*<br><br><span class="hljs-comment"># 在master上使用cat命令将master和所有node节点的id_rsa.pub追加到authorized_keys中</span><br>cat id_rsa.pub &gt;&gt; authorized_keys<br>cat node51 &gt;&gt; authorized_keys<br>cat node52 &gt;&gt; authorized_keys<br>cat node53 &gt;&gt; authorized_keys<br>cat node54 &gt;&gt; authorized_keys<br></code></pre></div></td></tr></table></figure><h2 id="2-3-配置sshd-config"><a href="#2-3-配置sshd-config" class="headerlink" title="2.3 配置sshd_config"></a>2.3 配置sshd_config</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑master的ssh配置文件，去掉红圈中三项前面的#使其生效</span><br>sudo vim /etc/ssh/sshd_config<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190709/YgmqyRiquoNf.png"></p><h2 id="2-4-编辑hosts"><a href="#2-4-编辑hosts" class="headerlink" title="2.4 编辑hosts"></a>2.4 编辑hosts</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑master节点的/etc/hosts文件，追加ip地址和对应的主机名，使得能够直接使用ssh+主机名的方式登录</span><br><br>sudo vim /etc/hosts<br><br>192.168.100.50  master50<br>192.168.100.51  node51<br>192.168.100.52  node52<br>192.168.100.53  node53<br>192.168.100.54  node54<br></code></pre></div></td></tr></table></figure><h2 id="2-5-复制master的配置文件"><a href="#2-5-复制master的配置文件" class="headerlink" title="2.5 复制master的配置文件"></a>2.5 复制master的配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将master节点的ssh配置文件复制到每一个节点上</span><br><span class="hljs-comment"># 这里必须使用root账户，否则权限不足</span><br>sudo scp /etc/ssh/sshd_config root@192.168.100.51:/etc/ssh/sshd_config<br>sudo scp /etc/ssh/sshd_config root@192.168.100.52:/etc/ssh/sshd_config<br>sudo scp /etc/ssh/sshd_config root@192.168.100.53:/etc/ssh/sshd_config<br>sudo scp /etc/ssh/sshd_config root@192.168.100.54:/etc/ssh/sshd_config<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将master节点的authorized_keys文件复制到每一个节点上</span><br>scp /home/tinychen/.ssh/authorized_keys tinychen@192.168.100.51:/home/tinychen/.ssh/authorized_keys<br>scp /home/tinychen/.ssh/authorized_keys tinychen@192.168.100.52:/home/tinychen/.ssh/authorized_keys<br>scp /home/tinychen/.ssh/authorized_keys tinychen@192.168.100.53:/home/tinychen/.ssh/authorized_keys<br>scp /home/tinychen/.ssh/authorized_keys tinychen@192.168.100.54:/home/tinychen/.ssh/authorized_keys<br></code></pre></div></td></tr></table></figure><h2 id="2-6-修改ssh文件权限"><a href="#2-6-修改ssh文件权限" class="headerlink" title="2.6 修改ssh文件权限"></a>2.6 修改ssh文件权限</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 对master和每一个node节点都进行ssh相关文件权限的修改</span><br>sudo chmod 700 /home/tinychen/.ssh/<br>sudo chmod 600 /home/tinychen/.ssh/*<br></code></pre></div></td></tr></table></figure><h1 id="3、验证效果"><a href="#3、验证效果" class="headerlink" title="3、验证效果"></a>3、验证效果</h1><p>需要注意的是，第一次ssh登录的时候，因为known_hosts文件里面没有保存这台主机的对应信息，我们需要输入yes才能登录，之后便不再需要。</p><p><img src="https://resource.tinychen.com/blog/20190709/7G0yYSRqu8AG.png"></p><p><img src="https://resource.tinychen.com/blog/20190709/kyhDNqU8kreQ.png"></p><p>此外，如果使用ssh+主机名的方式登录，两台主机必须是使用的同一个用户，这里我使用的是tinychen用户，由于我已经在ssh的配置文件中修改了配置允许ssh使用root账户登录，因此这里我们使用管理员账户tinychen，如果有需要了再切换到root账户，保证安全性</p><h1 id="4、补充"><a href="#4、补充" class="headerlink" title="4、补充"></a>4、补充</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 如果想要实现root账户之间的ssh免密登录，将.ssh文件夹整个复制过去即可</span><br>rm -rf /root/.ssh/<br>cp -r /home/tinychen/.ssh/ /root/<br>chmod 700 /root/.ssh/<br>chmod 600 /root/.ssh/*<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;K8S部署的前期准备工作，多台CentOS主机之间使用SSH免密登录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7修改默认启动级别</title>
    <link href="https://tinychen.com/20190708-rhel7-change-init-level/"/>
    <id>https://tinychen.com/20190708-rhel7-change-init-level/</id>
    <published>2019-07-08T11:00:00.000Z</published>
    <updated>2019-07-08T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的七种启动级别介绍及CentOS7修改默认启动级别的方法。</p><span id="more"></span><h1 id="1、Linux的7种启动级别"><a href="#1、Linux的7种启动级别" class="headerlink" title="1、Linux的7种启动级别"></a>1、Linux的7种启动级别</h1><table><thead><tr><th align="center">代号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户</td></tr><tr><td align="center">2</td><td align="center">多用户（无NFS）</td></tr><tr><td align="center">3</td><td align="center">多用户（有NFS）</td></tr><tr><td align="center">4</td><td align="center">未使用，保留给用户</td></tr><tr><td align="center">5</td><td align="center">GUI图形化模式</td></tr><tr><td align="center">6</td><td align="center">正常关闭系统并重新启动</td></tr></tbody></table><p>一般来说我们使用的比较多的是3或者5，现在默认的一般都是5，启用了GUI图形化界面，方便用户操作，但是有的时候我们觉得GUI太占内存且启动太慢，又或者觉得没有必要启用GUI，就可以使用<code>init</code>命令进行切换。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 关机</span><br>init 0<br><br><span class="hljs-comment"># 切换到命令行界面</span><br>init 3<br><br><span class="hljs-comment"># 切换到GUI界面</span><br>init 5<br><br><span class="hljs-comment"># 重启</span><br>init 6<br></code></pre></div></td></tr></table></figure><h1 id="2、修改系统默认启动级别"><a href="#2、修改系统默认启动级别" class="headerlink" title="2、修改系统默认启动级别"></a>2、修改系统默认启动级别</h1><p>在CentOS中，一般是<code>/etc/inittab</code>这个文件对系统启动级别进行管理，但是到了CentOS7中，由于引入了新的管理工具<code>systemctl</code>，这个文件已经被弃用，我们打开这个文件可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># inittab is no longer used when using systemd.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ADDING CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Ctrl-Alt-Delete is handled by /usr/lib/systemd/system/ctrl-alt-del.target</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># systemd uses &#x27;targets&#x27; instead of runlevels. By default, there are two main targets:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># multi-user.target: analogous to runlevel 3</span><br><span class="hljs-comment"># graphical.target: analogous to runlevel 5</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To view current default target, run:</span><br><span class="hljs-comment"># systemctl get-default</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To set a default target, run:</span><br><span class="hljs-comment"># systemctl set-default TARGET.target</span><br><span class="hljs-comment">#</span><br></code></pre></div></td></tr></table></figure><p>也就是说我们需要使用<code>systemctl set-default</code>来设置默认的启动级别。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看默认启动级别</span><br>systemctl get-default<br><br><span class="hljs-comment"># 设置默认启动级别为init 3 多用户（NFS）的命令行界面</span><br>systemctl set-default multi-user.target<br><br><span class="hljs-comment"># 设置默认启动级别为init 5 GUI图形化界面</span><br>systemctl set-default graphical.target<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190708/xTqXeVxEl0zu.png"></p><p>重启之后我们就能看到系统已经以我们修改后的启动级别来运行了。</p><p><img src="https://resource.tinychen.com/blog/20190708/GpkBDNST5XJy.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux中的七种启动级别介绍及CentOS7修改默认启动级别的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7的yum简介</title>
    <link href="https://tinychen.com/20190708-rhel7-yum-repo/"/>
    <id>https://tinychen.com/20190708-rhel7-yum-repo/</id>
    <published>2019-07-08T07:00:00.000Z</published>
    <updated>2019-07-08T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>RHEL7中的rpm和yum的简单介绍。</p><span id="more"></span><h1 id="1、RPM和dpkg简介"><a href="#1、RPM和dpkg简介" class="headerlink" title="1、RPM和dpkg简介"></a>1、RPM和dpkg简介</h1><p>目前在Linux界软件安装方式最常见的有两种，分别是：</p><ul><li>dpkg<br>  这个机制最早是由Debian Linux社群所开发出来的，透过dpkg的机制，Debian提供的软件就能够简单的安装起来，同时还能提供安装后的软件信息，实在非常不错。只要是衍生于Debian的其他Linux distributions大多使用dpkg这个机制来管理软件的，包括B2D，Ubuntu等等。</li><li>RPM<br>  这个机制最早是由Red Hat 这家公司开发出来的，后来实在很好用，因此很多distributions就使用这个机制来作为软件安装的管理方式。包括Fedora，CentOS，SuSE等等知名的开发商都是用的RPM。</li></ul><p>如前所述，不论dpkg/rpm这些机制或多或少都会有软件依赖的问题，那该如何解决呢？其实前面不是谈到过每个软件文件都有提供对应依赖的的检查吗？那么如果我们将每个软件对应依赖的数据做成列表，等到实际软件安装时，若发生需要安装依赖的情况，例如安装A需要先安装B与C，而安装B则需要安装D与E时，那么当你要安装A，通过查询依赖的数据列表，管理机制自动去取得B，C，D，E来同时安装，就可以很方便的解决依赖的了。</p><p>在dpkg管理机制上就开发出APT的在线升级机制，RPM则依开发商的不同，有Red Hat系统的yum，SuSE系统的Yast Online Update（YOU）等。</p><table><thead><tr><th align="center">distribution代表</th><th align="center">软件管理机制</th><th align="center">使用指令</th><th align="center">在线升级机制（指令）</th></tr></thead><tbody><tr><td align="center">Red Hat/Fedora</td><td align="center">RPM</td><td align="center">rpm</td><td align="center">yum(yum)</td></tr><tr><td align="center">Debian/Ubuntu</td><td align="center">dpkg</td><td align="center">dpkg</td><td align="center">apt(apt-get)</td></tr></tbody></table><h1 id="2、RPM和SRPM"><a href="#2、RPM和SRPM" class="headerlink" title="2、RPM和SRPM"></a>2、RPM和SRPM</h1><h2 id="2-1-RPM"><a href="#2-1-RPM" class="headerlink" title="2.1 RPM"></a>2.1 RPM</h2><p>RPM全名是<strong>RedHat Package Manager</strong>，简称RPM。顾名思义，当初这个软件管理的机制是由Red Hat 这家公司发展出来的。RPM是以一种数据库记录的方式来将你所需要的软件安装到你的Linux系统的一套管理机制。</p><p>RPM最大的特点就是将你要安装的软件先编译过，并且打包成为RPM机制的包装文件，透过包装好的软件里头默认的数据库记录，记录这个软件要安装的时候必须具备的依赖软件，当安装在你的Linux主机时，RPM会先依照软件里头的数据查询Linux主机的所需依赖软件是否满足，若满足则予以安装，若不满足则不予安装。那么安装的时候就将该软件的信息整个写入RPM的数据库中，以便未来的查询、验证与卸载！这样一来的优点是：</p><ul><li>由于已经编译完成并且打包完毕，所以软件传输与安装上很方便（不需要再重新编译）；</li><li>由于软件的信息都已经记录在Linux主机的数据库上，很方便查询、升级与卸载。</li></ul><p>由于RPM文件是已经编译完成了的，所以，该软件文件几乎只能安装在原本默认的硬件与操作系统版本中。也就是说，你的主机系统环境必须要与当初建立这个软件文件的主机环境相同才行！</p><blockquote><p>举例来说，rp-pppoe这个ADSL拨接软件，他必须要在ppp这个软件存在的环境下才能进行安装！如果你的主机并没有ppp这个软件，那么很抱歉，除非你先安装ppp否则rp-pppoe就是不让你安装的（当然你可以强制安装，但是通常都会有点问题发生就是了！）。</p></blockquote><h2 id="2-2-SRPM"><a href="#2-2-SRPM" class="headerlink" title="2.2 SRPM"></a>2.2 SRPM</h2><p>SRPM就是<strong>Source RPM</strong>的意思，也就是这个RPM文件里面含有源码。<strong>也就是说这个SRPM所提供的软件内容并没有经过编译，它提供的是原始码。</strong></p><p>通常SRPM的扩展名是以<code>***src.rpm</code>这种格式来命名的。<strong>需要注意的是，虽然RPM提供的是原始码，但是他仍然含有该软件所需要的依赖软件说明、以及所有RPM文件所提供的数据。同时，他与RPM不同的是，他也提供了参数配置文件（就是<code>configure</code>与<code>makefile</code>）。</strong>所以，如果我们下载的是SRPM，那么要安装该软件时，你就必须要：</p><ul><li>先将该软件以RPM管理的方式编译，此时SRPM会被编译成为RPM文件；</li><li>然后将编译完成的RPM文件安装到Linux系统当中</li></ul><blockquote><p>通常一个软件在释出的时候，都会同时释出该软件的RPM与SRPM。我们现在知道RPM文件必须要在相同的Linux环境下才能够安装，而SRPM既然是原始码的格式，我们可以修改SRPM内的参数配置文件，然后重新编译产生能适合我们Linux环境的RPM文件。</p></blockquote><h2 id="2-3-x86和noarch"><a href="#2-3-x86和noarch" class="headerlink" title="2.3 x86和noarch"></a>2.3 x86和noarch</h2><p>一般对应的rpm包会有不同的几种平台对应，下表列出了比较常见的一些平台，需要注意的是，现在基本已经全部步入了64位时代(主要是服务器、桌面端和移动端)，==主打服务器端的CentOS7已经不再发布32位版本，因此在CentOS7上面见到的主要是<code>x86_64</code>和<code>noarch</code>。==</p><table><thead><tr><th>平台</th><th>说明</th></tr></thead><tbody><tr><td>i386</td><td>几乎适用于所有的x86平台，不论是旧的pentum或者是新的Intel Core2与K8系列的CPU等等，都可以正常的工作。那个i指的是Intel兼容的CPU的意思。386就是CPU的等级。</td></tr><tr><td>i586</td><td>就是针对586等级的计算机进行优化编译。那是哪些CPU呢？包括pentum第一代MMXCPU，AMD的K5，K6系列CPU（socket7插脚）等等的CPU都算是这个等级；</td></tr><tr><td>i686</td><td>在pentunll以后的Intel系列CPU，及K7以后等级的CPU都属于这个686等级！由于目前市面上几乎仅剩P-ll以后等级的硬件平台，因此很多distributions都直接释出这种等级的RPM文件。</td></tr><tr><td>x86_64</td><td>针对64位的CPU进行优化编译设定，包括Intel的Core 2以上等级CPU，以及AMD的Athlon64以后等级的CPU，都属于这一类型的硬件平台。</td></tr><tr><td>noarch</td><td>noarch是no architecture的缩写，说明这个包可以在各个不同的cpu上使用。一般来说，这种类型的RPM文件，里面应该没有binary program存在，较常出现的就是属于shell script方面的软件。</td></tr></tbody></table><h1 id="3、Yum"><a href="#3、Yum" class="headerlink" title="3、Yum"></a>3、Yum</h1><h2 id="3-1-yum简介"><a href="#3-1-yum简介" class="headerlink" title="3.1 yum简介"></a>3.1 yum简介</h2><p>当客户端有升级、安装的需求时，yum会向软件库要求清单的更新，等到清单更新到本机的<br><code>/var/cache/yum</code>里面后，等一下更新时就会用这个本机清单与本机的RPM数据库进行比较，这样就知道该下载什么软件。接下来yum会跑到软件库服务器（<code>yum server</code>）下载所需要的软件（因为有记录软件所在的网址），然后再透过RPM的机制开始安装软件。这就是yum安装软件的整个流程。</p><p>yum的repo文件一般在<code>/etc/yum.repo.d/</code>目录下，如图所示就是小七的CentOS7中的yum repo list</p><p><img src="https://resource.tinychen.com/blog/20190708/PpfaSN8jr03X.png"></p><h2 id="3-2-yum-update和upgrade"><a href="#3-2-yum-update和upgrade" class="headerlink" title="3.2 yum update和upgrade"></a>3.2 yum update和upgrade</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 升级所有包同时也升级软件和系统内核</span><br>yum update<br><br><span class="hljs-comment"># 只升级所有包，不升级软件和系统内核</span><br>yum upgrade<br></code></pre></div></td></tr></table></figure><h2 id="3-3-yum-repo文件构成"><a href="#3-3-yum-repo文件构成" class="headerlink" title="3.3 yum repo文件构成"></a>3.3 yum repo文件构成</h2><p>一般来说，一个<code>yum repo</code>文件由下面的几部分构成</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 必须是独一无二的ID来标记这个yum repo，如果重复了，后面的会覆盖掉前面的</span><br>[serverid]<br><br><span class="hljs-comment"># 添加一段文字来描述这个yum repo</span><br>name=Description<br><br><span class="hljs-comment"># 设置资源库的地址，可以是http或者ftp等多种形式</span><br>baseurl=&#123;ftp://|http://|file://&#125;<br><br><span class="hljs-comment"># enabled=1开启本地更新模式</span><br>enabled=&#123;1|0&#125;<br><br><span class="hljs-comment"># gpgcheck=1表示检查；可以不检查gpgcheck=0</span><br>gpgcheck=&#123;1|0&#125;<br><br><span class="hljs-comment"># 检查的key；如果上面不检查这一行可以不写</span><br><span class="hljs-comment"># gpgkey的地址也可以是http或者ftp等多种形式</span><br>gpgkey=<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RHEL7中的rpm和yum的简单介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7的SELinux简介</title>
    <link href="https://tinychen.com/20190707-rhel7-selinux/"/>
    <id>https://tinychen.com/20190707-rhel7-selinux/</id>
    <published>2019-07-07T04:00:00.000Z</published>
    <updated>2019-07-07T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>RHEL7中的SELinux简单介绍。</p><span id="more"></span><h1 id="1、SELinux简介"><a href="#1、SELinux简介" class="headerlink" title="1、SELinux简介"></a>1、SELinux简介</h1><p>SELinux，Security Enhanced Linux 的缩写，也就是安全强化的 Linux，是由美国国家安全局（NSA）联合其他安全机构（比如 SCC 公司）共同开发的，旨在增强传统 Linux 操作系统的安全性，解决传统 Linux 系统中自主访问控制（DAC）系统中的各种权限问题（如 root 权限过高等）。</p><p>SELinux 项目在 2000 年以 GPL 协议的形式开源，当 Red Hat 在其 Linux 发行版本中包括了 SELinux 之后，SELinux 才逐步变得流行起来。现在，SELinux 已经被许多组织广泛使用，几乎所有的 Linux  内核 2.6 以上版本，都集成了 SELinux 功能。  </p><blockquote><p>对于 SELinux，初学者可以这么理解，它是部署在 Linux 上用于增强系统安全的功能模块。</p></blockquote><p>我们知道，传统的 Linux 系统中，默认权限是对文件或目录的所有者、所属组和其他人的读、写和执行权限进行控制，这种控制方式称为<strong>自主访问控制（DAC）方式</strong>；而在 SELinux 中，采用的是<strong>强制访问控制（MAC）系统</strong>，也就是控制一个进程对具体文件系统上面的文件或目录是否拥有访问权限，而判断进程是否可以访问文件或目录的依据，取决于 SELinux 中设定的很多策略规则。</p><p>说到这里，读者有必要详细地了解一下这两个访问控制系统的特点：</p><p>不过，系统中有这么多的进程，也有这么多的文件，如果手工来进行分配和指定，那么工作量过大。所以 SELinux 提供了很多的默认策略规则，这些策略规则已经设定得比较完善，我们稍后再来学习如何查看和管理这些策略规则。</p><ul><li><strong>自主访问控制系统（Discretionary Access Control，DAC）</strong>是 Linux 的默认访问控制方式，也就是依据用户的身份和该身份对文件及目录的 rwx 权限来判断是否可以访问。不过，在 DAC 访问控制的实际使用中我们也发现了一些问题：<ol><li>root 权限过高，rwx 权限对 root 用户并不生效，一旦 root 用户被窃取或者 root 用户本身的误操作，都是对 Linux 系统的致命威胁。</li><li>Linux 默认权限过于简单，只有所有者、所属组和其他人的身份，权限也只有读、写和执行权限，并不利于权限细分与设定。</li><li>不合理权限的分配会导致严重后果，比如给系统敏感文件或目录设定 777 权限，或给敏感文件设定特殊权限——SetUID 权限等。</li></ol></li><li><strong>强制访问控制（Mandatory Access Control，MAC）</strong>是通过 SELinux 的默认策略规则来控制特定的进程对系统的文件资源的访问。也就是说，即使你是 root 用户，但是当你访问文件资源时，如果使用了不正确的进程，那么也是不能访问这个文件资源的。</li></ul><p>这样一来，SELinux 控制的就不单单只是用户及权限，还有进程。每个进程能够访问哪个文件资源，以及每个文件资源可以被哪些进程访问，都靠 SELinux 的规则策略来确定。</p><h1 id="2、SELinux作用"><a href="#2、SELinux作用" class="headerlink" title="2、SELinux作用"></a>2、SELinux作用</h1><blockquote><p>注意，在 SELinux 中，Linux 的默认权限还是有作用的，也就是说，一个用户要能访问一个文件，既要求这个用户的权限符合 rwx 权限，也要求这个用户的进程符合 SELinux 的规定。</p></blockquote><p>不过，系统中有这么多的进程，也有这么多的文件，如果手工来进行分配和指定，那么工作量过大。所以 SELinux 提供了很多的默认策略规则，这些策略规则已经设定得比较完善，我们稍后再来学习如何查看和管理这些策略规则。</p><blockquote><p>为了使读者清楚地了解 SELinux 所扮演的角色，这里举一个例子，假设 apache 上发现了一个漏洞，使得某个远程用户可以访问系统的敏感文件（如 /etc/shadow）。如果我们的 Linux 中启用了 SELinux，那么，因为 apache 服务的进程并不具备访问 /etc/shadow 的权限，所以这个远程用户通过 apache 访问 /etc/shadow文件就会被 SELinux 所阻挡，起到保护 Linux 系统的作用  。</p></blockquote><blockquote><p>需要注意的是，SELinux 的 MAC 并不会完全取代 DAC，恰恰相反，对于 Linux 系统安全来说，它是一个额外的安全层，换句话说，当使用 SELinux 时，DAC 仍然被使用，且会首先被使用，如果允许访问，再使用 SELinux 策略；反之，如果 DAC 规则拒绝访问，则根本无需使用 SELinux 策略。<br>例如，若用户尝试对没有执行权限（rw-）的文件进行执行操作，那么传统的 DAC 规则就会拒绝用户访问，因此，也就无需再使用 SELinux 策略。</p></blockquote><p>相比传统的 Linux DAC 安全控制方式，SELinux 具有诸多好处，比如说：</p><ul><li>它使用的是 MAC 控制方式，这被认为是最强的访问控制方式；</li><li>它赋予了主体（用户或进程）最小的访问特权，这也就意味着，每个主体仅被赋予了完成相关任务所必须的一组有限的权限。通过赋予最小访问特权，可以防止主体对其他用户或进程产生不利的影响；</li><li>SELinux 管理过程中，每个进程都有自己的运行区域（称为域），各进程仅运行在自己的域内，无法访问其他进程和文件，除非被授予了特殊权限。</li><li>SELinux 可以调整到 Permissive 模式，此模式允许查看在系统上执行 SELinux 后所产生的印象。在 Permissive 模式中，SELinux 仍然会记录它所认为的安全漏洞，但并不会阻止它们。</li></ul><p>其实，想要了解 SELinux 的优点，最直接的办法就是查看当 Linux 系统上没有运行 SELinux 时会发生什么事情。</p><ol><li>根据相关的所有者和所属组的rwx权限，可以访问任何文件或目录；</li><li>完成存在安全隐患的活动，比如允许上传文件或更改系统显示；</li><li>可以监听任何端口的传入请求。</li></ol><p>但在一个受 SELinux 约束的系统上，httpd 守护进程受到了更加严格的控制。仍然使用上面的示例，httped仅能监听 SELinux 允许其监听的端口。SELinux 还可以防止 httpd 访问任何没有正确设置安全上下文的文件，并拒绝没有再 SELinux 中显式启用的不安全活动。</p><p><strong>因此，从本质上讲，SELinux 最大程序上限制了 Linux 系统中的恶意代码活动。</strong></p><h1 id="3、SELinux工作模式"><a href="#3、SELinux工作模式" class="headerlink" title="3、SELinux工作模式"></a>3、SELinux工作模式</h1><h2 id="3-1-基本概念解释"><a href="#3-1-基本概念解释" class="headerlink" title="3.1 基本概念解释"></a>3.1 基本概念解释</h2><p>在解释 SELinux 的工作模式之前，先解释几个概念。</p><ul><li><p><strong>主体（Subject）</strong>：就是想要访问文件或目录资源的进程。想要得到资源，基本流程是这样的：由用户调用命令，由命令产生进程，由进程去访问文件或目录资源。在自主访问控制系统中（Linux 默认权限中），靠权限控制的主体是用户；而在强制访问控制系统中（SELinux 中），靠策略规则控制的主体则是进程。</p></li><li><p><strong>目标（Object）</strong>：这个概念比较明确，就是需要访问的文件或目录资源。</p></li><li><p><strong>策略（Policy）</strong>：Linux 系统中进程与文件的数量庞大，那么限制进程是否可以访问文件的 SELinux 规则数量就更加烦琐，如果每个规则都需要管理员手工设定，那么 SELinux 的可用性就会极低。还好我们不用手工定义规则，SELinux 默认定义了两个策略，规则都已经在这两个策略中写好了，默认只要调用策略就可以正常使用了。这两个默认策略如下</p><ul><li><strong>targeted：这是 SELinux 的默认策略，这个策略主要是限制网络服务的，对本机系统的限制极少。我们使用这个策略已经足够了。</strong></li><li><strong>mls：多级安全保护策略，这个策略限制得更为严格。</strong></li></ul></li><li><p><strong>安全上下文（Security Context）</strong>：每个进程、文件和目录都有自己的安全上下文，进程具体是否能够访问文件或目录，就要看这个安全上下文是否匹配。如果进程的安全上下文和文件或目录的安全上下文能够匹配，则该进程可以访问这个文件或目录。当然，判断进程的安全上下文和文件或目录的安全上下文是否匹配，则需要依靠策略中的规则。</p><blockquote><p>举个例子，我们需要找对象，男人可以看作主体，女人就是目标了。而男人是否可以追到女人（主体是否可以访问目标），主要看两个人的性格是否合适（主体和目标的安全上下文是否匹配）。不过，两个人的性格是否合适，是需要靠生活习惯、为人处世、家庭环境等具体的条件来进行判断的（安全上下文是否匹配是需要通过策略中的规则来确定的）。</p></blockquote></li></ul><p><img src="https://resource.tinychen.com/blog/20190707/hzW6RgLKHPPa.png"></p><p>解释一下这张示意图：当主体想要访问目标时，如果系统中启动了 SELinux，则主体的访问请求首先需要和 SELinux 中定义好的策略进行匹配。如果进程符合策略中定义好的规则，则允许访问，这时进程的安全上下文就可以和目标的安全上下文进行匹配；如果比较失败，则拒绝访问，并通过 AVC（Access Vector Cache，访问向量缓存，主要用于记录所有和 SELinux 相关的访问统计信息）生成拒绝访问信息。如果安全上下文匹配，则可以正常访问目标文件。当然，最终是否可以真正地访问到目标文件，还要匹配产生进程（主体）的用户是否对目标文件拥有合理的读、写、执行权限。</p><p>我们在进行 SELinux 管理的时候，一般只会修改文件或目录的安全上下文，使其和访问进程的安全上下文匹配或不匹配，用来控制进程是否可以访问文件或目录资源；而很少会去修改策略中的具体规则，因为规则实在太多了，修改起来过于复杂。不过，我们是可以人为定义规则是否生效，用以控制规则的启用与关闭的。  </p><h2 id="3-2-三种工作模式"><a href="#3-2-三种工作模式" class="headerlink" title="3.2 三种工作模式"></a>3.2 三种工作模式</h2><p><strong>SELinux 提供了 3 种工作模式：Disabled、Permissive 和 Enforcing，而每种模式都为 Linux 系统安全提供了不同的好处。</strong></p><h3 id="Disable工作模式（关闭模式）"><a href="#Disable工作模式（关闭模式）" class="headerlink" title="Disable工作模式（关闭模式）"></a><strong>Disable工作模式（关闭模式）</strong></h3><p>在 Disable 模式中，SELinux 被关闭，默认的 DAC 访问控制方式被使用。对于那些不需要增强安全性的环境来说，该模式是非常有用的。</p><blockquote><p>例如，若从你的角度看正在运行的应用程序工作正常，但是却产生了大量的 SELinux AVC 拒绝消息，最终可能会填满日志文件，从而导致系统无法使用。在这种情况下，最直接的解决方法就是禁用 SELinux，当然，你也可以在应用程序所访问的文件上设置正确的安全上下文。</p></blockquote><p>需要注意的是，在禁用 SELinux 之前，需要考虑一下是否可能会在系统上再次使用 SELinux，如果决定以后将其设置为 <code>Enforcing</code> 或 <code>Permissive</code>，那么当下次重启系统时，系统将会通过一个自动 SELinux 文件重新进程标记。</p><p>关闭 SELinux 的方式也很简单，只需编辑配置文件 <code>/etc/selinux/config</code>，并将文本中 <code>SELINUX=</code> 更改为 <code>SELINUX=disabled</code> 即可，重启系统后，SELinux 就被禁用了。</p><h3 id="Permissive工作模式（宽容模式）"><a href="#Permissive工作模式（宽容模式）" class="headerlink" title="Permissive工作模式（宽容模式）"></a><strong>Permissive工作模式（宽容模式）</strong></h3><p>在 Permissive 模式中，SELinux 被启用，但安全策略规则并没有被强制执行。当安全策略规则应该拒绝访问时，访问仍然被允许。然而，此时会向日志文件发送一条消息，表示该访问应该被拒绝。</p><p>SELinux Permissive 模式主要用于以下几种情况：</p><ul><li>审核当前的 SELinux 策略规则；</li><li>测试新应用程序，看看将 SELinux 策略规则应用到这些程序时会有什么效果；</li><li>解决某一特定服务或应用程序在 SELinux 下不再正常工作的故障。</li></ul><p>某些情况下，可使用 audit2allow 命令来读取 SELinux 审核日志并生成新的 SELinux 规则，从而有选择性地允许被拒绝的行为，而这也是一种在不禁用 SELinux 的情况下，让应用程序在 Linux 系统上工作的快速方法。</p><h3 id="Enforcing工作模式（强制模式）"><a href="#Enforcing工作模式（强制模式）" class="headerlink" title="Enforcing工作模式（强制模式）"></a><strong>Enforcing工作模式（强制模式）</strong></h3><p>从此模式的名称就可以看出，在 Enforcing 模式中， SELinux 被启动，并强制执行所有的安全策略规则。</p><h1 id="4、SELinux配置文件"><a href="#4、SELinux配置文件" class="headerlink" title="4、SELinux配置文件"></a>4、SELinux配置文件</h1><p>SELinux 配置只能由<code>root</code> 用户进行设置和修改。配置和策略文件位于 <code>/etc/selinux</code> 目录中，主配置文件位 <code>/etc/selinux/config</code> 文件，该文件中的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># vim /etc/selinux/config</span><br><span class="hljs-comment"># This file controls the state of SELinux on the system.</span><br><span class="hljs-comment"># SELINUX= can take one of these three values：</span><br><span class="hljs-comment"># enforcing - SELinux security policy is enforced.</span><br><span class="hljs-comment"># permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-comment"># disabled - No SELinux policy is loaded.</span><br>SELINUX=enforcing<br><span class="hljs-comment"># 指定SELinux的运行模式。有enforcing（强制模式）、permissive（宽容模式）、disabled（不生效）三种模式</span><br><span class="hljs-comment"># SELINUXTYPE= can take one of these two values：</span><br><span class="hljs-comment"># targeted - Targeted processes are protected，</span><br><span class="hljs-comment"># mls - Multi Level Security protection.</span><br>SELINUXTYPE=targeted<br><span class="hljs-comment"># 指定SELinux的默认策略。有 targeted（针对性保护策略，是默认策略）和 mls（多级安全保护策略）两种策略</span><br></code></pre></div></td></tr></table></figure><p>主配置文件中，除去以‘#’符号开头的注释行，有效配置参数仅有 2 行。其中，<code>SELinux=enforcing</code> 为 SELinux 默认的工作模式，有效值还可以是 permissive 和 disabled；<code>SELINUXTYPE=targeted</code> 用于指定 SELinux 的默认策略。</p><p><strong>这里需要注意，如果从强制模式（enforcing）、宽容模式（permissive）切换到关闭模式（disabled），或者从关闭模式切换到其他两种模式，则必须重启 Linux 系统才能生效。但是强制模式和宽容模式这两种模式互相切换不用重启 Linux 系统就可以生效。</strong>这是因为 SELinux 是整合到 Linux 内核中的，所以必须重启才能正确关闭和启动。而且，如果从关闭模式切换到启动模式，那么重启 Linux 系统的速度会比较慢，那是因为需要重新写入安全上下文信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RHEL7中的SELinux简单介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7破解ROOT密码</title>
    <link href="https://tinychen.com/20190707-rhel7-break-passwd/"/>
    <id>https://tinychen.com/20190707-rhel7-break-passwd/</id>
    <published>2019-07-06T17:00:00.000Z</published>
    <updated>2019-07-06T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>RHEL系列Linux破解ROOT密码的操作。</p><span id="more"></span><p>在开机选择内核的时候，快速按下e，注意这个时候要选中需要修改root密码的内核，而不要选错了内核。</p><p><img src="https://resource.tinychen.com/blog/20190707/jRmJjHu2onsE.png"></p><p>接着我们找到倒数第二行的<code>LANG=en_US.UTF-8</code>这个位置，在后面加入<code>rd.break console=tty0</code>这一行指令，然后按<code>ctrl+x</code>执行</p><p><img src="https://resource.tinychen.com/blog/20190707/aPmuhCYnm9FF.png"></p><p>接下来我们会进入到一个操作终端，进行下列操作</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 重新挂载/sysroot分区为可读写模式</span><br>mount -o rw,remount /sysroot<br><br><span class="hljs-comment"># 更改root到这个可读写的/sysroot分区</span><br>chroot /sysroot<br><br><span class="hljs-comment"># 使用passwd指令修改root账户的密码</span><br>paawd<br><br><span class="hljs-comment"># 或者使用echo的方式修改密码</span><br><span class="hljs-built_in">echo</span> 你的新密码 | passwd --stdin root<br><br><span class="hljs-comment"># 如果系统打开了SELinux，还需要新建一个文件，否则修改密码不生效</span><br>touch /.autorelabel<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190707/OVGBsRyEdXYB.png"></p><p>接着输入两次exit退出重启，我们可以看到如果开启了SELiunx的话还会有一个读条的操作</p><p><img src="https://resource.tinychen.com/blog/20190707/jJFfkqEihDeV.png"></p><p>读条完成重启之后就可以使用修改完密码的root账户登录了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RHEL系列Linux破解ROOT密码的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Frp内网穿透实现MS远程桌面和SSH</title>
    <link href="https://tinychen.com/20190706-frp/"/>
    <id>https://tinychen.com/20190706-frp/</id>
    <published>2019-07-06T07:00:00.000Z</published>
    <updated>2019-07-06T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用github上面的开源项目Frp和一台有公网IP的主机来实现反向代理（内网穿透），从而达到使用微软自带的远程桌面mstsc来远程没有公网IP的windows电脑和使用ssh远程Linux系统（Centos和Ubuntu）的效果。</p><p>本文不涉及反向代理的具体理论知识，使用的公网IP主机为阿里云主机（十块钱一个月的学生版），由于使用的阿里云主机带宽有限，因此使用远程桌面的效果可能比较一般，但是对于SSH远程来说肯定是足够了的。</p><p>需要注意的是，如果你的电脑本身所处的网络是有动态公网IP的，建议直接在路由器中设置DDNS，效果要比这个好很多，这个仅适用于那些没有公网IP的电脑。</p><span id="more"></span><h1 id="1、服务端配置"><a href="#1、服务端配置" class="headerlink" title="1、服务端配置"></a>1、服务端配置</h1><p>首先我们对服务端的阿里云主机进行配置，当然有其他的公网IP主机都是可以的。这里使用的操作系统是CentOS7.3。</p><h2 id="1-1-下载Frp"><a href="#1-1-下载Frp" class="headerlink" title="1.1 下载Frp"></a>1.1 下载Frp</h2><p><a href="https://github.com/fatedier/frp/releases">github上各个配置版本下载地址</a></p><p><img src="https://resource.tinychen.com/blog/20190706/QEPAirRf1m3C.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用wget指令下载linux版本</span><br>wget https://github.com/fatedier/frp/releases/download/v0.27.0/frp_0.27.0_linux_amd64.tar.gz<br><br><span class="hljs-comment"># 使用tar命令解压</span><br>tar -zxvf frp_0.27.0_linux_amd64.tar.gz<br><br><span class="hljs-comment"># 使用cp命令复制到/etc目录中并重命名为frps</span><br>cp -r frp_0.27.0_linux_amd64 /etc/frps<br><br><span class="hljs-comment"># 使用rm命令删除掉多余的frpc客户端文件，只留下服务端frps相关的文件</span><br>rm -f frpc frpc_full.ini frpc.ini<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190706/PjcMH3c9D5VT.png"></p><p>这些就是剩下的我们需要的文件，这里我们可以看到有两个ini配置文件，其中<code>frps_full,ini</code>是完整的带有注释说明和所有功能的配置文件，我们把需要的简单配置摘到<code>frps.ini</code>这个文件，方便我们管理配置。</p><h2 id="1-2-编辑配置文件"><a href="#1-2-编辑配置文件" class="headerlink" title="1.2 编辑配置文件"></a>1.2 编辑配置文件</h2><p>接下来我们编辑配置文件启用frp的监听端口7000和监控面板dashboard的监听端口7500。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># 将下列内容加入到frps.ini中</span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">auto_token</span> = 你的连接认证密码<br><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7500</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = 你的管理登录密码<br></code></pre></div></td></tr></table></figure><p>需要注意的是，这上面说的7000和7500端口都需要在阿里云的防火墙里面配置放行，否则会无法访问。</p><h2 id="1-3-设置开启自动和后台运行"><a href="#1-3-设置开启自动和后台运行" class="headerlink" title="1.3 设置开启自动和后台运行"></a>1.3 设置开启自动和后台运行</h2><p>我们新建一个文件，将Frps注册成Linux中的服务进程。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个文件设置frps服务能够实现后台启动和开机启动</span><br>vim /etc/systemd/system/frpsd.service<br><br><span class="hljs-comment"># 将下列内容加入到frpsd.service中</span><br>[Unit]<br>Description=frps daemon<br>After=syslog.target  network.target<br>Wants=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/etc/frps/frps -c /etc/frps/frps.ini<br>Restart= always<br>RestartSec=1min<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment"># 启动frps服务</span><br>systemctl start frpsd.service<br><br><span class="hljs-comment"># 设置frps服务开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> frpsd.service<br><br><span class="hljs-comment"># 查看frps状态</span><br>systemctl status frpsd.service<br><br><span class="hljs-comment"># 重启frps服务</span><br>systemctl restart frpsd.service<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190706/iDX1mDiMgUGM.png"></p><h1 id="2、Windows客户端配置"><a href="#2、Windows客户端配置" class="headerlink" title="2、Windows客户端配置"></a>2、Windows客户端配置</h1><h2 id="2-1-下载Frp"><a href="#2-1-下载Frp" class="headerlink" title="2.1 下载Frp"></a>2.1 下载Frp</h2><p>我们按照之前的下载好对应的Windows版本之后，删除掉多余的frps服务端文件，只留下对应的frpc客户端文件。</p><p><img src="https://resource.tinychen.com/blog/20190706/iCbfgRJ2uTV4.png"></p><h2 id="2-2-编辑配置文件"><a href="#2-2-编辑配置文件" class="headerlink" title="2.2 编辑配置文件"></a>2.2 编辑配置文件</h2><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = 你的公网主机的公网IP<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[MSRDP]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">3389</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">7777</span><br></code></pre></div></td></tr></table></figure><p>这里的<code>server_port</code>就是我们前面的服务端配置的端口7000，<code>local_port</code>则是微软自带的远程桌面mstsc的默认端口3389，<code>remote_port</code>就是到时候使用mstsc远程的时候需要在这个公网IP后面加上的端口号，注意这个端口号也是需要在阿里云主机的防火墙中放行。</p><p>然后我们就可以启用frpc客户端来建立连接</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在命令行中输入</span><br>frpc.exe -c frpc.ini<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190706/qvHyuBzi26Ps.png"></p><h2 id="2-3-注册Frpc为Windows服务"><a href="#2-3-注册Frpc为Windows服务" class="headerlink" title="2.3 注册Frpc为Windows服务"></a>2.3 注册Frpc为Windows服务</h2><p>为了使frpc能够开启后台运行，我们需要将它注册为系统服务。</p><p>这里我们需要使用到GitHub上面的另一个项目<a href="https://github.com/kohsuke/winsw/releases">winsw</a></p><p><img src="https://resource.tinychen.com/blog/20190706/GXeLCvfem8lH.png"></p><p>这里我使用的是<code>WinSW.NET4.exe</code>这个版本，这个需要电脑安装了<code>.net4</code>才可以使用，一般win10应该都是安装了的，此外我们还要下载一个xml文件作为启动配置文件。</p><p>然后我们在对应的xml配置文件中加入下列内容</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- ID of the service. It should be unique accross the Windows system--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>frpc<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Display name of the service --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Frpc Service (powered by WinSW)<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Service description --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>This frpc service can realize reverse Proxy<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Path to the executable, which should be started --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>frpc<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">arguments</span>&gt;</span>-c frpc.ini<span class="hljs-tag">&lt;/<span class="hljs-name">arguments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">logmode</span>&gt;</span>reset<span class="hljs-tag">&lt;/<span class="hljs-name">logmode</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>接着我们把这两个文件都命名为WinSW，然后放在刚刚frpc的目录下。</p><p><img src="https://resource.tinychen.com/blog/20190706/ewPkXMG4Qpfl.png"></p><p>然后我们以管理员身份启动<code>powershell</code>或者<code>cmd</code>，输入下列命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">WinSW.exe install<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190706/C6KW7eQUIUH1.png"></p><p><code>win+r</code>后通过<code>services.msc</code>进入到服务列表页面找到<code>frpc</code>服务。</p><p><img src="https://resource.tinychen.com/blog/20190706/bFvHSr8JJwFv.png"></p><p><strong>我们打开设置，将它设置为开机启动，服务失败后一分钟自动重启服务。</strong></p><p><img src="https://resource.tinychen.com/blog/20190706/nM4W0oeUAgW4.png"></p><p><img src="https://resource.tinychen.com/blog/20190706/uxA0NJ7mokcb.png"></p><p>到这里windows客户端的配置就已经完成了。我们在远程的时候只需要输入刚刚使用的公网IP地址加上端口号即可进行远程连接，如果有多台电脑需要进行远程，只需要给每个电脑设置一个不同的端口号即可。</p><p><img src="https://resource.tinychen.com/blog/20190706/BYdBdqgN4Pqq.png"></p><h1 id="3、Linux客户端配置"><a href="#3、Linux客户端配置" class="headerlink" title="3、Linux客户端配置"></a>3、Linux客户端配置</h1><p>Linux客户端的配置和上面的服务端大同小异，只需要将<code>frps</code>换为<code>frpc</code>并且修改对应的配置文件即可。注意下面的操作小七在CentOS7.6和Ubuntu18.04上面都能成功实现。</p><h2 id="3-1-下载Frp"><a href="#3-1-下载Frp" class="headerlink" title="3.1 下载Frp"></a>3.1 下载Frp</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用wget指令下载linux版本</span><br>wget https://github.com/fatedier/frp/releases/download/v0.27.0/frp_0.27.0_linux_amd64.tar.gz<br><br><span class="hljs-comment"># 使用tar命令解压</span><br>tar -zxvf frp_0.27.0_linux_amd64.tar.gz<br><br><span class="hljs-comment"># 使用cp命令复制到/etc目录中并重命名为frpc</span><br>cp -r frp_0.27.0_linux_amd64 /etc/frpc<br><br><span class="hljs-comment"># 使用rm命令删除掉多余的frps服务端文件，只留下客户端</span><br>rm -f frps frps_full.ini frps.ini<br><br><span class="hljs-comment"># 使用vim编辑客户端配置文件</span><br>vim /etc/frpc/frpc.ini<br></code></pre></div></td></tr></table></figure><h2 id="3-2-编辑配置文件"><a href="#3-2-编辑配置文件" class="headerlink" title="3.2 编辑配置文件"></a>3.2 编辑配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 配置本地的frpc.ini文件</span><br><br>[common]<br>server_addr = 你的公网主机的公网IP<br>server_port = 7000<br><br>[ssh]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 8000<br></code></pre></div></td></tr></table></figure><h2 id="3-3-设置开机启动和后台运行"><a href="#3-3-设置开机启动和后台运行" class="headerlink" title="3.3 设置开机启动和后台运行"></a>3.3 设置开机启动和后台运行</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个文件设置frps服务能够实现后台启动和开机启动</span><br>vim /etc/systemd/system/frpcd.service<br><br><span class="hljs-comment"># 将下列内容加入到frpcd.service中</span><br>[Unit]<br>Description=frpc daemon<br>After=syslog.target  network.target<br>Wants=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/etc/frpc/frpc -c /etc/frpc/frpc.ini<br>Restart= always<br>RestartSec=1min<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment"># 启动frpc服务</span><br>systemctl start frpcd.service<br><br><span class="hljs-comment"># 设置frpc服务开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> frpcd.service<br><br><span class="hljs-comment"># 查看frpc服务状态</span><br>systemctl status frpcd.service<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190706/wkuIU9En3z6S.png"></p><h2 id="3-4-错误记录"><a href="#3-4-错误记录" class="headerlink" title="3.4 错误记录"></a>3.4 错误记录</h2><p>在Ubuntu上面出现了一点小意外，发现服务并没有成功启用</p><p><img src="https://resource.tinychen.com/blog/20190706/6c5PFY8xkjJh.png"></p><p><code>[control.go:142] [ssh] start error: proxy name [ssh] is already in use</code></p><p>提示是说ssh这个名字已经被别的服务占用了，这里我们只需要修改之前的配置文件里面的ssh为别的名字，然后重启服务即可。</p><p><img src="https://resource.tinychen.com/blog/20190706/rx9t4hlsBLMY.png"></p><p><strong>最后注意这时候我们如果需要使用ssh远程需要加上-p命令来指定端口。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用github上面的开源项目Frp和一台有公网IP的主机来实现反向代理（内网穿透），从而达到使用微软自带的远程桌面mstsc来远程没有公网IP的windows电脑和使用ssh远程Linux系统（Centos和Ubuntu）的效果。&lt;/p&gt;
&lt;p&gt;本文不涉及反向代理的具体理论知识，使用的公网IP主机为阿里云主机（十块钱一个月的学生版），由于使用的阿里云主机带宽有限，因此使用远程桌面的效果可能比较一般，但是对于SSH远程来说肯定是足够了的。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果你的电脑本身所处的网络是有动态公网IP的，建议直接在路由器中设置DDNS，效果要比这个好很多，这个仅适用于那些没有公网IP的电脑。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理部分重点内容</title>
    <link href="https://tinychen.com/20190618-database-review/"/>
    <id>https://tinychen.com/20190618-database-review/</id>
    <published>2019-06-18T07:00:00.000Z</published>
    <updated>2019-06-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>《数据库原理》部分重点内容，小七自己整理的面向期末考考题的复习提纲。</p><span id="more"></span><h1 id="1、题型"><a href="#1、题型" class="headerlink" title="1、题型"></a>1、题型</h1><p>一共10题，每题10分。</p><ul><li>问答题：3题（1题是第一章数据库概念相关、1题三级模式+二级映像–数据独立性、1题是数据库恢复或并发控制协议内容+协议解决的问题）</li><li>编程题：5题（4题查询相关的，1题是安全性控制或完整性控制）</li><li>分析题：2题（1题是模式分解、范式相关的，1题是设计小型数据库）</li></ul><h1 id="2、问答题（3-10）"><a href="#2、问答题（3-10）" class="headerlink" title="2、问答题（3*10）"></a>2、问答题（3*10）</h1><h2 id="2-1-DBMS"><a href="#2-1-DBMS" class="headerlink" title="2.1 DBMS"></a>2.1 DBMS</h2><p>数据库管理系统（Database  Management System），简称<strong>DBMS</strong>，是位于用户与操作系统之间的一层数据管理软件。</p><p><img src="https://resource.tinychen.com/blog/20190618/iruSEEO3bSvL.png"></p><p><strong>数据库系统的特点</strong></p><ul><li>数据结构化</li><li>数据的高共享性</li><li>数据独立性</li><li>DBMS对数据统一管理和控制</li></ul><h2 id="2-2-数据管理技术的发展过程"><a href="#2-2-数据管理技术的发展过程" class="headerlink" title="2.2 数据管理技术的发展过程"></a>2.2 数据管理技术的发展过程</h2><ul><li><strong>人工管理阶段(40年代中–50年代中)</strong></li><li><strong>文件系统阶段(50年代末–60年代中)</strong></li><li><strong>数据库系统阶段(60年代末–现在)</strong></li></ul><table><thead><tr><th align="center">产生的背景</th><th align="center">人工管理(40年代中–50年代中)</th><th align="center">文件系统(50年代末–60年代中)</th><th align="center">数据库系统(60年代末–现在)</th></tr></thead><tbody><tr><td align="center">应用需求</td><td align="center">科学计算</td><td align="center">科学计算、管理</td><td align="center">大规模管理</td></tr><tr><td align="center">硬件水平</td><td align="center">无直接存取存储设备</td><td align="center">磁盘、磁鼓</td><td align="center">大容量磁盘</td></tr><tr><td align="center">软件水平</td><td align="center">没有操作系统</td><td align="center">有文件系统</td><td align="center">有数据库管理系统</td></tr><tr><td align="center">处理方式</td><td align="center">批处理</td><td align="center">联机实时处理、批处理</td><td align="center">联机实时处理,分布处理,批处理</td></tr></tbody></table><h2 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h2><p>通俗地讲数据模型就是现实世界的模拟，在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。</p><p>数据模型分成两个不同的层次</p><ol><li><strong>概念模型（用户）</strong>，也称信息模型，<strong>它是按用户的观点来对数据和信息建模。</strong> </li><li><strong>数据模型（计算机）</strong>，主要包括网状模型、层次模型、关系模型、面向对象模型等，<strong>它是按计算机系统的观点对数据建模。</strong> </li></ol><h2 id="2-4-数据模型的组成要素"><a href="#2-4-数据模型的组成要素" class="headerlink" title="2.4 数据模型的组成要素"></a>2.4 数据模型的组成要素</h2><ul><li><p><strong>数据结构</strong> </p><ul><li>什么是数据结构：对象类型的集合</li><li>两类对象：（1）与数据类型、内容、性质有关的对象（2）与数据之间联系有关的对象</li><li><strong>数据结构是对系统静态特性的描述</strong></li></ul></li><li><p><strong>数据操作</strong> </p><ul><li>数据操作：对数据库中各种对象（型）的实例（值）允许执行的操作及有关的操作规则</li><li>数据操作的类型：（1）检索（2）更新（包括插入、删除、修改）</li><li><strong>数据操作是对系统动态特性的描述。</strong></li></ul></li><li><p><strong>数据的约束条件</strong> </p><ul><li>一组完整性规则的集合。</li><li>完整性规则是给定的数据模型中数据及其联系所具有的制约和储存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</li></ul></li></ul><h2 id="2-5-数据库系统的三级模式结构"><a href="#2-5-数据库系统的三级模式结构" class="headerlink" title="2.5 数据库系统的三级模式结构"></a>2.5 数据库系统的三级模式结构</h2><h3 id="2-5-1-三级模式"><a href="#2-5-1-三级模式" class="headerlink" title="2.5.1 三级模式"></a>2.5.1 三级模式</h3><p><img src="https://resource.tinychen.com/blog/20190618/P3bbqWbRpquW.png"></p><ul><li><strong>三级模式结构：外模式、模式、内模式。</strong></li><li><strong>外模式（也称子模式或用户模式）</strong>，数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构。</li><li><strong>模式（也称逻辑模式）</strong>，数据库中全体数据的逻辑结构</li><li><strong>内模式（也称存储模式）</strong>，是数据物理结构和存储方式的描述。</li><li><strong>一个数据库只有一个模式和一个内模式，但是可以有多个外模式。</strong></li><li><strong>模式与外模式的关系：一对多</strong><ul><li>外模式通常是模式的子集</li><li>一个数据库可以有多个外模式。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li><li>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</li></ul></li><li><strong>外模式与应用的关系：一对多</strong><ul><li>同一外模式也可以为某一用户的多个应用系统所使用</li><li>但一个应用程序只能使用一个外模式</li></ul></li></ul><p><strong>三级模式是对数据的三个抽象级别，二级映象在DBMS内部实现这三个抽象层次的联系和转换。</strong></p><h3 id="2-5-2-外模式-模式映象（逻辑独立性）"><a href="#2-5-2-外模式-模式映象（逻辑独立性）" class="headerlink" title="2.5.2 外模式/模式映象（逻辑独立性）"></a>2.5.2 外模式/模式映象（逻辑独立性）</h3><ul><li>定义外模式与模式之间的对应关系</li><li>每一个外模式都对应一个外模式／模式映象</li><li>外模式／模式映象的用途：保证数据的逻辑独立性<ul><li>当模式改变时，数据库管理员修改有关的外模式／模式映象，使外模式保持不变</li><li>应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</li></ul></li></ul><h3 id="2-5-3-模式-内模式映象（物理独立性）"><a href="#2-5-3-模式-内模式映象（物理独立性）" class="headerlink" title="2.5.3 模式/内模式映象（物理独立性）"></a>2.5.3 模式/内模式映象（物理独立性）</h3><ul><li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。例如，说明逻辑记录和字段在内部是如何表示的</li><li>数据库中模式／内模式映象是唯一的</li><li>模式／内模式映象的用途：保证数据的物理独立性<ul><li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变</li><li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。</li></ul></li></ul><h2 id="2-6-事务"><a href="#2-6-事务" class="headerlink" title="2.6 事务"></a>2.6 事务</h2><h3 id="2-6-1-事务的基本概念"><a href="#2-6-1-事务的基本概念" class="headerlink" title="2.6.1 事务的基本概念"></a>2.6.1 事务的基本概念</h3><p>事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位，<strong>事务是恢复和并发控制的基本单位</strong>。</p><h3 id="2-6-2-事务的特性（ACID）"><a href="#2-6-2-事务的特性（ACID）" class="headerlink" title="2.6.2 事务的特性（ACID）"></a>2.6.2 事务的特性（ACID）</h3><h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><h4 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h4><p>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</p><ul><li><strong>一致性状态：</strong>数据库中只包含成功事务提交的结果</li><li><strong>不一致状态：</strong>数据库中包含失败事务的结果</li></ul><h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>对并发执行而言</p><ul><li>一个事务的执行不能被其他事务干扰。</li><li>一个事务内部的操作及使用的数据对其他并发事务是隔离的。</li><li>并发执行的各个事务之间不能互相干扰</li></ul><h4 id="持续性（Durability-）"><a href="#持续性（Durability-）" class="headerlink" title="持续性（Durability ）"></a>持续性（Durability ）</h4><p>持续性也称永久性（Permanence）</p><ul><li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</li><li>接下来的其他操作或故障不应该对其执行结果有任何影响。</li></ul><h4 id="破坏事务ACID特性的因素"><a href="#破坏事务ACID特性的因素" class="headerlink" title="破坏事务ACID特性的因素"></a>破坏事务ACID特性的因素</h4><ul><li>多个事务并行运行时，不同事务的操作交叉执行</li><li>事务在运行过程中被强行停止</li></ul><h2 id="2-7-故障的种类"><a href="#2-7-故障的种类" class="headerlink" title="2.7 故障的种类"></a>2.7 故障的种类</h2><h3 id="2-7-1-事务故障（应该不会考）"><a href="#2-7-1-事务故障（应该不会考）" class="headerlink" title="2.7.1 事务故障（应该不会考）"></a>2.7.1 事务故障（应该不会考）</h3><h4 id="2-7-1-1-什么是事务故障"><a href="#2-7-1-1-什么是事务故障" class="headerlink" title="2.7.1.1 什么是事务故障"></a>2.7.1.1 什么是事务故障</h4><p>某个事务在运行过程中由于种种原因未运行至正常终止点就夭折了</p><h4 id="2-7-1-2-事务故障的恢复"><a href="#2-7-1-2-事务故障的恢复" class="headerlink" title="2.7.1.2 事务故障的恢复"></a>2.7.1.2 事务故障的恢复</h4><p><strong>先UBDO再ROLLBACK</strong></p><blockquote><p>（1）撤消事务<strong>（UNDO）</strong>（2）强行回滚**(ROLLBACK)**该事务</p><p>清除该事务对数据库的所有修改，使得这个事务像根本没有启动过一样。</p></blockquote><h4 id="2-7-1-3-事务故障的常见原因"><a href="#2-7-1-3-事务故障的常见原因" class="headerlink" title="2.7.1.3 事务故障的常见原因"></a>2.7.1.3 事务故障的常见原因</h4><p><strong>输入数据有误、运算溢出、违反了某些完整性限制、某些应用程序出错、并行事务发生死锁</strong></p><h3 id="2-7-2-系统故障"><a href="#2-7-2-系统故障" class="headerlink" title="2.7.2 系统故障"></a>2.7.2 系统故障</h3><h4 id="2-7-2-1-什么是系统故障"><a href="#2-7-2-1-什么是系统故障" class="headerlink" title="2.7.2.1 什么是系统故障"></a>2.7.2.1 什么是系统故障</h4><ul><li>整个系统的正常运行突然被破坏</li><li>所有正在运行的事务都非正常终止</li><li>内存中数据库缓冲区的信息全部丢失</li><li>外部存储设备上的数据未受影响</li></ul><h4 id="2-7-2-2-系统故障的恢复"><a href="#2-7-2-2-系统故障的恢复" class="headerlink" title="2.7.2.2 系统故障的恢复"></a>2.7.2.2 系统故障的恢复</h4><p><strong>先UNDO再REDO</strong></p><blockquote><ol><li>正向扫描日志文件（即从头扫描日志文件）</li><li>对Undo队列事务进行UNDO处理</li><li>对Redo队列事务进行REDO处理</li></ol></blockquote><h4 id="2-7-2-3-系统故障的常见原因"><a href="#2-7-2-3-系统故障的常见原因" class="headerlink" title="2.7.2.3 系统故障的常见原因"></a>2.7.2.3 系统故障的常见原因</h4><p><strong>操作系统或DBMS代码错误、操作员操作失误、特定类型的硬件错误(如CPU故障)、突然停电</strong></p><h3 id="2-7-3-介质故障"><a href="#2-7-3-介质故障" class="headerlink" title="2.7.3 介质故障"></a>2.7.3 介质故障</h3><h4 id="2-7-3-1-什么是介质故障"><a href="#2-7-3-1-什么是介质故障" class="headerlink" title="2.7.3.1 什么是介质故障"></a>2.7.3.1 什么是介质故障</h4><p><strong>硬件故障使存储在外存中的数据部分丢失或全部丢失。</strong></p><p>介质故障比前两类故障的可能性小得多，但破坏性大得多</p><h4 id="2-7-3-2-介质故障的恢复"><a href="#2-7-3-2-介质故障的恢复" class="headerlink" title="2.7.3.2 介质故障的恢复"></a>2.7.3.2 介质故障的恢复</h4><p><strong>先找备份点再重新执行备份点之后的成功事务</strong></p><blockquote><ol><li><p>装入数据库发生介质故障前某个时刻的数据副本</p></li><li><p><strong>（REDO）</strong>重做自此时始的所有成功事务，将这些事务已提交的结果重新记入数据库</p></li></ol></blockquote><p><strong>恢复操作的基本原理：冗余</strong><br>利用存储在系统其它地方的冗余数据来重建数据库中已被破坏或不正确的那部分数据</p><h4 id="2-7-3-3-介质故障的常见原因"><a href="#2-7-3-3-介质故障的常见原因" class="headerlink" title="2.7.3.3 介质故障的常见原因"></a>2.7.3.3 介质故障的常见原因</h4><p><strong>硬件故障：磁盘损坏、磁头碰撞、操作系统的某种潜在错误、瞬时强磁场干扰</strong></p><h2 id="2-8-数据转储"><a href="#2-8-数据转储" class="headerlink" title="2.8 数据转储"></a>2.8 数据转储</h2><p>转储是指DBA将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。</p><h3 id="2-8-1-静态转储与动态转储"><a href="#2-8-1-静态转储与动态转储" class="headerlink" title="2.8.1 静态转储与动态转储"></a>2.8.1 静态转储与动态转储</h3><h4 id="静态转储"><a href="#静态转储" class="headerlink" title="静态转储"></a>静态转储</h4><p>在系统中无运行事务时进行转储，转储开始时数据库处于一致性状态，转储期间不允许对数据库的任何存取、修改活动。</p><ul><li><strong>优点：</strong>实现简单；</li><li><strong>缺点：</strong>降低了数据库的可用性（转储必须等用户事务结束、新的事务必须等转储结束）</li></ul><h4 id="动态转储"><a href="#动态转储" class="headerlink" title="动态转储"></a>动态转储</h4><p>转储操作与用户事务并发进行，转储期间允许对数据库进行存取或修改。</p><ul><li><strong>优点：</strong>不用等待正在运行的用户事务结束、不会影响新事务的运行</li><li><strong>缺点：</strong>不能保证副本中的数据正确有效</li></ul><p>利用动态转储得到的副本进行故障恢复，需要把动态转储期间各事务对数据库的修改活动登记下来，建立日志文件，<strong>后备副本加上日志文件才能把数据库恢复到某一时刻的正确状态。</strong></p><h3 id="2-8-2-海量转储与增量转储"><a href="#2-8-2-海量转储与增量转储" class="headerlink" title="2.8.2 海量转储与增量转储"></a>2.8.2 海量转储与增量转储</h3><p><strong>海量转储:</strong> 每次转储全部数据库</p><p><strong>增量转储:</strong> 只转储上次转储后更新过的数据</p><p><strong>海量转储与增量转储比较</strong>：</p><p>从恢复角度看，使用海量转储得到的后备副本进行恢复往往更方便</p><p>但如果数据库很大，事务处理又十分频繁，则增量转储方式更实用更有效</p><h2 id="2-9-日志文件"><a href="#2-9-日志文件" class="headerlink" title="2.9 日志文件"></a>2.9 日志文件</h2><ul><li>日志文件(log)<br>是用来记录事务对数据库的更新操作的文件</li><li>日志文件的用途：<ul><li>进行事务故障恢复</li><li>进行系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul></li></ul><h2 id="2-10-并发控制"><a href="#2-10-并发控制" class="headerlink" title="2.10 并发控制"></a>2.10 并发控制</h2><h3 id="2-10-1-三种数据不一致的情况"><a href="#2-10-1-三种数据不一致的情况" class="headerlink" title="2.10.1 三种数据不一致的情况"></a>2.10.1 三种数据不一致的情况</h3><ul><li><p><strong>丢失修改(Lost Update)</strong></p><p>  丢失修改是指事务1与事务2从数据库中读入同一数据并修改，事务2的提交结果破坏了事务1提交的结果，导致事务1的修改被丢失。</p></li><li><p><strong>不可重复读(Non-Repeatable Read)</strong></p><p>  不可重复读是指事务1读取数据后，事务2执行更新操作，使事务1无法再现前一次读取结果。</p></li><li><p><strong>读“脏”数据(Dirty Read)</strong></p><p>  事务1修改某一数据，并将其写回磁盘<br>  事务2读取同一数据后<br>  事务1由于某种原因被撤消，这时事务1已修改过的数据恢复原值<br>  事务2读到的数据就与数据库中的数据不一致，是不正确的数据，又称为“脏”数据。</p></li></ul><p><strong>产生三种数据不一致的主要原因就是操作时破坏了事务的隔离性。</strong></p><h3 id="2-10-2-封锁-Locking"><a href="#2-10-2-封锁-Locking" class="headerlink" title="2.10.2 封锁(Locking)"></a>2.10.2 封锁(Locking)</h3><ol><li><p>封锁的基本类型：</p><p> <strong>排它锁(Exclusive Locks，简称X锁)<strong>，通常X锁用于事务修改数据(写入数据)时，所以也称为</strong>写锁</strong>。</p><p> <strong>共享锁(Share Locks，简称S锁)<strong>通常S锁用于事务读取数据时，所以也称为</strong>读锁</strong>。</p></li><li><p>封锁协议</p><p> <strong>一级封锁协议：</strong>事务T在修改数据R之前须先进行X锁，直到事务结束才释放。</p><p> <strong>二级封锁协议：</strong>在一级上增加事务T在读取数据R之前先进行S锁，读完之后立即释放这个S锁。</p><p> <strong>三级封锁协议：</strong>在一级上增加事务T在读取数据R之前先进行S锁，直到事务结束释放。</p></li></ol><p><img src="https://resource.tinychen.com/blog/20190618/Q9oX81vIKW2i.png"></p><h3 id="2-10-3-二段锁"><a href="#2-10-3-二段锁" class="headerlink" title="2.10.3 二段锁"></a>2.10.3 二段锁</h3><p>二段协议是指所有事务必须分二个阶段对数据对象进行加锁和解锁：</p><ul><li>在对任何数据进行读、写操作之前，首先申请并获得对该数据的封锁。</li><li>在释放一个封锁后，事务不再申请和获得任何其他的封锁。</li></ul><table><thead><tr><th align="center"></th><th align="center">不丢失修改</th><th align="center">不读脏数据</th><th align="center">可重复读</th></tr></thead><tbody><tr><td align="center">二段锁</td><td align="center">√</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><h1 id="3、编程题（5-10）"><a href="#3、编程题（5-10）" class="headerlink" title="3、编程题（5*10）"></a>3、编程题（5*10）</h1><h2 id="3-1-视图的用法"><a href="#3-1-视图的用法" class="headerlink" title="3.1 视图的用法"></a>3.1 视图的用法</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- [例4.14]建立计算机系学生的视图</span><br><span class="hljs-comment">-- 把对该视图的SELECT权限授予王平</span><br><span class="hljs-comment">-- 把该视图上的所有操作权限授予张明。</span><br><br><span class="hljs-comment">-- 先建立视图CS_Student</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CS_Student<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>;<br><br><span class="hljs-comment">-- 王平老师只能检索计算机系学生的信息</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">ON</span> CS_Student <br><span class="hljs-keyword">TO</span> 王平;<br><br><span class="hljs-comment">-- 系主任具有检索和增删改</span><br><span class="hljs-comment">--计算机系学生信息的所有权限</span><br><span class="hljs-keyword">GRANT</span> ALLPRIVILEGES<br><span class="hljs-keyword">ON</span> CS_Student <br><span class="hljs-keyword">TO</span> 张明;<br></code></pre></div></td></tr></table></figure><h2 id="3-2-9个SQL动词的用法"><a href="#3-2-9个SQL动词的用法" class="headerlink" title="3.2 9个SQL动词的用法"></a>3.2 9个SQL动词的用法</h2><h3 id="3-2-1-CREATE，DROP，ALTER"><a href="#3-2-1-CREATE，DROP，ALTER" class="headerlink" title="3.2.1 CREATE，DROP，ALTER"></a>3.2.1 CREATE，DROP，ALTER</h3><h4 id="3-2-1-1-CREATE"><a href="#3-2-1-1-CREATE" class="headerlink" title="3.2.1.1 CREATE"></a>3.2.1.1 CREATE</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- SQL CREATE DATABASE 语法</span><br><span class="hljs-keyword">CREATE</span> DATABASE dbname;<br><br><span class="hljs-comment">-- SQL CREATE TABLE 语法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name<br>(<br>column_name1 data_type(size),<br>column_name2 data_type(size),<br>column_name3 data_type(size),<br>....<br>);<br><br><span class="hljs-comment">-- Create table S</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> S <br>(<br>    SNO <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    SNAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    STATUS <span class="hljs-type">INT</span>,<br>    CITY <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>) CHARSET <span class="hljs-operator">=</span> UTF8;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="3-2-1-2-DROP"><a href="#3-2-1-2-DROP" class="headerlink" title="3.2.1.2 DROP"></a>3.2.1.2 DROP</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 用于 MySQL 的 DROP INDEX 语法：</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <br><span class="hljs-keyword">DROP</span> INDEX index_name<br><br><span class="hljs-comment">-- DROP TABLE 语句用于删除表。</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> table_name<br><br><span class="hljs-comment">-- DROP DATABASE 语句用于删除数据库。</span><br><span class="hljs-keyword">DROP</span> DATABASE database_name<br></code></pre></div></td></tr></table></figure><h4 id="3-2-1-3-ALTER"><a href="#3-2-1-3-ALTER" class="headerlink" title="3.2.1.3 ALTER"></a>3.2.1.3 ALTER</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 在表中添加列:</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名<br><span class="hljs-keyword">ADD</span> 列名 数据类型<br><br><span class="hljs-comment">--删除表中的列:</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> 列名<br><br><span class="hljs-comment">-- 创建主键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> E <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (ENO);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> P <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (PNO);<br><br><span class="hljs-comment">-- 创建外键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> E <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY (PNO) <span class="hljs-keyword">REFERENCES</span> P(PNO);<br><br><span class="hljs-comment">-- 创建约束C1，</span><br><span class="hljs-comment">-- 定义职工年龄不得超过60岁</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> E <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <br><span class="hljs-keyword">CHECK</span> (AGE <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span>);<br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-SELECT，INSERT，DELETE，UPDATE"><a href="#3-2-2-SELECT，INSERT，DELETE，UPDATE" class="headerlink" title="3.2.2 SELECT，INSERT，DELETE，UPDATE"></a>3.2.2 SELECT，INSERT，DELETE，UPDATE</h3><h4 id="3-2-2-1-SELECT"><a href="#3-2-2-1-SELECT" class="headerlink" title="3.2.2.1 SELECT"></a>3.2.2.1 SELECT</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 5.1 找出所有供应商的姓名和所在城市</span><br><span class="hljs-keyword">SELECT</span> SNAME,CITY <br><span class="hljs-keyword">FROM</span> S;<br><br><span class="hljs-comment">-- 5.2 找出所有零件的名称、颜色、重量</span><br><span class="hljs-keyword">SELECT</span> PNAME,COLOR,WEIGHT <br><span class="hljs-keyword">FROM</span> P;<br><br><span class="hljs-comment">-- 5.3 找出使用供应商S1所供应零件的工程号码</span><br><span class="hljs-keyword">SELECT</span> JNO <br><span class="hljs-keyword">FROM</span> SPJ <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S1&#x27;</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> JNO;<br><br><span class="hljs-comment">-- 5.4 找出工程项目J2使用的各种零件的名称及其数量</span><br><span class="hljs-keyword">SELECT</span> PNAME,QTY <br><span class="hljs-keyword">FROM</span> P,SPJ <br><span class="hljs-keyword">WHERE</span> P.PNO <span class="hljs-operator">=</span> SPJ.PNO <br><span class="hljs-keyword">AND</span> SPJ.JNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;J2&#x27;</span>;<br><br><span class="hljs-comment">-- 5.5 找出上海厂商供应的所有零件号码</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> PNO <br><span class="hljs-keyword">FROM</span> S,SPJ <br><span class="hljs-keyword">WHERE</span> S.SNO <span class="hljs-operator">=</span> SPJ.SNO <br><span class="hljs-keyword">AND</span> CITY <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;上海&#x27;</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> PNO;<br><br><span class="hljs-comment">-- 5.6 找出使用上海产的零件的工程名称</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> JNAME <br><span class="hljs-keyword">FROM</span> S,J,SPJ <br><span class="hljs-keyword">WHERE</span> S.SNO <span class="hljs-operator">=</span> SPJ.SNO <br><span class="hljs-keyword">AND</span> J.JNO <span class="hljs-operator">=</span> SPJ.JNO <br><span class="hljs-keyword">AND</span> S.CITY <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;上海&#x27;</span>;<br><br><br><span class="hljs-comment">-- 5.7 找出没有使用天津产的零件的工程号码</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> JNO <span class="hljs-keyword">FROM</span> J<br><span class="hljs-keyword">WHERE</span> JNO <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> <br>(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SPJ.JNO <span class="hljs-keyword">FROM</span> S,J,SPJ <br>    <span class="hljs-keyword">WHERE</span> S.SNO <span class="hljs-operator">=</span> SPJ.SNO <span class="hljs-keyword">AND</span> J.JNO <span class="hljs-operator">=</span> SPJ.JNO <br>    <span class="hljs-keyword">AND</span> S.CITY <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;天津&#x27;</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SPJ.JNO<br>);<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-2-INSERT"><a href="#3-2-2-2-INSERT" class="headerlink" title="3.2.2.2 INSERT"></a>3.2.2.2 INSERT</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- Insert data into table S</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S <br>(SNO,SNAME,STATUS,CITY) <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;S1&#x27;</span>,<span class="hljs-string">&#x27;精益&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;天津&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-3-DELETE"><a href="#3-2-2-3-DELETE" class="headerlink" title="3.2.2.3 DELETE"></a>3.2.2.3 DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- DELETE完整语法</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> some_column<span class="hljs-operator">=</span>some_value;<br><br><span class="hljs-comment">-- 5.10 从供应商关系中删除S2的记录，</span><br><span class="hljs-comment">-- 并从供应情况关系中删除相应的记录</span><br><span class="hljs-comment">-- 先删除外键再删除主键</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SPJ <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S2&#x27;</span>; <br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> S <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S2&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-4-UPDATE"><a href="#3-2-2-4-UPDATE" class="headerlink" title="3.2.2.4 UPDATE"></a>3.2.2.4 UPDATE</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- UPDATA完整语法</span><br>UPDATE table_name<br><span class="hljs-keyword">SET</span> column1<span class="hljs-operator">=</span>value1,column2<span class="hljs-operator">=</span>value2,...<br><span class="hljs-keyword">WHERE</span> some_column<span class="hljs-operator">=</span>some_value;<br><br><span class="hljs-comment">-- 5.8 把全部红色零件的颜色改为蓝色</span><br>UPDATE P <br><span class="hljs-keyword">SET</span> COLOR <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;蓝&#x27;</span> <br><span class="hljs-keyword">WHERE</span> COLOR <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;红&#x27;</span>;<br><br><span class="hljs-comment">-- 5.9 由S5供给J4的零件P6改为由S3供应</span><br>UPDATE SPJ <br><span class="hljs-keyword">SET</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S3&#x27;</span> <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;S5&#x27;</span> <span class="hljs-keyword">AND</span> JNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;J4&#x27;</span> <span class="hljs-keyword">AND</span> PNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P6&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-3-GRANT，REVOKE（安全性控制）"><a href="#3-2-3-GRANT，REVOKE（安全性控制）" class="headerlink" title="3.2.3 GRANT，REVOKE（安全性控制）"></a>3.2.3 GRANT，REVOKE（安全性控制）</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- ALL PRIVILIGES 表示所有权限</span><br><span class="hljs-comment">-- PUBLIC或者ALL 表示所有用户</span><br><br><span class="hljs-comment">-- GRANT完整语法</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]…<br><span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>对象类型 对象名<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>对象类型 对象名<span class="hljs-operator">&gt;</span>…]<br><span class="hljs-keyword">TO</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>]…<br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION];<br><span class="hljs-comment">-- 指定了WITH GRANT OPTION子句：</span><br><span class="hljs-comment">-- 获得某种权限的用户还可以把这种权限再授予别的用户</span><br><br><span class="hljs-comment">-- 例题：把查询Student表和修改学生学号的权限授给用户U4。</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, UPDATE(Sno)<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">TABLE</span> Student <br><span class="hljs-keyword">TO</span> U4;<br><br><span class="hljs-comment">-- REVOKE完整语法</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]…<br><span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>对象类型 对象名<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>对象类型 对象名<span class="hljs-operator">&gt;</span>…]<br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>]…<br>[CASCADE<span class="hljs-operator">|</span>RESTRICT];<br><span class="hljs-comment">-- CASCADE表示级联收回权限</span><br><span class="hljs-comment">-- RESTRICT是默认选项，不级联收回</span><br></code></pre></div></td></tr></table></figure><h2 id="3-3-主键和外键的用法（完整性控制）"><a href="#3-3-主键和外键的用法（完整性控制）" class="headerlink" title="3.3 主键和外键的用法（完整性控制）"></a>3.3 主键和外键的用法（完整性控制）</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入主键语法</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY 主键列;<br><br><span class="hljs-comment">-- 设置主键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> S <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (SNO);<br><br><span class="hljs-comment">-- 插入外键语法</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键列 <br><span class="hljs-keyword">REFERENCES</span> 表名（主键列）;<br><br><span class="hljs-comment">-- 设置外键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SPJ <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY (SNO) <br><span class="hljs-keyword">REFERENCES</span> S(SNO);<br></code></pre></div></td></tr></table></figure><h2 id="3-4-约束CONSTRAINT"><a href="#3-4-约束CONSTRAINT" class="headerlink" title="3.4 约束CONSTRAINT"></a>3.4 约束CONSTRAINT</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">--[例10] 创建Student表，要求：</span><br><span class="hljs-comment">--（1）学号在90000～99999之间</span><br><span class="hljs-comment">--（2）姓名不能为空</span><br><span class="hljs-comment">--（3）年龄小于30</span><br><span class="hljs-comment">--（4）性别只能是 &#x27;男&#x27; 或 &#x27;女&#x27; </span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Student<br>( <br>    Sno <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">CONSTRAINT</span> C1 <span class="hljs-keyword">CHECK</span>(Sno <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">90000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">99999</span>), <br>    Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">CONSTRAINT</span> C2 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>    Sage <span class="hljs-type">SMALLINT</span> <span class="hljs-keyword">CONSTRAINT</span> C3 <span class="hljs-keyword">CHECK</span>(Sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span>), <br>    Ssex <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">CONSTRAINT</span> C4 <span class="hljs-keyword">CHECK</span>(Ssex <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)), <br>    Sdept <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>), <br>    <span class="hljs-keyword">CONSTRAINT</span> StudentPK <span class="hljs-keyword">PRIMARY</span> KEY(Sno)<br>)<br><br><br><span class="hljs-comment">-- 创建约束C1，定义职工年龄不得超过60岁</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> E <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <br><span class="hljs-keyword">CHECK</span> (AGE <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span>);<br><br><br><span class="hljs-comment">-- 当表已被创建时，</span><br><span class="hljs-comment">-- 如需在 &quot;P_Id&quot; 列创建 UNIQUE 约束，</span><br><span class="hljs-comment">-- 请使用下面的 SQL：</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Persons<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> (P_Id)<br><br><br><span class="hljs-comment">-- 如需命名 UNIQUE 约束（此处为C1），</span><br><span class="hljs-comment">-- 并定义多个列的 UNIQUE 约束，</span><br><span class="hljs-comment">-- 请使用下面的 SQL 语法：</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Persons<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <span class="hljs-keyword">UNIQUE</span> (P_Id,LastName)<br></code></pre></div></td></tr></table></figure><h1 id="4、分析题（2-10）"><a href="#4、分析题（2-10）" class="headerlink" title="4、分析题（2*10）"></a>4、分析题（2*10）</h1><h2 id="4-1-范式"><a href="#4-1-范式" class="headerlink" title="4.1 范式"></a>4.1 范式</h2><p><strong>看课本6.2章对应的例题</strong></p><h3 id="4-1-1-概念（了解即可）"><a href="#4-1-1-概念（了解即可）" class="headerlink" title="4.1.1 概念（了解即可）"></a>4.1.1 概念（了解即可）</h3><p>范式：Normal Format，是一种离散数学中的知识，是为了解决一种数据的存储与优化的问题：保存数据的存储之后，凡是能够通过关系寻找出来的数据，坚决不再重复存储：终极目标是为了减少数据的冗余。</p><p>范式：是一种分层结构的规范，分为六层：每一次层都比上一层更加严格：若要满足下一层范式，前提是满足上一层范式。</p><p>六层范式：1NF，2NF，3NF，BCNF，4NF，5NF，1NF要求最低；5NF要求最严格。</p><p><img src="https://resource.tinychen.com/blog/20190619/Xjnd5zFQUBYs.png"></p><p>Mysql属于关系型数据库：有空间浪费：也是致力于节省存储空间：与范式所有解决的问题不谋而合：在设计数据库的时候，会利用到范式来指导设计。</p><p>但是数据库不单是要解决空间问题，要保证效率问题：范式只为解决空间问题，所以数据库的设计又不可能完全按照范式的要求实现：<strong>一般情况下，只有前三种范式需要满足。范式在数据库的设计当中是有指导意义：但是不是强制规范。</strong></p><p><strong>一个低一级范式的关系模式通过模式分解（schema decomposition）可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化（normalization）。</strong></p><h3 id="4-1-2-1NF"><a href="#4-1-2-1NF" class="headerlink" title="4.1.2 1NF"></a>4.1.2 1NF</h3><p>第一范式：在设计表存储数据的时候，如果表中设计的字段存储的数据，在取出来使用之前还需要额外的处理（拆分），那么说表的设计不满足第一范式：<strong>第一范式要求字段的数据具有原子性：不可再分。（关键还要看实际业务需求）</strong></p><h3 id="4-1-3-2NF"><a href="#4-1-3-2NF" class="headerlink" title="4.1.3 2NF"></a>4.1.3 2NF</h3><p>第二范式：在数据表设计的过程中如果有复合主键（多字段主键），且表中有字段并不是由整个主键来确定，而是依赖主键中的某个字段（主键的部分）：存在字段依赖主键的部分的问题，称之为部分依赖：第二范式就是要解决表设计不允许出现部分依赖。</p><h3 id="4-1-4-3NF"><a href="#4-1-4-3NF" class="headerlink" title="4.1.4 3NF"></a>4.1.4 3NF</h3><p>第三范式：理论上讲，应该一张表中的所有字段都应该直接依赖主键（逻辑主键：代表的是业务主键），如果表设计中存在一个字段，并不直接依赖主键，而是通过某个非主键字段依赖，最终实现依赖主键：把这种不是直接依赖主键，而是依赖非主键字段的依赖关系称之为传递依赖。</p><h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2 数据库设计"></a>4.2 数据库设计</h2><h3 id="4-2-1-需求说明"><a href="#4-2-1-需求说明" class="headerlink" title="4.2.1 需求说明"></a>4.2.1 需求说明</h3><p>先陈述清楚所有的需求。需求分析就是分析用户的需要与要求。</p><ul><li>需求分析是设计数据库的起点</li><li>需求分析的结果是否准确地反映了用户的实际要求，将直接影响到后面各个阶段的设计，并影响到设计结果是否合理和实用</li></ul><h3 id="4-2-2-E-R图和关系模式"><a href="#4-2-2-E-R图和关系模式" class="headerlink" title="4.2.2 E-R图和关系模式"></a>4.2.2 E-R图和关系模式</h3><h4 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h4><p>画一些简单的ER图来描述数据表。</p><p><img src="https://resource.tinychen.com/blog/20190620/qzci02s4xaSR.png"></p><p><img src="https://resource.tinychen.com/blog/20190620/fTmNR4VnDvBe.png"></p><p><img src="https://resource.tinychen.com/blog/20190620/UXvMF4bj4cIf.png"></p><p><img src="https://resource.tinychen.com/blog/20190620/19zgC452jMQp.png"></p><p><img src="https://resource.tinychen.com/blog/20190620/Vhfhpx9HVPRR.png"></p><p><img src="https://resource.tinychen.com/blog/20190620/5JwFtYVJ7R5x.png"></p><h4 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h4><p>对每个实体定义的属性如下所示。加粗的为实体的码。</p><p>顾客：{<strong>顾客号</strong>，顾客名，地址，电话，信贷状况，账目余额}</p><p>订单：{<strong>订单号</strong>，顾客号，订货项数，订货日期，交货日期，工种号，生产地点}</p><p>订单细则：{<strong>订单号</strong>，<strong>细则号</strong>，零件号，订货数，金额}</p><p>应收账款：{<strong>顾客号</strong>，<strong>订单号</strong>，发票号，应收金额，支付日期，支付金额，当前余额，货款限额}</p><p>产品：{<strong>产品号</strong>，产品名，单价，重量}</p><p>折扣规则：{<strong>产品号</strong>，<strong>订货量</strong>，折扣}</p><p><img src="https://resource.tinychen.com/blog/20190620/4XKWlDz74wKV.png"></p><h3 id="4-2-3-建表叙述"><a href="#4-2-3-建表叙述" class="headerlink" title="4.2.3 建表叙述"></a>4.2.3 建表叙述</h3><p><img src="https://resource.tinychen.com/blog/20190620/yt1sPieljzjq.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《数据库原理》部分重点内容，小七自己整理的面向期末考考题的复习提纲。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04升级Linux内核</title>
    <link href="https://tinychen.com/20190614-ubuntu-update-kernel/"/>
    <id>https://tinychen.com/20190614-ubuntu-update-kernel/</id>
    <published>2019-06-14T07:00:00.000Z</published>
    <updated>2019-06-14T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu18.04升级5.1.9的Linux内核，如果提示权限不足记得切换root用户。</p><p>CentOS7版本请移步<a href="https://tinychen.com/20190612-centos-update-kernel/">这里</a>。</p><span id="more"></span><h1 id="1、下载内核"><a href="#1、下载内核" class="headerlink" title="1、下载内核"></a>1、下载内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前内核</span><br>uname -r<br></code></pre></div></td></tr></table></figure><p>下载所需内核，官网地址：</p><p><a href="https://kernel.ubuntu.com/~kernel-ppa/mainline">https://kernel.ubuntu.com/~kernel-ppa/mainline</a></p><p><strong>目前来看最新的应该是5.1.9</strong></p><p>取决于您的操作系统类型，请依次下载和安装软件包：</p><p><code>linux-headers-5.1.9-xxxxxx_all.deb</code></p><p><code>linux-headers-5.1.9-xxx-generic(/lowlatency)_xxx_amd64(/i386).deb</code></p><p><code>linux-modules-5.1.9-xxx-generic(/lowlatency)_xxx_amd64(/i386).deb</code></p><p><code>linux-image-xxx-5.1.9-xxx-generic(/lowlatency)_xxx_amd64(/i386).deb</code></p><p>选择通用系统的generic，低延迟系统（例如用于录制音频）的lowlatency，64位系统的amd6432位系统的i386，其他OS类型的armhf，arm64等。</p><p><img src="https://resource.tinychen.com/blog/20190614/ptID3bcB2cnz.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.1.9/linux-headers-5.1.9-050109_5.1.9-050109.201906111132_all.deb<br>wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.1.9/linux-headers-5.1.9-050109-generic_5.1.9-050109.201906111132_amd64.deb<br>wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.1.9/linux-image-unsigned-5.1.9-050109-generic_5.1.9-050109.201906111132_amd64.deb<br>wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.1.9/linux-modules-5.1.9-050109-generic_5.1.9-050109.201906111132_amd64.deb<br></code></pre></div></td></tr></table></figure><h1 id="2、安装内核"><a href="#2、安装内核" class="headerlink" title="2、安装内核"></a>2、安装内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/wSHYS8hclwBo.png"></p><p>重启后查看当前内核版本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">uname -r<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/rS6gqDcxvBko.png"></p><h1 id="3、卸载内核"><a href="#3、卸载内核" class="headerlink" title="3、卸载内核"></a>3、卸载内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有内核</span><br>sudo dpkg --get-selections | grep linux<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/g3WIHh4JbFn7.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载内核</span><br>sudo apt autoremove &lt;package&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/nL2PB6qQK61y.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 更新grub</span><br>sudo update-grub<br>sudo update-grub2<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/d6WX9aCBTpKD.png"></p><p>重启后再次查看，对类型为deinstall的进行下列操作彻底删除</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo dpkg --get-selections | grep linux<br>sudo dpkg -P &lt;package&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/0knNytf0zenc.png"></p><h1 id="4、更改启动内核"><a href="#4、更改启动内核" class="headerlink" title="4、更改启动内核"></a>4、更改启动内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /boot/grub/grub.cfg | grep <span class="hljs-string">&#x27;menuentry&#x27;</span>| grep Ubuntu<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/2ECvN6fCNTba.png"></p><p>从图中可以看到这里有四个启动内核共计两个版本。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /boot/grub/grub.cfg | grep <span class="hljs-string">&#x27;set default&#x27;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190614/I0XhrU32FiTK.png"></p><p><code>set default=&quot;0&quot;</code>就是上面列表中的第一个，修改为需要启动的内核序号即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu18.04升级5.1.9的Linux内核，如果提示权限不足记得切换root用户。&lt;/p&gt;
&lt;p&gt;CentOS7版本请移步&lt;a href=&quot;https://tinychen.com/20190612-centos-update-kernel/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>CentOS升级Linux内核</title>
    <link href="https://tinychen.com/20190612-centos-update-kernel/"/>
    <id>https://tinychen.com/20190612-centos-update-kernel/</id>
    <published>2019-06-12T07:00:00.000Z</published>
    <updated>2019-06-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS7.6升级5.1.9的Linux内核，如果提示权限不足记得切换root用户。</p><p>Ubunut18.04版本请移步<a href="https://tinychen.com/20190614-ubuntu-update-kernel/">这里</a></p><span id="more"></span><h1 id="1、yum升级内核"><a href="#1、yum升级内核" class="headerlink" title="1、yum升级内核"></a>1、yum升级内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前内核版本</span><br>uname -r<br><br><span class="hljs-comment"># 更新yum源</span><br>yum update -y<br><br><span class="hljs-comment"># 升级yum源中的最新版内核</span><br>yum install -y kernel<br></code></pre></div></td></tr></table></figure><h1 id="2、升级ELRepo库提供的内核"><a href="#2、升级ELRepo库提供的内核" class="headerlink" title="2、升级ELRepo库提供的内核"></a>2、升级ELRepo库提供的内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 导入 ELRepo 仓库的KEY</span><br>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br><span class="hljs-comment"># 使用yum安装 elrepo的仓库包</span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm<br></code></pre></div></td></tr></table></figure><blockquote><p>ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。 </p><p>ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看可用的系统内核包</span><br>yum --disablerepo=<span class="hljs-string">&quot;*&quot;</span> --enablerepo=<span class="hljs-string">&quot;elrepo-kernel&quot;</span> list available<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/BqT0hrwhaRc8.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装最新版内核</span><br>yum --enablerepo=elrepo-kernel install kernel-ml<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/W4FFAbKnvAXD.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前一共安装了多少个内核</span><br>cat /etc/grub2.cfg | grep menuentry | awk <span class="hljs-string">&#x27;&#123;print $2$4$5$6&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/lqzAq3euQXmL.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 或者这样，找到网上的一个大佬的正则表达式，比我这种菜鸡强多了</span><br>awk -F\<span class="hljs-string">&#x27; &#x27;</span><span class="hljs-variable">$1</span>==<span class="hljs-string">&quot;menuentry &quot;</span> &#123;<span class="hljs-built_in">print</span> i++ <span class="hljs-string">&quot; : &quot;</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">&#x27; /etc/grub2.cfg</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/Qsz4B1UdaBqe.png"></p><p>注意这个升级的内核和通过yum升级的不同，yum升级内核之后会把新内核作为启动的默认内核，而这样升级并不会，因此我们需要手动更改默认的启动内核。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将GRUB_DEFAULT从saved改为0</span><br>vim /etc/default/grub<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/GxM4tkhCFhVf.png"></p><p><img src="https://resource.tinychen.com/blog/20190612/iFxmpK0XqSsh.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用grub2重新生成grub配置文件</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg<br><span class="hljs-comment"># 如果是使用uefi引导安装启动的话目录应该是下面这个</span><br>grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/zvvS1LJjL4WU.png"></p><p>重启之后就会看到默认启动的是新内核</p><p><img src="https://resource.tinychen.com/blog/20190612/dDPW4w4o1QUW.png"></p><h1 id="3、删除旧内核"><a href="#3、删除旧内核" class="headerlink" title="3、删除旧内核"></a>3、删除旧内核</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统中的所有内核相关包</span><br>rpm -qa | grep kernel<br><br><span class="hljs-comment"># 使用yum卸载</span><br>yum remove &lt;package&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/C9FkojA3hKvG.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除最旧的那个内核</span><br>yum remove kernel-3.10.0-957.el7.x86_64 kernel-devel-3.10.0-957.el7.x86_64<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190612/OSuvgt86M1O5.png"></p><p>留一个最新的yum源的内核以防万一。</p><p><img src="https://resource.tinychen.com/blog/20190612/ououGsl90jCx.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS7.6升级5.1.9的Linux内核，如果提示权限不足记得切换root用户。&lt;/p&gt;
&lt;p&gt;Ubunut18.04版本请移步&lt;a href=&quot;https://tinychen.com/20190614-ubuntu-update-kernel/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="graduation" scheme="https://tinychen.com/tags/graduation/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包分析DHCP以及路由干扰过程</title>
    <link href="https://tinychen.com/20190609-wireshark-dhcp/"/>
    <id>https://tinychen.com/20190609-wireshark-dhcp/</id>
    <published>2019-06-09T07:00:00.000Z</published>
    <updated>2019-06-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Wireshark抓包分析DHCP过程，并分析在同一广播域中存在多个DHCP服务器的产生的路由干扰过程。</p><span id="more"></span><h1 id="1、DHCP简介"><a href="#1、DHCP简介" class="headerlink" title="1、DHCP简介"></a>1、DHCP简介</h1><p><strong>动态主机设置协议（英语：Dynamic Host Configuration Protocol，DHCP）</strong>是一个局域网的网络协议，使用<strong>UDP协议</strong>工作，主要有两个用途：用于内部网或网络服务供应商自动分配IP地址；给用户用于内部网管理员作为对所有计算机作中央管理的手段。</p><p>DHCP有三种机制分配IP地址：</p><ol><li>自动分配方式（Automatic Allocation），DHCP服务器为主机指定一个永久性的IP地址，一旦DHCP客户端第一次成功从DHCP服务器端租用到IP地址后，就可以永久性的使用该地址。</li><li>动态分配方式（Dynamic Allocation），DHCP服务器给主机指定一个具有时间限制的IP地址，时间到期或主机明确表示放弃该地址时，该地址可以被其他主机使用。</li><li>手工分配方式（Manual Allocation），客户端的IP地址是由网络管理员指定的，DHCP服务器只是将指定的IP地址告诉客户端主机。</li></ol><p><strong>三种地址分配方式中，只有动态分配可以重复使用客户端不再需要的地址。</strong></p><h1 id="2、DHCP状态机"><a href="#2、DHCP状态机" class="headerlink" title="2、DHCP状态机"></a>2、DHCP状态机</h1><h2 id="2-0-DHCP状态机"><a href="#2-0-DHCP状态机" class="headerlink" title="2.0 DHCP状态机"></a>2.0 DHCP状态机</h2><p>如下图所示是比较常见的DHCP状态机，下面我们结合Wireshark抓到的数据包来进行分析。</p><p><img src="https://resource.tinychen.com/blog/20190609/dogAUe1Ba8D2.png"></p><h3 id="2-0-1-如何抓取数据包"><a href="#2-0-1-如何抓取数据包" class="headerlink" title="2.0.1 如何抓取数据包"></a>2.0.1 如何抓取数据包</h3><p>在windows下，使网卡重新发出DHCP请求获取IP地址比较简单的方法就是使用<code>ipconfig</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 释放IP地址</span><br>ipconfig -realease<br><span class="hljs-comment"># 重新获取IP地址</span><br>ipconfig -renew<br></code></pre></div></td></tr></table></figure><p>需要注意的是要确定网卡配置中是使用了DHCP而不是手动指定IP地址。</p><p><img src="https://resource.tinychen.com/blog/20190609/4wSvnifDgxaP.png"></p><h3 id="2-0-2-一次DHCP过程的四个数据包"><a href="#2-0-2-一次DHCP过程的四个数据包" class="headerlink" title="2.0.2 一次DHCP过程的四个数据包"></a>2.0.2 一次DHCP过程的四个数据包</h3><p>正常来说，一次DHCP过程只需要上面状态机的前四步，后面的续约是在DHCP的租期到达1/2和7/8的时候进行的。</p><p><img src="https://resource.tinychen.com/blog/20190609/CDdjQgrGbqac.png"></p><p>打开任意一个数据包，我们可以看到wireshark已经把里面的数据分层显示。</p><p><img src="https://resource.tinychen.com/blog/20190609/hytGlrtwYwlT.png"></p><p>从上到下依次为物理层、数据链路层、网络层、传输层和应用层。</p><p>接下来我们对这四个数据包进行分析。</p><h2 id="2-1-发现阶段——DHCP-Discover（广播）"><a href="#2-1-发现阶段——DHCP-Discover（广播）" class="headerlink" title="2.1 发现阶段——DHCP Discover（广播）"></a>2.1 发现阶段——DHCP Discover（广播）</h2><h3 id="2-1-1-DHCP-Discover-理论分析"><a href="#2-1-1-DHCP-Discover-理论分析" class="headerlink" title="2.1.1 DHCP Discover 理论分析"></a>2.1.1 DHCP Discover 理论分析</h3><p>DHCP Discover（广播）是第一个阶段即DHCP客户端寻找DHCP服务端的阶段。</p><p>由于DHCP服务端的IP地址等信息对于DHCP客户端来说是未知，此时就需要使用广播的方式进行发送消息，基于UDP的源端口号68，目的端口号67来发送DHCP Discover发现信息来寻找DHCP服务器。</p><p>由于是广播包，在同一个广播域中的每一台安装了TCP/IP协议的主机都会接收到这种广播信息，但只有DHCP服务器才会做出响应。</p><blockquote><p>在二层中，广播地址是12个f即<code>ff:ff:ff:ff:ff:ff</code>。</p><p>在三层中，广播地址是4个255（IPv4）即<code>255.255.255.255</code>。</p><p>换算成二进制，即全为1。</p></blockquote><h3 id="2-1-2-DHCP-Discover-物理层"><a href="#2-1-2-DHCP-Discover-物理层" class="headerlink" title="2.1.2 DHCP Discover 物理层"></a>2.1.2 DHCP Discover 物理层</h3><p><img src="https://resource.tinychen.com/blog/20190609/GrScXGYroTPm.png"></p><p>物理层给出的有用信息并不多，但是我们能够看到网卡相关信息和这个是DHCP的数据包且使用了UDP协议。</p><h3 id="2-1-3-DHCP-Discover-数据链路层"><a href="#2-1-3-DHCP-Discover-数据链路层" class="headerlink" title="2.1.3 DHCP Discover 数据链路层"></a>2.1.3 DHCP Discover 数据链路层</h3><p><img src="https://resource.tinychen.com/blog/20190609/hNKn0hoQPFaU.png"></p><p>数据链路层中我们可以看到本机的MAC地址和目标MAC地址（广播）。</p><h3 id="2-1-4-DHCP-Discover-网络层"><a href="#2-1-4-DHCP-Discover-网络层" class="headerlink" title="2.1.4 DHCP Discover 网络层"></a>2.1.4 DHCP Discover 网络层</h3><p><img src="https://resource.tinychen.com/blog/20190609/XvL5NVjcpFtO.png"></p><p>网络层的参数较多，我们对其进行一一解析：</p><ul><li><p>版本（Version）：4，表明这里使用IPv4</p></li><li><p>头部长度（Header Length）：20 bytes，即20个字节</p></li><li><p>区分服务字段（Differentiated Services Field）：0x00，十六进制，换算成二进制正好是下面的8个0，表明当前的IP数据报中没有使用服务类型字段，采用默认的“尽力传输”优先级别</p></li><li><p>总长度（Total Lenth）：328，表明该数据报的总长度是328个字节</p></li><li><p>标识（Identification）：0xe752，十六进制，换算成十进制正好是括号中的59218，表明该数据报的标识为0xe752</p></li><li><p>分段标识（Flags）：<br>  保留位（Reserved bit）为0，Don’t fragment为0表示该数据报可以被分段，More fragments为0表明后面没有分段</p></li><li><p>分段偏移（Fragment offset）：0，表明没有被分段</p></li><li><p>生存时间（Time to live）：128，表明该数据报最多可以经过128个路由</p></li><li><p>上层协议（Protocol）： UDP，值为17</p></li><li><p>头部校验（Header checksum）： validation disabled，表示没有进行校验</p></li><li><p>校验状态（Header checksum status）：Unverified，同上，没有进行校验</p></li><li><p>源IP地址（Source）：0.0.0.0，表明当前尚未获得DHCP服务端分配的IP地址，只能使用0.0.0.0</p></li><li><p>目标IP地址（Destination）：255.255.255.255，广播IP地址，对同一广播域内的所有TCP/IP协议客户端进行广播</p></li></ul><h3 id="2-1-5-DHCP-Discover-传输层"><a href="#2-1-5-DHCP-Discover-传输层" class="headerlink" title="2.1.5 DHCP Discover 传输层"></a>2.1.5 DHCP Discover 传输层</h3><p><img src="https://resource.tinychen.com/blog/20190609/wYNVDCL6RDrJ.png"></p><p>传输层这里可以看到源端口为68，目的端口为67，且校验状态为未校验。</p><h3 id="2-1-6-DHCP-Discover-应用层"><a href="#2-1-6-DHCP-Discover-应用层" class="headerlink" title="2.1.6 DHCP Discover 应用层"></a>2.1.6 DHCP Discover 应用层</h3><p><img src="https://resource.tinychen.com/blog/20190609/bOfKYRIT14yC.png"></p><p>应用层的报文也有很多重要数据，我们截取重要的进行分析。</p><ul><li>Bootp flags：0表示单播，1表示广播，这里为0，即DHCP服务端回复的DHCP Offer报文应为单播形式</li></ul><blockquote><p>部分书上讲述的DHCP四个包都是使用广播的方式进行，实际上DHCP Offer和DHCP Ack这两个数据包是广播还是单播是由DHCP的客户端发送的数据包来决定的。</p></blockquote><ul><li><p>Ciaddr即客户端IP地址（Client IP address）、</p><p>  Yiaddr即被分配的DHCP客户端IP地址（ Your(client) IP address）、 </p><p>  Siaddr即下一个为DHCP客户端分配IP地址的DHCP服务器地址（Next server IP address ）、</p><p>  Giaddr即DHCP中继IP地址（Relay agent IP address）、</p><p>  <strong>这四个IP地址均为0.0.0.0，因为此时还处于DHCP的发现阶段，DHCP客户端对这些信息还是一无所知。</strong></p></li><li><p>我们还可以看到请求信息里面需要请求获取包括子网掩码（Subnet Mask）、路由网关（Router）、 DNS服务器（Domain Name Server） 、以及域名（Domain Name）等信息</p></li></ul><h2 id="2-2-提供阶段——DHCP-Offer（单播-广播）"><a href="#2-2-提供阶段——DHCP-Offer（单播-广播）" class="headerlink" title="2.2 提供阶段——DHCP Offer（单播/广播）"></a>2.2 提供阶段——DHCP Offer（单播/广播）</h2><h3 id="2-2-1-DHCP-Offer-理论分析"><a href="#2-2-1-DHCP-Offer-理论分析" class="headerlink" title="2.2.1 DHCP Offer 理论分析"></a>2.2.1 DHCP Offer 理论分析</h3><p>提供阶段，即DHCP服务器向DHCP客户端提供预分配IP地址的阶段。网络中的所有DHCP服务器接收到客户端的DHCP Discover报文后都会根据自己的DHCP地址池中IP地址分配的优先次序选出一个IP地址，然后与其他参数一起通过传输层的UDP67号端口在DHCP Offer报文中以单播/广播方式发送给客户端的UDP68号端口。</p><blockquote><p>DHCP服务器在分配这个地址之间会ping一下这个分配的ip地址，如果没有Response就才会预分配这个地址</p></blockquote><p>客户端通过封装在帧中的目的MAC地址（也就是DHCP Discover报文中的CHADDR字段值）的比对来确定是否接收该帧。但这样以来，理论上DHCP客户端可能会收到多个DHCP Offer报文（当网络中存在多个DHCP服务器时），但DHCP客户端只接收第一个到来的DHCP Offer报文。</p><h3 id="2-2-2-DHCP-Offer-数据链路层"><a href="#2-2-2-DHCP-Offer-数据链路层" class="headerlink" title="2.2.2 DHCP Offer 数据链路层"></a>2.2.2 DHCP Offer 数据链路层</h3><p><img src="https://resource.tinychen.com/blog/20190610/gW8jaa3BavbB.png"></p><p>这时可以看到根据之前的DHCP报文，这里使用了单播的形式。而源MAC地址就是DHCP服务器的MAC地址且目的MAC地址是之前发送DHCP Discover报文的客户端MAC地址。</p><h3 id="2-2-3-DHCP-Offer-网络层"><a href="#2-2-3-DHCP-Offer-网络层" class="headerlink" title="2.2.3 DHCP Offer 网络层"></a>2.2.3 DHCP Offer 网络层</h3><p><img src="https://resource.tinychen.com/blog/20190610/gJ4zNuXFF8Tn.png"></p><p>网络层报文中我们可以看到这时候目的IP地址和源IP地址都已经有了数据，10.22.25.118就是即将要分配的IP地址，而10.22.25.254就是DHCP服务器的地址又或者是DHCP中继代理服务器的IP地址，具体要看应用层的报文。</p><blockquote><p>通过DHCP中继代理服务，与DHCP服务器不在同一子网的DHCP客户端可以通过DHCP中继代理（通常是路由器或三层交换机设备开启DHCP中继功能）与位于其他网段的DHCP服务器通信，最终是DHCP客户端获取到从DHCP服务器上分配而来的IP地址。</p><p>此时的DHCP中继代理就位于DHCP客户端和DHCP服务器之间，负责广播DHCP报文的转发。</p></blockquote><h3 id="2-2-4-DHCP-Offer-应用层"><a href="#2-2-4-DHCP-Offer-应用层" class="headerlink" title="2.2.4 DHCP Offer 应用层"></a>2.2.4 DHCP Offer 应用层</h3><p><img src="https://resource.tinychen.com/blog/20190610/0h17nDkVa0yE.png"></p><p>这个时候我们再看应用层的报文：</p><ul><li>Ciaddr即客户端IP地址（Client IP address）：此时还没有分配，所以还是0.0.0.0</li><li>Yiaddr即被分配的DHCP客户端IP地址（ Your(client) IP address）：10.22.25.118，这个IP即将分配给该客户端</li><li>Siaddr即下一个为DHCP客户端分配IP地址的DHCP服务器地址（Next server IP address ）：192.168.112.240，这个是分配IP地址的DHCP服务器</li><li>Giaddr即DHCP中继IP地址（Relay agent IP address）：10.22.25.254，这个是DHCP的中继代理服务器的IP地址，在这里应该是一个开启了DHCP中继的三层交换机</li><li>子网掩码（Subnet Mask）、路由网关（Router）、 DNS服务器（Domain Name Server） 、以及域名（Domain Name）等信息均已经包含在里面</li><li>租约时间是需要注意的一个问题，这里我们可以看到DHCP租约时间（IP Address Lease Time）实际上是8天，单位是s，wieshark换算成了天方便我们查看</li><li>而Renewal Time Value就是初次续约的时间，这个时间是租约时间的1/2，这里就是4天，这个时候一般客户端会以单播的方式向DHCP服务器发送报文请求续约</li><li>而Rebinding Time Value就是第二次续约时间，这个时间是租约时间的7/8，这里也就是7天，只有在初次续约失败之后，才会在这个时间以广播的方式向网络中的DHCP服务器再次申请IP地址</li></ul><h2 id="2-3-选择阶段——DHCP-Request（广播）"><a href="#2-3-选择阶段——DHCP-Request（广播）" class="headerlink" title="2.3 选择阶段——DHCP Request（广播）"></a>2.3 选择阶段——DHCP Request（广播）</h2><h3 id="2-3-1-DHCP-Request-理论分析"><a href="#2-3-1-DHCP-Request-理论分析" class="headerlink" title="2.3.1 DHCP Request 理论分析"></a>2.3.1 DHCP Request 理论分析</h3><p>选择阶段，即DHCP客户端选择IP地址的阶段。</p><p>如果有多台DHCP服务器向该客户端发来DHCPOFFER报文，客户端只接收第一个收到的DHCP Offer报文，然后以广播方式发送DHCP Request报文。在该报文的Requested Address选项中包含DHCP服务器在DHCP Offer报文中预分配的IP地址、对应的DHCP服务器IP地址等。</p><p><strong>这样也就相当于同时告诉其他DHCP服务器，它们可以释放已提供的地址并将这些地址返回到可用的地址池中。</strong></p><p>在DHCP REQUEST报文封装的IP协议头部中，客户端的Source Address仍然是0.0.0.0，数据包的Destination仍然是255.255.255.255。但在DHCP Request报文中Ciaddr、Yiaddr、Siaddr、Giaddr 字段的地址均为0.0.0.0</p><h3 id="2-3-2-DHCP-Request-数据链路层"><a href="#2-3-2-DHCP-Request-数据链路层" class="headerlink" title="2.3.2 DHCP Request 数据链路层"></a>2.3.2 DHCP Request 数据链路层</h3><p><img src="https://resource.tinychen.com/blog/20190610/srlcaXxu8jT1.png"></p><p>这时候又变回了广播。</p><h3 id="2-3-3-DHCP-Request-网络层"><a href="#2-3-3-DHCP-Request-网络层" class="headerlink" title="2.3.3 DHCP Request 网络层"></a>2.3.3 DHCP Request 网络层</h3><p><img src="https://resource.tinychen.com/blog/20190610/R3t0oJPxuuvv.png"></p><p>由于是广播，所以目标IP地址是255.255.255.255，而源IP地址还是0.0.0.0是因为还没有完成整个DHCP过程，本机尚未获取到IP地址。</p><h3 id="2-3-4-DHCP-Request-应用层"><a href="#2-3-4-DHCP-Request-应用层" class="headerlink" title="2.3.4 DHCP Request 应用层"></a>2.3.4 DHCP Request 应用层</h3><p><img src="https://resource.tinychen.com/blog/20190610/S3Scm4vea5l1.png"></p><ul><li>Bootp flags：0表示单播，1表示广播，这里为0，即DHCP服务端回复的报文应为单播形式</li><li>Ciaddr、Yiaddr、Siaddr、Giaddr 字段的地址均为0.0.0.0</li></ul><h2 id="2-4-确认阶段——DHCP-Ack（单播-广播）"><a href="#2-4-确认阶段——DHCP-Ack（单播-广播）" class="headerlink" title="2.4 确认阶段——DHCP Ack（单播/广播）"></a>2.4 确认阶段——DHCP Ack（单播/广播）</h2><h3 id="2-4-1-DHCP-Ack-理论分析"><a href="#2-4-1-DHCP-Ack-理论分析" class="headerlink" title="2.4.1 DHCP Ack 理论分析"></a>2.4.1 DHCP Ack 理论分析</h3><p>确认阶段，即DHCP服务器确认分配级DHCP客户端IP地址的阶段。</p><p>某个DHCP服务器在收到DHCP客户端发来的DHCP REOUEST报文后，只有DHCP客户端选择的服务器会进行如下操作：如果确认将地址分配给该客户端，则以单播/广播方式返回DHCP ACK报文；否则返回DHCP NAK报文，表明地址不能分配给该客户端。</p><h3 id="2-4-2-DHCP-Ack-数据链路层"><a href="#2-4-2-DHCP-Ack-数据链路层" class="headerlink" title="2.4.2 DHCP Ack 数据链路层"></a>2.4.2 DHCP Ack 数据链路层</h3><p><img src="https://resource.tinychen.com/blog/20190610/sf6I5auVsS32.png"></p><p>可以看到这里是单播，源MAC地址是DHCP服务器（此处为中继代理）的MAC地址，目标MAC地址是DHCP客户端的MAC地址。</p><h3 id="2-4-3-DHCP-Ack-网络层"><a href="#2-4-3-DHCP-Ack-网络层" class="headerlink" title="2.4.3 DHCP Ack 网络层"></a>2.4.3 DHCP Ack 网络层</h3><p><img src="https://resource.tinychen.com/blog/20190610/wT71TP3iEOGS.png"></p><p>10.22.25.118就是即将要分配的IP地址，而10.22.25.254就是DHCP服务器的地址（此处为DHCP中继代理服务器）</p><h3 id="2-4-4-DHCP-Ack-应用层"><a href="#2-4-4-DHCP-Ack-应用层" class="headerlink" title="2.4.4 DHCP Ack 应用层"></a>2.4.4 DHCP Ack 应用层</h3><p><img src="https://resource.tinychen.com/blog/20190610/wTONY9Wj3T9b.png"></p><p>在DHCPACK报文中Yiaddr字段包含要分配给客户端的IP地址，而Chaddr和DHCP:Client Identifier字段是发出请求的客户端中网卡的MAC地址。</p><p>同时，在选项部分也会把在DHCPOFFER报文中所分配的IP地址的子网掩码、默认网关、DNS服务器、租约期、续约时间等信息加上。</p><h1 id="3、DHCP的IP地址租约更新"><a href="#3、DHCP的IP地址租约更新" class="headerlink" title="3、DHCP的IP地址租约更新"></a>3、DHCP的IP地址租约更新</h1><h2 id="3-1-DHCP服务IP地址租约更新原理"><a href="#3-1-DHCP服务IP地址租约更新原理" class="headerlink" title="3.1 DHCP服务IP地址租约更新原理"></a>3.1 DHCP服务IP地址租约更新原理</h2><p>如果采用动态IP地址分配策略，则DHCP服务器分配给客户端的IP地址都是有一定租约期限的，当租约期满后DHCP服务器又会收回原来分配的这个IP地址。</p><p>如果DHCP客户端希望继续使用该地址，则需要向DHCP服务器提出更新IP地址租约的申请，也就是前面所说到的“续约”。</p><p>IP地址租约更新或者IP地址续约也就是更新服务器端对IP地址的租约信息，使其恢复为初始状态。</p><h2 id="3-2-申请续约的方法"><a href="#3-2-申请续约的方法" class="headerlink" title="3.2 申请续约的方法"></a>3.2 申请续约的方法</h2><ol><li>在DHCP客户端的IP地址<strong>租约期限达到1/2时</strong>，由DHCP客户端向为它分配IP地址的DHCP服务器以单播方式发送DHCP REOUEST请求报文，以期进行IP租约的更新。</li><li>如果DHCP服务器同意续约，则DHCP服务器向客户端以单播方式返回DHCP ACK报文，通知DHCP客户端已经获得新IP租约，可以继续使用此IP地址；相反，如果DHCP服务器不同意续约，则DHCP服务器以单播方式返回DHCP NAK报文，通知DHCP客户端不能获得新的租约，此IP地址不可以再分配给该客户端。</li><li>如果上面的续约申请失败，则DHCP客户端还会在<strong>租约期限达到7/8时</strong>再次以广播方式发送DHCP REQUEST请求报文进行续约。DHCP服务器的处理方式同上，不再赘述。</li><li>如果第二次续约请求还是失败，则原来租约的IP地址将被释放。</li></ol><h1 id="4、DHCP中继代理服务"><a href="#4、DHCP中继代理服务" class="headerlink" title="4、DHCP中继代理服务"></a>4、DHCP中继代理服务</h1><p>在前面我们已经说过，在DHCP客户端初次从DHCP服务器获取IP地址的过程中，所有从DHCP客户端发出的请求报文均是以广播方式（目的地址为255.255.255.255）进行发送的，<strong>所以DHCP服务只适用于DHCP客户端和DHCP服务器处于同一个子网</strong>（也就是DHCP服务器至少有一个端口与DHCP客户端所在的子网是直接连接的）的情况，因为广播包是不能穿越子网的。</p><p>基于DHCP服务的以上限制，这样一来，如果DHCP客户端与DHCP服务器之间隔了路由器设备，不在同一子网，就不能直接通过这台DHCP服务器获取IP地址，即使DHCP服务器上已配置了对应的地址池。<strong>这也就意味着，如果想要让多个子网中的主机进行动态IP地址分配，就需要在网络中的所有子网中都设置一个DHCP服务器。这显然是很不经济的，也是没有必要的。</strong></p><p>DHCP中继功能可以很好地解决DHCP服务的以上难题。<strong>通过DHCP中继代理服务，与DHCP服务器不在同一子网的DHCP客户端可以通过DHCP中继代理（通常也是由路由器或三层交换机设备担当，但需要开启DHCP中继功能）与位于其他网段的DHCP服务器通信，最终使DHCP客户端获取到从DHCP服务器上分配而来的IP地址。</strong>此时的DHCP中继代理就位于DHCP客户端和DHCP服务器之间，负责广播DHCP报文的转发。</p><p><img src="https://resource.tinychen.com/blog/20190610/B4cjmSsyBsVz.png"></p><p>从前面的报文分析我们可以轻松的看出10.22.25.118和192.168.112.240是明显不属于同一个子网的，他们之间通信肯定需要使用路由器进行路由，而10.22.25.254就是担任着DHCP中继代理的角色。</p><p>至于和DHCP服务器之间经过了多少个路由，我们可以tracert一下。</p><p><img src="https://resource.tinychen.com/blog/20190610/4ALNec1bheRj.png"></p><p>从图中我们可以看到，从10.22.25.254这个DHCP中继代理到DHCP服务器之间需要经过5个路由节点。</p><p>而实际上，在很多的大型园区网络中，都会使用一个DHCP服务器集群+多个DHCP中继代理这样的方式进行DHCP分配。</p><h1 id="5、路由干扰"><a href="#5、路由干扰" class="headerlink" title="5、路由干扰"></a>5、路由干扰</h1><h2 id="5-1-路由干扰原理"><a href="#5-1-路由干扰原理" class="headerlink" title="5.1 路由干扰原理"></a>5.1 路由干扰原理</h2><p>路由干扰是园区网络中经常出现的问题，主要体现在用户无法获取到正确的IP地址/网关地址/DNS服务器地址等信息而无法上网。</p><p>主要原因则是因为其他用户私接路由器且配置不当，导致私接的路由器成为所在的局域网中的第二个DHCP服务器，这时其他用户使用DHCP获取IP地址的时候就会有不只一个DHCP服务器提供IP地址。不幸的是，私接的路由器虽然能正确提供DHCP服务和IP地址等信息，却往往无法提供上网功能，这就会造成所谓的路由干扰。</p><p><strong>从上面的解释我们可以知道，路由干扰只可能发生在使用DHCP协议的客户端，如果是使用静态IP地址，是可以避免路由干扰的。</strong></p><p>因为这时候当客户端接入网络之后，会直接发送ARP请求来查询设置的网关IP地址的MAC地址信息，而根本不会去发送DHCP Discover报文。</p><p><strong>但是，大型网络中使用静态网络地址往往容易产生管理混乱，IP地址冲突等问题。</strong></p><h2 id="5-2-路由干扰模拟"><a href="#5-2-路由干扰模拟" class="headerlink" title="5.2 路由干扰模拟"></a>5.2 路由干扰模拟</h2><p>下面我们在一个局域网内接入两个DHCP服务器，进行路由干扰的模拟。</p><p>从本文前面我们可以知道，由于DHCP Discover是以广播的方式进行发送，因此局域网内的所有DHCP服务器都会进行回应，而客户端只会选择最快回应的那一个DHCP服务器，其他的DHCP服务器则会被拒绝，如果此时我们的局域网中出现了一个能提供DHCP服务而不能提供上网服务的设备，就会对其产生路由干扰。</p><h3 id="5-2-1-模拟1"><a href="#5-2-1-模拟1" class="headerlink" title="5.2.1 模拟1"></a>5.2.1 模拟1</h3><p><img src="https://resource.tinychen.com/blog/20190610/uPIQx7MjUTrt.png"></p><p>第一次模拟中我们可以看到，在客户端发送了DHCP Discover报文之后，10.22.25.254和192.168.100.1两个DHCP服务器都进行了回应，不同的是这时10.22.25.254的回应显然要快得多，因此客户端选择了10.22.25.254这个DHCP服务器而192.168.100.1这个DHCP服务器则是发送了DHCP NAK报文来表示DHCP失败。</p><h3 id="5-2-2-模拟2"><a href="#5-2-2-模拟2" class="headerlink" title="5.2.2 模拟2"></a>5.2.2 模拟2</h3><p>这次我们调整192.168.100.1这个路由器对于DHCP报文的查询频率（加快），再次进行模拟。</p><p><img src="https://resource.tinychen.com/blog/20190610/URDqGmgJtBk0.png"></p><p>这次我们可以看到是192.168.100.1这个DHCP服务器先建立了连接。</p><h3 id="5-2-3-实例分析"><a href="#5-2-3-实例分析" class="headerlink" title="5.2.3 实例分析"></a>5.2.3 实例分析</h3><p><img src="https://resource.tinychen.com/blog/20190610/FEQGPHjUltML.png"></p><p>从上图的IPv4地址和对应的子网掩码，我们可以计算出对应的默认网关应该是10.27.26.254，而这里则是显示10.27.26.59，显然是错误的，很可能就是受到了路由干扰。</p><p><img src="https://resource.tinychen.com/blog/20190610/BfscX3u634RB.png"></p><p>这种IP地址在接了路由器的情况下是很常见的，但是如果是接入的分配10开头的IP地址的网络中出现这种IP地址信息，也是很有可能受到了路由干扰。</p><h3 id="5-2-4-定位干扰源"><a href="#5-2-4-定位干扰源" class="headerlink" title="5.2.4 定位干扰源"></a>5.2.4 定位干扰源</h3><p>定位干扰源最简单的方法就是查询arp缓存表。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在cmd中输入下列命令查询arp缓存</span><br>arp -a<br></code></pre></div></td></tr></table></figure><p>再根据IP信息中的默认网关（或者是DHCP服务器等其他异常信息）对应的IP地址找到干扰源的MAC地址，在交换机后台查询该MAC地址对应的交换机端口（往往需要网络管理员协助），即可定位干扰源。</p><h2 id="5-3-路由干扰解决方案"><a href="#5-3-路由干扰解决方案" class="headerlink" title="5.3 路由干扰解决方案"></a>5.3 路由干扰解决方案</h2><h3 id="5-3-1-用户合理配置路由器"><a href="#5-3-1-用户合理配置路由器" class="headerlink" title="5.3.1 用户合理配置路由器"></a>5.3.1 用户合理配置路由器</h3><ol><li>将墙上端口接出来的网线插到用户自己的路由器的wan口上，这时候相当于在该网络中下接了一层网络，即又建立了一个小型的局域网；</li><li>关闭路由器的DHCP功能，将网线插到路由器的lan口上，此时路由器相当于一个傻瓜交换机，只能起到增加网络接口和提供无线接入（如果路由器有无线功能的话）的作用；</li></ol><p>这种方法的弊端是很多用户并不知道如何合理的配置路由器，因此可行性不大。</p><h3 id="5-3-2-DHCP-Snooping"><a href="#5-3-2-DHCP-Snooping" class="headerlink" title="5.3.2 DHCP Snooping"></a>5.3.2 DHCP Snooping</h3><p>DHCP Snooping技术是DHCP安全特性，通过建立和维护DHCP Snooping绑定表过滤不可信任的DHCP信息，这些信息是指来自不信任区域的DHCP信息。DHCP Snooping绑定表包含不信任区域的用户MAC地址、IP地址、租用期、VLAN-ID 接口等信息。</p><p>当交换机开启了 DHCP-Snooping后，会对DHCP报文进行侦听，并可以从接收到的DHCP Request或DHCP Ack报文中提取并记录IP地址和MAC地址信息。另外，DHCP-Snooping允许将某个物理端口设置为信任端口或不信任端口。信任端口可以正常接收并转发DHCP Offer报文，而不信任端口会将接收到的DHCP Offer报文丢弃。这样，可以完成交换机对假冒DHCP Server的屏蔽作用，确保客户端从合法的DHCP Server获取IP地址。</p><p>DHCP Snooping可以非常有效地防止园区网中的路由干扰现象发生，但是需要网络管理员对每台路由网关进行配置，考虑到大型网络中可能会使用多种品牌和型号的交换机，这样子的工作量会比较大。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Wireshark抓包分析DHCP过程，并分析在同一广播域中存在多个DHCP服务器的产生的路由干扰过程。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
    <category term="wireshark" scheme="https://tinychen.com/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包分析校园网登录过程</title>
    <link href="https://tinychen.com/20190608-wireshark-stu/"/>
    <id>https://tinychen.com/20190608-wireshark-stu/</id>
    <published>2019-06-08T07:00:00.000Z</published>
    <updated>2019-06-08T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Wireshark抓包分析校园网登录过程，并使用curl实现模拟登录。</p><span id="more"></span><h1 id="1、登录过程抓包"><a href="#1、登录过程抓包" class="headerlink" title="1、登录过程抓包"></a>1、登录过程抓包</h1><h2 id="1-1-TCP三次握手建立连接"><a href="#1-1-TCP三次握手建立连接" class="headerlink" title="1.1 TCP三次握手建立连接"></a>1.1 TCP三次握手建立连接</h2><p>下图是经典的TCP三次握手示意图。</p><p><img src="https://resource.tinychen.com/blog/20190610/V0Ek4BI89C6j.png"></p><p>下面是抓到的和校园网登录界面1.1.1.2建立TCP链接的三个数据报文。</p><p><img src="https://resource.tinychen.com/blog/20190610/lz8Ql9GgXXrd.png"></p><h3 id="1-1-1-第一次握手"><a href="#1-1-1-第一次握手" class="headerlink" title="1.1.1 第一次握手"></a>1.1.1 第一次握手</h3><p>客户端发送syn包(seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p>从下图可以看到此时</p><p><code>seq=x=0</code></p><p>客户端发送一个TCP，标志位为SYN，序列号为0，代表客户端请求建立连接，如下图：</p><p><img src="https://resource.tinychen.com/blog/20190610/HEYEr0C0E4Ps.png"></p><h3 id="1-1-2-第二次握手"><a href="#1-1-2-第二次握手" class="headerlink" title="1.1.2 第二次握手"></a>1.1.2 第二次握手</h3><p>服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>从下图可以看到此时</p><p><code>ack=x+1=0+1=1</code></p><p><code>seq=y=0</code></p><p><img src="https://resource.tinychen.com/blog/20190610/B96cvKgXVqRN.png"></p><h3 id="1-1-3-第三次握手"><a href="#1-1-3-第三次握手" class="headerlink" title="1.1.3 第三次握手"></a>1.1.3 第三次握手</h3><p>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p><p>从下图可以看到此时</p><p><code>ack=y+1=0+1=1</code></p><p><img src="https://resource.tinychen.com/blog/20190610/cWVoD9q1jUWe.png"></p><h2 id="1-2-登录过程分析"><a href="#1-2-登录过程分析" class="headerlink" title="1.2 登录过程分析"></a>1.2 登录过程分析</h2><p>我们查看登录的报文，可以看到是一个HTTP POST请求，目标URL为<code>http://a.stu.edu.cn/ac_portal/login.php</code></p><p>在后面的报文分析中我们可以发现不仅是登录，查询和注销的目标URL也是<code>http://a.stu.edu.cn/ac_portal/login.php</code>，不同之处是<code>opr</code>选项的不同。</p><p><img src="https://resource.tinychen.com/blog/20190610/13lXl304O2Ob.png"></p><p>再来查看报文内容，我们发现登录的选项较多</p><ul><li>opr为登录选项，此处为pwdLogin，即账号密码登录</li><li>userName为用户名</li><li>pwd为用户密码</li><li>ipv4or6实则为你的Temporary IPv6 Address，如果无则为空</li><li>rememberPwd为是否记住密码</li></ul><p><img src="https://resource.tinychen.com/blog/20190610/scaCqdNtO6wK.png"></p><h2 id="1-3-查询过程分析"><a href="#1-3-查询过程分析" class="headerlink" title="1.3 查询过程分析"></a>1.3 查询过程分析</h2><p>查询登录状态的报文也非常简单，使用HTTP POST提交一个<code>opr=online_check</code>的请求。</p><p><img src="https://resource.tinychen.com/blog/20190610/KtanrddSi2eX.png"></p><p>然后服务端会返回一条html的text消息，里面的主要内容是两个选项<code>online</code>和<code>username</code>。</p><p>其中<code>online</code>有0和1两个状态，当<code>online</code>为1的时候，表示已经登录成功，且会返回用户名<code>username</code>；当<code>online</code>为0的时候，表示没有登录，不会返回用户名<code>username</code>。</p><p><img src="https://resource.tinychen.com/blog/20190610/b32RnGaiXdny.png"></p><h2 id="1-4-注销过程分析"><a href="#1-4-注销过程分析" class="headerlink" title="1.4 注销过程分析"></a>1.4 注销过程分析</h2><h3 id="1-4-1-IPv4注销过程"><a href="#1-4-1-IPv4注销过程" class="headerlink" title="1.4.1 IPv4注销过程"></a>1.4.1 IPv4注销过程</h3><p>IPv4的注销过程非常简单，只需要提交一个带有<code>opr=logot</code>的HTTP POST请求即可。</p><p><img src="https://resource.tinychen.com/blog/20190610/XnxRgTMygENg.png"></p><h3 id="1-4-2-IPv6注销过程"><a href="#1-4-2-IPv6注销过程" class="headerlink" title="1.4.2 IPv6注销过程"></a>1.4.2 IPv6注销过程</h3><p>在本机获得IPv6地址之后，注销的HTTP POST请求中还需要多加一项<code>ipv4or6=你的Temporary IPv6 Address</code>，才能成功注销。</p><p><img src="https://resource.tinychen.com/blog/20190610/xKwg2xYgNrUz.png"></p><h1 id="2、Curl模拟登录"><a href="#2、Curl模拟登录" class="headerlink" title="2、Curl模拟登录"></a>2、Curl模拟登录</h1><h2 id="2-1-Curl简介"><a href="#2-1-Curl简介" class="headerlink" title="2.1 Curl简介"></a>2.1 Curl简介</h2><p>Curl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称Curl为下载工具。Curl还包含了用于程序开发的libcurl。</p><p>Curl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。</p><p>Curl还支持SSL认证、HTTP POST、HTTP PUT、FTP上传, HTTP form based upload、proxies、HTTP/2、cookies、用户名+密码认证(Basic, Plain, Digest, CRAM-MD5, NTLM, Negotiate and Kerberos)、file transfer resume、proxy tunneling。</p><p>我们可以输入<code>curl --help</code>来查看相关的指令帮助。</p><p>下面我们要用到的模拟登录主要是使用curl模拟表单登录。</p><h2 id="2-2-登录过程分析"><a href="#2-2-登录过程分析" class="headerlink" title="2.2 登录过程分析"></a>2.2 登录过程分析</h2><p>从上面的报文分析我们得知，登录的时候http post请求提交了多个选项，但实际上需要登录成功只需要提交登录选项（opr）、账号（userName）和密码（pwd）即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -d <span class="hljs-string">&quot;opr=pwdLogin&amp;userName=你的账号&amp;pwd=你的密码&quot;</span> http://a.stu.edu.cn/ac_portal/login.php<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190610/pTadHYu65Kir.png"></p><h2 id="2-3-查询过程分析"><a href="#2-3-查询过程分析" class="headerlink" title="2.3 查询过程分析"></a>2.3 查询过程分析</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -d <span class="hljs-string">&quot;opr=online_check&quot;</span> http://a.stu.edu.cn/ac_portal/login.php<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190610/Dmw2TKmGvDah.png"></p><p><img src="https://resource.tinychen.com/blog/20190610/Xhbo9mcqgVUx.png"></p><h2 id="2-4-注销过程分析"><a href="#2-4-注销过程分析" class="headerlink" title="2.4 注销过程分析"></a>2.4 注销过程分析</h2><p>在无IPv6地址的情况下，我们注销登录只需要提交一个注销请求（<code>opr=logout</code>）即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 因为返回的数据中有中文，可能会产生乱码，所以要使用iconv进行编码转换</span><br>curl -d <span class="hljs-string">&quot;opr=logout&quot;</span> http://a.stu.edu.cn/ac_portal/login.php | iconv -f utf-8 -t gb2312<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190610/C10ezIPVSBNV.png"></p><p>在有IPv6地址的情况下，我们从上面的报文分析可知，除了注销请求之外，我们还需要提交一个IPv6地址（``Temporary IPv6 Address`），才能够顺利注销。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 因为返回的数据中有中文，可能会产生乱码，所以要使用iconv进行编码转换</span><br>curl -d <span class="hljs-string">&quot;opr=logout&amp;ipv4or6=你的Temporary IPv6 Address&quot;</span> http://a.stu.edu.cn/ac_portal/login.php | iconv -f utf-8 -t gb2312<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190610/R6S30DXrTGCQ.png"></p><h1 id="3、实现定时登录和爆流量换账号"><a href="#3、实现定时登录和爆流量换账号" class="headerlink" title="3、实现定时登录和爆流量换账号"></a>3、实现定时登录和爆流量换账号</h1><p>首先要说明一下现在的网络状况，在宿舍里面，断网时间是从晚上12点到早上6:30，且每个账号每天有限制使用流量，而在早上6：30之后，如果宿舍接入路由器需要手动登录，这里我们可以通过定时任务来实现自动登录和一个账号流量用完之后切换到另一个账号。</p><h2 id="3-1-定时登录"><a href="#3-1-定时登录" class="headerlink" title="3.1 定时登录"></a>3.1 定时登录</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -d <span class="hljs-string">&quot;opr=pwdLogin&amp;userName=你的账号&amp;pwd=你的密码&quot;</span> http://a.stu.edu.cn/ac_portal/login.php<br></code></pre></div></td></tr></table></figure><p>在linux中（树莓派或NAS）设置定时任务，6:32分执行该任务。</p><h2 id="3-2-爆流量换账号"><a href="#3-2-爆流量换账号" class="headerlink" title="3.2 爆流量换账号"></a>3.2 爆流量换账号</h2><p>由于通过校园网登录界面查询是否爆流量会有延迟（大概5分钟），所以我们需要使用ping命令来实时检测。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ping baidu.com || curl -d <span class="hljs-string">&quot;opr=logout&quot;</span> http://a.stu.edu.cn/ac_portal/login.php &amp;&amp; curl -d <span class="hljs-string">&quot;opr=pwdLogin&amp;userName=你的账号&amp;pwd=你的密码&quot;</span> http://a.stu.edu.cn/ac_portal/login.php<br></code></pre></div></td></tr></table></figure><p>使用linux中的crontab工具，设置该任务执行时间为每分钟执行一次，执行时间为7:00到23:59。</p><p><img src="https://resource.tinychen.com/blog/20190610/gc4gnOB2UOQq.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Wireshark抓包分析校园网登录过程，并使用curl实现模拟登录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
    <category term="wireshark" scheme="https://tinychen.com/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04和CentOS7更换阿里源</title>
    <link href="https://tinychen.com/20190605-linux-use-ali-source/"/>
    <id>https://tinychen.com/20190605-linux-use-ali-source/</id>
    <published>2019-06-05T07:00:00.000Z</published>
    <updated>2019-06-05T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7.6和Ubuntu18.04上面更换软件源为阿里源。</p><span id="more"></span><h1 id="1、Ubuntu18-04"><a href="#1、Ubuntu18-04" class="headerlink" title="1、Ubuntu18.04"></a>1、Ubuntu18.04</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 首先备份源镜像源</span><br>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<br><br><span class="hljs-comment"># 接着将源镜像源的内容全部注释掉，更改为下列内容</span><br>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br><br><br><span class="hljs-comment"># 更新镜像源使其生效</span><br>sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><h1 id="2、CentOS7"><a href="#2、CentOS7" class="headerlink" title="2、CentOS7"></a>2、CentOS7</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 首先备份源镜像源</span><br><span class="hljs-built_in">cd</span> /etc/yum.repos.d<br>mv CentOS-Base.repo CentOS-Base.repo.bak<br><br><span class="hljs-comment"># 下载新镜像源并更改名称</span><br>wget http://mirrors.aliyun.com/repo/Centos-7.repo -O CentOS-Base.repo<br><br><span class="hljs-comment"># 更新镜像源使其生效</span><br>yum clean all<br>yum makecache<br>yum update<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7.6和Ubuntu18.04上面更换软件源为阿里源。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装MPI</title>
    <link href="https://tinychen.com/20190604-linux-install-mpi/"/>
    <id>https://tinychen.com/20190604-linux-install-mpi/</id>
    <published>2019-06-04T07:00:00.000Z</published>
    <updated>2019-06-04T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7.6和Ubuntu19.04上面安装MPI开发环境。</p><p>需要注意的是除非使用root账号，不然需要加上<code>sudo</code>保证有足够的权限执行安装操作。</p><span id="more"></span><h1 id="1、下载MPI"><a href="#1、下载MPI" class="headerlink" title="1、下载MPI"></a>1、下载MPI</h1><p><a href="http://www.mpich.org/downloads/">MPI的官网下载地址</a></p><p>这里小七直接下载的3.3稳定版。</p><p><img src="https://resource.tinychen.com/blog/20190604/Q7sRfJ6CrH2V.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用wget命令直接下载</span><br>wget http://www.mpich.org/static/downloads/3.3/mpich-3.3.tar.gz<br></code></pre></div></td></tr></table></figure><h1 id="2、解压MPI"><a href="#2、解压MPI" class="headerlink" title="2、解压MPI"></a>2、解压MPI</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo tar -zxvf mpich-3.3.tar.gz<br></code></pre></div></td></tr></table></figure><h1 id="3、编译安装"><a href="#3、编译安装" class="headerlink" title="3、编译安装"></a>3、编译安装</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mpich-3.3/<br><br><span class="hljs-comment"># 这里如果系统没有安装fortran的编译器的话需要禁用fortran</span><br>sudo ./configure -prefix=/usr/<span class="hljs-built_in">local</span>/mpich --disable-fortran<br><br>sudo make<br><br>sudo make install<br></code></pre></div></td></tr></table></figure><h1 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 返回当前用户目录</span><br><span class="hljs-built_in">cd</span> <br><br><span class="hljs-comment"># 编辑环境变量配置文件</span><br>vim .bashrc <br><br><span class="hljs-comment"># 在里面添加环境变量</span><br><span class="hljs-built_in">export</span> PATH=/usr/<span class="hljs-built_in">local</span>/mpich/bin:<span class="hljs-variable">$PATH</span> <br><br><span class="hljs-comment"># 更新配置文件使其生效</span><br><span class="hljs-built_in">source</span> .bashrc <br></code></pre></div></td></tr></table></figure><h1 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 测试</span><br><span class="hljs-built_in">cd</span> mpich-3.3/<br><br><span class="hljs-comment"># 此处的12为对应的线程数</span><br>mpirun -np 12 ./examples/cpi<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190603/J2URhKq6zId5.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7.6和Ubuntu19.04上面安装MPI开发环境。&lt;/p&gt;
&lt;p&gt;需要注意的是除非使用root账号，不然需要加上&lt;code&gt;sudo&lt;/code&gt;保证有足够的权限执行安装操作。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Optimizing Gradual SDN Upgrades in ISP Networks</title>
    <link href="https://tinychen.com/20190601-isp-upgrade-sdn/"/>
    <id>https://tinychen.com/20190601-isp-upgrade-sdn/</id>
    <published>2019-06-01T07:00:00.000Z</published>
    <updated>2019-06-01T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为作业要求，最近拜读了IEEE上面的一篇<a href="https://ieeexplore.ieee.org/document/8610160">关于ISP升级到SDN的方法</a>的研究文章，然后记录了文章的一些要点和对一些自己不懂的知识进行补充。</p><span id="more"></span><h1 id="0、Abstract"><a href="#0、Abstract" class="headerlink" title="0、Abstract"></a>0、Abstract</h1><p>Nowadays, there is a fast-paced shift from legacy telecommunication systems to novel software-deﬁned network (SDN) architectures that can support on-the-ﬂy network reconﬁguration, therefore, empowering advanced trafﬁc engineering mechanisms. </p><p>Despite this momentum, migration to SDN cannot be realized at once especially in high-end networks of Internet service providers (ISPs). It is expected that ISPs will gradually upgrade their networks to SDN over a period that spans several years. </p><p>In this paper, we study the SDN upgrading problem in an ISP network:**which nodes to upgrade and when we consider a general model that captures different migration costs and network topologies, and two plausible ISP objectives: **</p><ol><li><p>the maximization of the trafﬁc that traverses at least one SDN node, </p></li><li><p>the maximization of the number of dynamically selectable routing paths enabled by SDN nodes.</p></li></ol><p>We leverage the theory of submodular and supermodular functions to devise algorithms with provable approximation ratios for each objective. Using realworld network topologies and trafﬁc matrices, we evaluate the performance of our algorithms and show up to 54% gains over state-of-the-art methods. </p><p>Moreover, we describe the interplay between the two objectives; maximizing one may cause a factor of 2 loss to the other. We also study the dual upgrading problem, i.e., minimizing the upgrading cost for the ISP while ensuring speciﬁc performance goals. Our analysis shows that our proposed algorithm can achieve up to 2.5 times lower cost to ensure performance goals over state-of-the-art methods. Index Terms—Software deﬁned networks, gradual deployment, ISP networks.</p><h1 id="1、Motivation"><a href="#1、Motivation" class="headerlink" title="1、Motivation"></a>1、Motivation</h1><h2 id="1-1-传统网络不足"><a href="#1-1-传统网络不足" class="headerlink" title="1.1 传统网络不足"></a>1.1 传统网络不足</h2><h3 id="1-1-1-硬件升级难题"><a href="#1-1-1-硬件升级难题" class="headerlink" title="1.1.1 硬件升级难题"></a>1.1.1 硬件升级难题</h3><p>纵观网络设备的诞生，传统网络行业按需发展，即根据暴露的问题然后去研发解决这个问题。同时，网络硬件研发周期长，迭代和升级也远远跟不上软件。 在传统网络行业中，话语权是掌控在网络设备商手上的，如思科、华为、新华三等。底层对于用户来说，是完全封闭的，如同黑盒子般，无法去掌控。</p><h3 id="1-1-2-网管系统的不足"><a href="#1-1-2-网管系统的不足" class="headerlink" title="1.1.2 网管系统的不足"></a>1.1.2 网管系统的不足</h3><p>传统的主流网络方案中，一般是配置网管服务器，网络设备（路由器、交换机、防火墙）和网管系统部署SNMP协议，通过网管系统对全网进行可视化拓扑发现、配置管理、链路质量检测。 然而，SNMP作为简单网络管理协议，更多侧重于网络设备的监控。而不是部署和配置。一般仅仅对IDC机房的故障进行告警，无法通过网管服务器去自动配置。</p><h3 id="1-1-3-流量分配不均衡"><a href="#1-1-3-流量分配不均衡" class="headerlink" title="1.1.3 流量分配不均衡"></a>1.1.3 流量分配不均衡</h3><p>同时，针对互联网公司的链路流量分配不均衡，也没有一个很好的解决方案，可分配均衡的一大难点，又在于流量的可视化。</p><ol><li>常规流控产品只能实现部分带宽分配可视化，常规网管系统只能实现链路故障检测，无法带宽可视化</li><li>全网流量可视化是带宽智能调配的基础</li></ol><h3 id="1-1-4-网络设备本身问题"><a href="#1-1-4-网络设备本身问题" class="headerlink" title="1.1.4 网络设备本身问题"></a>1.1.4 网络设备本身问题</h3><p>网络设备通过“网路协议”进行对话，如OSPF、BGP、MPLS、MSTP等，建立连接会通过三个步骤：邻居建立、信息共享、路径选择。 而由于大部分的网络设备采用“分布式架构”，每次交互都会根据“路径算法（如SPF算法）”选择最优的路径。<strong>但是选择路径时，只能选择最短，不能根据流量等因素加以区分。</strong>同时，由于每个交换机都会有自己的控制器，也会消耗一部分的转发性能。</p><h2 id="1-2-SDN定义"><a href="#1-2-SDN定义" class="headerlink" title="1.2 SDN定义"></a>1.2 SDN定义</h2><p><img src="https://resource.tinychen.com/blog/20190529/nHUdaOGSLiPH.png"></p><p><strong>SDN：即软件定义网络，是一种网络设计理念</strong></p><p>网络设备可以集中式管理，可编程，控制和转发分离。即可定义为SDN</p><p>SDN框架由应用层、控制层、转发层（基础设施层）组成，其中应用层提供应用和服务（网管、安全、流控等），控制层统一管理和控制（协议计算、策略下发、链路信息等）、转发层提供硬件设备（交换机、路由器、防火墙）进行数据转发</p><p>基于REST API的北向接口负责面向应用，提供网络抽象，使得网络具备软件编程的能力。南向接口主要负责面向基础设施层，主要提供Openflow流。</p><p><img src="https://resource.tinychen.com/blog/20190529/H0FgjtxoM7hQ.png"></p><p><em><strong>注意：控制层接口也属于北向接口</strong></em></p><h2 id="1-3-传统网络对比SDN网络"><a href="#1-3-传统网络对比SDN网络" class="headerlink" title="1.3 传统网络对比SDN网络"></a>1.3 传统网络对比SDN网络</h2><table><thead><tr><th align="center">传统网络</th><th align="center">SDN</th></tr></thead><tbody><tr><td align="center">控制转发耦合</td><td align="center">控制转发分离</td></tr><tr><td align="center">分布式控制</td><td align="center">集中式控制</td></tr><tr><td align="center">不可编程</td><td align="center">可编程</td></tr><tr><td align="center">不开放</td><td align="center">开放接口</td></tr><tr><td align="center">硬件化</td><td align="center">虚拟化</td></tr></tbody></table><p><img src="https://resource.tinychen.com/blog/20190529/XIzY2Wm7TONB.png"></p><p>第三条主要是SDN可以通过代码写脚本实现转发策略，如C/JAVA/Python。 </p><p>第四条开放接口也很好理解，基于开放协议的方案是当前SDN实现的主流方案。 （主要是OpenFlow）</p><p>第五条网络虚拟化，即虚拟化平台是介于数据网络拓扑和租户控制器之间的中间层，为了实现虚拟化，虚拟化平台需要对物理网络资源进行抽象虚拟化，其中包括拓扑虚拟化，节点资源虚拟化和链路资源虚拟化。</p><h2 id="1-4-MPLS简介"><a href="#1-4-MPLS简介" class="headerlink" title="1.4 MPLS简介"></a>1.4 MPLS简介</h2><p>多协议标签交换（英语：Multi-Protocol Label Switching，缩写为MPLS）是一种在开放的通信网上利用标签引导数据高速、高效传输的新技术。<strong>多协议的含义是指MPLS不但可以支持多种网络层层面上的协议，还可以兼容第二层的多种数据链路层技术。</strong></p><p><strong>MPLS是利用标记（label）进行数据转发的。</strong>当分组进入网络时，要为其分配固定长度的短的标记，并将标记与分组封装在一起，在整个转发过程中，交换节点仅根据标记进行转发。</p><p><strong>MPLS 独立于第二和第三层协议，诸如ATM 和IP。</strong>它提供了一种方式，将IP地址映射为简单的具有固定长度的标签，用于不同的包转发和包交换技术。它是现有路由和交换协议的接口，如IP、ATM、帧中继、资源预留协议（RSVP）、开放最短路径优先（OSPF）等等。</p><h2 id="1-5-OSPF简介"><a href="#1-5-OSPF简介" class="headerlink" title="1.5 OSPF简介"></a>1.5 OSPF简介</h2><p><strong>OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system,AS）内决策路由。</strong>是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。<strong>著名的迪克斯加算法(Dijkstra)被用来计算最短路径树。</strong>OSPF分为OSPFv2和OSPFv3两个版本,其中OSPFv2用在IPv4网络，OSPFv3用在IPv6网络。</p><h2 id="1-6-混合SDN的好处"><a href="#1-6-混合SDN的好处" class="headerlink" title="1.6 混合SDN的好处"></a>1.6 混合SDN的好处</h2><ol><li>对于跨越至少一个SDN节点的流量，可以应用各种复杂的策略，例如访问控制，防火墙动作以及其他支持中间盒的网内服务。</li><li>使用SDN节点可以通过覆盖底层的OSPF或MPLS来动态地控制流的路由路径，从而创造更灵活的网络。</li></ol><p><img src="https://resource.tinychen.com/blog/20190529/SoV24WvtMRcL.png"></p><p>图1.部分升级到SDN的网络。两个SDN节点可以充当防火墙或动态控制路由路径。</p><blockquote><p>让我们用一个简单的例子来说明这种方法的潜力。考虑图1所示的混合SDN网络，它将流从源节点1路由到目的节点3.这里，七个节点中只有两个用SDNcapabilities（节点1和4）升级。使用OSPF，流始终沿最短路径路由。然而，节点1可以动态地决定丢弃（而不是转发）报文，例如作为防火墙。它还可以通过节点4路由分组来覆盖OSPF最短路径。然后，报文将跟随备用路径1，该备用路径1是具有3的OSPF最短路径连接节点4.当最短路径的链路失败或变为临时拥塞时，这种流重新路由是重要的。由于节点4也升级到SDN，因此它可以类似地将报文推向替代路径2.换句话说，随着启用SDN的节点的数量增加，替代路径的集合也增加。因此，在执行动态TE时存在更多的自由度（或灵活性）。</p></blockquote><h2 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1.7 小结"></a>1.7 小结</h2><p>总之，每个ISP在升级SDN的时候都必须解决以下两个问题：</p><ol><li>（升级的节点数量和时间）每个时段要升级多少个节点？它应该尽早升级所有节点还是等待价格下降后再升级？</li><li>（升级哪些特定节点）在决定要升级的节点数量之后，要选择哪些特定节点先进行升级？</li></ol><p>因此，我们在这项工作中的目标是研究大型（昂贵）运营ISP网络中SDN升级调度的策略，并主要关注<strong>时间维度的影响</strong>以及<strong>流量可编程性</strong>和<strong>TE灵活性优势</strong>之间的相互作用。</p><blockquote><p>Therefore,  our  goal  in  this  work  is  to investigate policies for SDN upgrade scheduling in large (and expensive) operational ISP networks, and focus mainly on the impact  of  time-dimension  and  the  interplay  between  traffic programmability and TE flexibility benefits.</p></blockquote><h1 id="2、Methodology-and-Contributions"><a href="#2、Methodology-and-Contributions" class="headerlink" title="2、Methodology and Contributions"></a>2、Methodology and Contributions</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>ISP升级SDN的时候需要关注的两个重要因素：</p><ol><li>至少遍历一个SDN节点的流量最大化，因为这允许ISP控制流量在自己的网络中的流动方式。</li></ol><blockquote><p>First,  we  target  the  maximization  of  the  programmable  traffic,  i.e.,  the traffic  that  traverses  at  least  one  SDN  node  (Obj1).</p></blockquote><ol start="2"><li>旨在最大化TE的灵活性。通过增加通过SDN升级的备选路径的数量来实现该目标。</li></ol><blockquote><p>The second objective (Obj2) aims to maximize the TE flexibility. </p></blockquote><h2 id="2-2-次模函数和超模函数"><a href="#2-2-次模函数和超模函数" class="headerlink" title="2.2 次模函数和超模函数"></a>2.2 次模函数和超模函数</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h3><p>在数学中，一个函数f:R^k^→R是超模的，当f(x⬆y)+f(x⬇y)≥f(x)+f(y)对所有x,y∈R^k^成立</p><p><em><strong>如果-f是超模函数，那么f称为次模函数，如果不等式变为相等，则函数是模块化的。</strong></em></p><h3 id="2-2-2-Submodularity"><a href="#2-2-2-Submodularity" class="headerlink" title="2.2.2 Submodularity"></a>2.2.2 Submodularity</h3><p>次模函数（submodular function）又称“子模函数”或“亚模函数”，次模函数具有次模性（submodularity），它是经济学上边际效益递减（property of diminishing returns）现象的形式化描述。</p><p>给定一个集合函数f:2V→R f:2^V^→R，其将有限集V VV的一个子集S⊆V 映射为一个实数。如果对于任意S，满足：</p><p>f(S∪T)+f(S∩T)≤f(S)+f(T)        (1)</p><p>则称f(⋅) 是次模函数。从边际效益递减的角度考虑，次模函数还有一种等价定义：</p><p>对任意的R⊆S⊆V，并且s∈V∖S，</p><p>f(S∪{s})−f(S)≤f(R∪{s})−f(R)        (2)</p><p><strong>公式（2）指出，当集合越来越大，s的“价值”将越来越小，正是边际效益递减的特性。</strong>这个现象在自然界普遍存在，例如：香农熵函数就是随机变量集合上的次模函数。当S⊆T时有f(S)≤f(T) f(S)，则称该次模函数是单调的（monotone）。</p><p>更进一步，次模性是convexity（凸性）的离散模拟。由于convexity使得连续函数更容易最优化，因而次模性在组合优化中重要作用。当目标函数是次模函数时，许多组合优化问题能够在多项式时间内得到最优解或近似解。次模函数最大化被证明是一个NP-hard问题，幸运的是，存在高效并且解的质量有保证的近似算法。</p><p>一个流行的结果是：最大化一个单调非负的带基数约束（cardinality constraint，即对子集S大小的约束）的次模函数，贪心算法至少能够达到(1−1/e)f(S<del>opt</del>)的结果，其中f(S<del>opt</del>)表示问题的最优解，1−1/e大约是0.63。</p><p>f(S<del>app</del>)≥(1−1/e)f(S<del>opt</del>)</p><h2 id="2-3-目标1分析"><a href="#2-3-目标1分析" class="headerlink" title="2.3 目标1分析"></a>2.3 目标1分析</h2><p>对于Obj1，这个问题是NP-Hard事件，近似于任何优于1-1 / e的因子。</p><blockquote></blockquote><p><img src="https://resource.tinychen.com/blog/20190529/dKfc3njuUeTL.png"></p><blockquote><p><strong>NP问题是指可以在多项式的时间里验证一个解的问题</strong>。</p><p><strong>NP问题</strong>：可以在多项式时间内被验证的问题。或者说，可以在非确定性多项式时间内被解决的问题。</p><p>即可以在非确定型图灵机上在多项式时间内找出解的问题。NP问题可以在多项式时间内被验证，但是不确定是否可以在多项式时间内找出解。</p><p>NPC问题的定义非常简单。同时满足下面两个条件的问题就是NPC问题。首先，<strong>它得是一个NP问题</strong>；然后，<strong>所有的NP问题都可以归约到它</strong>。</p><p><strong>NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比NPC问题的范围广），注意是不一定，并不是完全否定。</strong>NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p></blockquote><p>对于所有节点升级发生在同一时间段的特殊情况，我们展示了经典贪婪算法的修改版本，它枚举了所有可能的节点三元组作为候选解决方案，实现了最佳可能的近似。我们还展示了一种扩展此算法的简单方法，适用于节点升级可以在不同时间段进行的一般情况。我们还提出了第二类更复杂的算法，它们通过将Obj1表示为次模函数[12]的最大化来改进近似度，即满足递减回归性质的函数。</p><blockquote><p>In  both  cases,  finding  the  upgrading  policy  requires  the solution of challenging combinatorial optimization problems. Namely, we show that for Obj1 this problem is NP-Hard even to approximate to any factor better than 1−1/e. For the special case in which all the node upgrades take place at the same time period, we  show  that  a  modified  version  of  a  classic  greedy algorithm, which enumerates all possible triplets of nodes as candidate solutions, achieves the best possible approximation ratio.  We  also  show  a  simple  way  to  extend  this  algorithm for the general case  where the node upgrades can  take place at  different  time  periods.  We  also  present  a  second  class  of more  sophisticated  algorithms  with  improved  approximation ratios by expressing Obj1 as the maximization of a submodular set function [12], i.e., a function that satisfies the diminishing returns property.</p></blockquote><h2 id="2-4-目标2分析"><a href="#2-4-目标2分析" class="headerlink" title="2.4 目标2分析"></a>2.4 目标2分析</h2><p>然后，我们研究Obj2（最大化TE灵活性）。这是一个更复杂的问题，可以表达为具有有界超模程度的函数的最大化[13]。使用此结果，我们提出了另一种基于贪婪的算法，该算法大致解决了这个问题。为了完整起见，我们还考虑升级问题（Obj3）的“双重”版本，其中上述目标被视为约束并受其约束，我们将迁移成本降至最低。对于简单但实用的情况，使用二分搜索技术提出了近似算法。</p><blockquote><p>Then,  we  study  Obj2  (maximizing  TE  flexibility).  This is   a   more  complex  problem  which  can   be   expressed  as the  maximization  of  a  function  with  bounded  supermodular degree  [13].  Using  this  result,  we  present  another  greedy-based  algorithm  that  approximately solves  this  problem.  For the sake of completeness, we also consider the “dual” version of the upgrading problem (Obj3), where the above objectives are  treated  as  constraints  and  subject  to  them  we  minimize migration costs. For a simple, yet practical, case an  approximation algorithm is proposed using a binary search technique.</p></blockquote><h1 id="3、MODEL-AND-PROBLEM-FORMULATION"><a href="#3、MODEL-AND-PROBLEM-FORMULATION" class="headerlink" title="3、MODEL  AND PROBLEM FORMULATION"></a>3、MODEL  AND PROBLEM FORMULATION</h1><h2 id="3-1-SDN升级问题（SDN-Upgrading-Problem）"><a href="#3-1-SDN升级问题（SDN-Upgrading-Problem）" class="headerlink" title="3.1 SDN升级问题（SDN  Upgrading  Problem）"></a>3.1 SDN升级问题（SDN  Upgrading  Problem）</h2><p>我们介绍了使用通用的成本模型和不同的目标，逐步（部分）将ISP网络升级到SDN的问题。升级可以在不同的时间段进行，在每个时期引入不同的成本，技术成熟度，网络设备的不同生命周期和其他实际限制。</p><h2 id="3-2-最大化可编程流量（Obj1）（Maximizing-Programmable-Traffic-Obj1-）"><a href="#3-2-最大化可编程流量（Obj1）（Maximizing-Programmable-Traffic-Obj1-）" class="headerlink" title="3.2 最大化可编程流量（Obj1）（Maximizing  Programmable  Traffic  (Obj1)）"></a>3.2 最大化可编程流量（Obj1）（Maximizing  Programmable  Traffic  (Obj1)）</h2><p>可编程流量最大化目标，我们表明SDN升级问题是NP-Hard接近任何优于1-1 / e的因素。然后，针对一个时间段的特殊情况，我们提出了匹配该因子的简单算法，并说明了如何在一般情况下对其进行扩展。我们还使用子模函数理论提出了更多更复杂的近似算法。</p><h2 id="3-3-最大化TE灵活性（Obj2）（Maximizing-TE-Flexibility-Obj2-）"><a href="#3-3-最大化TE灵活性（Obj2）（Maximizing-TE-Flexibility-Obj2-）" class="headerlink" title="3.3 最大化TE灵活性（Obj2）（Maximizing  TE  Flexibility  (Obj2)）"></a>3.3 最大化TE灵活性（Obj2）（Maximizing  TE  Flexibility  (Obj2)）</h2><p>为了通过支持SDN的路由路径的最大化来最大化TE灵活性，我们表明优化问题更复杂。我们通过将其表示为具有有界超模函数的最大化来提出近似算法。</p><h2 id="3-4-最小化迁移成本（Obj3）（Minimizing-migration-costs-Obj3-）"><a href="#3-4-最小化迁移成本（Obj3）（Minimizing-migration-costs-Obj3-）" class="headerlink" title="3.4 最小化迁移成本（Obj3）（Minimizing migration costs (Obj3)）"></a>3.4 最小化迁移成本（Obj3）（Minimizing migration costs (Obj3)）</h2><p>对于最小化迁移成本的“双重”问题，我们表明它与上述问题在很大程度上有所不同。我们还使用二元搜索技术进行近似算法。</p><h2 id="3-5-数据集驱动评估（Dataset-driven-Evaluation）"><a href="#3-5-数据集驱动评估（Dataset-driven-Evaluation）" class="headerlink" title="3.5 数据集驱动评估（Dataset-driven  Evaluation）"></a>3.5 数据集驱动评估（Dataset-driven  Evaluation）</h2><p>我们使用真实网络拓扑和流量矩阵评估提出的算法。我们发现，与实际场景中的两种最先进的方法相比，我们的方法可以将可编程流量的数量增加54％。我们还发现，通过优化Obj1，对Obj2进行了多方面的好处（反之亦然），我们探索了它们之间的相互作用。这两个目标。最后，我们展示了我们提出的Obj3算法可以节约高达2.5倍的成本，以确保性能目标超越其他最先进的方法。</p><h2 id="3-6-示例"><a href="#3-6-示例" class="headerlink" title="3.6 示例"></a>3.6 示例</h2><p><img src="https://resource.tinychen.com/blog/20190529/bNmkrIDGC4cE.png"></p><p>在传统的IP协议下，如OSPF，流量总是遵循最短路径的原则到达目的地址，使用更高级的协议，如MPLS，流量则可以遵循其他的自定义原则不走最短的路径。</p><h1 id="4、Dataset-driven-Evaluation"><a href="#4、Dataset-driven-Evaluation" class="headerlink" title="4、Dataset-driven  Evaluation"></a>4、Dataset-driven  Evaluation</h1><p>一般而言，ISP通过将升级扩展到许多而不是一年来获得更多好处。然而，当SDN成本随时间相对稳定（每年下降高达20％）时，这种策略可能是有害的。</p><p>我们还指出，通过优化可编程流量最大化的目标，也可以实现最大化灵活性最大化的目标（反之亦然）。然而，由于每个算法支持一个目标而不是另一个目标，因此会有性能损失（高达2倍）。</p><blockquote><p>In general, the ISP acquires more benefits by spreading the  upgrades  over  many  instead  of  one  year.  Nevertheless, this  strategy  can  be  detrimental  when  the  SDN  costs  are relatively stable over time (up to 20% drop per year).</p></blockquote><blockquote><p>However, there will  be  a  performance loss  (up  to  a  factor  of 2),  since  each algorithm favors one objective over the other.</p></blockquote><h1 id="5、涉及算法"><a href="#5、涉及算法" class="headerlink" title="5、涉及算法"></a>5、涉及算法</h1><h2 id="5-1-DEG"><a href="#5-1-DEG" class="headerlink" title="5.1 DEG"></a>5.1 DEG</h2><p>此方案在拓扑图中升级具有最高度数（传入和传出的相邻链接数）的节点，直到所有预算用完。<strong>所有升级都在第一时间进行。</strong></p><h2 id="5-2-VOL"><a href="#5-2-VOL" class="headerlink" title="5.2 VOL"></a>5.2 VOL</h2><p>此方案升级具有最高流量的节点，直到所有预算用完。所有升级都在第一时间进行。</p><h2 id="5-3-Modified-greedy"><a href="#5-3-Modified-greedy" class="headerlink" title="5.3 Modified-greedy"></a>5.3 Modified-greedy</h2><p>此方案使用算法1进行分时间段升级。</p><p><img src="https://resource.tinychen.com/blog/20190529/HhAN2ckCYbzy.png"></p><h2 id="5-4-Local-search"><a href="#5-4-Local-search" class="headerlink" title="5.4 Local search"></a>5.4 Local search</h2><p>此方案使用算法2进行分时间段升级。其中变量e为2</p><p><img src="https://resource.tinychen.com/blog/20190529/Y0kNCnoPlmm6.png"></p><h2 id="5-5-Super-greedy"><a href="#5-5-Super-greedy" class="headerlink" title="5.5 Super greedy"></a>5.5 Super greedy</h2><p>此方案使用算法3进行TE灵活性最大化。</p><p><img src="https://resource.tinychen.com/blog/20190529/minMsFzk75XW.png"></p><h2 id="5-6-MUcPF"><a href="#5-6-MUcPF" class="headerlink" title="5.6 MUcPF"></a>5.6 MUcPF</h2><p>此方案升级覆盖最大流量的节点，直到满足最小可编程流量目标。所有升级都在第一时间进行。</p><blockquote><p>This  scheme  upgrades  the  node  that covers the maximum number of flows until the minimum programmable traffic target is met. All the upgrades take place at the first time period.</p></blockquote><h2 id="5-7-Highest-ratio"><a href="#5-7-Highest-ratio" class="headerlink" title="5.7 Highest ratio"></a>5.7 Highest ratio</h2><p>该方案升级具有最高流量比率的节点，使其超过成本，直到满足最小可编程流量目标。所有升级都在第一时间进行</p><blockquote><p>This scheme upgrades the node with the highest ratio of traffic volume that traverses it over upgrading cost, until the minimum programmable traffic target is met. All the upgrades take place at the first time period.</p></blockquote><h2 id="5-8-Binary-search"><a href="#5-8-Binary-search" class="headerlink" title="5.8 Binary search"></a>5.8 Binary search</h2><p>变量e= 0.1，可以最大限度地降低升级成本。所有升级都在第一时间进行。</p><p>上述前四种算法将根据特定预算B对Obj1进行比较。将根据相同预算对Obj2评估淡化算法。最后，最后三个算法将针对Obj3进行比较，具体取决于特定的性能目标Pt。</p><h1 id="6、网络拓扑"><a href="#6、网络拓扑" class="headerlink" title="6、网络拓扑"></a>6、网络拓扑</h1><p>评估的主要部分是使用从北美的教育骨干网络获得的“艾利森”数据集[14]进行的。该网络由12个节点和30个有向链路组成，如图3所示。数据集记录流量矩阵，即每对节点之间传输的数据，每5分钟传输一个六个月的整个周期。</p><p><img src="https://resource.tinychen.com/blog/20190529/1PaFi7QeOTfY.png"></p><p>所有流量聚合之后最大可达5.46Gbps，并设定每年增长22%。同时使用OSPF记录链接之间的最短路径。</p><h1 id="7、结果分析"><a href="#7、结果分析" class="headerlink" title="7、结果分析"></a>7、结果分析</h1><h2 id="7-1-一次升级"><a href="#7-1-一次升级" class="headerlink" title="7.1 一次升级"></a>7.1 一次升级</h2><p>我们注意到，由于Abilene网络相当小（N = 12个节点）和T = 1个时间段，我们可以通过使用穷举搜索方法在合理的时间内计算出最优解。这是通过枚举所有2^12^ = 4,096个可能的解决方案，然后选择产生最大可编程流量的解决方案。通过执行此过程，我们观察到<strong>Modified greedy</strong>和<strong>Local search</strong>算法非常接近最优（图（a）中的场景小于1％）。但是，我们无法应用详尽的搜索方法来找到更大或更大网络的最佳解决方案。</p><p><img src="https://resource.tinychen.com/blog/20190529/guECK02S2Y3c.png"></p><h2 id="7-2-分段升级"><a href="#7-2-分段升级" class="headerlink" title="7.2 分段升级"></a>7.2 分段升级</h2><p>然后我们探讨了图（b）中时间段数的影响。在这里，我们保持B = $ 200K，但T设定为从1到5。</p><p>为了捕获技术成熟度，我们将SDN升级成本每年降低40％，</p><p>当T = 1，结果与图（a）相匹配。 </p><p>当T&gt; 1，通过推迟一些升级后的成本将会降低，可以获得额外的好处。</p><p>Local search算法可以通过分时间段逐渐升级，以实现四种算法中的最佳性能。</p><p>最好的情况下（T=5）比Local search算法比最差的VOL要高47%且比第二高的Modified greedy高5.5％</p><p><img src="https://resource.tinychen.com/blog/20190529/6HDf3hvlMi2w.png"></p><h2 id="7-3-一次升级和分段升级"><a href="#7-3-一次升级和分段升级" class="headerlink" title="7.3 一次升级和分段升级"></a>7.3 一次升级和分段升级</h2><p>在图（c）中，我们仔细研究了使用Local search算法时多年来的升级分布。我们评估了各种情景，这些情景与升级成本的年降低率不同。我们发现，对于相对较低的成本降低率（高达20％），所有升级都应在第一年内完成。但是，在此之后，将来推迟一些升级更有利。随着成本降低的速度增加，分时间段进行升级。</p><p><img src="https://resource.tinychen.com/blog/20190529/kFiEJJo4AfCK.png"></p><h2 id="7-4-Obj1和Obj2相互关系"><a href="#7-4-Obj1和Obj2相互关系" class="headerlink" title="7.4 Obj1和Obj2相互关系"></a>7.4 Obj1和Obj2相互关系</h2><p>然后探讨的是traffic  programmability  (Obj1) 和TE  flexibility  benefits  (Obj2)的相互关系。</p><p><strong>Local search实际上是一种非常有效的算法，可以最大化可编程流量。但是，大量的可编程流量不能保证自己有大量的备用路由路径。</strong></p><p>图（a）旨在通过比较Local search algorithm（优化可编程流量）和Super-greedy（优化TE灵活性）的性能来解决这个问题。</p><p>在这里，为了模拟TE  flexibility  benefits  (Obj2)，我们关注具有最高速率的10个Flow，其中TE是最重要的。然后，我们将每个流的第二和第三最短路径视为替代路径，该路径不与最短路径（Pf<del>sets</del>）重叠。</p><p>我们发现通过优化其中一个目标，也可以为另一个目标实现收益。然而，由于每种算法都偏向于另一种目标，因此会有性能损失（高达2倍）。</p><p><img src="https://resource.tinychen.com/blog/20190529/WP6A6hIGkiRD.png"></p><h2 id="7-5-Obj3"><a href="#7-5-Obj3" class="headerlink" title="7.5 Obj3"></a>7.5 Obj3</h2><p>我们还提出了Obj3的评估结果，以研究所提出的算法（Binary search）如何与最先进的方法（MUcPF和Highest ratio）进行比较。</p><p>我们将这一时间段与Pt的不同值进行比较。结果如图（b）所示。</p><p><img src="https://resource.tinychen.com/blog/20190529/OtlDHBiT9bUG.png"></p><h2 id="7-6-使用更大型网络"><a href="#7-6-使用更大型网络" class="headerlink" title="7.6 使用更大型网络"></a>7.6 使用更大型网络</h2><p>虽然在我们的评估中我们使用了真实的网络拓扑和流量矩阵，但研究大型网络中的结果也很有意思。</p><p>为实现这一目标，我们使用了北美Deltacom骨干网络的拓扑结构，该网络由113个节点和161个链路组成，并且在[15]中可在线公开。</p><p>由于没有关于流量的可用信息，我们人为地生成此信息。</p><p>特别是，我们通过在随机原始 - 目的地对统一选择来创建F = 1,000flow。</p><p>我们根据跳数长度计算最短路径，并且我们将流速设置为与它成比例（遵循重力模型[36]）。</p><p>在图中，我们重复7.1中所示的实验，但对于这个更大的网络。我们发现所提出的算法比其对应的算法执行得更好。</p><p>饱和点为B = $ 3M，大约是小型网络的三倍。</p><p>我们将这种差异归因于Deltacom网络中较大的节点数（10x）和拓扑特征，因为Deltacom具有更高的链路密度，可以实现SDN节点覆盖更多的流量。</p><p><img src="https://resource.tinychen.com/blog/20190529/Lig97IdP1Dme.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为作业要求，最近拜读了IEEE上面的一篇&lt;a href=&quot;https://ieeexplore.ieee.org/document/8610160&quot;&gt;关于ISP升级到SDN的方法&lt;/a&gt;的研究文章，然后记录了文章的一些要点和对一些自己不懂的知识进行补充。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MariaDB</title>
    <link href="https://tinychen.com/20190521-centos-install-mariadb/"/>
    <id>https://tinychen.com/20190521-centos-install-mariadb/</id>
    <published>2019-05-21T07:00:00.000Z</published>
    <updated>2019-05-21T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是在CentOS7上安装MariaDB服务。</p><span id="more"></span><h1 id="1、为什么换用MariaDB？"><a href="#1、为什么换用MariaDB？" class="headerlink" title="1、为什么换用MariaDB？"></a>1、为什么换用MariaDB？</h1><p>之前写过一篇教程是把<a href="https://tinychen.com/20190310-centos-install-mysql/">内置的MariaDB卸载然后换用MySQL</a>，最近因为MySQL不支持Check子句，还有一次插入多条数据也不行，反正就是想用一下MariaDB，就又换回来了。</p><h1 id="2、卸载MySQL"><a href="#2、卸载MySQL" class="headerlink" title="2、卸载MySQL"></a>2、卸载MySQL</h1><p><strong>注意，在卸载MySQL之前请先使用dump命令备份数据库。</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统中安装的MySQL服务</span><br>rpm -qa | grep mysql<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/aeGO7MB94uBm.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用rpm卸载掉对应的组件</span><br>rpm -e &lt;packege&gt;<br><span class="hljs-comment"># 如果出现提示依赖的问题，加上--nodeps</span><br>rpm -e --nodeps &lt;packege&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/iRLHKs5GSwvh.png"></p><h1 id="3、新建yum源"><a href="#3、新建yum源" class="headerlink" title="3、新建yum源"></a>3、新建yum源</h1><p>MariaDB的yum安装官网链接：</p><p><a href="http://yum.mariadb.org/">http://yum.mariadb.org/</a></p><p>进去可以看到目前最新的应该是10.4.5版本，于是我们就在<code>/etc/yum.repos.d</code>目录下面新建一个yum源文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/yum.repos.d/MariaDB.repo<br></code></pre></div></td></tr></table></figure><p>在repo文件中写入下列内容，注意<code>baseurl</code>可以根据版本的更新而改变。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[MariaDB]<br>name = MariaDB<br>baseurl = http://yum.mariadb.org/10.4.5/centos7-amd64/<br>gpgkey = http://yum.mariadb.org/RPM-GPG-KEY-MariaDB<br>gpgcheck = 1<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/AaO0ChTlCCeb.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 输入下列命令清除并更新yum源</span><br>yum clean all -v<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/EBfeojo0q0lv.png"></p><h1 id="4、安装MariaDB"><a href="#4、安装MariaDB" class="headerlink" title="4、安装MariaDB"></a>4、安装MariaDB</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看yum源中的Maria，注意字母的大小写要和上面写的yum源文件一样</span><br>yum list | grep Maria<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/Iz1jFMiTk9Nj.png"></p><p>这里应该是10.4.5，就说明是之前我们写的yum源。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 输入下面这条指令进行安装MariaDB，注意不要加-y选项，先确定一下版本是否正确</span><br>yum install MariaDB<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190523/3JQoFyQA0Gdq.png"></p><p>确定版本无误后，按y确定安装。</p><p><img src="https://resource.tinychen.com/blog/20190523/ykqByqkrMiSm.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> mariadb<br><br><span class="hljs-comment"># 开启mariadb服务</span><br>systemctl start mariadb<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看安装后的mysql版本</span><br>mysql --version<br></code></pre></div></td></tr></table></figure><p>这里可以看到MariaDB，使用的方法还是和之前一样，账号也还是之前的Mysql的账号。</p><p><img src="https://resource.tinychen.com/blog/20190523/SnG8Alx0uzrf.png"></p><h1 id="5、安装过程的一些意外"><a href="#5、安装过程的一些意外" class="headerlink" title="5、安装过程的一些意外"></a>5、安装过程的一些意外</h1><p>小七在安装的时候，启动的过程中出现了报错。</p><p>虽然使用<code>systemctl</code>可以成功开启服务，但是无法顺利登录进去</p><p>使用<code>-l</code>参数查看详细状态</p><p><img src="https://resource.tinychen.com/blog/20190523/bl8knrFMJfNM.png"></p><p>看到这里有两个ERROR，再按照提示输入下列命令升级mysql即可</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysql_upgrade -u root -p<br></code></pre></div></td></tr></table></figure><p>报错的原因应该是因为mysql换为mariadb之后配置信息的链接没有及时更新导致无法正常启动，因此需要upgrade。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是在CentOS7上安装MariaDB服务。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>CentOS配置Python3开发环境</title>
    <link href="https://tinychen.com/20190413-centos-install-python/"/>
    <id>https://tinychen.com/20190413-centos-install-python/</id>
    <published>2019-04-13T07:00:00.000Z</published>
    <updated>2019-04-13T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS7配置Python3.7开发环境</p><span id="more"></span><h1 id="1、下载Python3"><a href="#1、下载Python3" class="headerlink" title="1、下载Python3"></a>1、下载Python3</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz<br><span class="hljs-comment"># 使用wget命令下载官网的tgz安装包</span><br><br>tar -zxvf Python-3.7.3.tgz<br><span class="hljs-comment"># 使用tar命令解压安装包</span><br></code></pre></div></td></tr></table></figure><h1 id="2、安装相关工具"><a href="#2、安装相关工具" class="headerlink" title="2、安装相关工具"></a>2、安装相关工具</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install -y gcc<br><span class="hljs-comment"># 安装gcc编译器</span><br><br>yum -y groupinstall <span class="hljs-string">&quot;Development tools&quot;</span><br><br>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libffi-devel<br><br><span class="hljs-comment"># 安装相对应的插件</span><br></code></pre></div></td></tr></table></figure><h1 id="3、编译安装Python"><a href="#3、编译安装Python" class="headerlink" title="3、编译安装Python"></a>3、编译安装Python</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir /usr/<span class="hljs-built_in">local</span>/python3<br><span class="hljs-comment"># 创建目录给python3</span><br><br><span class="hljs-built_in">cd</span> Python-3.7.3/<br><span class="hljs-comment"># 进入刚刚解压的python安装包目录里面</span><br><br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/python3<br><span class="hljs-comment"># 生成makefile文件，这里的安装目录要设置为刚刚自己新建的目录</span><br><br>make<br><span class="hljs-comment"># 使用make命令编译一波</span><br><br>make <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 检查一下有没有错误</span><br><br>make install<br><span class="hljs-comment"># 进行安装</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190413/a1xLx9B0vC8x.png"></p><p>看到这个就算安装成功啦。</p><h1 id="4、创建软连接"><a href="#4、创建软连接" class="headerlink" title="4、创建软连接"></a>4、创建软连接</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/python3.7 /usr/bin/python3<br><br>ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/pip3 /usr/bin/pip3<br></code></pre></div></td></tr></table></figure><h1 id="5、修改默认版本python和yum"><a href="#5、修改默认版本python和yum" class="headerlink" title="5、修改默认版本python和yum"></a>5、修改默认版本python和yum</h1><p>由于这时候默认的python还是之前内置的2.x版本，所以我们要修改一下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rm /usr/bin/python<br><span class="hljs-comment"># 删除之前的python2的软连接</span><br><br>ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/python3.7 /usr/bin/python<br><span class="hljs-comment"># 新建一个软连接到python</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190413/sK5RfaETWxs7.png"></p><p>由于yum默认使用的是python2，这个时候修改了肯定就无法运行，我们需要把yum的配置文件也修改一下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ll /usr/bin/ | grep python<br><span class="hljs-comment"># 首先我们查看一下python的安装情况</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190413/R76PAUgffUGm.png"></p><p>从图中我们可以看到这台电脑安装了python2.7和python3.7，默认的python是指向3.7的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /usr/bin/yum<br><span class="hljs-comment"># 把第一行的python改成对应的版本，图示为python2.7</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190413/SplfYeu9Mwux.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /usr/libexec/urlgrabber-ext-down<br><span class="hljs-comment"># 这里操作也和上面的一样</span><br></code></pre></div></td></tr></table></figure><p>最后分别输入<code>yum</code>，<code>python</code>，<code>python2</code>，<code>python3</code>，<code>pip</code>等命令检查一下</p><blockquote><p>注意这里的V是大写哦。</p></blockquote><p><img src="https://resource.tinychen.com/blog/20190413/JQjDGIMWudE5.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS7配置Python3.7开发环境&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
    <category term="python" scheme="https://tinychen.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程连接Linux主机超时自动断开</title>
    <link href="https://tinychen.com/20190411-fix-ssh-disconnect/"/>
    <id>https://tinychen.com/20190411-fix-ssh-disconnect/</id>
    <published>2019-04-11T07:00:00.000Z</published>
    <updated>2019-04-11T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用SSH远程连接Linux主机的时候，会因为一段时间没有执行操作，就和主机断开连接，我们可以通过修改主机端的SSHD配置文件来解决这个问题。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br><span class="hljs-comment"># 编辑sshd的配置文件</span><br></code></pre></div></td></tr></table></figure><p>在大概一百多行的位置找到这三个参数，取消掉注释</p><p><img src="https://resource.tinychen.com/image-20200609161121813.png"></p><ul><li><code>TCPKeepAlive</code>是保存TCP连接存活</li><li><code>ClientAliveInterval</code>的意思是服务器每隔一段时间发送一个加密的探活包到客户端，这里的默认单位是秒</li><li><code>ClientAliveCountMax</code>则是当客户端多少次没有响应之后，与服务器断开连接。<strong>注意一般情况下都不会不响应</strong></li></ul><p>那么我们把配置改成上面这样，就可以理解为60秒*30次（30分钟）无响应就断开连接。</p><p>最后我们重启一下服务让修改的配置生效即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl restart sshd.service<br><span class="hljs-comment"># 重启sshd服务让配置生效</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用SSH远程连接Linux主机的时候，会因为一段时间没有执行操作，就和主机断开连接，我们可以通过修改主机端的SSHD配置文件来解决这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
    <category term="ssh" scheme="https://tinychen.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>iperf3安装配置使用踩坑记录</title>
    <link href="https://tinychen.com/20190409-iperf3/"/>
    <id>https://tinychen.com/20190409-iperf3/</id>
    <published>2019-04-09T07:00:00.000Z</published>
    <updated>2021-06-09T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>iperf3是一个开源的多平台测速工具，涵盖了Windows，Android，Linux，iOS，MacOS等主流操作系统。本文以Windows为例记录一下在使用iperf3的过程中踩的一些坑。</p><span id="more"></span><h1 id="1、下载安装iperf3"><a href="#1、下载安装iperf3" class="headerlink" title="1、下载安装iperf3"></a>1、下载安装iperf3</h1><p>iperf3的官网提供了所有平台的下载方法，我们<a href="https://iperf.fr/iperf-download.php">点击这里</a>跳转到官网。</p><p><img src="https://resource.tinychen.com/blog/20190409/nQNMimq33eJR.png"></p><h2 id="windows端"><a href="#windows端" class="headerlink" title="windows端"></a>windows端</h2><p>Windows分为32位和64位的，对应自己的系统版本下载，下载解压完成之后，将解压得到的文件复制到<code>%systemroot%</code>目录下，就能够直接使用了。</p><p><strong>这里需要注意两点：</strong></p><ol><li>Windows的<code>%systemroot%</code>目录是<code>C:\Windows\System32</code></li><li>不管是使用CMD还是Powershell，都必须要以管理员身份运行，否则无法正常使用</li></ol><h2 id="Linux端"><a href="#Linux端" class="headerlink" title="Linux端"></a>Linux端</h2><p>常见的主流Linux发行版（红帽系、debian系、suse系等）都可以直接通过对应的源或者包进行安装，如果是其他的Linux发行版，也可以选择手动安装</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo wget -O <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/libiperf.so.0 https:/</span><span class="hljs-regexp">/iperf.fr/</span>download<span class="hljs-regexp">/ubuntu/</span>libiperf.so.<span class="hljs-number">0</span>_3.<span class="hljs-number">1.3</span><br>sudo wget -O <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/iperf3 https:/</span><span class="hljs-regexp">/iperf.fr/</span>download<span class="hljs-regexp">/ubuntu/i</span>perf3_3.<span class="hljs-number">1.3</span><br>sudo chmod +x <span class="hljs-regexp">/usr/</span>bin/iperf3<br></code></pre></div></td></tr></table></figure><p>如果出现下面这一类的报错，则需要将依赖文件拷贝到<code>/lib</code>目录和<code>/lib64</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">root@tiny-unraid:~# iperf3 --help<br>iperf3: error while loading shared libraries: libiperf.so.0: cannot open shared object file: No such file or directory<br>root@tiny-unraid:~# ldd /usr/bin/iperf3<br>        linux-vdso.so.1 (0x00007ffd35bde000)<br>        libiperf.so.0 =&gt; not found<br>        libc.so.6 =&gt; /lib64/libc.so.6 (0x0000154f00c69000)<br>        /lib64/ld-linux-x86-64.so.2 (0x0000154f00e5e000)<br>        <br>root@tiny-unraid:~# cp /usr/lib/libiperf.so.0 /lib/libiperf.so.0<br>root@tiny-unraid:~# cp /usr/lib/libiperf.so.0 /lib64/libiperf.so.0<br>root@tiny-unraid:~# ldd /usr/bin/iperf3<br>        linux-vdso.so.1 (0x00007ffd36c72000)<br>        libiperf.so.0 =&gt; /lib64/libiperf.so.0 (0x000014dd232e4000)<br>        libc.so.6 =&gt; /lib64/libc.so.6 (0x000014dd230ff000)<br>        libm.so.6 =&gt; /lib64/libm.so.6 (0x000014dd22fb2000)<br>        /lib64/ld-linux-x86-64.so.2 (0x000014dd23516000)<br></code></pre></div></td></tr></table></figure><h1 id="2、运行服务端-server"><a href="#2、运行服务端-server" class="headerlink" title="2、运行服务端(server)"></a>2、运行服务端(server)</h1><p>iperf3是一款c-s软件，即client-server软件，分为客户端和服务端，服务端需要一直运行，客户端才能够正常使用。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-help</span><br><span class="hljs-comment"># 查看所有的操作指令</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190409/XHaoBwr7TWcF.png"></p><h2 id="2-1-运行与退出"><a href="#2-1-运行与退出" class="headerlink" title="2.1 运行与退出"></a>2.1 运行与退出</h2><p>最常见的运行服务端的命令是：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-s</span><br><span class="hljs-comment"># 这里的s就是server的意思</span><br></code></pre></div></td></tr></table></figure><p>这种情况下默认监听的是5201端口</p><p><img src="https://resource.tinychen.com/blog/20190409/bHbTUNIcSMq3.png"></p><p>按下ctrl+c就可以关闭服务端</p><p><img src="https://resource.tinychen.com/blog/20190409/Hclr9E9sAH52.png"></p><p>如果是只运行一次测速就退出，可以这样：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-s</span> <span class="hljs-literal">-1</span><br><span class="hljs-comment"># 运行一次后自动退出服务端</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190409/LOMoKE38VxL7.png"></p><h2 id="2-2-指定监听端口"><a href="#2-2-指定监听端口" class="headerlink" title="2.2 指定监听端口"></a>2.2 指定监听端口</h2><p>如果需要指定特定的监听端口，我们可以使用-p参数，这里的p就是port的意思。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-s</span> <span class="hljs-literal">-p</span> <span class="hljs-number">7777</span><br><span class="hljs-comment"># 手动指定监听端口为7777</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190409/uPi43e35yWrI.png"></p><p>需要注意的是手动指定监听端口的时候不要和其他应用的端口冲突了，否则会无法运行服务或产生服务冲突。</p><h2 id="2-3-守护进程模式"><a href="#2-3-守护进程模式" class="headerlink" title="2.3 守护进程模式"></a>2.3 守护进程模式</h2><p>如果需要服务端在后台运行而不被关闭，可以尝试使用守护进程模式。</p><blockquote><p>Daemon()程序是一直运行的服务端程序，又称为守护进程。通常在系统后台运行，没有控制终端，不与前台交互，Daemon程序一般作为系统服务使用。Daemon是长时间运行的进程，通常在系统启动后就运行，在系统关闭时才结束。一般说Daemon程序在后台运行，是因为它没有控制终端，无法和前台的用户交互。Daemon程序一般都作为服务程序使用，等待客户端程序与它通信。我们也把运行的Daemon程序称作守护进程。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-s</span> <span class="hljs-literal">-D</span><br><span class="hljs-comment"># 注意D一定要大写</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190409/noPLh9RNcmRK.png"></p><p>这个时候iperf3以服务端模式在后台运行，该进程不会轻易被结束运行。</p><p>使用<code>netstat</code>命令可以看到此时5201端口正在被使用。</p><p><img src="https://resource.tinychen.com/blog/20190409/qKSPQKwbj5Rj.png"></p><p>如果需要关闭的话，我们可以使用<code>taskkill</code>指令。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">tasklist | findstr iperf3<br><span class="hljs-comment"># Windows下的CMD无法使用grep命令可以使用findstr命令来代替</span><br></code></pre></div></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">taskkill /PID <span class="hljs-number">9492</span> /F<br><span class="hljs-comment"># 这里的9492要改成查询到的对应的PID</span><br><span class="hljs-comment"># 由于是守护进程，所以需要强制终止</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190409/9r2YeUdqAv47.png"></p><p>其他的一些指令大家可以自己继续尝试，小七就不再赘述。</p><h1 id="3、运行客户端-Client"><a href="#3、运行客户端-Client" class="headerlink" title="3、运行客户端(Client)"></a>3、运行客户端(Client)</h1><p><strong>运行客户端的前提是有服务端在运行且我们知道服务端的IP并能正常访问服务端（有时候可能会被防火墙或其他杀软拦截）。</strong></p><h2 id="3-1-简单测试"><a href="#3-1-简单测试" class="headerlink" title="3.1 简单测试"></a>3.1 简单测试</h2><p>因为外部设备所限，接下来小七同时在本机上运行服务端和客户端进行测速示例。</p><p>最简单的使用方法就是：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-c</span> ServerhostIP<br><span class="hljs-comment"># hostIP为服务端的IP地址</span><br></code></pre></div></td></tr></table></figure><p>由于这里小七是在本机上运行的服务端，因此使用本机的IP地址或者localhost或者127.0.0.1都可以。</p><p><img src="https://resource.tinychen.com/blog/20190409/QkC2whdCSVOB.png"></p><p><img src="https://resource.tinychen.com/blog/20190409/5dHJYsVz93X4.png"></p><p><img src="https://resource.tinychen.com/blog/20190409/vr4B6CFYQajn.png"></p><p>主要的几个参数列这里解释一下，<code>Intervel</code>指的是时间间隔，<code>Transfer</code>则是对应时间段里面传输的数据总量，<code>Bandwidth</code>则是该时间段内的平均带宽。</p><h2 id="3-2-自定义测试时间和输出格式"><a href="#3-2-自定义测试时间和输出格式" class="headerlink" title="3.2 自定义测试时间和输出格式"></a>3.2 自定义测试时间和输出格式</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-c</span> localhost <span class="hljs-literal">-i</span> <span class="hljs-number">2</span> <span class="hljs-literal">-t</span> <span class="hljs-number">30</span> -<span class="hljs-literal">-logfile</span> output.log<br></code></pre></div></td></tr></table></figure><p>对于这一条指令，我们对后面的参数进行逐个解析。</p><ul><li><code>-i 2</code>的作用是每2秒输出一次测试结果，数字2可以按照需要改成不同的数字</li><li><code>-t 30</code>的作用是连续测试30s的时间</li><li><code>--logfile output.log</code>的作用是将测试的结果输出到当前目录的<code>output.log</code>文件里面，需要注意的是此时不会在控制台上输出测试信息</li></ul><p><img src="https://resource.tinychen.com/blog/20190409/H69YrIAxyBBd.png"></p><p><img src="https://resource.tinychen.com/blog/20190409/RydkOKlCMPHQ.png"></p><p><img src="https://resource.tinychen.com/blog/20190409/Rk9qKNdtFHGC.png"></p><p>▲打开log文件可以看到对应的测试数据都保存在里面了</p><p><strong>如果需要指定路径输出json文件，我们只需要使用<code>-J</code>并在文件名前面指定路径即可：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">iperf3 <span class="hljs-literal">-c</span> localhost <span class="hljs-literal">-i</span> <span class="hljs-number">2</span> <span class="hljs-literal">-t</span> <span class="hljs-number">30</span> <span class="hljs-literal">-J</span> -<span class="hljs-literal">-logfile</span> C:\Users\Mr7th\Desktop\output.log<br><span class="hljs-comment"># 以Json格式将测试结果文件输出到桌面</span><br></code></pre></div></td></tr></table></figure><p><strong>下面为截取的部分json文件</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;start&quot;</span>:&#123;<br><span class="hljs-attr">&quot;connected&quot;</span>:[&#123;<br><span class="hljs-attr">&quot;socket&quot;</span>:<span class="hljs-number">5</span>,<br><span class="hljs-attr">&quot;local_host&quot;</span>:<span class="hljs-string">&quot;::1&quot;</span>,<br><span class="hljs-attr">&quot;local_port&quot;</span>:<span class="hljs-number">7013</span>,<br><span class="hljs-attr">&quot;remote_host&quot;</span>:<span class="hljs-string">&quot;::1&quot;</span>,<br><span class="hljs-attr">&quot;remote_port&quot;</span>:<span class="hljs-number">5201</span><br>&#125;],<br><span class="hljs-attr">&quot;version&quot;</span>:<span class="hljs-string">&quot;iperf 3.1.3&quot;</span>,<br><span class="hljs-attr">&quot;system_info&quot;</span>:<span class="hljs-string">&quot;CYGWIN_NT-10.0 Tiny-Surface 2.5.1(0.297/5/3) 2016-04-21 22:14 x86_64&quot;</span>,<br><span class="hljs-attr">&quot;timestamp&quot;</span>:&#123;<br><span class="hljs-attr">&quot;time&quot;</span>:<span class="hljs-string">&quot;Tue, 09 Apr 2019 11:40:34 GMT&quot;</span>,<br><span class="hljs-attr">&quot;timesecs&quot;</span>:<span class="hljs-number">1554810034</span><br>&#125;,<br><span class="hljs-attr">&quot;connecting_to&quot;</span>:&#123;<br><span class="hljs-attr">&quot;host&quot;</span>:<span class="hljs-string">&quot;localhost&quot;</span>,<br><span class="hljs-attr">&quot;port&quot;</span>:<span class="hljs-number">5201</span><br>&#125;,<br><span class="hljs-attr">&quot;cookie&quot;</span>:<span class="hljs-string">&quot;Tiny-Surface.1554810034.839053.017f3&quot;</span>,<br><span class="hljs-attr">&quot;tcp_mss_default&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;test_start&quot;</span>:&#123;<br><span class="hljs-attr">&quot;protocol&quot;</span>:<span class="hljs-string">&quot;TCP&quot;</span>,<br><span class="hljs-attr">&quot;num_streams&quot;</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;blksize&quot;</span>:<span class="hljs-number">131072</span>,<br><span class="hljs-attr">&quot;omit&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;duration&quot;</span>:<span class="hljs-number">30</span>,<br><span class="hljs-attr">&quot;bytes&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;blocks&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;reverse&quot;</span>:<span class="hljs-number">0</span><br>&#125;<br>&#125;,<br><span class="hljs-attr">&quot;intervals&quot;</span>:[&#123;<br><span class="hljs-attr">&quot;streams&quot;</span>:[&#123;<br><span class="hljs-attr">&quot;socket&quot;</span>:<span class="hljs-number">5</span>,<br><span class="hljs-attr">&quot;start&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;end&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;seconds&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;bytes&quot;</span>:<span class="hljs-number">1222770688</span>,<br><span class="hljs-attr">&quot;bits_per_second&quot;</span>:<span class="hljs-number">4.890547e+09</span>,<br><span class="hljs-attr">&quot;omitted&quot;</span>:<span class="hljs-literal">false</span><br>&#125;],<br><span class="hljs-attr">&quot;sum&quot;</span>:&#123;<br><span class="hljs-attr">&quot;start&quot;</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;end&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;seconds&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;bytes&quot;</span>:<span class="hljs-number">1222770688</span>,<br><span class="hljs-attr">&quot;bits_per_second&quot;</span>:<span class="hljs-number">4.890547e+09</span>,<br><span class="hljs-attr">&quot;omitted&quot;</span>:<span class="hljs-literal">false</span><br>&#125;<br>&#125;, &#123;<br><span class="hljs-attr">&quot;streams&quot;</span>:[&#123;<br><span class="hljs-attr">&quot;socket&quot;</span>:<span class="hljs-number">5</span>,<br><span class="hljs-attr">&quot;start&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;end&quot;</span>:<span class="hljs-number">4.000079</span>,<br><span class="hljs-attr">&quot;seconds&quot;</span>:<span class="hljs-number">1.999860</span>,<br><span class="hljs-attr">&quot;bytes&quot;</span>:<span class="hljs-number">1384644608</span>,<br><span class="hljs-attr">&quot;bits_per_second&quot;</span>:<span class="hljs-number">5.538966e+09</span>,<br><span class="hljs-attr">&quot;omitted&quot;</span>:<span class="hljs-literal">false</span><br>&#125;],<br><span class="hljs-attr">&quot;sum&quot;</span>:&#123;<br><span class="hljs-attr">&quot;start&quot;</span>:<span class="hljs-number">2.000219</span>,<br><span class="hljs-attr">&quot;end&quot;</span>:<span class="hljs-number">4.000079</span>,<br><span class="hljs-attr">&quot;seconds&quot;</span>:<span class="hljs-number">1.999860</span>,<br><span class="hljs-attr">&quot;bytes&quot;</span>:<span class="hljs-number">1384644608</span>,<br><span class="hljs-attr">&quot;bits_per_second&quot;</span>:<span class="hljs-number">5.538966e+09</span>,<br><span class="hljs-attr">&quot;omitted&quot;</span>:<span class="hljs-literal">false</span><br>&#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="3-3-使用反转模式-Reverse"><a href="#3-3-使用反转模式-Reverse" class="headerlink" title="3.3 使用反转模式(Reverse)"></a>3.3 使用反转模式(Reverse)</h2><p>默认情况下我们进行测试，<strong>都是客户端发送数据，服务器端接收数据，</strong>这种情况下相当于只对上行带宽进行了测试，如果我们需要检测下行带宽，只需要使用<code>-R</code>命令，即<strong>可变为客户端接收，服务器端发送。</strong></p><p>这里我们采用手机作为服务器端进行测试。</p><p>▼默认情况下，电脑作为客户端，主要是发送数据（上行带宽）。</p><p><img src="https://resource.tinychen.com/blog/20190409/ujRMzwrweyXA.png"></p><p>▼使用反转模式(Reverse)，此时电脑仍然是客户端，只不过变成了接收数据（下行带宽）。</p><p><img src="https://resource.tinychen.com/blog/20190409/1W8KpaYYEBWO.png"></p><p>其他的一些指令，大家感兴趣的可以<a href="https://iperf.fr/iperf-doc.php">点击这里</a>查看官方的说明文档。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;iperf3是一个开源的多平台测速工具，涵盖了Windows，Android，Linux，iOS，MacOS等主流操作系统。本文以Windows为例记录一下在使用iperf3的过程中踩的一些坑。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>阿里云轻量级应用服务器CentOS系统Apache配置Https</title>
    <link href="https://tinychen.com/20190407-aliyun-centos-apache-https/"/>
    <id>https://tinychen.com/20190407-aliyun-centos-apache-https/</id>
    <published>2019-04-07T07:00:00.000Z</published>
    <updated>2019-04-07T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下给Hexo博客配置https域名过程中踩的各种坑。</p><span id="more"></span><h1 id="1、申请证书"><a href="#1、申请证书" class="headerlink" title="1、申请证书"></a>1、申请证书</h1><p>SSL的证书基本可以分为申请的和自己创建的，阿里云上面有免费的可以申请，本着多一事不如少一事的原则（其实是太菜了），果断选择阿里云的SSL证书申请。</p><p>▼点击<strong>SSL证书（应用安全）</strong></p><p><img src="https://resource.tinychen.com/blog/20190407/V86YoJAf1O9h.png"></p><p>▼选择免费的那个。</p><p><img src="https://resource.tinychen.com/blog/20190407/PCNH2aBNwo5T.png"></p><p><img src="https://resource.tinychen.com/blog/20190407/vaezJD4QVjtk.png"></p><p>▼填写一些申请的信息。</p><p><img src="https://resource.tinychen.com/blog/20190407/8SPnmycdcig1.png"></p><p>▼然后需要进行信息验证，一般都是DNS验证，如果是在阿里云购买的域名，会自动添加DNS解析验证，其他的就需要到域名管理里面手动添加了。</p><p><img src="https://resource.tinychen.com/blog/20190407/zsLtXQPJy8JQ.png"></p><p><img src="https://resource.tinychen.com/blog/20190407/W9J2DCU9jI3s.png"></p><p>▼提交成功之后耐心等待一下，很快就会申请通过。</p><p><img src="https://resource.tinychen.com/blog/20190407/wKz3bxESUmvW.png"></p><h1 id="2、安装Apache和openssl"><a href="#2、安装Apache和openssl" class="headerlink" title="2、安装Apache和openssl"></a>2、安装Apache和openssl</h1><h2 id="2-1-安装Apache"><a href="#2-1-安装Apache" class="headerlink" title="2.1 安装Apache"></a>2.1 安装Apache</h2><p>由于是在apache服务器上面搭建的博客，所以我的服务器已经安装好了apache，输入下列命令可以查看apache的版本信息。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">httpd -v<br><span class="hljs-comment"># 输入该命令查看apache的版本信息</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190408/dPXnVqobh7Er.png"></p><p>如果没有安装apache的话，可以选择手动下载安装包安装或者是使用yum进行安装，不同的安装方式生成的文件目录会有一些不太一样，这对后面的SSL证书配置有着很大的影响。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install httpd<br><span class="hljs-comment"># 使用yum安装apache，这样安装的httpd的默认目录是在/etc/httpd文件夹里面</span><br></code></pre></div></td></tr></table></figure><p>接着再安装一些必要的工具和扩展</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum -y install gcc* make* apr apr-util pcre apr-devel apr-util-devel  pcre-devel<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql<br></code></pre></div></td></tr></table></figure><h2 id="2-2-安装openssl"><a href="#2-2-安装openssl" class="headerlink" title="2.2 安装openssl"></a>2.2 安装openssl</h2><p>接着是使用yum安装openssl模块。如果有特殊需求的，可以到官网下载openssl自行编译，在这里只需要使用yum进行安装即可。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> openssl openssl-devel<br></code></pre></div></td></tr></table></figure><p>查看openssl版本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">openssl version -a<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190408/QTIlgANAT4sn.png"></p><p>确认安装好apache和openssl之后，我们进入下一步。</p><h1 id="3、上传证书到服务器"><a href="#3、上传证书到服务器" class="headerlink" title="3、上传证书到服务器"></a>3、上传证书到服务器</h1><p>阿里云那边的证书申请好之后，我们下载证书到自己的电脑里面，解压可以得到类似这样子的三个文件。</p><p><img src="https://resource.tinychen.com/blog/20190408/TW5JLvUOCKDc.png"></p><p>图中的是默认的名字，改不改都可以，不要搞混了就行，接下来我们把它们上传到服务器中的apache的安装目录下面，给他们专门新建一个cert文件夹。</p><p>首先我们在服务器中给他新建一个目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir /etc/httpd/cert<br></code></pre></div></td></tr></table></figure><p>然后把本机的证书上传到服务器，我们可以直接使用scp命令上传文件，也可以使用Xshell中的Xftp来传输，还有其他的各种方式也都可以，反正传上去了就行。</p><p>我这里使用scp命令为例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># scp命令的最基本用法是：</span><br>scp fileLocation username@hostIP: DestinationLocation<br><span class="hljs-comment"># 以在桌面传送一个文件到/etc/httpd/cert目录为例（此时我是在桌面直接打开gitbash）</span><br>scp 1692315_tiny777.com.key root@47.107.188.168:/etc/httpd/cert<br></code></pre></div></td></tr></table></figure><h1 id="4、开启443端口"><a href="#4、开启443端口" class="headerlink" title="4、开启443端口"></a>4、开启443端口</h1><p>https默认是使用443端口进行监听，虽然阿里云默认是开启了443端口的，但是为了保险起见，我们还是确认一下。</p><p>点开阿里云的控制台，点击轻量级应用服务器。如下图所示：</p><p><img src="https://resource.tinychen.com/blog/20190408/GqIHot50UgPD.png"></p><h1 id="5、配置ssl"><a href="#5、配置ssl" class="headerlink" title="5、配置ssl"></a>5、配置ssl</h1><h2 id="5-1-启用ssl模块支持"><a href="#5-1-启用ssl模块支持" class="headerlink" title="5.1 启用ssl模块支持"></a>5.1 启用ssl模块支持</h2><p>这里就是比较坑的地方了，<a href="https://help.aliyun.com/knowledge_detail/95493.html?spm=5176.2020520154.cas.26.15e456a71TICkj">阿里云的帮助文档</a>说的可能是别的方式安装的apache服务器，和我的情况不太一样。但是思路却还是正确的。</p><p><img src="https://resource.tinychen.com/blog/20190408/L2RWziR8m2kT.png"></p><p>这两步，第一步的主要作用是开启apache的ssl模块支持，第二步则是Include代码ssl的配置文件使其生效。</p><p>使用yum安装的apache有一些不太一样，相对应的配置文件都在<code>/etc/httpd/conf.modules.d</code>这个目录下面，我们接下来主要会用到的就是这个<code>00-ssl.conf</code>和<code>00-base.conf</code>文件。</p><p><img src="https://resource.tinychen.com/blog/20190408/x6jUOPJ0dTks.png"></p><p>打开<code>00-ssl.conf</code>就能看到对应阿里云教程里面的第一步操作，启用ssl模块支持。</p><p><img src="https://resource.tinychen.com/blog/20190408/Vzy8oMhQxVrQ.png"></p><p>接下来我们在<code>/etc/httpd/conf/httpd.conf</code>这个文件里面，可以找到这一行（在56行左右的位置）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Include conf.modules.d/*.conf<br></code></pre></div></td></tr></table></figure><p>这一行代码的意思就是Include了整个<code>conf.modules.d</code>文件夹里面的所有<code>conf</code>后缀的文件，这个<code>00-ssl.conf</code>文件当然也不例外。</p><h2 id="5-2-配置ssl"><a href="#5-2-配置ssl" class="headerlink" title="5.2 配置ssl"></a>5.2 配置ssl</h2><p>完成上面的两步操作之后，我们就要配置ssl的配置文件了。我们再看阿里云的文档。</p><p><img src="https://resource.tinychen.com/blog/20190408/pj1wWPbyUbdv.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 SSL 协议支持协议，去掉不安全的协议</span><br>SSLProtocol all -SSLv2 -SSLv3<br><span class="hljs-comment"># 修改加密套件如下</span><br>SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM<br>SSLHonorCipherOrder on<br><span class="hljs-comment"># 证书公钥配置</span><br>SSLCertificateFile cert/a_public.crt<br><span class="hljs-comment"># 证书私钥配置</span><br>SSLCertificateKeyFile cert/a.key<br><span class="hljs-comment"># 证书链配置，如果该属性开头有 &#x27;#&#x27;字符，请删除掉</span><br>SSLCertificateChainFile cert/a_chain.crt<br></code></pre></div></td></tr></table></figure><p>还是一样的问题，路径不太正确，我们这里找到的文件路径是<code>/etc/httpd/conf.d/ssl.conf</code></p><p><img src="https://resource.tinychen.com/blog/20190408/E3iYqx2ohyuF.png"></p><p>在更改配置文件之前，为了保险起见，咱们先备份一下，以备不时之需。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp ssl.conf ssl.conf.bak<br></code></pre></div></td></tr></table></figure><p>这里再给出我自己的<code>ssl.conf</code>文件和大家交流一下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Listen 443<br>&lt;VirtualHost *:443&gt;<br><br>DocumentRoot <span class="hljs-string">&quot;/var/www/html&quot;</span><br>ServerName tiny777.com<br>ServerAlias www.tiny777.com<br><br><br>SSLEngine on<br><br>SSLProtocol all -SSLv2 -SSLv3<br><br>SSLCertificateFile /etc/httpd/cert/1692315_tiny777.com_public.crt<br><br>SSLCertificateKeyFile /etc/httpd/cert/1692315_tiny777.com.key<br><br>SSLCertificateChainFile /etc/httpd/cert/1692315_tiny777.com_chain.crt<br><br>DirectoryIndex index.html index.htm index.php<br>&lt;Directory <span class="hljs-string">&quot;/var/www/html&quot;</span>&gt;<br>     Options Indexes FollowSymLinks<br>     AllowOverride None<br>     Require all granted<br>&lt;/Directory&gt;<br>&lt;/VirtualHost&gt;<br></code></pre></div></td></tr></table></figure><p>理论上这个时候重启apache服务已经可以输入https加上我们的域名来开启https访问了，但是这个时候的https和http相互独立，默认是访问http的域名，我们需要开启http域名自动跳转到https域名。</p><h2 id="5-3-自动跳转到https"><a href="#5-3-自动跳转到https" class="headerlink" title="5.3 自动跳转到https"></a>5.3 自动跳转到https</h2><p>保险起见，我们坚持一下自动跳转需要用到的rewrite模块是否开启了，还是在之前说的<code>/etc/httpd/conf.d/00-base.conf</code>文件里面查找一下rewrite模块，确定已经启用。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">LoadModule rewrite_module modules/mod_rewrite.so<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190408/DWjiOTE3pJKJ.png"></p><p>接下来我们定位到这个目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/httpd/conf<br></code></pre></div></td></tr></table></figure><p>更改<code>httpd.conf</code>文件，在最后面加入这几行代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">RewriteEngine on<br>RewriteCond %&#123;SERVER_PORT&#125; !^443$<br>RewriteRule ^.*$ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [L,R=301]<br></code></pre></div></td></tr></table></figure><p>最后我们重启apache服务，就能开启域名的https访问了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl restart httpd.service<br></code></pre></div></td></tr></table></figure><p>最终效果如下：</p><p><img src="https://resource.tinychen.com/blog/20190408/a4AX9fsON750.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下给Hexo博客配置https域名过程中踩的各种坑。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>删除Windows中的3D对象文件夹</title>
    <link href="https://tinychen.com/20190405-delete-3d-objects/"/>
    <id>https://tinychen.com/20190405-delete-3d-objects/</id>
    <published>2019-04-05T07:00:00.000Z</published>
    <updated>2019-04-05T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改注册表来删除资源管理器里面的3D Objects文件夹</p><span id="more"></span><p><img src="https://resource.tinychen.com/blog/20190405/qqnM6yndvNRQ.png"></p><p>这个文件夹用不到而且很占位置，把下面的代码复制到文本文件里面并且更改后缀为reg文件即可通过修改注册表来对其删除。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[-<span class="hljs-type">HKEY_LOCAL_MACHINE</span>\<span class="hljs-type">SOFTWARE</span>\<span class="hljs-type">Microsoft</span>\<span class="hljs-type">Windows</span>\<span class="hljs-type">CurrentVersion</span>\<span class="hljs-type">Explorer</span>\<span class="hljs-type">MyComputer</span>\<span class="hljs-type">NameSpace</span>\&#123;<span class="hljs-number">0</span><span class="hljs-type">DB7E03F</span>-<span class="hljs-type">FC29</span>-<span class="hljs-number">4</span><span class="hljs-type">DC6</span>-<span class="hljs-number">9020</span>-<span class="hljs-type">FF41B59E513A</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>想要恢复的话，把上面代码的注册表路径最前面的减号“-”去掉就可以了。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-type">HKEY_LOCAL_MACHINE</span>\<span class="hljs-type">SOFTWARE</span>\<span class="hljs-type">Microsoft</span>\<span class="hljs-type">Windows</span>\<span class="hljs-type">CurrentVersion</span>\<span class="hljs-type">Explorer</span>\<span class="hljs-type">MyComputer</span>\<span class="hljs-type">NameSpace</span>\&#123;<span class="hljs-number">0</span><span class="hljs-type">DB7E03F</span>-<span class="hljs-type">FC29</span>-<span class="hljs-number">4</span><span class="hljs-type">DC6</span>-<span class="hljs-number">9020</span>-<span class="hljs-type">FF41B59E513A</span>&#125;]<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190405/2XMvHmzj04Bj.png"></p><p>▲如图所示我将其命名为Add3DObject.reg和Delete3DObject.reg，然后直接双击运行。</p><p>运行的时候会有警告，点击确定就可以了。</p><p><img src="https://resource.tinychen.com/blog/20190405/qevWnkLMd8mL.png"></p><p>最后的效果：</p><p><img src="https://resource.tinychen.com/blog/20190405/2oLETyobHzb9.png"></p><p><img src="https://resource.tinychen.com/blog/20190405/0sYdgrzcHpyu.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过修改注册表来删除资源管理器里面的3D Objects文件夹&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>直通线和交叉线的制作</title>
    <link href="https://tinychen.com/20190404-make-cat6-cable/"/>
    <id>https://tinychen.com/20190404-make-cat6-cable/</id>
    <published>2019-04-04T07:00:00.000Z</published>
    <updated>2019-04-04T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用六类网线和六类水晶头制作直通线和交叉线，多图预警。</p><span id="more"></span><h1 id="1、工具准备"><a href="#1、工具准备" class="headerlink" title="1、工具准备"></a>1、工具准备</h1><h2 id="1-1-网线和水晶头"><a href="#1-1-网线和水晶头" class="headerlink" title="1.1 网线和水晶头"></a>1.1 网线和水晶头</h2><p>首先我们需要准备原材料：网线（双绞线）和水晶头，这里使用的是250Mhz的六类非屏蔽双绞线（UTP）和六类的水晶头。</p><p><img src="https://resource.tinychen.com/blog/20190404/oAxtD9n9I7fT.png"></p><p>仔细观察线缆外面的塑料皮，我们能够看到一些基本信息，其中</p><ul><li>250指的是电缆里面的电流是250Mhz</li><li>Category 6 则是我们常说的6类网线</li><li>U/UTP则是 Unshielded Twisted Pair的缩写，意为非屏蔽双绞线</li></ul><p><img src="https://resource.tinychen.com/blog/20190404/NKpEQIYaHDSO.png"></p><h2 id="1-2-制作工具"><a href="#1-2-制作工具" class="headerlink" title="1.2 制作工具"></a>1.2 制作工具</h2><p>制作工具最少应该包括<strong>剥线刀、尖嘴钳、压线钳、测线仪</strong>四样工具。但是有些压线钳也有刀片能完成剥线刀和尖嘴钳的功能，测线仪如果没有的话，可以直接接到电脑上看能不能正常使用。</p><p><img src="https://resource.tinychen.com/blog/20190404/3vJeDfRKm9Ba.jpg"></p><h1 id="2、剥皮理线"><a href="#2、剥皮理线" class="headerlink" title="2、剥皮理线"></a>2、剥皮理线</h1><h2 id="2-1-剥皮"><a href="#2-1-剥皮" class="headerlink" title="2.1 剥皮"></a>2.1 剥皮</h2><p>首先我们使用剥线刀拨开双绞线的外皮，注意六类的双绞线比较粗，剥皮的时候注意不要太用力把里面的线芯伤到了。</p><p><img src="https://resource.tinychen.com/blog/20190404/gNtcKM3JYVae.jpg"></p><p>剥开外皮之后，我们可以看到六类双绞线里面有四股线共八根，分别是橙、绿、蓝、棕四种纯色和对应的白色相间颜色，每两根相互绞在一起，用来相互抵消电流的磁效应。<strong>这就是双绞线名称的由来。</strong></p><p>中间还有十字绝缘骨架和棉芯，其中棉芯是双绞线内部加强抗拉能力，用来防拉断的，而十字绝缘骨架则是六类线中新加入的，六类之前的双绞线都没有（包括超五类），其作用和棉芯基本相同。</p><p><img src="https://resource.tinychen.com/blog/20190404/uSWJjwVvWztT.jpg"></p><h2 id="2-2-T568A和T568B类线序"><a href="#2-2-T568A和T568B类线序" class="headerlink" title="2.2 T568A和T568B类线序"></a>2.2 T568A和T568B类线序</h2><p>我们按照从左到右的顺序给八根线依次标号为1~8号线，T568A类线序和T568B类线序对应的不同之处就是1236这四根线的线序不一样，我们看下表做个对比。</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th></tr></thead><tbody><tr><td align="center">T568A</td><td align="center"><strong>绿白</strong></td><td align="center"><strong>绿</strong></td><td align="center"><strong>橙白</strong></td><td align="center">蓝</td><td align="center">蓝白</td><td align="center"><strong>橙</strong></td><td align="center">棕白</td><td align="center">棕</td></tr><tr><td align="center">T568B</td><td align="center"><strong>橙白</strong></td><td align="center"><strong>橙</strong></td><td align="center"><strong>绿白</strong></td><td align="center">蓝</td><td align="center">蓝白</td><td align="center"><strong>绿</strong></td><td align="center">棕白</td><td align="center">棕</td></tr></tbody></table><p>在这里我们就能够看出来，A类线序和B类线序的区别就在于<strong>橙色和绿色这两股线的对应位置进行了对调。</strong></p><h2 id="2-3-直通线和交叉线"><a href="#2-3-直通线和交叉线" class="headerlink" title="2.3 直通线和交叉线"></a>2.3 直通线和交叉线</h2><p><strong>一般来说，我们默认两端的线序都是T568B类的为直通线，而一端为A类，另一端为B类的为交叉线。</strong></p><p>那么直通线和交叉线的区别在哪里呢？</p><p>在用途上，<strong>直通线用于连接不同种的设备，</strong>例如连接电脑和交换机，交换机和路由器等，<strong>而交叉线用于连接同种设备，</strong>例如电脑和电脑之间。</p><p>那么为什么会有这两种线呢？</p><p>首先我们需要知道，如果速率不超过百兆，即100Mbit，只需要双绞线中的1236四根线正常工作即可，其中两根负责接收/输入，两根负责发送/输出。</p><table><thead><tr><th align="center">线号</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">输出数据(+)</td></tr><tr><td align="center">2</td><td align="center">输出数据(-)</td></tr><tr><td align="center">3</td><td align="center">输入数据(+)</td></tr><tr><td align="center">6</td><td align="center">输入数据(-)</td></tr></tbody></table><p>那么在同种设备连接通信的时候，我们只需要把一端的输出输入线序对调，即可完成同种设备之间的连接通信。</p><p>但是对于现在的网络设备来说，<strong>已经没有必要再使用交叉线了，</strong>因为现在的网卡基本都支持<strong>自动翻转</strong>功能，能将自动将输入/输出端进行对调，而不需要我们对双绞线的线序进行更改，因此现在基本都是<strong>统一使用直通线</strong>（两端都是B类线序，制作方便，不容易搞混）。</p><h1 id="3、制作水晶头"><a href="#3、制作水晶头" class="headerlink" title="3、制作水晶头"></a>3、制作水晶头</h1><h2 id="3-1-屏蔽和非屏蔽水晶头"><a href="#3-1-屏蔽和非屏蔽水晶头" class="headerlink" title="3.1 屏蔽和非屏蔽水晶头"></a>3.1 屏蔽和非屏蔽水晶头</h2><p><strong>水晶头按照是否屏蔽可以分为屏蔽水晶头和非屏蔽水晶头，</strong>一般来说我们日常接触到的应该都是非屏蔽水晶头。</p><p>屏蔽水晶头最明显的特征就是是全金属或者部分金属，因为需要和屏蔽线缆的屏蔽层接触完成屏蔽工作。所以屏蔽水晶头更贵一些，能够用在屏蔽线（STP）和非屏蔽线（UTP）上面，而非屏蔽水晶头只能用在非屏蔽线上，用在屏蔽线上的话会使屏蔽线失去屏蔽效果。</p><h2 id="3-2-什么是8P8C"><a href="#3-2-什么是8P8C" class="headerlink" title="3.2 什么是8P8C"></a>3.2 什么是8P8C</h2><p><strong>8P8C（8 position 8 contact）</strong>的意思是8个位置（Position，指8个凹槽）、8个触点（Contact，指8个金属接点），正好和双绞线里面的8根线相对应，一根线一个槽一个触点。</p><p>但是在比较久之前，一些廉价的网线会缩减非1236号线的线芯（使用廉价材料），有的甚至直接不放4578号线，一根网线里面只有1236这四根线，这些都是和现在的主流千兆网速所不兼容的遗留产物，大家选购网线的时候还是要买可靠的大牌子或者是从可靠的途径购买，切忌贪小便宜误了大事儿。</p><h2 id="3-3-超五类和六类水晶头"><a href="#3-3-超五类和六类水晶头" class="headerlink" title="3.3 超五类和六类水晶头"></a>3.3 超五类和六类水晶头</h2><p>同样是非屏蔽水晶头的情况下，超五类的水晶头和六类水晶头看起来是一样的，唯一不同的地方就是，内部的金属触点的排列方式，由于六类线的纤芯比超五类的要更粗，所以六类水晶头的内部金属触点是上下交错排列，而超五类的是水平一字排开。</p><h2 id="3-4-制作水晶头"><a href="#3-4-制作水晶头" class="headerlink" title="3.4 制作水晶头"></a>3.4 制作水晶头</h2><p>我们把上一步剥开的网线按照顺序排列好，然后用尖嘴钳把线头剪齐。</p><p>▽如下图所示为T568B类线序</p><p><img src="https://resource.tinychen.com/blog/20190404/ym1DO7HAUl3E.jpg"></p><p>▽如下图所示则为T568A类线序</p><p><img src="https://resource.tinychen.com/blog/20190404/KGrONeuk8f3u.jpg"></p><p>我们以T568B类线序为例，左手拿双绞线，右手拿水晶头，注意金属触点是面向自己，否则线序会做反。</p><p><img src="https://resource.tinychen.com/blog/20190404/I3tnm4xjkjv9.jpg"></p><p>将双绞线插入水晶头，并且顶到最里面，注意插进去的时候不要把线序弄乱了，可以查看一下顶部确定每根线都顶到了最里面并且线序是正确的。</p><p><img src="https://resource.tinychen.com/blog/20190404/junzbx9ykyKm.png"></p><p>将水晶头放入压线钳，压线钳也和网线一样分为五类六类七类等，高等级的可以压制低等级的水晶头（七类可以压制六类，六类不一定能压制七类）。</p><p>水晶头压制前一定要确认好线序，因为一旦压下去了，发现线序错了或者有部分线没有接触好，只能把水晶头剪了重新制作。</p><p>这里我使用的是七类的压线钳，压制六类线完全没有问题。</p><p><img src="https://resource.tinychen.com/blog/20190404/t8UUyo9ynA43.png"></p><p>将水晶头插入到最里面。</p><p><img src="https://resource.tinychen.com/blog/20190404/NOy8hVOu3hA6.png"></p><p>使用压线钳之前，先把压线钳压到最底部，然后会自动回弹，这时再插入水晶头，再压制，只有压到底部压好了，压线钳才会自动回弹，这时候就能确定水晶头已经是做好了。</p><p><img src="https://resource.tinychen.com/blog/20190404/6j4P9kcD5Goj.png"></p><p><img src="https://resource.tinychen.com/blog/20190404/1P4Ie1JeRzHd.png"></p><h1 id="4、测线"><a href="#4、测线" class="headerlink" title="4、测线"></a>4、测线</h1><p>最后需要使用测线仪进行测线检测是否正常。一般的测线仪能进行单端测线和两端测线。测线仪上面标着的1-8号灯分别对应1-8号线，G对应的是屏蔽线的屏蔽层。</p><p><img src="https://resource.tinychen.com/blog/20190404/u9sQ61VXz2Ny.png"></p><p>如果是制作的直通线，两端的灯同时按照1-8的顺序亮起就是正常的，而如果做的是交叉线，则测线仪的主端（发射端）还是会按照1-8的顺序亮灯，小端（接收端）则亮灯的顺序有所不同，具体参考下表。</p><table><thead><tr><th align="center">主端（发射端）</th><th align="center">小端（接收端）</th></tr></thead><tbody><tr><td align="center"><strong>1</strong></td><td align="center"><strong>3</strong></td></tr><tr><td align="center"><strong>2</strong></td><td align="center"><strong>6</strong></td></tr><tr><td align="center"><strong>3</strong></td><td align="center"><strong>1</strong></td></tr><tr><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">5</td></tr><tr><td align="center"><strong>6</strong></td><td align="center"><strong>2</strong></td></tr><tr><td align="center">7</td><td align="center">7</td></tr><tr><td align="center">8</td><td align="center">8</td></tr></tbody></table><p>测线通过之后，网线就算是制作好了，可以愉快地上网啦。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用六类网线和六类水晶头制作直通线和交叉线，多图预警。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>小米MIX2刷谷歌相机</title>
    <link href="https://tinychen.com/20190401-mix2-install-google-camera/"/>
    <id>https://tinychen.com/20190401-mix2-install-google-camera/</id>
    <published>2019-04-01T07:00:00.000Z</published>
    <updated>2019-04-01T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下小米MIX2从MIUI稳定版→解锁BL→刷入MIUI开发版→获取ROOT权限→安装Google相机的全过程。</p><span id="more"></span><hr><h1 id="1、解锁BL"><a href="#1、解锁BL" class="headerlink" title="1、解锁BL"></a>1、解锁BL</h1><p>小米MIX2有BL锁，因此需要先去官网申请解锁BL</p><p><a href="http://www.miui.com/unlock/index.html">http://www.miui.com/unlock/index.html</a></p><p><img src="https://resource.tinychen.com/blog/20190401/CTYv4vLRzyt2.png"></p><p>在一系列骚操作获得了解锁资格之后，下载解锁工具，按照指示来进行解锁。</p><p><strong>需要注意的是，这会清除掉手机上的所有数据！</strong></p><p><strong>需要注意的是，这会清除掉手机上的所有数据！</strong></p><p><strong>需要注意的是，这会清除掉手机上的所有数据！</strong></p><p>解锁BL之后没有那么安全了，因此需要将这台手机和小米账号进行绑定，之后每次重置手机都需要输入对应绑定的小米账号的密码，因此这里设置的小米账号的密码一定要记住了。</p><p><img src="https://resource.tinychen.com/blog/20190401/JPzcrWEYR0Mv.png"></p><p>下载的解锁BL工具包中有驱动和解锁工具，建议先进入BL模式，然后安装驱动，再进行解锁BL操作。</p><p><img src="https://resource.tinychen.com/blog/20190401/i38y7fckMtWA.png"></p><p>解锁BL成功之后，手机会重置，需要进行重新设置，相当于刚买回手机的时候。这时候随便设置一下就可以了，因为待会儿还要刷入开发版，还要重新设置一次。</p><p><img src="https://resource.tinychen.com/blog/20190401/Qh8DjnTBqaCH.png"></p><h1 id="2、刷入MIUI开发版"><a href="#2、刷入MIUI开发版" class="headerlink" title="2、刷入MIUI开发版"></a>2、刷入MIUI开发版</h1><h2 id="2-1-下载刷机包和工具"><a href="#2-1-下载刷机包和工具" class="headerlink" title="2.1 下载刷机包和工具"></a>2.1 下载刷机包和工具</h2><p>首先前往官网下载开发版的刷机包和线刷工具，使用线刷刷入。</p><p><a href="http://www.miui.com/shuaji-393.html">http://www.miui.com/shuaji-393.html</a></p><p><img src="https://resource.tinychen.com/blog/20190401/IGkpu1GCz2Ns.png"></p><h2 id="2-2-进入Fastboot模式"><a href="#2-2-进入Fastboot模式" class="headerlink" title="2.2 进入Fastboot模式"></a>2.2 进入Fastboot模式</h2><p>关机状态下，同时按住 <strong>音量下+电源键</strong> 进入Fastboot模式将手机USB连接电脑。</p><h2 id="2-3-刷入刷机包"><a href="#2-3-刷入刷机包" class="headerlink" title="2.3 刷入刷机包"></a>2.3 刷入刷机包</h2><p>打开刷机工具，这里提示需要安装一些驱动，点击Install安装即可。</p><p><img src="https://resource.tinychen.com/blog/20190401/4LXwNKgQXP57.png"></p><p>对下载完的tar压缩包进行二次解压，最后得到的文件夹目录应该类似下面的图片。</p><p><img src="https://resource.tinychen.com/blog/20190401/2VXTPmIJjoTA.png"></p><p>打开刷机工具选择解压生成的<strong>文件夹</strong>，<strong>右下角要手动选择clean all</strong>而不是clean all and lock，lock会再次对BL上锁，此时之前的解锁操作就白忙活了。</p><p><img src="https://resource.tinychen.com/blog/20190401/Xzgx0UIVE0hw.png"></p><p>确认上面的几处位置都没有问题之后，我们点击flash进行刷机，此时需要耐心等待一小会儿。</p><p><img src="https://resource.tinychen.com/blog/20190401/3MKyPnxWND4l.png"></p><p>刷机成功之后手机会自动重启进入设置界面，这次我们可以认真按照自己的需要进行设置。</p><p><img src="https://resource.tinychen.com/blog/20190401/02R9uof2J2HC.png"></p><h1 id="3、获取ROOT权限"><a href="#3、获取ROOT权限" class="headerlink" title="3、获取ROOT权限"></a>3、获取ROOT权限</h1><p>MIUI的开发版可以很方便的获取ROOT权限，虽然说是阉割版的ROOT，但是也够谷歌相机使用了。</p><p>我们打开手机内置的<strong>安全中心</strong>，选择<strong>应用管理</strong>，点击<strong>权限</strong>，选择<strong>开启ROOT权限</strong>，这时候会<strong>下载ROOT包并且重启安装</strong>。</p><h1 id="4、安装谷歌全家桶"><a href="#4、安装谷歌全家桶" class="headerlink" title="4、安装谷歌全家桶"></a>4、安装谷歌全家桶</h1><p>首先保证手机可以正常访问Google（需要科学上网），然后进入应用商店（推荐安智），搜索谷歌安装器下载安装谷歌全家桶。</p><p><img src="https://resource.tinychen.com/blog/20190402/9nT6Dk9G1p5F.png"></p><p>安装好全家桶之后，登录谷歌账户，确认能正常访问GooglePlay商店，即可进入下一步。</p><p><img src="https://resource.tinychen.com/blog/20190402/n2NH1PG8U90k.png"></p><h1 id="5、安装终端模拟器"><a href="#5、安装终端模拟器" class="headerlink" title="5、安装终端模拟器"></a>5、安装终端模拟器</h1><p>安装终端模拟器（下载链接在后面），在窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">su<br></code></pre></div></td></tr></table></figure><p>这时系统会提示终端模拟器获取ROOT权限被拒绝，我们需要打开安全中心的权限管理→ROOT权限管理，手动给它授予ROOT权限。</p><p><img src="https://resource.tinychen.com/blog/20190402/WxRhOlyCYPaO.png"></p><p>此时我们再打开终端模拟器，再次输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">su<br><span class="hljs-comment">#切换到超级用户模式</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setprop persist.camera.HAL3.enabled 1<br><span class="hljs-comment">#开启HAL3的支持</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">setprop persist.camera.eis.enable 1<br><span class="hljs-comment">#开启EIS的支持</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">getprop persist.camera.HAL3.enabled<br><span class="hljs-comment">#返回1则成功，否则重启手机再次尝试</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190402/t9Q6puW97zNb.png"></p><h1 id="6、安装谷歌相机"><a href="#6、安装谷歌相机" class="headerlink" title="6、安装谷歌相机"></a>6、安装谷歌相机</h1><p>谷歌相机和终端模拟器的下载地址在这里（MIX2版）</p><p>链接：<a href="https://pan.baidu.com/s/1T-4_eXkiiFSwX03axsppZA">https://pan.baidu.com/s/1T-4_eXkiiFSwX03axsppZA</a><br>提取码：eo6r </p><p>下载后直接安装即可，打开设置微调一下HDR，就能体验谷歌相机的变态级夜景模式和HDR+了。</p><p><img src="https://resource.tinychen.com/blog/20190402/MppdAoWQVNb2.png"></p><h1 id="7、效果对比"><a href="#7、效果对比" class="headerlink" title="7、效果对比"></a>7、效果对比</h1><p>上面的是小米自带的相机，下面的是谷歌相机，都打开了夜景模式，谷歌的还多了一个HDR+，小米的貌似不能同时使用夜景增强和HDR。</p><p><img src="https://resource.tinychen.com/blog/20190402/0ssxRW014Ail.jpg"></p><p><img src="https://resource.tinychen.com/blog/20190402/XEfFwPdC9kUM.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下小米MIX2从MIUI稳定版→解锁BL→刷入MIUI开发版→获取ROOT权限→安装Google相机的全过程。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>100条计算机网络基本知识（下）</title>
    <link href="https://tinychen.com/20190331-base-know-of-cn-2/"/>
    <id>https://tinychen.com/20190331-base-know-of-cn-2/</id>
    <published>2019-03-31T07:00:00.000Z</published>
    <updated>2019-03-31T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一百条关于计算机网络的基本知识。由于太长了，分成了上下两篇，每篇50条。</p><span id="more"></span><hr><h1 id="51、当在不同的平台（如UNIX和Windows）之间传输文件时，可以应用什么协议？"><a href="#51、当在不同的平台（如UNIX和Windows）之间传输文件时，可以应用什么协议？" class="headerlink" title="51、当在不同的平台（如UNIX和Windows）之间传输文件时，可以应用什么协议？"></a>51、当在不同的平台（如UNIX和Windows）之间传输文件时，可以应用什么协议？</h1><p>使用FTP（文件传输协议（英文：File Transfer Protocol））协议在不同的服务器之间进行文件传输是可能的，因为FTP是平台无关的。</p><h1 id="52、默认网关是什么？"><a href="#52、默认网关是什么？" class="headerlink" title="52、默认网关是什么？"></a>52、默认网关是什么？</h1><p>默认网关（Default Gateway）提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p><h1 id="53、保护网络的一种方法是使用密码。什么可以被认为是好的密码？"><a href="#53、保护网络的一种方法是使用密码。什么可以被认为是好的密码？" class="headerlink" title="53、保护网络的一种方法是使用密码。什么可以被认为是好的密码？"></a>53、保护网络的一种方法是使用密码。什么可以被认为是好的密码？</h1><p>良好的密码不仅由字母组成，还包括字母和数字的组合，结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期、姓名、收藏夹等等。</p><h1 id="54、UTP电缆的正确终止率是多少？"><a href="#54、UTP电缆的正确终止率是多少？" class="headerlink" title="54、UTP电缆的正确终止率是多少？"></a>54、UTP电缆的正确终止率是多少？</h1><p>非屏蔽双绞线的正常终止是100欧姆。</p><h1 id="55、什么是-netstat"><a href="#55、什么是-netstat" class="headerlink" title="55、什么是 netstat?"></a>55、什么是 netstat?</h1><p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p><p><img src="https://resource.tinychen.com/blog/20190401/r4ctRRwWxGvn.png"></p><h1 id="56、C-类网络中的网络-ID-数量是多少"><a href="#56、C-类网络中的网络-ID-数量是多少" class="headerlink" title="56、C 类网络中的网络 ID 数量是多少?"></a>56、C 类网络中的网络 ID 数量是多少?</h1><p><strong>C类网段计算：</strong><br>根据规定，C类地址的网络标识必须以“110”开头。那么其网段数应该为110XXXXX．XXXXXXXX．XXXXXXXX．YYYYYYYY即后面有21位数字，因为是二进制数，所以网段数应该为：221，即2的21次幂个网段，等于2097152，所以B类网络可以有2097152个网段。<br><strong>C类主机数计算：</strong><br>因为后面8位是主机标识，所以主机数应该是28，即2的8次幂=256，扣除两个保留地址后，主机最大数应该是254个。</p><blockquote><p>全为0和全为1的为保留地址。</p></blockquote><h1 id="57、使用长于规定长度的电缆时会发生什么"><a href="#57、使用长于规定长度的电缆时会发生什么" class="headerlink" title="57、使用长于规定长度的电缆时会发生什么?"></a>57、使用长于规定长度的电缆时会发生什么?</h1><p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p><h1 id="58、什么常见的软件问题可能导致网络缺陷"><a href="#58、什么常见的软件问题可能导致网络缺陷" class="headerlink" title="58、什么常见的软件问题可能导致网络缺陷?"></a>58、什么常见的软件问题可能导致网络缺陷?</h1><p>软件相关问题可以是以下任何一种或其组合：</p><ul><li>客户端服务器问题</li><li>应用程序冲突</li><li>配置错误</li><li>协议不匹配</li><li>安全问题</li><li>用户政策和权利问题</li></ul><h1 id="59、什么是-ICMP"><a href="#59、什么是-ICMP" class="headerlink" title="59、什么是 ICMP?"></a>59、什么是 ICMP?</h1><p><strong>ICMP 是（Internet Control Message Protocol）Internet控制报文协议。</strong>它为 TCP/IP 协议栈内的协议提供消息传递和通信。<strong>这也是管理由 PING 等网络工具使用的错误信息的协议。</strong></p><h1 id="60、什么是-Ping"><a href="#60、什么是-Ping" class="headerlink" title="60、什么是 Ping?"></a>60、什么是 Ping?</h1><p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其 IP 地址或设备名称 (如计算机名称)ping 设备。</p><p><img src="https://resource.tinychen.com/blog/20190401/RR0Esq6TkdFn.png"></p><p><img src="https://resource.tinychen.com/blog/20190401/llu9CBELQBgj.png"></p><h1 id="61、什么是点对点（P2P）？"><a href="#61、什么是点对点（P2P）？" class="headerlink" title="61、什么是点对点（P2P）？"></a>61、什么是点对点（P2P）？</h1><p>对等网络（Peer-to-peer networking）或对等计算（Peer-to-peer computing），其可以定义为：网络的参与者共享他们所拥有的一部分硬件资源（处理能力、存储能力、网络连接能力、打印机等），这些共享资源通过网络提供服务和内容，能被其它对等节点（Peer）直接访问而无需经过中间实体。在此网络中的参与者既是资源、服务和内容的提供者（Server），又是资源、服务和内容的获取者（Client）  。</p><p><strong>该网络上的所有PC都是单独的工作站/服务器。</strong></p><h1 id="62、什么是DNS？"><a href="#62、什么是DNS？" class="headerlink" title="62、什么是DNS？"></a>62、什么是DNS？</h1><p><strong>域名系统（英文：Domain Name System，缩写：DNS）</strong>，该网络上的所有PC都是单独的工作站。</p><h1 id="63、光纤与其他介质有什么优势？"><a href="#63、光纤与其他介质有什么优势？" class="headerlink" title="63、光纤与其他介质有什么优势？"></a>63、光纤与其他介质有什么优势？</h1><p>光纤的一个主要优点是不太容易收到电气干扰（使用二氧化硅作为介质传导光信号），它还支持更高的带宽，意味着可以发送和接收更多的数据，长距离信号降级也非常小。</p><h1 id="64、集线器和交换机有什么区别？"><a href="#64、集线器和交换机有什么区别？" class="headerlink" title="64、集线器和交换机有什么区别？"></a>64、集线器和交换机有什么区别？</h1><p><strong>集线器中所有的端口为同一个冲突域，而交换机中每个端口都是一个单独的冲突域。</strong></p><p>集线器充当多端口中继器，然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期由高流量时。</p><h1 id="65、Windows-RRAS服务支持的不同网络协议是什么？"><a href="#65、Windows-RRAS服务支持的不同网络协议是什么？" class="headerlink" title="65、Windows RRAS服务支持的不同网络协议是什么？"></a>65、Windows RRAS服务支持的不同网络协议是什么？</h1><p><strong>路由和远程访问服务器（Routing and Remote Access Service）</strong>支持三种主要的网络协议：NetBEUI，TCP/IP和IPX。</p><blockquote><p>NetBEUI，即NetBios Enhanced User Interface，或NetBios增强用户接口。它是NetBIOS协议的增强版本，曾被许多操作系统采用，例如Windows for Workgroup、Win 9x系列、Windows NT等。NETBEUI是为IBM开发的非路由协议，用于携带NETBIOS通信。</p></blockquote><blockquote><p>IPX（Internetwork Packet Exchange protocol，互联网分组交换协议），IPX协议与IP协议是两种不同的网络层协议，它们的路由协议也不一样，IPX的路由协议不像IP的路由协议那样丰富，所以设置起来比较简单。但IPX协议在以太网上运行时必须指定封装形式。</p></blockquote><h1 id="66、ABC三类网络中的最大网络和主机是什么？"><a href="#66、ABC三类网络中的最大网络和主机是什么？" class="headerlink" title="66、ABC三类网络中的最大网络和主机是什么？"></a>66、ABC三类网络中的最大网络和主机是什么？</h1><table><thead><tr><th align="center">网络类别</th><th align="center">可能的网络</th><th align="center">最大主机数</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">126</td><td align="center">16,777,214(2的24次方减2)</td></tr><tr><td align="center">B</td><td align="center">16,384</td><td align="center">65,534（2的16次方减2）</td></tr><tr><td align="center">C</td><td align="center">2,097,152</td><td align="center">254（2的8次方减2）</td></tr></tbody></table><blockquote><p>结合35题和56题的表格和解答数据不难算出上表中的数据。</p></blockquote><h1 id="67、直通电缆的标准颜色顺序是什么？"><a href="#67、直通电缆的标准颜色顺序是什么？" class="headerlink" title="67、直通电缆的标准颜色顺序是什么？"></a>67、直通电缆的标准颜色顺序是什么？</h1><p>一般采用T568B类标准，具体线序为：橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</p><p><img src="https://resource.tinychen.com/blog/20190401/Y1pStXvaXSGH.png"></p><h1 id="68、什么协议属于TCP-IP协议栈的应用层？"><a href="#68、什么协议属于TCP-IP协议栈的应用层？" class="headerlink" title="68、什么协议属于TCP/IP协议栈的应用层？"></a>68、什么协议属于TCP/IP协议栈的应用层？</h1><p>以下是TCP/IP应用层协议：FTP,TFTP,Telnet和SMTP。</p><h1 id="69、可否不使用集线器或路由器而直接连接两台电脑进行文件共享？"><a href="#69、可否不使用集线器或路由器而直接连接两台电脑进行文件共享？" class="headerlink" title="69、可否不使用集线器或路由器而直接连接两台电脑进行文件共享？"></a>69、可否不使用集线器或路由器而直接连接两台电脑进行文件共享？</h1><p>可以，使用交叉型电缆直接连接两台电脑的网卡即可。此时一条交叉型电缆的两头的数据发送和接收的引脚对调。</p><h1 id="70、什么是ipconfig？"><a href="#70、什么是ipconfig？" class="headerlink" title="70、什么是ipconfig？"></a>70、什么是ipconfig？</h1><p>ipconfig是一个常用于识别网络上计算机的地址信息的实用程序，它可以显示MAC地址、IP地址、子网掩码等各种信息。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ipconfig -<span class="hljs-built_in">help</span><br><br>Error: unrecognized or incomplete <span class="hljs-built_in">command</span> line.<br><br>USAGE:<br>    ipconfig [/allcompartments] [/? | /all |<br>                                 /renew [adapter] | /release [adapter] |<br>                                 /renew6 [adapter] | /release6 [adapter] |<br>                                 /flushdns | /displaydns | /registerdns |<br>                                 /showclassid adapter |<br>                                 /setclassid adapter [classid] |<br>                                 /showclassid6 adapter |<br>                                 /setclassid6 adapter [classid] ]<br><br><span class="hljs-built_in">where</span><br>    adapter             Connection name<br>                       (wildcard characters * and ? allowed, see examples)<br><br>    Options:<br>       /?               Display this <span class="hljs-built_in">help</span> message<br>       /all             Display full configuration information.<br>       /release         Release the IPv4 address <span class="hljs-keyword">for</span> the specified adapter.<br>       /release6        Release the IPv6 address <span class="hljs-keyword">for</span> the specified adapter.<br>       /renew           Renew the IPv4 address <span class="hljs-keyword">for</span> the specified adapter.<br>       /renew6          Renew the IPv6 address <span class="hljs-keyword">for</span> the specified adapter.<br>       /flushdns        Purges the DNS Resolver cache.<br>       /registerdns     Refreshes all DHCP leases and re-registers DNS names<br>       /displaydns      Display the contents of the DNS Resolver Cache.<br>       /showclassid     Displays all the dhcp class IDs allowed <span class="hljs-keyword">for</span> adapter.<br>       /setclassid      Modifies the dhcp class id.<br>       /showclassid6    Displays all the IPv6 DHCP class IDs allowed <span class="hljs-keyword">for</span> adapter.<br>       /setclassid6     Modifies the IPv6 DHCP class id.<br><br><br>The default is to display only the IP address, subnet mask and<br>default gateway <span class="hljs-keyword">for</span> each adapter bound to TCP/IP.<br><br>For Release and Renew, <span class="hljs-keyword">if</span> no adapter name is specified, <span class="hljs-keyword">then</span> the IP address<br>leases <span class="hljs-keyword">for</span> all adapters bound to TCP/IP will be released or renewed.<br><br>For Setclassid and Setclassid6, <span class="hljs-keyword">if</span> no ClassId is specified, <span class="hljs-keyword">then</span> the ClassId is removed.<br><br>Examples:<br>    &gt; ipconfig                       ... Show information<br>    &gt; ipconfig /all                  ... Show detailed information<br>    &gt; ipconfig /renew                ... renew all adapters<br>    &gt; ipconfig /renew EL*            ... renew any connection that has its<br>                                         name starting with EL<br>    &gt; ipconfig /release *Con*        ... release all matching connections,<br>                                         eg. <span class="hljs-string">&quot;Wired Ethernet Connection 1&quot;</span> or<br>                                             <span class="hljs-string">&quot;Wired Ethernet Connection 2&quot;</span><br>    &gt; ipconfig /allcompartments      ... Show information about all<br>                                         compartments<br>    &gt; ipconfig /allcompartments /all ... Show detailed information about all<br>                                         compartments<br><br><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/blog/20190401/FL1q9HMnO1Bz.png"></p><h1 id="71、直通和交叉型电缆有什么区别？"><a href="#71、直通和交叉型电缆有什么区别？" class="headerlink" title="71、直通和交叉型电缆有什么区别？"></a>71、直通和交叉型电缆有什么区别？</h1><p><strong>物理上</strong>，直通型电缆两头的线序相同（国内一般均为T568B类接法），而交叉型电缆两头的线序不同，接收端和发射端对调（国内一般是一头为T568A另一头为T568B）。</p><p><strong>用途上</strong>，直通型电缆连接<strong>不同类型设备</strong>，如电脑和交换机之间的连接；交叉型电缆连接同类型设备，如电脑和电脑直连。</p><blockquote><p>现在的新型网卡基本都支持自动翻转功能，能自动识别翻转接收端和发射端的线序，因此普遍都使用T568B类线序的直通型电缆来连接各种设备。</p></blockquote><h1 id="72、什么是客户端-服务端？"><a href="#72、什么是客户端-服务端？" class="headerlink" title="72、什么是客户端/服务端？"></a>72、什么是客户端/服务端？</h1><p>客户端/服务端是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件等。客户端是指访问服务器的工作站。</p><h1 id="73、描述网络。"><a href="#73、描述网络。" class="headerlink" title="73、描述网络。"></a>73、描述网络。</h1><p>网络是指用于数据通信的计算机和外围设备之间的互连，可以使用有线电缆或通过无线链路进行网络连接。</p><h1 id="74、将NIC卡从一台PC移动到另一台PC时，MAC地址是否也被转移？"><a href="#74、将NIC卡从一台PC移动到另一台PC时，MAC地址是否也被转移？" class="headerlink" title="74、将NIC卡从一台PC移动到另一台PC时，MAC地址是否也被转移？"></a>74、将NIC卡从一台PC移动到另一台PC时，MAC地址是否也被转移？</h1><p>是的，因为MAC地址时硬连线到NIC电路而不是PC，这也意味着当NIC卡被另一个替换时，PC可以具有不同的MAC地址。</p><h1 id="75、解释集群支持。"><a href="#75、解释集群支持。" class="headerlink" title="75、解释集群支持。"></a>75、解释集群支持。</h1><p>集群支持时指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的时在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p><h1 id="76、在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"><a href="#76、在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？" class="headerlink" title="76、在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"></a>76、在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</h1><p>必须在所有服务器和工作站上安装防病毒程序，以确保安全。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p><h1 id="77、描述以太网。"><a href="#77、描述以太网。" class="headerlink" title="77、描述以太网。"></a>77、描述以太网。</h1><p>以太网是当今使用的流行网络技术之一。它是在20实际70年代初开发的，并且基于IEEE中规定的规范。以太网在局域网中使用。</p><h1 id="78、实现环形拓扑有什么缺点？"><a href="#78、实现环形拓扑有什么缺点？" class="headerlink" title="78、实现环形拓扑有什么缺点？"></a>78、实现环形拓扑有什么缺点？</h1><p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p><p><img src="https://resource.tinychen.com/blog/20190401/0xh3gwAPQEGm.png"></p><h1 id="79、CSMA-CD和CSMA-CA有什么区别？"><a href="#79、CSMA-CD和CSMA-CA有什么区别？" class="headerlink" title="79、CSMA/CD和CSMA/CA有什么区别？"></a>79、CSMA/CD和CSMA/CA有什么区别？</h1><p><strong>CSMA/CD：带有冲突检测的载波监听多路访问，可以检测冲突，但无法“避免”</strong></p><p><strong>CSMA/CA：带有冲突避免的载波监听多路访问，发送包的同时不能检测到信道上有无冲突，只能尽量“避免”</strong></p><blockquote><p>CSMA/CD（Carrier Sense Multiple Access with Collision Detection）即带冲突检测的载波监听多路访问技术(载波监听多点接入/碰撞检测)。</p><p><strong>CSMA/CD控制方式的优点是：</strong>原理比较简单，技术上易实现，网络中各工作站处于平等地位 ，不需集中控制，不提供优先级控制。<strong>但在网络负载增大时，发送时间增长，发送效率急剧下降。</strong></p><p><strong>CSMA/CD应用在 OSI 的第二层数据链路层。</strong></p><p>CSMA/CA（Carrier Sense Multiple Access with Collision Avoidance）即载波侦听多路访问/冲突避免。</p><p>工作原理是：首先检测信道是否有使用，如果检测出信道空闲，则等待一段随机时间后，才送出数据。接收端如果正确收到此帧，则经过一段时间间隔后，向发送端发送确认帧ACK。发送端收到ACK帧，确定数据正确传输，在经历一段时间间隔后，会出现一段空闲时间。</p></blockquote><h1 id="80、什么是SMTP？"><a href="#80、什么是SMTP？" class="headerlink" title="80、什么是SMTP？"></a>80、什么是SMTP？</h1><p><strong>简单邮件传输协议 (Simple Mail Transfer Protocol, SMTP)</strong> ，该协议处理所有内部邮件，并在TCP/IP协议栈上提供必要的邮件传递服务。</p><h1 id="81、什么是组播路由？"><a href="#81、什么是组播路由？" class="headerlink" title="81、什么是组播路由？"></a>81、什么是组播路由？</h1><p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p><h1 id="82、加密在网络上的重要性是什么？"><a href="#82、加密在网络上的重要性是什么？" class="headerlink" title="82、加密在网络上的重要性是什么？"></a>82、加密在网络上的重要性是什么？</h1><p>加密是将信息转换成用户不可读的代码的过程，然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p><h1 id="83、如何安排和显示IP地址？"><a href="#83、如何安排和显示IP地址？" class="headerlink" title="83、如何安排和显示IP地址？"></a>83、如何安排和显示IP地址？</h1><p>IP地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是192.168.1.1</p><h1 id="84、解释认证的重要性。"><a href="#84、解释认证的重要性。" class="headerlink" title="84、解释认证的重要性。"></a>84、解释认证的重要性。</h1><p>认证是在用户登录网络之前验证用户凭证的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p><h1 id="85、隧道模式是什么意思？"><a href="#85、隧道模式是什么意思？" class="headerlink" title="85、隧道模式是什么意思？"></a>85、隧道模式是什么意思？</h1><p>这是一种数据交换模式，其中两个通信计算机本身不适用IPSec。相反，将LAN连接到中转网络的网关创建了一个使用IPSec协议来保护通过它的所有通信的虚拟隧道。</p><blockquote><p>IPSec（英语：Internet Protocol Security，缩写为IPsec），是一个协议包，透过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族（一些相互关联的协议的集合）。</p></blockquote><h1 id="86、建立WAN链路涉及的不同技术有哪些？"><a href="#86、建立WAN链路涉及的不同技术有哪些？" class="headerlink" title="86、建立WAN链路涉及的不同技术有哪些？"></a>86、建立WAN链路涉及的不同技术有哪些？</h1><ul><li>模拟连接——使用常规电话线；</li><li>数字连接——使用数字电话线；</li><li>交换连接——使用发送方和接收方之间的多组链接来移动数据。</li></ul><h1 id="87、网状拓扑的一个优点是什么？"><a href="#87、网状拓扑的一个优点是什么？" class="headerlink" title="87、网状拓扑的一个优点是什么？"></a>87、网状拓扑的一个优点是什么？</h1><p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是容错率最高的网络拓扑之一。</p><p><img src="https://resource.tinychen.com/blog/20190401/MDPPIJUJaQ4X.png"></p><h1 id="88、在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"><a href="#88、在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？" class="headerlink" title="88、在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"></a>88、在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</h1><p>大部分网络由硬件组成，这些领域的问题可能包括硬盘故障，NIC损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p><h1 id="89、可以做什么来修复信号衰减问题？"><a href="#89、可以做什么来修复信号衰减问题？" class="headerlink" title="89、可以做什么来修复信号衰减问题？"></a>89、可以做什么来修复信号衰减问题？</h1><p>处理这种问题的常见方法时使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p><h1 id="90、动态主机配置协议（DHCP）如何协助网络管理？"><a href="#90、动态主机配置协议（DHCP）如何协助网络管理？" class="headerlink" title="90、动态主机配置协议（DHCP）如何协助网络管理？"></a>90、动态主机配置协议（DHCP）如何协助网络管理？</h1><p>网络管理员不必访问每台客户端计算机来配置静态IP地址，而是可以应用DHCP来创建称为可以动态分配给客户端的范围的IP地址池。</p><h1 id="91、解释用户配置文件？"><a href="#91、解释用户配置文件？" class="headerlink" title="91、解释用户配置文件？"></a>91、解释用户配置文件？</h1><p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户至于组中的配置文件。</p><h1 id="92、什么是Sneakernet？"><a href="#92、什么是Sneakernet？" class="headerlink" title="92、什么是Sneakernet？"></a>92、什么是Sneakernet？</h1><p>Sneakernet被认为是最早的联网形式，其中使用可移动介质（如磁盘、磁带）物理传输数据。</p><blockquote><p>Sneakernet是一个非正式术语，用于通过将磁带，软盘，光盘，USB闪存驱动器或外部硬盘驱动器等媒体从一台计算机移动到另一台计算机来传输电子信息。而不是通过计算机网络传输信息。</p></blockquote><h1 id="93、IEEE在计算机网络中的作用是什么？"><a href="#93、IEEE在计算机网络中的作用是什么？" class="headerlink" title="93、IEEE在计算机网络中的作用是什么？"></a>93、IEEE在计算机网络中的作用是什么？</h1><p>电气和电子工程师协会（IEEE，全称是Institute of Electrical and Electronics Engineers）是一个国际性的电子技术与信息科学工程师的协会。</p><p>IEEE制定了许多关于计算机网络的协议和标准，如802.3等。</p><h1 id="94、TCP-IP-Internet层下有哪些协议？"><a href="#94、TCP-IP-Internet层下有哪些协议？" class="headerlink" title="94、TCP/IP Internet层下有哪些协议？"></a>94、TCP/IP Internet层下有哪些协议？</h1><p>该层管理的协议有4种。分别是ICMP,IGMP,IP和ARP。</p><h1 id="95、谈到网络，什么是权限？"><a href="#95、谈到网络，什么是权限？" class="headerlink" title="95、谈到网络，什么是权限？"></a>95、谈到网络，什么是权限？</h1><p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p><h1 id="96、建立VLAN的一个基本要求是什么？"><a href="#96、建立VLAN的一个基本要求是什么？" class="headerlink" title="96、建立VLAN的一个基本要求是什么？"></a>96、建立VLAN的一个基本要求是什么？</h1><p>需要一个支持VLAN的网络设备。因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的VLAN有助于在交换机级别创建单独的广播域，它用于安全目的。</p><h1 id="97、什么是IPv6？"><a href="#97、什么是IPv6？" class="headerlink" title="97、什么是IPv6？"></a>97、什么是IPv6？</h1><p><strong>IPv6是英文“Internet Protocol Version 6”（互联网协议第6版）的缩写，</strong>是互联网工程任务组（IETF）设计的用于替代IPv4的下一代IP协议，能够克服IPv4地址数量不足的缺陷。</p><h1 id="98、什么是RSA算法？"><a href="#98、什么是RSA算法？" class="headerlink" title="98、什么是RSA算法？"></a>98、什么是RSA算法？</h1><p>RSA是Rivest-Shamir-Adleman算法的缩写。它是目前最常用的公钥加密算法。</p><h1 id="99、什么是网状拓扑？"><a href="#99、什么是网状拓扑？" class="headerlink" title="99、什么是网状拓扑？"></a>99、什么是网状拓扑？</h1><p>网状拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p><h1 id="100、100Base-FX网络的最大段长度是多少？"><a href="#100、100Base-FX网络的最大段长度是多少？" class="headerlink" title="100、100Base-FX网络的最大段长度是多少？"></a>100、100Base-FX网络的最大段长度是多少？</h1><p>使用100Base-FX的网段的最大允许长度为412米，整个网络的最大长度为5公里。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一百条关于计算机网络的基本知识。由于太长了，分成了上下两篇，每篇50条。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>100条计算机网络基本知识（上）</title>
    <link href="https://tinychen.com/20190330-base-know-of-cn-1/"/>
    <id>https://tinychen.com/20190330-base-know-of-cn-1/</id>
    <published>2019-03-30T07:00:00.000Z</published>
    <updated>2019-03-30T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一百条关于计算机网络的基本知识。由于太长了，分成了上下两篇，每篇50条。</p><span id="more"></span><hr><h1 id="1、什么是链接？"><a href="#1、什么是链接？" class="headerlink" title="1、什么是链接？"></a>1、什么是链接？</h1><p>链接是指两个设备之间的连接，它包括用于一个设备能够与另一个设备通信的<strong>电缆类型和协议</strong>。</p><h1 id="2、OSI参考模型的层次是什么？"><a href="#2、OSI参考模型的层次是什么？" class="headerlink" title="2、OSI参考模型的层次是什么？"></a>2、OSI参考模型的层次是什么？</h1><p><strong>7个层次。</strong></p><p>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p><p><img src="https://resource.tinychen.com/blog/20190331/vSREYNUUfGi6.png"></p><h1 id="3、什么是骨干网？"><a href="#3、什么是骨干网？" class="headerlink" title="3、什么是骨干网？"></a>3、什么是骨干网？</h1><p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p><h1 id="4、什么是LAN？"><a href="#4、什么是LAN？" class="headerlink" title="4、什么是LAN？"></a>4、什么是LAN？</h1><p><strong>LAN是Local Area Network的缩写，即局域网。</strong>它是指计算机与位于小物理位置（一般是方圆几千米以内）的其他网络设备之间的连接。</p><h1 id="5、什么是节点？"><a href="#5、什么是节点？" class="headerlink" title="5、什么是节点？"></a>5、什么是节点？</h1><p>节点是指发生连接的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p><h1 id="6、什么是路由器？"><a href="#6、什么是路由器？" class="headerlink" title="6、什么是路由器？"></a>6、什么是路由器？</h1><p>路由器可以连接两个或更多的网段。这些是在其路由表中存储信息的智能网络设备，例如路径、跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。</p><p><strong>路由器在OSI网络层（三层）运行。</strong></p><h1 id="7、什么是点对点连接？"><a href="#7、什么是点对点连接？" class="headerlink" title="7、什么是点对点连接？"></a>7、什么是点对点连接？</h1><p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的NIC卡之外，点对点连接不需要任何其他设备。</p><h1 id="8、什么是匿名FTP？"><a href="#8、什么是匿名FTP？" class="headerlink" title="8、什么是匿名FTP？"></a>8、什么是匿名FTP？</h1><p>匿名FTP（<strong>F</strong>ile <strong>T</strong>ransfer <strong>P</strong>rotocol）是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p><h1 id="9、什么是子网掩码"><a href="#9、什么是子网掩码" class="headerlink" title="9、什么是子网掩码?"></a>9、什么是子网掩码?</h1><p>子网掩码与IP地址组合，以识别两个部分：扩展网络地址和主机地址。像IP地址一样，子网掩码由32位组成。</p><p>详情可以了解一下CIDR。</p><h1 id="10、UTP电缆允许的最大长度是多少？"><a href="#10、UTP电缆允许的最大长度是多少？" class="headerlink" title="10、UTP电缆允许的最大长度是多少？"></a>10、UTP电缆允许的最大长度是多少？</h1><p>UTP（<strong>U</strong>nshielded <strong>T</strong>wisted <strong>P</strong>air，非屏蔽双绞线）电缆的单段具有90到100米的允许长度，这种限制可以通过使用中继器和开关来克服。</p><h1 id="11、什么是数据封装？"><a href="#11、什么是数据封装？" class="headerlink" title="11、什么是数据封装？"></a>11、什么是数据封装？</h1><p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p><h1 id="12、描述网络拓扑。"><a href="#12、描述网络拓扑。" class="headerlink" title="12、描述网络拓扑。"></a>12、描述网络拓扑。</h1><p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p><h1 id="13、什么是VPN？"><a href="#13、什么是VPN？" class="headerlink" title="13、什么是VPN？"></a>13、什么是VPN？</h1><p>VPN意味着虚拟专用网络（<strong>V</strong>irtual <strong>P</strong>rivate <strong>N</strong>etwork），这种技术允许通过网络（如Internet）创建安全通道。例如，VPN允许您建立到远程服务器的安全拨号连接。</p><h1 id="14、简要描述NAT。"><a href="#14、简要描述NAT。" class="headerlink" title="14、简要描述NAT。"></a>14、简要描述NAT。</h1><p>NAT是网络地址转换（<strong>N</strong>etwork <strong>A</strong>ddress <strong>T</strong>ranslation）。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到Internet的单一连接。</p><h1 id="15、OSI网络层的工作是什么？"><a href="#15、OSI网络层的工作是什么？" class="headerlink" title="15、OSI网络层的工作是什么？"></a>15、OSI网络层的工作是什么？</h1><p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p><h1 id="16、网络拓扑如何影响您在建立网络时的决策？"><a href="#16、网络拓扑如何影响您在建立网络时的决策？" class="headerlink" title="16、网络拓扑如何影响您在建立网络时的决策？"></a>16、网络拓扑如何影响您在建立网络时的决策？</h1><p>网络拓扑决定了互联设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p><h1 id="17、什么是RIP"><a href="#17、什么是RIP" class="headerlink" title="17、什么是RIP?"></a>17、什么是RIP?</h1><p>RIP(<strong>R</strong>outing <strong>I</strong>nformation <strong>P</strong>rotocol,路由信息协议)，由路由器用于将数据从一个网络发送到另一个网络，它通过将其路由表广播到网络中的所有其他路由来有效地管理路由数据。它以跳数为单位确定网络距离。</p><h1 id="18、什么是不同的方式来保护计算机网络"><a href="#18、什么是不同的方式来保护计算机网络" class="headerlink" title="18、什么是不同的方式来保护计算机网络?"></a>18、什么是不同的方式来保护计算机网络?</h1><p>有几种方法可以做到这一点。建议多种方法组合使用。</p><ul><li>在所有计算机上安装可靠和更新的防病毒程序。</li><li>确保防火墙的设置和配置正确。</li><li>使用用户认证。</li></ul><h1 id="19、什么是NIC？"><a href="#19、什么是NIC？" class="headerlink" title="19、什么是NIC？"></a>19、什么是NIC？</h1><p>NIC（<strong>N</strong>etwork <strong>I</strong>nterface <strong>C</strong>ontroller）网络接口控制器（网卡）。这是连接到PC以连接到网络的设备。每个NIC都有自己的MAC地址，用于标识网络上的PC。</p><h1 id="20、什么是WAN？"><a href="#20、什么是WAN？" class="headerlink" title="20、什么是WAN？"></a>20、什么是WAN？</h1><p>WAN（<strong>W</strong>ide <strong>A</strong>rea <strong>N</strong>etwork）广域网。它是地理上分散的计算机和设备的互连，它连接位于不同地区和国家/地区的网络。</p><h1 id="21、OSI物理层的重要性是什么？"><a href="#21、OSI物理层的重要性是什么？" class="headerlink" title="21、OSI物理层的重要性是什么？"></a>21、OSI物理层的重要性是什么？</h1><p>物理层进行<strong>从数据位到电信号的相互转换，</strong>为数据端设备提供传送数据的通路。</p><h1 id="22、TCP-IP下有多少层？"><a href="#22、TCP-IP下有多少层？" class="headerlink" title="22、TCP/IP下有多少层？"></a>22、TCP/IP下有多少层？</h1><p><strong>四层。</strong></p><p>网络层、互联网层、传输层、应用层。</p><h1 id="23、什么是代理服务器，它们如何保护计算机网络？"><a href="#23、什么是代理服务器，它们如何保护计算机网络？" class="headerlink" title="23、什么是代理服务器，它们如何保护计算机网络？"></a>23、什么是代理服务器，它们如何保护计算机网络？</h1><p>代理服务器主要防止外部用户识别内部网络的IP地址，不知道正确的IP地址，甚至无法识别网络的物理位置，代理服务器可以使外部用户几乎看不到网络。</p><h1 id="24、OSI会话层的功能是什么？"><a href="#24、OSI会话层的功能是什么？" class="headerlink" title="24、OSI会话层的功能是什么？"></a>24、OSI会话层的功能是什么？</h1><p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p><h1 id="25、实施容错系统的重要性是什么？有限吗？"><a href="#25、实施容错系统的重要性是什么？有限吗？" class="headerlink" title="25、实施容错系统的重要性是什么？有限吗？"></a>25、实施容错系统的重要性是什么？有限吗？</h1><p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。</p><p>但是，在某些情况下，这种类型的系统将无法保护数据，<strong>例如意外删除（删库）。</strong></p><h1 id="26、10-Base-T是什么意思？"><a href="#26、10-Base-T是什么意思？" class="headerlink" title="26、10 Base - T是什么意思？"></a>26、10 Base - T是什么意思？</h1><p>10是指数据传输速率，在这种情况下是10Mbps，“Base”是指基带传输。T表示双绞线，这是用于该网络的电缆。</p><h1 id="27、什么是私有IP地址？"><a href="#27、什么是私有IP地址？" class="headerlink" title="27、什么是私有IP地址？"></a>27、什么是私有IP地址？</h1><p>专用IP地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有IP地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p><h1 id="28、什么是NOS"><a href="#28、什么是NOS" class="headerlink" title="28、什么是NOS?"></a>28、什么是NOS?</h1><p>NOS（<strong>N</strong>etwork <strong>O</strong>perating <strong>S</strong>ystem）即网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p><h1 id="29、什么是DoS？"><a href="#29、什么是DoS？" class="headerlink" title="29、什么是DoS？"></a>29、什么是DoS？</h1><p><strong>DoS</strong>（<strong>D</strong>enial <strong>o</strong>f <strong>S</strong>ervice）即拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p><h1 id="30、什么是OSI，它在电脑网络中扮演什么角色？"><a href="#30、什么是OSI，它在电脑网络中扮演什么角色？" class="headerlink" title="30、什么是OSI，它在电脑网络中扮演什么角色？"></a>30、什么是OSI，它在电脑网络中扮演什么角色？</h1><p><strong>OSI（开放系统互联(Open System Interconnection)）</strong>作为数据通信的参考模型。它由7层组成，每层定义了网络设备如何连接和通信的特定方面。每一层要完成相应的功能，<strong>下一层（低层）为上一层（高层）提供服务，</strong>从而把复杂的通信过程分成了多个独立的、比较容易解决的子问题。</p><h1 id="31、屏蔽电缆的屏蔽目的是什么？"><a href="#31、屏蔽电缆的屏蔽目的是什么？" class="headerlink" title="31、屏蔽电缆的屏蔽目的是什么？"></a>31、屏蔽电缆的屏蔽目的是什么？</h1><p>其主要目的是<strong>防止串扰</strong>。串扰是电磁干扰或噪音，可能影响通过电缆传输的数据。</p><h1 id="32、地址共享的优点是什么？"><a href="#32、地址共享的优点是什么？" class="headerlink" title="32、地址共享的优点是什么？"></a>32、地址共享的优点是什么？</h1><p>通过使用地址转换（NAT）而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共IP地址，而不是内部网络上的私有IP地址。</p><h1 id="33、什么是MAC地址？"><a href="#33、什么是MAC地址？" class="headerlink" title="33、什么是MAC地址？"></a>33、什么是MAC地址？</h1><p><strong>MAC（Media Access Control）即媒体介入控制，属于OSI中的数据链路层，由12位16进制的数字组成，共计6个Byte。</strong>可以唯一地标识网络上的设备，它也被称为物理地址或以太网地址。</p><h1 id="34、在OSI参考模型方面，TCP-IP应用层的等同层或多层是什么？"><a href="#34、在OSI参考模型方面，TCP-IP应用层的等同层或多层是什么？" class="headerlink" title="34、在OSI参考模型方面，TCP/IP应用层的等同层或多层是什么？"></a>34、在OSI参考模型方面，TCP/IP应用层的等同层或多层是什么？</h1><p><img src="https://resource.tinychen.com/blog/20190331/zPruOE6sEpyf.png"></p><p><strong>TCP/IP应用层</strong>实际上在OSI模型上具有三个对等体：<strong>会话层，表示层和应用层。</strong></p><h1 id="35、如何识别给定IP地址的IP类？"><a href="#35、如何识别给定IP地址的IP类？" class="headerlink" title="35、如何识别给定IP地址的IP类？"></a>35、如何识别给定IP地址的IP类？</h1><p><img src="https://resource.tinychen.com/blog/20190331/4TmE7uiwM6Vu.png"></p><p>IP地址由32个Bit组成，每8个Bit分成一段，一共四段。通过查看任何给定IP地址的第一段的8个Bit，就可以识别它是哪一类。</p><table><thead><tr><th align="center">第一段八个Bit（二进制）</th><th align="center">第一段8个Bit（十进制）</th><th align="center">IP类别</th></tr></thead><tbody><tr><td align="center">以0位开头</td><td align="center">0~127</td><td align="center">Class A</td></tr><tr><td align="center">以10开头</td><td align="center">128~191</td><td align="center">Class B</td></tr><tr><td align="center">以110开头</td><td align="center">192~223</td><td align="center">Class C</td></tr></tbody></table><h1 id="36、OSPF的主要目的是什么？"><a href="#36、OSPF的主要目的是什么？" class="headerlink" title="36、OSPF的主要目的是什么？"></a>36、OSPF的主要目的是什么？</h1><p><strong>OSPF(Open Shortest Path First开放式最短路径优先）</strong>,是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p><h1 id="37、什么是防火墙？"><a href="#37、什么是防火墙？" class="headerlink" title="37、什么是防火墙？"></a>37、什么是防火墙？</h1><p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p><h1 id="38、描述星型拓扑。"><a href="#38、描述星型拓扑。" class="headerlink" title="38、描述星型拓扑。"></a>38、描述星型拓扑。</h1><p>星型拓扑由连接到节点的中央集线器（HUB）组成，这是最简单的设置和维护之一。</p><p><img src="https://resource.tinychen.com/blog/20190331/AvBkpRIjSO5y.png"></p><h1 id="39、什么是网关？"><a href="#39、什么是网关？" class="headerlink" title="39、什么是网关？"></a>39、什么是网关？</h1><p><strong>网关提供两个或多个网段之间的连接。</strong>它通常是运行网关软件并提供翻译服务的计算机。该翻译是允许不同系统在网络上通信的关键。</p><h1 id="40、星型拓扑的缺点是什么？"><a href="#40、星型拓扑的缺点是什么？" class="headerlink" title="40、星型拓扑的缺点是什么？"></a>40、星型拓扑的缺点是什么？</h1><p>星型拓扑的一个主要缺点是：<strong>一旦中央集线器或交换机损坏，整个网络就会瘫痪。</strong></p><h1 id="41、什么是SLIP？"><a href="#41、什么是SLIP？" class="headerlink" title="41、什么是SLIP？"></a>41、什么是SLIP？</h1><p><strong>SLIP（Serial Line Internet Protocol，串行线路网际协议）</strong>实际上是在UNIX早期开发的旧协议。这是用于远程访问的协议之一。</p><h1 id="42、给出一些私有网络地址的例子。"><a href="#42、给出一些私有网络地址的例子。" class="headerlink" title="42、给出一些私有网络地址的例子。"></a>42、给出一些私有网络地址的例子。</h1><table><thead><tr><th align="center">IP地址</th><th align="center">子网掩码</th></tr></thead><tbody><tr><td align="center">10.0.0.0</td><td align="center">255.0.0.0</td></tr><tr><td align="center">172.16.0.0</td><td align="center">255.240.0.0</td></tr><tr><td align="center">192.168.0.0</td><td align="center">255.255.0.0</td></tr></tbody></table><h1 id="43、什么是Tracert？"><a href="#43、什么是Tracert？" class="headerlink" title="43、什么是Tracert？"></a>43、什么是Tracert？</h1><p>Tracert是一个Windows实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p><p><img src="https://resource.tinychen.com/blog/20190331/LCuDiEGGunBX.png"></p><h1 id="44、网络管理员的功能是什么"><a href="#44、网络管理员的功能是什么" class="headerlink" title="44、网络管理员的功能是什么?"></a>44、网络管理员的功能是什么?</h1><p>网络管理员有许多责任，可以总结为3个关键功能：</p><ul><li>安装网络</li><li>配置网络</li><li>网络的维护和故障排除</li></ul><h1 id="45、描述对等网络的一个缺点。"><a href="#45、描述对等网络的一个缺点。" class="headerlink" title="45、描述对等网络的一个缺点。"></a>45、描述对等网络的一个缺点。</h1><p>当正在访问由网络上的某个工作站共享的资源的时候，该工作站的性能会降低。</p><blockquote><p>对等网络（Peer-to-peer networking）或对等计算（Peer-to-peer computing），其可以定义为：网络的参与者共享他们所拥有的一部分硬件资源（处理能力、存储能力、网络连接能力、打印机等），这些共享资源通过网络提供服务和内容，能被其它对等节点（Peer）直接访问而无需经过中间实体。在此网络中的参与者既是资源、服务和内容的提供者（Server），又是资源、服务和内容的获取者（Client）  。</p></blockquote><h1 id="46、什么是混合网络？"><a href="#46、什么是混合网络？" class="headerlink" title="46、什么是混合网络？"></a>46、什么是混合网络？</h1><p>混合网络是利用客户端-服务器和对等体系结构的网络设置。</p><h1 id="47、什么是DHCP？"><a href="#47、什么是DHCP？" class="headerlink" title="47、什么是DHCP？"></a>47、什么是DHCP？</h1><p><strong>DHCP，动态主机设置协议（Dynamic Host Configuration Protocol）</strong>是一个局域网的网络协议，使用<strong>UDP</strong>协议工作。</p><p>其主要任务是自动为网络上的设备分配IP地址，它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p><h1 id="48、ARP的主要工作是什么？"><a href="#48、ARP的主要工作是什么？" class="headerlink" title="48、ARP的主要工作是什么？"></a>48、ARP的主要工作是什么？</h1><p>ARP（Address Resolution Protocol）地址解析协议的主要任务是将已知的IP地址映射到MAC层地址。</p><h1 id="49、什么是TCP-IP？"><a href="#49、什么是TCP-IP？" class="headerlink" title="49、什么是TCP/IP？"></a>49、什么是TCP/IP？</h1><p>TCP/IP(Transmission Control Protocol/Internet Protocol)传输控制协议/互联网协议，这是一组协议层/协议栈，旨在在不同类型的计算机网络（异构网络）上进行数据交换。</p><h1 id="50、如何使用路由器管理网络？"><a href="#50、如何使用路由器管理网络？" class="headerlink" title="50、如何使用路由器管理网络？"></a>50、如何使用路由器管理网络？</h1><p>路由器内置了控制台，可以配置不同的设置，如安全和数据记录。网络管理员可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的特定时间段限制，甚至可以对整个网络中看不到的网站加以限制。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一百条关于计算机网络的基本知识。由于太长了，分成了上下两篇，每篇50条。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>CentOS配置JDK环境</title>
    <link href="https://tinychen.com/20190317-centos-install-jdk/"/>
    <id>https://tinychen.com/20190317-centos-install-jdk/</id>
    <published>2019-03-17T07:00:00.000Z</published>
    <updated>2019-03-17T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS7上面实现JDK的环境配置。</p><span id="more"></span><hr><h1 id="1、下载软件包"><a href="#1、下载软件包" class="headerlink" title="1、下载软件包"></a>1、下载软件包</h1><p>注意使用wget命令的时候不能直接对文件链接进行下载</p><p>因为Oracle官网需要我们在下载之前先同意协议，所以我们需要使用cookie，否则只能下载到一个html文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz<br></code></pre></div></td></tr></table></figure><p>使用file命令检测下载到的文件是否正常</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">file jdk-8u201-linux-x64.tar.gz<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izwz91m0zmp2dkbj20vjz7z ~]<span class="hljs-comment"># file jdk-8u201-linux-x64.tar.gz</span><br>jdk-8u201-linux-x64.tar.gz: gzip compressed data, from Unix, last modified: Sun Dec 16 03:48:30 2018<br></code></pre></div></td></tr></table></figure><h1 id="2、检测并卸载相关JDK"><a href="#2、检测并卸载相关JDK" class="headerlink" title="2、检测并卸载相关JDK"></a>2、检测并卸载相关JDK</h1><p>输入该指令检测是否存在已安装的jdk或者openJDK</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rpm -qa | grep java<br></code></pre></div></td></tr></table></figure><p>使用该下面两个指令对已安装的jdk进行卸载和强制卸载（记得补充软件名）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rpm e<br>rpm e --nodeps<br></code></pre></div></td></tr></table></figure><h1 id="3、解压文件"><a href="#3、解压文件" class="headerlink" title="3、解压文件"></a>3、解压文件</h1><p>解压文件 </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar -zxvf jdk-8u201-linux-x64.tar.gz<br></code></pre></div></td></tr></table></figure><p>将解压后的文件夹移动到home目录下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp -r jdk1.8.0_201/ /home/<br></code></pre></div></td></tr></table></figure><h1 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h1><p>编辑环境变量</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">JAVA_HOME=/home/jdk_1.8.0_201<br>CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JAVA_HOME</span>/jre/bin<br><span class="hljs-built_in">export</span> JAVA_HOME CLASSPATH PATH<br></code></pre></div></td></tr></table></figure><p>重新载入配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></div></td></tr></table></figure><h1 id="5、检验安装是否成功"><a href="#5、检验安装是否成功" class="headerlink" title="5、检验安装是否成功"></a>5、检验安装是否成功</h1><p>查看java版本是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -version<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izwz91m0zmp2dkbj20vjz7z home]<span class="hljs-comment"># java -version</span><br>java version <span class="hljs-string">&quot;1.8.0_201&quot;</span><br>Java(TM) SE Runtime Environment (build 1.8.0_201-b09)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在CentOS7上面实现JDK的环境配置。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习笔记3-SQL基本操作</title>
    <link href="https://tinychen.com/20190310-mysql-note-03/"/>
    <id>https://tinychen.com/20190310-mysql-note-03/</id>
    <published>2019-03-10T07:00:00.000Z</published>
    <updated>2019-03-10T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL学习笔记，第3篇。主要是在实现MySQL的一些基本操作（增删改查）。</p><span id="more"></span><hr><h1 id="1、MySQL数据库"><a href="#1、MySQL数据库" class="headerlink" title="1、MySQL数据库"></a>1、MySQL数据库</h1><p>MySQL数据库是一种C/S结构的软件：客户端/服务端。<br>特点：若想访问服务器必须通过客服端（服务器一直运行，客户端在需要使用的时候运行）</p><h2 id="1-1-交互方式"><a href="#1-1-交互方式" class="headerlink" title="1.1 交互方式"></a>1.1 交互方式</h2><ol><li><p>客户端连接认证：连接服务器，认证身份：mysql.exe -hPup</p> <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql -hlocalhost -P3306 -uroot -p<br></code></pre></div></td></tr></table></figure></li></ol><blockquote><p>其中h是找主机的IP，这里是localhost即为本机，P是找端口，mysql对应的是3306端口，u是用户，这里是root用户，p则是使用密码</p></blockquote><p><img src="https://resource.tinychen.com/MySQLNote0301.png"></p><ol start="2"><li>客户端发送SQL指令</li><li>服务器接受SQL指令；处理SQL指令；返回操作结果</li><li>客户端接受结果：显示结果</li><li>断开连接（释放资源：保证服务器的并发性）</li></ol><h1 id="2、MySQL服务器对象"><a href="#2、MySQL服务器对象" class="headerlink" title="2、MySQL服务器对象"></a>2、MySQL服务器对象</h1><p>因为我们没有办法完全了解服务器内部的内容，只能粗略地去分析数据库服务器内部的结构。</p><p>将MySQL服务器内部对象分为四层：</p><p><strong>数据库管理系统（DBMS）-&gt; 数据库（DB）-&gt; 数据表（table）-&gt; 字段（field）</strong></p><h1 id="3、SQL基本操作"><a href="#3、SQL基本操作" class="headerlink" title="3、SQL基本操作"></a>3、SQL基本操作</h1><p>基本操作：增删改查</p><p>将SQL的基本操作根据操作对象<strong>分为三类</strong>：库操作，表操作（字段），数据操作</p><h1 id="4、数据库操作"><a href="#4、数据库操作" class="headerlink" title="4、数据库操作"></a>4、数据库操作</h1><h2 id="4-1-新增数据库"><a href="#4-1-新增数据库" class="headerlink" title="4.1 新增数据库"></a>4.1 新增数据库</h2><h3 id="4-1-1-指令"><a href="#4-1-1-指令" class="headerlink" title="4.1.1 指令"></a>4.1.1 指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create database 数据库名 [库选项]<br></code></pre></div></td></tr></table></figure><h3 id="4-1-2数据库命名规则"><a href="#4-1-2数据库命名规则" class="headerlink" title="4.1.2数据库命名规则"></a>4.1.2数据库命名规则</h3><ul><li>数据库名字不能使用关键字或者保留字</li><li>如果使用关键字或者保留字，需要使用反引号把数据库名字括起来</li><li>保证服务器可以识别中文的情况下可以使用中文命名数据库，但是非常不建议这样做</li></ul><h3 id="4-1-3-库选项"><a href="#4-1-3-库选项" class="headerlink" title="4.1.3 库选项"></a>4.1.3 库选项</h3><p>库选项：用来约束数据库，分为两个选项</p><ul><li><p>字符集设定：charset/character set 具体字符集（数据存储的编码格式）</p></li><li><p>校对集设定：collate 具体校对集（数据比较的规则）</p></li></ul><h3 id="4-1-4-注释"><a href="#4-1-4-注释" class="headerlink" title="4.1.4 注释"></a>4.1.4 注释</h3><p>双中划线+空格或者使用井号</p><div class="hljs code-wrapper"><pre><code>-- 这是一个注释# 这也是一个注释</code></pre></div><h3 id="4-1-5-报错规则"><a href="#4-1-5-报错规则" class="headerlink" title="4.1.5 报错规则"></a>4.1.5 报错规则</h3><p>静默模式，即只会告知报错的大概位置而不会告知错误的原因。</p><p><img src="https://resource.tinychen.com/MySQLNote0302.png"></p><h3 id="4-1-6-创建了数据库之后发生了什么"><a href="#4-1-6-创建了数据库之后发生了什么" class="headerlink" title="4.1.6 创建了数据库之后发生了什么"></a>4.1.6 创建了数据库之后发生了什么</h3><ol><li>在数据库系统中，增加了对应的数据库信息；</li><li>会在保存数据库的文件目录下新增一个对应数据库名字的文件夹；</li><li>每个数据库文件夹中都会有一个对应的db.opt文件，文件中记录库选项</li></ol><p><img src="https://resource.tinychen.com/MySQLNote0303.png"></p><p>▼图中为对应数据库的字符集设定和校对集设定。（校对集依赖字符集）</p><p><img src="https://resource.tinychen.com/MySQLNote0304.png"></p><h2 id="4-2-查看数据库"><a href="#4-2-查看数据库" class="headerlink" title="4.2 查看数据库"></a>4.2 查看数据库</h2><h3 id="4-2-1-查看所有数据库"><a href="#4-2-1-查看所有数据库" class="headerlink" title="4.2.1 查看所有数据库"></a>4.2.1 查看所有数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql&gt; show databases;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/MySQLNote0305.png"></p><h3 id="4-2-2-查看指定部分的数据库（模糊查询）"><a href="#4-2-2-查看指定部分的数据库（模糊查询）" class="headerlink" title="4.2.2 查看指定部分的数据库（模糊查询）"></a>4.2.2 查看指定部分的数据库（模糊查询）</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;pattern&#x27;；<br></code></pre></div></td></tr></table></figure><p>其中pattern是匹配模式的意思，分为两种匹配模式</p><p>%：匹配多个字符<br>_:匹配单个字符</p><p>查看以mydata_开头的数据库时，需要对_进行转义处理，即在前面加一个反斜杠，否则会查询错误，因为系统会认为mydata_中的_是匹配单个字符，而%是匹配多个字符，这样子的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;mydata_%&#x27;<br><br>show databases like &#x27;mydata%&#x27;<br></code></pre></div></td></tr></table></figure><p>这两条语句的实际使用效果就是一样的了。</p><p>正确的操作应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;mydata\_%&#x27;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/MySQLNote0306.png"></p><h3 id="4-2-3-查看创建数据库的时候使用的语句"><a href="#4-2-3-查看创建数据库的时候使用的语句" class="headerlink" title="4.2.3 查看创建数据库的时候使用的语句"></a>4.2.3 查看创建数据库的时候使用的语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show create database 数据库名;<br></code></pre></div></td></tr></table></figure><p>因为SQL是一种编译型语言，所以数据库在执行SQL语句之前会对其进行优化，导致最终我们查询到的创建数据库时使用的语句和我们输入的语句并不完全一致。</p><p><img src="https://resource.tinychen.com/MySQLNote0307.png"></p><h2 id="4-3-更新数据库"><a href="#4-3-更新数据库" class="headerlink" title="4.3 更新数据库"></a>4.3 更新数据库</h2><ul><li><p>数据库名字不可以修改（修改名字不安全，牵一发而动全身）</p></li><li><p><strong>数据库的修改 仅限于库选项，</strong>即字符集和校对集（注意校对集依赖字符集）</p><p>  alter database 数据库名 [库选项]</p></li><li><p>charset/character set = 字符集    //注意此处可以使用=也可以不用，但是一般不用</p></li><li><p>collate = 校对集</p></li></ul><p><img src="https://resource.tinychen.com/MySQLNote0308.png"></p><p><img src="https://resource.tinychen.com/MySQLNote0310.png"></p><p><strong>一般不轻易修改库选项</strong></p><h2 id="4-4-删除数据库"><a href="#4-4-删除数据库" class="headerlink" title="4.4 删除数据库"></a>4.4 删除数据库</h2><p>数据库属于结构，所以使用ddl语言，即drop语句；</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></div></td></tr></table></figure><p><strong>注意：数据库删除后极难恢复，一定要注意备份，不要轻易删库</strong></p><p><img src="https://resource.tinychen.com/MySQLNote0311.png"></p><h3 id="4-4-1-数据库删除后发生了什么"><a href="#4-4-1-数据库删除后发生了什么" class="headerlink" title="4.4.1 数据库删除后发生了什么"></a>4.4.1 数据库删除后发生了什么</h3><ol><li>在数据库内部该数据库被删除了；</li><li>数据库对应的文件夹也被递归删除了；</li></ol><p><img src="https://resource.tinychen.com/MySQLNote0312.png"></p><p><img src="https://resource.tinychen.com/MySQLNote0313.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL学习笔记，第3篇。主要是在实现MySQL的一些基本操作（增删改查）。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL</title>
    <link href="https://tinychen.com/20190310-centos-install-mysql/"/>
    <id>https://tinychen.com/20190310-centos-install-mysql/</id>
    <published>2019-03-10T02:00:00.000Z</published>
    <updated>2019-03-10T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是在CentOS7上安装MySQL服务。</p><span id="more"></span><hr><h1 id="1、MySQL和MariaDB"><a href="#1、MySQL和MariaDB" class="headerlink" title="1、MySQL和MariaDB"></a>1、MySQL和MariaDB</h1><p>需要注意的是，在CentOS7中，MySQL已经从默认的程序列表中移除了，并更换为了MariaDB。因此我们可以选择使用MariaDB来替代MySQL又或者是用手动的方式来下载yum资源包再进行安装。</p><blockquote><p>MariaDB 数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用 GPL 授权许可。开发这个分支的原因之一是：甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。<strong>MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</strong></p></blockquote><h1 id="2、检测并删除MySQL"><a href="#2、检测并删除MySQL" class="headerlink" title="2、检测并删除MySQL"></a>2、检测并删除MySQL</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rpm -qa | grep mysql<br></code></pre></div></td></tr></table></figure><p>这条指令是用rpm来查询安装的所有软件，其中q就是query，而a就是all。使用管道命令将查询到的结果交给grep命令，来抓取里面是否有mysql相关的软件。</p><p>如果查询到没有mysql，就可以直接进入下一步，如果有，就先卸载掉。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rpm -e mysql<br>//-e 就是erase卸载软件<br><br>rpm -e --nodeps mysql<br>//强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除<br></code></pre></div></td></tr></table></figure><h1 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h1><p>正如上面所说，CentOS7已经将MySQL移除出默认程序列表，所以我们要先去官网下载yum资源包，下载地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm<br>//使用wget命令下载资源包到本地目录中<br><br>rpm -ivh mysql-community-release-el7-5.noarch.rpm<br>使用rpm命令进行安装<br></code></pre></div></td></tr></table></figure><blockquote><p>RPM安装参数解释<br>-i, –install install package(s)<br>-v, –verbose provide more detailed output<br>-h, –hashprint hash marks as package installs (good with -v)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum update<br>//更新yum<br><br>yum install mysql-server<br>//安装mysql-server<br></code></pre></div></td></tr></table></figure><h1 id="4、设置权限"><a href="#4、设置权限" class="headerlink" title="4、设置权限"></a>4、设置权限</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chown mysql:mysql -R /var/lib/mysql<br>//使用chown命令更改权限，R表示递归处理该目录<br></code></pre></div></td></tr></table></figure><h1 id="5、启动MySQL"><a href="#5、启动MySQL" class="headerlink" title="5、启动MySQL"></a>5、启动MySQL</h1><blockquote><p>在centos7中，service命令已被systemctl命令替代</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl start mysqld.service<br>//启动mysql服务<br>systemctl status mysqld.service<br>//查询mysql服务状态<br>systemctl restart mysqld.service<br>//重启mysql服务<br></code></pre></div></td></tr></table></figure><p>查询mysql版本信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysqladmin --version<br></code></pre></div></td></tr></table></figure><p>输出结果如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izwz91m0zmp2dkbj20vjz7z ~]<span class="hljs-comment"># mysqladmin --version</span><br>mysqladmin  Ver 8.42 Distrib 5.6.43, <span class="hljs-keyword">for</span> Linux on x86_64<br></code></pre></div></td></tr></table></figure><h1 id="6、设置密码"><a href="#6、设置密码" class="headerlink" title="6、设置密码"></a>6、设置密码</h1><p>mysql安装后，默认的root用户密码为空，因此我们需要设置密码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysql -u root<br>//此时还没有密码，直接使用root用户即可登录<br><br><span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost = password(<span class="hljs-string">&#x27;a_new_password&#x27;</span>);<br>//此时即可为root用户设置新的密码<br><br>mysql&gt; <span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost = password(<span class="hljs-string">&#x27;a_new_password&#x27;</span>);<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></div></td></tr></table></figure><h1 id="7、登录使用mysql"><a href="#7、登录使用mysql" class="headerlink" title="7、登录使用mysql"></a>7、登录使用mysql</h1><p>使用mysql -u root -p进行登录，然后输入密码，即可进入mysql命令行，此时如果想要退出mysql命令行，输入quit或者exit或者按下ctrl+C即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">[root@izwz91m0zmp2dkbj20vjz7z ~]# mysql -u root -p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 2<br>Server version: 5.6.43 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt; show databases;<br>+--------------------+<br>| Database   |<br>+--------------------+<br>| information_schema |<br>| mysql  |<br>| performance_schema |<br>+--------------------+<br>3 rows in set (0.01 sec)<br><br>mysql&gt; Ctrl-C -- exit!<br>Aborted<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是在CentOS7上安装MySQL服务。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
    <category term="centos" scheme="https://tinychen.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库基本概念</title>
    <link href="https://tinychen.com/20190309-mysql-base-know/"/>
    <id>https://tinychen.com/20190309-mysql-base-know/</id>
    <published>2019-03-09T07:00:00.000Z</published>
    <updated>2019-03-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL学习笔记。主要是各类基本定义和概念的了解。</p><span id="more"></span><hr><h1 id="1、什么是数据库？"><a href="#1、什么是数据库？" class="headerlink" title="1、什么是数据库？"></a>1、什么是数据库？</h1><h2 id="1-1-数据（Data）的定义"><a href="#1-1-数据（Data）的定义" class="headerlink" title="1.1 数据（Data）的定义"></a>1.1 数据（Data）的定义</h2><p>描述事物的符号记录称为数据。</p><h2 id="1-2-数据库（DataBase）的定义"><a href="#1-2-数据库（DataBase）的定义" class="headerlink" title="1.2 数据库（DataBase）的定义"></a>1.2 数据库（DataBase）的定义</h2><p>数据库是<strong>长期储存</strong>在计算机内的，<strong>有组织的，可共享的</strong>大量数据的集合。</p><blockquote><p>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。<strong>概况地讲，数据库数据具有永久存储、有组织和可共享三个特点。</strong></p></blockquote><h2 id="1-3-数据库管理系统（DataBase-Management-System）的定义"><a href="#1-3-数据库管理系统（DataBase-Management-System）的定义" class="headerlink" title="1.3 数据库管理系统（DataBase Management System）的定义##"></a>1.3 数据库管理系统（DataBase Management System）的定义##</h2><p>数据库管理系统是位于用户与操作系统之间的一层数据管理软件。</p><p>数据库管理系统是一个系统软件，它的任务是科学地组织和存储数据，高效地获取和维护数据。</p><blockquote><p>DBMS的主要功能有数据定义功能，数据组织、存储和管理，数据操纵功能，数据库的事务管理和运行管理，数据库的建立和维护功能，其他功能。</p></blockquote><h2 id="1-4-数据库系统（DataBase-System）的定义"><a href="#1-4-数据库系统（DataBase-System）的定义" class="headerlink" title="1.4 数据库系统（DataBase System）的定义"></a>1.4 数据库系统（DataBase System）的定义</h2><p>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DataBase Administrator）组成的存储、管理、处理和维护数据的系统。</p><h2 id="1-5-存储数据库的介质"><a href="#1-5-存储数据库的介质" class="headerlink" title="1.5 存储数据库的介质"></a>1.5 存储数据库的介质</h2><p>介质主要分为两种：<strong>硬盘和内存</strong></p><h1 id="2、数据库的分类和区别"><a href="#2、数据库的分类和区别" class="headerlink" title="2、数据库的分类和区别"></a>2、数据库的分类和区别</h1><h2 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h2><p><strong>数据库基于存储介质的不同</strong>，可以分为两类：<strong>关系型数据库（SQL）</strong>和<strong>非关系型数据库（NoSQL）</strong>。</p><blockquote><p>NoSQL：Not Only SQL， 不是关系型的数据库都叫做非关系型数据库</p></blockquote><blockquote><p>此外还可以<strong>基于对数据的处理方式的不同</strong>进行分类，还有诸如<strong>面向对象型数据库（object-oriented database(OODB)）</strong>等。</p></blockquote><h2 id="2-2区别"><a href="#2-2区别" class="headerlink" title="2.2区别"></a>2.2区别</h2><h3 id="2-2-1-SQL"><a href="#2-2-1-SQL" class="headerlink" title="2.2.1 SQL"></a>2.2.1 SQL</h3><ul><li>安全（保存到磁盘，断电不会丢失）</li><li>基于关系的数据库便于人类理解和使用</li><li>但是比较浪费空间（使用二维表，对应的表格中不论有没有数据都要占用空间）</li></ul><h3 id="2-2-2-NoSQL"><a href="#2-2-2-NoSQL" class="headerlink" title="2.2.2 NoSQL"></a>2.2.2 NoSQL</h3><ul><li>效率高（因为存储在内存中，内存的速度要远高于硬盘）</li><li>不安全（内存断点丢失数据）</li></ul><h1 id="3、常见的数据库"><a href="#3、常见的数据库" class="headerlink" title="3、常见的数据库"></a>3、常见的数据库</h1><h2 id="3-1-关系型数据库"><a href="#3-1-关系型数据库" class="headerlink" title="3.1 关系型数据库"></a>3.1 关系型数据库</h2><p>大型：Oracle,DB2<br>中型：SQL-SERVER,MySQL<br>小型：access等</p><h2 id="3-2-非关系型数据库"><a href="#3-2-非关系型数据库" class="headerlink" title="3.2 非关系型数据库"></a>3.2 非关系型数据库</h2><p>memcached(小)，mongodb（中），redis（大，可实现断电不丢失数据）</p><h1 id="4、什么是关系型数据库"><a href="#4、什么是关系型数据库" class="headerlink" title="4、什么是关系型数据库"></a>4、什么是关系型数据库</h1><h2 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h2><p>关系型数据库是一种建立在<strong>关系模型（数学模型）</strong>上的数据库。</p><h2 id="4-2-关系模型"><a href="#4-2-关系模型" class="headerlink" title="4.2 关系模型"></a>4.2 关系模型</h2><p>关系模型是一种建立在关系上的模型，关系模型包含下列三个部分：</p><ul><li>数据结构：解决数据存储的问题，使用二维表来存储数据（包括行和列）</li><li>操作指令集合：所有的SQL语句</li><li>完整性约束：表内数据约束（字段与字段），表与表之间的数据约束（外键）</li></ul><blockquote><p>数据完整性约束指的是为了防止不符合规范的数据进入数据库，在用户对数据进行插入、修改、删除等操作时，DBMS自动按照一定的约束条件对数据进行监测，使不符合规范的数据不能进入数据库，以确保数据库中存储的数据正确、有效、相容。</p></blockquote><h1 id="5、关系型数据库的设计"><a href="#5、关系型数据库的设计" class="headerlink" title="5、关系型数据库的设计"></a>5、关系型数据库的设计</h1><p>关系型数据库：从需要存储的数据需求中分析，如果 是一类数据（实体事物）应该设计成一张二维表。</p><p>关系型数据库：维护实体内部，实体与实体之间的联系。</p><blockquote><p>表是由表头和数据部分组成。其中表头为字段名，用来规定数据的名称；数据组成部分为实际存储的数据单元。</p></blockquote><p>如下所示为一张简单的二维表:</p><table><thead><tr><th align="center">表头</th><th align="center">字段名1</th><th align="center">字段名2</th></tr></thead><tbody><tr><td align="center">数据单元a</td><td align="center">数据a1</td><td align="center">数据a2</td></tr><tr><td align="center">数据单元b</td><td align="center">数据b1</td><td align="center">数据b2</td></tr><tr><td align="center">数据单元c</td><td align="center">数据c1</td><td align="center">数据c2</td></tr></tbody></table><h1 id="6、简单案例分析"><a href="#6、简单案例分析" class="headerlink" title="6、简单案例分析"></a>6、简单案例分析</h1><p>以教师、学生、班级三者为核心的教学系统案例进行一个简单的分析：</p><ol><li><p>找出该教学系统中的所有实体：教师、学生、班级</p></li><li><p>列出每个实体对应所拥有的数据信息：（此处仅列举少量数据）</p></li></ol><ul><li>教师：姓名、年龄、职称</li><li>学生：姓名、学号、专业</li><li>班级：班级名称、班级编号、上课地点</li></ul><p>下面开始建表</p><h2 id="6-1-实体内部联系"><a href="#6-1-实体内部联系" class="headerlink" title="6.1 实体内部联系"></a>6.1 实体内部联系</h2><p><strong>下面是一张学生的信息表</strong></p><table><thead><tr><th align="center">姓名</th><th align="center">学号</th><th align="center">专业</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center">001</td><td align="center">计算机</td></tr><tr><td align="center">小红</td><td align="center">002</td><td align="center">艺术设计</td></tr><tr><td align="center">小黑</td><td align="center">003</td><td align="center">null</td></tr></tbody></table><blockquote><p>这里我们可以看到，表中小黑的专业这一栏是空白的（null），但是这一栏的位置还是要给小黑留着，不能就这样将其删除，这就是为什么关系型数据库占用位置的原因。</p></blockquote><ul><li>第二行的所有字段（即整个第二行）都是在描述小明的个人信息，即描述小明这个学生，<strong>这个是内部联系。</strong></li><li>第二列的所有字段都是学号，即整个第二列只能存放对应的学号信息，<strong>这个是内部约束。</strong></li></ul><h2 id="6-2-实体与实体之间的关系"><a href="#6-2-实体与实体之间的关系" class="headerlink" title="6.2 实体与实体之间的关系"></a>6.2 实体与实体之间的关系</h2><p>每个学生肯定属于某个班级，而一个班级应该有多个学生，这种是<strong>一对多的</strong>对应关系。</p><p>这里以班级和学生为例</p><p>首先我们补充一个班级表，还有补充限定规则，表中的班级名称和班级编号是唯一不可重复的，而上课地点则不是。</p><p><strong>班级表</strong></p><table><thead><tr><th align="center">班级编号</th><th align="center">班级名称</th><th align="center">上课地点</th></tr></thead><tbody><tr><td align="center">CS01</td><td align="center">计算机1班</td><td align="center">D301</td></tr><tr><td align="center">CS02</td><td align="center">计算机2班</td><td align="center">E204</td></tr><tr><td align="center">AD01</td><td align="center">艺术设计1班</td><td align="center">G306</td></tr><tr><td align="center">AD02</td><td align="center">艺术设计2班</td><td align="center">G407</td></tr></tbody></table><p>这个时候我们如果需要把学生和班级之间建立联系，有两种选择：</p><ul><li>在班级表中插入学生信息</li><li>在学生表中插入班级信息</li></ul><p>因为我们知道班级和学生是一对多的关系，一个班级可以有很多个学生，而一个学生只能属于一个班级，因此在学生表中插入班级信息则只需要多添加一列字段即可。<br>为了保证添加班级信息的时候只能够找到唯一一个对应的班级而不发生重复冲突的情况，对应的班级数据信息必须是在班级表中唯一不重复的，也就是班级编号或者是班级名称。</p><p>于是我们得到了下表</p><p><strong>带班级信息的学生表</strong></p><table><thead><tr><th align="center">姓名</th><th align="center">学号</th><th align="center">专业</th><th align="center">班级</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center">001</td><td align="center">计算机</td><td align="center">CS01</td></tr><tr><td align="center">小红</td><td align="center">002</td><td align="center">艺术设计</td><td align="center">AD02</td></tr><tr><td align="center">小黑</td><td align="center">003</td><td align="center">null</td><td align="center">null</td></tr></tbody></table><blockquote><p><strong>行/记录和列/字段的区别</strong></p><p>行/记录：row/record，本质相同，都是指表中的一行/一条记录。</p><p>列/字段：column/field，本质相同，都是指表中的一列/一个字段。</p><p>只是行和列是从二维表的结构角度出发，而记录和字段是从数据库的数据角度出发。</p></blockquote><h1 id="7、什么是SQL"><a href="#7、什么是SQL" class="headerlink" title="7、什么是SQL"></a>7、什么是SQL</h1><ul><li>SQL：Structured Query Language，结构化查询语言，（并不只是查询操作，也有其他操作，只是因为数据库中的99%的操作都是查询操作）</li></ul><p><strong>SQL分为三个部分：</strong></p><ul><li><p><strong>DDL：Data Definition Language，数据定义语言，</strong>用来维护存储数据的结构（数据库、表），代表指令：create，drop，alter等</p></li><li><p><strong>DML：Data Manipulation Language，数据操纵语言，</strong>用来对数据进行操作（数据表中的内容），代表指令：insert，delete，update等（分别对应增删改三个操作）；</p></li></ul><blockquote><p>其中在DML内部又专门划分出一个分类：<strong>DQL：Data Query Language：数据查询语言，如select</strong></p></blockquote><ul><li><strong>DCL：Data Control Language，数据控制语言，</strong>主要是负责权限管理（用户），代表指令：grant，revoke等。（对应分配和回收权限）</li></ul><blockquote><p>注意，SQL是关系型数据库的操作指令，SQL是一种约束但不强制（类似W3C标准）。这意味着不同的数据库如Oracle和MySQL之间的指令不一定能通用，可能会有细微的差别。</p></blockquote><h1 id="8、MySQL数据库"><a href="#8、MySQL数据库" class="headerlink" title="8、MySQL数据库"></a>8、MySQL数据库</h1><p>MySQL数据库是一种C/S结构的软件：客户端/服务端。<br>特点：若想访问服务器必须通过客服端（服务器一直运行，客户端在需要使用的时候运行）</p><h2 id="8-1-交互方式"><a href="#8-1-交互方式" class="headerlink" title="8.1 交互方式"></a>8.1 交互方式</h2><ol><li><p>客户端连接认证：连接服务器，认证身份：mysql.exe -hPup</p> <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql -hlocalhost -P3306 -uroot -p<br></code></pre></div></td></tr></table></figure></li></ol><blockquote><p>其中h是找主机的IP，这里是localhost即为本机，P是找端口，mysql对应的是3306端口，u是用户，这里是root用户，p则是使用密码</p></blockquote><p><img src="https://resource.tinychen.com/MySQLNote0301.png"></p><ol start="2"><li>客户端发送SQL指令</li><li>服务器接受SQL指令；处理SQL指令；返回操作结果</li><li>客户端接受结果：显示结果</li><li>断开连接（释放资源：保证服务器的并发性）</li></ol><h1 id="9、MySQL服务器对象"><a href="#9、MySQL服务器对象" class="headerlink" title="9、MySQL服务器对象"></a>9、MySQL服务器对象</h1><p>因为我们没有办法完全了解服务器内部的内容，只能粗略地去分析数据库服务器内部的结构。</p><p>将MySQL服务器内部对象分为四层：</p><p><strong>数据库管理系统（DBMS）-&gt; 数据库（DB）-&gt; 数据表（table）-&gt; 字段（field）</strong></p><h1 id="10、SQL基本操作"><a href="#10、SQL基本操作" class="headerlink" title="10、SQL基本操作"></a>10、SQL基本操作</h1><p>基本操作：增删改查</p><p>将SQL的基本操作根据操作对象<strong>分为三类</strong>：库操作，表操作（字段），数据操作</p><h1 id="11、数据库操作"><a href="#11、数据库操作" class="headerlink" title="11、数据库操作"></a>11、数据库操作</h1><h2 id="11-1-新增数据库"><a href="#11-1-新增数据库" class="headerlink" title="11.1 新增数据库"></a>11.1 新增数据库</h2><h3 id="11-1-1-指令"><a href="#11-1-1-指令" class="headerlink" title="11.1.1 指令"></a>11.1.1 指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create database 数据库名 [库选项]<br></code></pre></div></td></tr></table></figure><h3 id="11-1-2数据库命名规则"><a href="#11-1-2数据库命名规则" class="headerlink" title="11.1.2数据库命名规则"></a>11.1.2数据库命名规则</h3><ul><li>数据库名字不能使用关键字或者保留字</li><li>如果使用关键字或者保留字，需要使用反引号把数据库名字括起来</li><li>保证服务器可以识别中文的情况下可以使用中文命名数据库，但是非常不建议这样做</li></ul><h3 id="11-1-3-库选项"><a href="#11-1-3-库选项" class="headerlink" title="11.1.3 库选项"></a>11.1.3 库选项</h3><p>库选项：用来约束数据库，分为两个选项</p><ul><li>字符集设定：charset/character set 具体字符集（数据存储的编码格式）</li><li>校对集设定：collate 具体校对集（数据比较的规则）</li></ul><h3 id="11-1-4-注释"><a href="#11-1-4-注释" class="headerlink" title="11.1.4 注释"></a>11.1.4 注释</h3><p>双中划线+空格或者使用井号</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment">-- 这是一个注释</span><br><span class="hljs-comment"># 这也是一个注释</span><br></code></pre></div></td></tr></table></figure><h3 id="11-1-5-报错规则"><a href="#11-1-5-报错规则" class="headerlink" title="11.1.5 报错规则"></a>11.1.5 报错规则</h3><p>静默模式，即只会告知报错的大概位置而不会告知错误的原因。</p><p><img src="https://resource.tinychen.com/MySQLNote0302.png"></p><h3 id="11-1-6-创建了数据库之后发生了什么"><a href="#11-1-6-创建了数据库之后发生了什么" class="headerlink" title="11.1.6 创建了数据库之后发生了什么"></a>11.1.6 创建了数据库之后发生了什么</h3><ol><li>在数据库系统中，增加了对应的数据库信息；</li><li>会在保存数据库的文件目录下新增一个对应数据库名字的文件夹；</li><li>每个数据库文件夹中都会有一个对应的db.opt文件，文件中记录库选项</li></ol><p><img src="https://resource.tinychen.com/MySQLNote0303.png"></p><p>▼图中为对应数据库的字符集设定和校对集设定。（校对集依赖字符集）</p><p><img src="https://resource.tinychen.com/MySQLNote0304.png"></p><h2 id="11-2-查看数据库"><a href="#11-2-查看数据库" class="headerlink" title="11.2 查看数据库"></a>11.2 查看数据库</h2><h3 id="11-2-1-查看所有数据库"><a href="#11-2-1-查看所有数据库" class="headerlink" title="11.2.1 查看所有数据库"></a>11.2.1 查看所有数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql&gt; show databases;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/MySQLNote0305.png"></p><h3 id="11-2-2-查看指定部分的数据库（模糊查询）"><a href="#11-2-2-查看指定部分的数据库（模糊查询）" class="headerlink" title="11.2.2 查看指定部分的数据库（模糊查询）"></a>11.2.2 查看指定部分的数据库（模糊查询）</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;pattern&#x27;；<br></code></pre></div></td></tr></table></figure><p>其中pattern是匹配模式的意思，分为两种匹配模式</p><p>%：匹配多个字符<br>_:匹配单个字符</p><p>查看以mydata_开头的数据库时，需要对_进行转义处理，即在前面加一个反斜杠，否则会查询错误，因为系统会认为mydata_中的_是匹配单个字符，而%是匹配多个字符，这样子的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;mydata_%&#x27;<br><br>show databases like &#x27;mydata%&#x27;<br></code></pre></div></td></tr></table></figure><p>这两条语句的实际使用效果就是一样的了。</p><p>正确的操作应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases like &#x27;mydata\_%&#x27;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/MySQLNote0306.png"></p><h3 id="11-2-3-查看创建数据库的时候使用的语句"><a href="#11-2-3-查看创建数据库的时候使用的语句" class="headerlink" title="11.2.3 查看创建数据库的时候使用的语句"></a>11.2.3 查看创建数据库的时候使用的语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show create database 数据库名;<br></code></pre></div></td></tr></table></figure><p>因为SQL是一种编译型语言，所以数据库在执行SQL语句之前会对其进行优化，导致最终我们查询到的创建数据库时使用的语句和我们输入的语句并不完全一致。</p><p><img src="https://resource.tinychen.com/MySQLNote0307.png"></p><h2 id="11-3-更新数据库"><a href="#11-3-更新数据库" class="headerlink" title="11.3 更新数据库"></a>11.3 更新数据库</h2><ul><li><p>数据库名字不可以修改（修改名字不安全，牵一发而动全身）</p></li><li><p><strong>数据库的修改 仅限于库选项，</strong>即字符集和校对集（注意校对集依赖字符集）</p><p>  alter database 数据库名 [库选项]</p></li><li><p>charset/character set = 字符集    //注意此处可以使用=也可以不用，但是一般不用</p></li><li><p>collate = 校对集</p></li></ul><p><img src="https://resource.tinychen.com/MySQLNote0308.png"></p><p><img src="https://resource.tinychen.com/MySQLNote0310.png"></p><p><strong>一般不轻易修改库选项</strong></p><h2 id="11-4-删除数据库"><a href="#11-4-删除数据库" class="headerlink" title="11.4 删除数据库"></a>11.4 删除数据库</h2><p>数据库属于结构，所以使用ddl语言，即drop语句；</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></div></td></tr></table></figure><p><strong>注意：数据库删除后极难恢复，一定要注意备份，不要轻易删库</strong></p><p><img src="https://resource.tinychen.com/MySQLNote0311.png"></p><h3 id="11-4-1-数据库删除后发生了什么"><a href="#11-4-1-数据库删除后发生了什么" class="headerlink" title="11.4.1 数据库删除后发生了什么"></a>11.4.1 数据库删除后发生了什么</h3><ol><li>在数据库内部该数据库被删除了；</li><li>数据库对应的文件夹也被递归删除了；</li></ol><p><img src="https://resource.tinychen.com/MySQLNote0312.png"></p><p><img src="https://resource.tinychen.com/MySQLNote0313.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL学习笔记。主要是各类基本定义和概念的了解。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="mysql" scheme="https://tinychen.com/tags/mysql/"/>
    
    <category term="database" scheme="https://tinychen.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>计算机中的一些特殊IP地址</title>
    <link href="https://tinychen.com/20190227-special-ip/"/>
    <id>https://tinychen.com/20190227-special-ip/</id>
    <published>2019-02-27T07:00:00.000Z</published>
    <updated>2019-02-27T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些特殊的IP地址，排查网络故障的时候有利于快速定位问题。</p><span id="more"></span><hr><h1 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h1><p>严格说来，这个奇葩的地址0.0.0.0已经不是一个真正意义上的IP地址了。它表示的是这样一个集合：也就是说；所有不清楚的主机和目的网络。这里的“不清楚”是指在本机的路由表里没有特定条目指明如何到达。对本机来说，它就是一个“收容所”，所有不认识的“三无”人员，一律送进去。如果你在网络设置中设置了缺省网关，那么计算机系统会自动产生一个目的地址为0.0.0.0的缺省路由。  </p><h1 id="255-255-255-255-限制广播地址"><a href="#255-255-255-255-限制广播地址" class="headerlink" title="255.255.255.255 限制广播地址"></a>255.255.255.255 限制广播地址</h1><p>对本机来说，这个地址指本网段内(同一广播域)的所有主机。<br>然而它的意思很明确，使用人类语言来说意思就是“这里的所有计算机都注意了”这个地址不能被路由器所转发。</p><h1 id="127-0-0-1-本机地址"><a href="#127-0-0-1-本机地址" class="headerlink" title="127.0.0.1 本机地址"></a>127.0.0.1 本机地址</h1><p>主要用于测试。用汉语表示，就是“我自己”。在Windows系统中，这个地址有一个别名“Localhost”。<br>寻址这样一个地址，是不能把它发到网络接口的。除非出错，否则在传输介质上永远不应该出现目的地址为“127.0.0.1”的数据包。   </p><h1 id="224-0-0-1-组播地址"><a href="#224-0-0-1-组播地址" class="headerlink" title="224.0.0.1 组播地址"></a>224.0.0.1 组播地址</h1><p>注意它和广播的区别。从224.0.0.0到239.255.255.255都是这样的地址。224.0.0.1特指所有主机，224.0.0.2特指所有路由器。这样的地址多用于一些特定的程序以及多媒体程序。如果你的主机开启了IRDP(Internet路由发现协议），使用组播功能功能，那么你的主机路由表中应该有这样一条路由。  </p><h1 id="169-254-x-x"><a href="#169-254-x-x" class="headerlink" title="169.254.x.x"></a>169.254.x.x</h1><p>如果你的主机使用了DHCP功能自动获得一个IP地址，那么当你的DHCP服务器发生故障，或响应时间太长而超出了一个系统规定的时间，计算机操作系统会为你分配这样一个地址。如果你发现你的主机IP地址是一个诸如此类的地址，很不幸的是，现在你的网络不能正常运行了。  </p><h1 id="10-x-x-x；172-16-0-0—172-31-255-254；192-168-x-x；私有地址"><a href="#10-x-x-x；172-16-0-0—172-31-255-254；192-168-x-x；私有地址" class="headerlink" title="10.x.x.x；172.16.0.0—172.31.255.254；192.168.x.x；私有地址"></a>10.x.x.x；172.16.0.0—172.31.255.254；192.168.x.x；私有地址</h1><p>这些地址被大量用于企业内部网络中。一些宽带路由器，也往往使用192.168.1.1作为缺省地址。私有网络由于不与外部互连，因而可能使用随意的IP地址。保留这样的地址供其使用是为了避免以后接入公网时引起地址混乱。使用私有地址的私有网络在接入Internet时，要使用地址翻译(NAT)，将私有地址翻译成公用合法地址。在Internet上，这类地址是不能出现的。对一台网络上的主机来说，它可以正常接收的合法目的网络地址有三种：本机的IP地址、广播地址以及组播地址。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些特殊的IP地址，排查网络故障的时候有利于快速定位问题。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://tinychen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>编译原理复习提纲</title>
    <link href="https://tinychen.com/20190117-compiling/"/>
    <id>https://tinychen.com/20190117-compiling/</id>
    <published>2019-01-17T07:00:00.000Z</published>
    <updated>2019-01-17T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>《编译原理》复习提纲，啥也别说了，大家考试好运(ง •_•)ง</p><span id="more"></span><hr><h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><p><strong>编译程序的基本任务是将源语言程序翻译成等价的目标语言程序。</strong></p><p>一般的，将编译过程划分成<strong>词法分析、语法分析、语义分析、中间代码生成、代码优化和目标代码</strong>生成6个阶段。</p><p><img src="https://resource.tinychen.com/Compiling01.png"></p><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><ul><li><p>词法分析的任务是<strong>从左到右一个字符一个字符</strong>地读入源程序，对构成源程序的字符流进行扫描和分解，从而识<strong>别出一个个单词*</strong>（一些场合下也称单词符号或符号）*。</p></li><li><p>这里所谓的单词是指逻辑上紧密相连的一组字符，这些字符具有集体含义。</p></li></ul><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><ul><li><p><strong>语法分析的任务是再词法分析的基础上将单词序列分解成各类语法短语。</strong></p></li><li><p>这种语法短语也称为语法单位，可表示成语法树，如图所示。<br><img src="https://resource.tinychen.com/Compiling2.png"></p></li></ul><ul><li>语法分析所依据的是语言的语法规则，即描述程序结构的规则。通过语法分析确定整个输入串是否构成一个语法上正确的程序。</li></ul><blockquote><p>词法分析和语法分析本质上都是对源程序的结构进行分析。但词法分析的任务仅对源程序进行线性扫描即可完成，比如识别标识符，因为标识符的结构是字母打头的字母和数字串，这只要顺序扫描输入流，遇到既不是字母又不是数字的字符时，将前面所发现的所有字母和数字组合在一起构成标识符单词即可。但这种线性扫描不能用于识别递归定义的语法成分，比如不能用此办法去匹配表达式中的括号。</p></blockquote><h2 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h2><ul><li><strong>语义分析是审查源程序有无语义错误，为代码生成阶段收集类型信息。</strong></li></ul><blockquote><p>例如，语义分析的一个工作是进行类型审查，审查每个算符是否具有语言规范允许的运算对象，当不符合语言规范时，编译程序应报告错误。</p></blockquote><h2 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h2><ul><li><p>在进行了上述的语法分析和语义分析阶段的工作之后，<strong>有的编译程序</strong>将源程序变成一种内部表示形式，这种表现形式叫做中间语言或中间代码。</p></li><li><p><strong>所谓“中间代码”是一种结构简单、含义明确的记号系统，这种记号系统可以设计为多种多样的形式，重要的设计原则为两点：一是容易生成；二是容易将它翻译成目标代码。</strong></p></li></ul><blockquote><p>很多编译程序采用了一种近似“三地址指令”的“四元式”中间代码，这种四元式的形式为</p></blockquote><blockquote><p>（运算符，运算对象1，运算对象2，结果）</p></blockquote><div class="hljs code-wrapper"><pre><code>id1:= id2 + id3 * 10(1)    (*    id3    10    t1)(2)    (+    id2    t1    t2)(3)    (:=    t2    -    id1)</code></pre></div><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p><strong>对前一阶段产生的中间代码进行变换或进行改造，目的是使生成的目标代码更为高效，即省时间和省空间。</strong></p><div class="hljs code-wrapper"><pre><code>id1:= id2 + id3 * 10(1)    (*    id3    10    t1)(2)    (+    id2    t1    id1)</code></pre></div><h2 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h2><p><strong>把中间代码变换成特定机器上的一个绝对指令代码或可重定位的指令代码或汇编指令代码。</strong></p><div class="hljs code-wrapper"><pre><code>(1)    (*    id3    10    t1)(2)    (+    id2    t1    id1) mov id3,R2 mul 10, R2 mov id2,R1 add  R2,R1 mov R1,id1</code></pre></div><blockquote><p>上述编译过程的阶段划分是一个典型处理模式，<strong>事实上并非所有的编译程序都分成这几个阶段，</strong>有些编译程序并不需要生成中间代码，有些编译程序不进行优化，即优化阶段可省去，有些最简单的编译程序在语法分析的同时产生目标指令代码，如PL/0语言编译程序。不过多数实用的编译程序都包含上述几个阶段的工作过程。</p></blockquote><h2 id="编译程序其他要点"><a href="#编译程序其他要点" class="headerlink" title="编译程序其他要点"></a>编译程序其他要点</h2><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><ul><li><p>记录源程序中使用的名字</p></li><li><p>收集每个名字的各种属性信息</p></li><li><p>类型、作用域、分配存储信息</p></li></ul><h3 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h3><p>检查错误、报告出错信息、排错、恢复编译工作。</p><h3 id="编译阶段的划分"><a href="#编译阶段的划分" class="headerlink" title="编译阶段的划分"></a>编译阶段的划分</h3><p><strong>前端和后端</strong></p><ul><li><p>编译的前端：与源语言有关但与目标机无关的那些部分组成</p></li><li><p>编译的后端：与目标机有关的那些部分组成</p></li></ul><blockquote><ul><li>一个前端+多个后端：多平台编译器   例 Java</li><li>多个前端+一个后端：多语言编译器  例 .NET</li></ul></blockquote><ul><li>遍（趟）：从头到尾扫描源程序一次称为一遍</li></ul><hr><h1 id="解释过程（解释程序）"><a href="#解释过程（解释程序）" class="headerlink" title="解释过程（解释程序）"></a>解释过程（解释程序）</h1><ul><li><p>这里介绍另一种语言处理程序，<strong>它不需要在运行前先把源程序翻译成目标代码，也可以实现在某台机器上运行程序并生成结果。</strong></p></li><li><p><strong>解释程序接受某个语言的程序并立即运行这个源程序。</strong>它的工作模式是一个个的获取、分析并执行源程序语句，一旦第一个语句分析结束，源程序便开始运行并生成结果，它特别适合程序员以交互工作方式工作的情况，即希望在获取下一个语句之前了解每个语句的执行结果，允许执行时修改程序。</p></li></ul><blockquote><p>著名的解释程序有Basic语言解释程序 ,Lisp语言解释程序,UNIX命令语言解释程序(shell),数据库查询语言SQL 解释程序以及bytecode解释程序。</p></blockquote><hr><h1 id="编译程序和解释程序的对比"><a href="#编译程序和解释程序的对比" class="headerlink" title="编译程序和解释程序的对比"></a>编译程序和解释程序的对比</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://resource.tinychen.com/Compiling3.png"></p><ul><li><p><strong>编译：整个程序全部翻译结束之后，程序才能开始运行；编译和运行是两个独立分开的阶段。</strong></p></li><li><p><strong>解释：不需要将分析和执行阶段分开，一边分析一边执行；更加适用于交互环境中。</strong></p></li></ul><h2 id="编译和解释的比较"><a href="#编译和解释的比较" class="headerlink" title="编译和解释的比较"></a>编译和解释的比较</h2><ul><li><p>编译结果的执行效率比解释快很多</p></li><li><p>解释执行的空间开销大大超过编译结果的执行</p></li></ul><hr><h1 id="Java-C-和-传统语言-C-Pascal"><a href="#Java-C-和-传统语言-C-Pascal" class="headerlink" title="Java C#  和 传统语言 C Pascal"></a>Java C#  和 传统语言 C Pascal</h1><ul><li><p>Java语言的处理环境既有编译程序，也有解释程序</p></li><li><p>java源程序经过JAVA编译程序编译后生成class可执行字节码文件（BYTECODE）</p></li><li><p>可执行字节码文件（BYTECODE）在java虚拟机（JVM）上经过解释程序一行行解释执行</p></li><li><p><strong>可以说JAVA编译程序兼具编译型语言和解释型语言的特点</strong></p></li><li><p><strong>传统语言都是一次编译，没有生成中间代码</strong></p></li></ul><p><img src="https://resource.tinychen.com/Compiling4.png"></p><hr><h1 id="文法的概念"><a href="#文法的概念" class="headerlink" title="文法的概念"></a>文法的概念</h1><p><strong>文法即是以有穷的集合刻画无穷的集合的一个工具。</strong></p><h2 id="文法类型与形式（0—3）"><a href="#文法类型与形式（0—3）" class="headerlink" title="文法类型与形式（0—3）"></a>文法类型与形式（0—3）</h2><p><img src="https://resource.tinychen.com/Compiling5.png"></p><ul><li><p>0型文法→短语文法</p></li><li><p>1型文法→上下文有关</p></li><li><p>2型文法→上下文无关</p></li><li><p>3型文法→正规文法</p></li></ul><h2 id="编程语言使用哪些文法"><a href="#编程语言使用哪些文法" class="headerlink" title="编程语言使用哪些文法"></a>编程语言使用哪些文法</h2><ul><li><p>语法上使用的是<strong>上下文无关文法（2型）</strong></p></li><li><p>标识符、数字等使用的都是<strong>正规文法（3型）</strong></p></li></ul><h2 id="句型、句子"><a href="#句型、句子" class="headerlink" title="句型、句子"></a>句型、句子</h2><p>我不知道(ノ｀Д)ノ</p><h2 id="有害规则和多余规则"><a href="#有害规则和多余规则" class="headerlink" title="有害规则和多余规则"></a>有害规则和多余规则</h2><ul><li><strong>文法中不含有有害规则和多余规则</strong></li></ul><h3 id="有害规则"><a href="#有害规则" class="headerlink" title="有害规则"></a>有害规则</h3><p><strong>形如U→U的产生式。会引起文法的二义性</strong></p><h3 id="多余规则"><a href="#多余规则" class="headerlink" title="多余规则"></a>多余规则</h3><p><strong>指文法中任何句子的推导都不会用到的规则</strong></p><ol><li><p>文法中某些非终结符（除了开始符）不在任何规则的右部出现，该非终结符称为不可到达。</p></li><li><p>文法中某些非终结符，由它不能推出终结符号串，该非终结符称为不可终止。</p></li></ol><h2 id="上下文无关文法及其语法树"><a href="#上下文无关文法及其语法树" class="headerlink" title="上下文无关文法及其语法树"></a>上下文无关文法及其语法树</h2><ul><li><p><strong>最左（最右）推导：</strong>在推导的任何一步α=&gt;β，其中α、β是句型，都是对α中的最左（右）非终结符进行替换,则称这种推导为最左（右）推导。</p></li><li><p><strong>最右推导被称为规范推导，由规范推导所得的句型称为规范句型</strong></p></li><li><p><strong>短语：</strong>子树的所有叶子节点集合为一个短语，拥有多个子树就有多个短语（一个句型的语法树中任一子树叶结点所组成的符号串都是该句型的短语）</p></li><li><p><strong>直接短语：</strong>子树中不再包含其他的子树，即A只能推导出b，而b不能再推出其他的式子，则b为此句型的直接短语</p></li><li><p><strong>句柄：</strong>最左直接短语</p></li></ul><h2 id="文法的二义性与语言的二义性关系"><a href="#文法的二义性与语言的二义性关系" class="headerlink" title="文法的二义性与语言的二义性关系"></a>文法的二义性与语言的二义性关系</h2><ul><li><p>如果一个文法存在某个句子对应两颗不同的语法树，则说这个文法是二义的。</p></li><li><p>二义性文法可能产生同一个语言。</p></li><li><p>如果产生上下文无关语言的每一个文法都是二义的，则说此语言是先天二义的。</p></li></ul><hr><h1 id="优先关系概念"><a href="#优先关系概念" class="headerlink" title="优先关系概念"></a>优先关系概念</h1><p><img src="https://resource.tinychen.com/Compiling10.png"></p><hr><h1 id="算符文法概念"><a href="#算符文法概念" class="headerlink" title="算符文法概念"></a>算符文法概念</h1><p><img src="https://resource.tinychen.com/Compiling11.png"></p><hr><h1 id="子程序参数类型"><a href="#子程序参数类型" class="headerlink" title="子程序参数类型"></a>子程序参数类型</h1><p><img src="https://resource.tinychen.com/Compiling6.png"></p><hr><h1 id="机器指令"><a href="#机器指令" class="headerlink" title="机器指令"></a>机器指令</h1><p><img src="https://resource.tinychen.com/Compiling7.png"></p><hr><h1 id="动态堆式分配"><a href="#动态堆式分配" class="headerlink" title="动态堆式分配"></a>动态堆式分配</h1><p><img src="https://resource.tinychen.com/Compiling8.png"></p><p><img src="https://resource.tinychen.com/Compiling9.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《编译原理》复习提纲，啥也别说了，大家考试好运(ง •_•)ง&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>操作系统部分重点内容</title>
    <link href="https://tinychen.com/20190109-operating-system/"/>
    <id>https://tinychen.com/20190109-operating-system/</id>
    <published>2019-01-09T07:00:00.000Z</published>
    <updated>2019-01-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>《操作系统》部分重点内容，包括讨论题和部分小七自己整理的概念. 重要知识点。</p><span id="more"></span><hr><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><hr><h2 id="1-请你给操作系统下个定义？"><a href="#1-请你给操作系统下个定义？" class="headerlink" title="1. 请你给操作系统下个定义？"></a>1. 请你给操作系统下个定义？</h2><p>一般可把操作系统定义为：管理系统资源. 控制程序执行. 改善人机界面. 提供各种服务，并合理组织计算机工作流程和为用户方便有效地使用计算机提供良好运行环境的一种系统软件。</p><hr><h2 id="2-请叙述操作系统的专业地位和在计算机系统中的地位？"><a href="#2-请叙述操作系统的专业地位和在计算机系统中的地位？" class="headerlink" title="2. 请叙述操作系统的专业地位和在计算机系统中的地位？"></a>2. 请叙述操作系统的专业地位和在计算机系统中的地位？</h2><p><strong>操作系统属于专业基础课</strong></p><p><strong>系统软件（操作系统）层是最靠近硬件的一层软件，它一方面直接和硬件交互，在裸机上运行；另一方面和上层的支撑软件和应用软件交互，把它们与计算机硬件隔离开来。</strong></p><blockquote><p>操作系统是最靠近硬件的一层软件，它把硬件裸机改造成为完善的虚拟机，使得机器功能得到扩展，运行环境得到改善，系统效率得到提高，安全性能得到保障。</p></blockquote><blockquote><p>系统软件（操作系统）层是最靠近硬件的一层软件，它一方面直接和硬件交互，在裸机上运行，把硬件的复杂性封装起来，负责管理和控制机器硬件并对其做首次扩充和改造，主要做好资源的调度与分配. 信息的存取与保护. 并发活动的协调与控制等工作；另一方面和上层的支撑软件和应用软件交互，把它们与计算机硬件隔离开来，为程序员提供方便的编程接口. 有力的功能支撑. 良好的运行环境，使得计算机系统成为完整. 可用和高效的计算平台。</p></blockquote><hr><h2 id="3-操作系统系统的作用是什么？"><a href="#3-操作系统系统的作用是什么？" class="headerlink" title="3. 操作系统系统的作用是什么？"></a>3. 操作系统系统的作用是什么？</h2><p>操作系统在计算机系统中起4个方面的作用。</p><ol><li>服务用户观点——操作系统作为用户接口和公共服务程序</li><li>进程交互观点——操作系统作为进程执行的控制者和协调者</li><li>系统实现观点——操作系统作为扩展机或虚拟机</li><li>资源管理观点——操作系统作为资源的管理者和控制者</li></ol><hr><h2 id="4-操作系统所管理的资源有那些？支持的界面使用方式有哪些？"><a href="#4-操作系统所管理的资源有那些？支持的界面使用方式有哪些？" class="headerlink" title="4. 操作系统所管理的资源有那些？支持的界面使用方式有哪些？"></a>4. 操作系统所管理的资源有那些？支持的界面使用方式有哪些？</h2><p><strong>在计算机系统中，能分配给用户使用的各种软硬件设施总称为资源。</strong></p><p><strong>资源包括两大类：硬件资源和软件资源。</strong>其中，硬件资源有处理器. 存储器. 外部设备等；软件资源则分为程序和数据。</p><p><strong>支持的界面使用方式主要有两种：命令行模式（CLI）和图形化界面（GUI）</strong></p><hr><h2 id="5-什么原因推动我们操作系统的发展？"><a href="#5-什么原因推动我们操作系统的发展？" class="headerlink" title="5. 什么原因推动我们操作系统的发展？"></a>5. 什么原因推动我们操作系统的发展？</h2><p><strong>两个原因：人类日常生产生活的实际需求和硬件设备（尤其是集成电路）的发展。</strong></p><hr><h2 id="6-何为中断？中断处理过程如何？中断分类？中断服务？中断源？中断优先级？中断屏蔽与开关中断？中断要保存和恢复的内容有哪些？"><a href="#6-何为中断？中断处理过程如何？中断分类？中断服务？中断源？中断优先级？中断屏蔽与开关中断？中断要保存和恢复的内容有哪些？" class="headerlink" title="6. 何为中断？中断处理过程如何？中断分类？中断服务？中断源？中断优先级？中断屏蔽与开关中断？中断要保存和恢复的内容有哪些？"></a>6. 何为中断？中断处理过程如何？中断分类？中断服务？中断源？中断优先级？中断屏蔽与开关中断？中断要保存和恢复的内容有哪些？</h2><h3 id="中断的定义"><a href="#中断的定义" class="headerlink" title="中断的定义"></a>中断的定义</h3><p>中断指在程序执行过程中遇到急需处理的事件时，暂时中止现行程序在CPU上的运行，转而执行相应的事件处理程序，待处理完成后再返回断点或调度其他程序执行的过程。</p><h3 id="中断处理过程如何？"><a href="#中断处理过程如何？" class="headerlink" title="中断处理过程如何？"></a>中断处理过程如何？</h3><p>一般来说，中断/异常的响应需要<strong>顺序做4件事：</strong></p><ol><li>发现中断源</li><li>保护现场</li><li>转向中断/异常事件处理程序执行</li><li>恢复现场 </li></ol><h3 id="中断分类？"><a href="#中断分类？" class="headerlink" title="中断分类？"></a>中断分类？</h3><p>由硬件发出或产生的中断称为硬中断，按硬中断事件的来源和实现手段可<strong>将中断划分为外中断和内中断。</strong></p><ul><li><strong>外中断又称中断或异步中断，</strong>是指来自处理器之外的中断信号；</li><li><strong>内中断又称异常或同步中断，</strong>是指来自处理器内部的中断信号；</li></ul><blockquote><p>中断的发生与CPU当前状态无关，即可发生在用户态，又可发生在内核态；<br>异常与CPU是同步的，大部分异常发生在用户态，<strong>内核态唯一发生的异常是“缺页异常”</strong></p></blockquote><h3 id="中断服务？"><a href="#中断服务？" class="headerlink" title="中断服务？"></a>中断服务？</h3><blockquote><p><strong>摘自百度百科：</strong>中断服务程序，处理器处理“急件”，可理解为是一种服务，是通过执行事先编好的某个特定的程序来完成的，这种处理“急件”的程序被称为——中断服务程序。</p></blockquote><h3 id="中断源？"><a href="#中断源？" class="headerlink" title="中断源？"></a>中断源？</h3><p>中断源指中断信号的来源。</p><h3 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h3><p>中断装置所预设的响应顺序称为中断优先级。</p><h3 id="中断屏蔽与开关中断？"><a href="#中断屏蔽与开关中断？" class="headerlink" title="中断屏蔽与开关中断？"></a>中断屏蔽与开关中断？</h3><p><strong>中断屏蔽是指禁止CPU响应中断或禁止中断产生。</strong></p><ul><li>前者指硬件产生中断请求后，CPU暂时不予响应的状态，等待直到中断开放后被屏蔽的中断才能被响应并获得处理。</li><li>后者指可引起中断的事件发生时，硬件不允许提出中断请求也不通知处理器，故由于中断被禁止而不可能导致中断。</li></ul><h3 id="中断要保存和恢复的内容有哪些？"><a href="#中断要保存和恢复的内容有哪些？" class="headerlink" title="中断要保存和恢复的内容有哪些？"></a>中断要保存和恢复的内容有哪些？</h3><p>通用寄存器. 状态寄存器. 程序计数器(PC). 程序状态字(PSW)</p><hr><h2 id="7-系统调用？"><a href="#7-系统调用？" class="headerlink" title="7. 系统调用？"></a>7. 系统调用？</h2><p><strong>系统调用是一种中介角色，把用户和硬件隔离开来，应用程序只有通过系统调用才能请求系统服务并使用系统资源。</strong></p><p>系统调用的作用：一是内核可以基于权限和规则对资源访问进行裁决，保证系统的安全性；二是系统调用对资源进行抽象，提供一致性接口，避免用户在使用资源时发生错误，且使编程效率大大提高。</p><blockquote><p>可以这样认为：内核的主体是系统调用的集合，可以将内核的服务例程看成特殊的公共子程序。</p></blockquote><blockquote><p>系统调用是应用程序获得操作系统服务的唯一途径。</p></blockquote><hr><h2 id="8-市场上os的分类？"><a href="#8-市场上os的分类？" class="headerlink" title="8. 市场上os的分类？"></a>8. 市场上os的分类？</h2><p>市场上OS的分类依据分类标准的不同可以有许多种分法：</p><h3 id="按照使用设备来进行分类的话，大概可以分为三类："><a href="#按照使用设备来进行分类的话，大概可以分为三类：" class="headerlink" title="按照使用设备来进行分类的话，大概可以分为三类："></a>按照使用设备来进行分类的话，大概可以分为三类：</h3><ul><li><p>移动端：主要是Android和IOS占主流，也有少数的如WindowsMobile等小众移动操作系统；</p></li><li><p>桌面端：主要是Windows. MacOS和主流的Linux发行版如Redhat. Ubuntu. CentOS. SUSE等，还有少数的Unix操作系统；</p></li><li><p>服务器端：主要运行的是Linux和Unix操作系统</p></li></ul><p>其他还有更细致的分类诸如嵌入式系统等。</p><h3 id="按照功能-特点和使用方式，可以把操作系统分为三种基本类型"><a href="#按照功能-特点和使用方式，可以把操作系统分为三种基本类型" class="headerlink" title="按照功能. 特点和使用方式，可以把操作系统分为三种基本类型"></a>按照功能. 特点和使用方式，可以把操作系统分为三种基本类型</h3><h4 id="批处理操作系统"><a href="#批处理操作系统" class="headerlink" title="批处理操作系统"></a>批处理操作系统</h4><ul><li><p>批处理操作系统服务于一系列称为批（batch）的作业。</p></li><li><p>采用批处理方式工作的操作系统称为批处理操作系统。</p></li><li><p>批处理操作系统是<strong>最先</strong>采用多道程序设计技术的系统，它根据预先设定的调度策略选择若干作业并发地执行，系统资源利用率高，作业吞吐量大。</p></li><li><p><strong>批处理操作系统的缺点</strong>是作业周转时间延长，不具备交互式计算能力，不利于程序的开发和调试。</p></li><li><p><strong>批处理操作系统的特征</strong>是批量集中处理. 多道程序运行. 作业脱机工作。</p></li></ul><h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><ul><li><p>实质上，分时操作系统是多道程序的一个变种，CPU被若干交互式用户多路复用，不同之处在于每个用户都拥有一台联机终端。</p></li><li><p><strong>分时操作系统的四大特点为：同时性. 独立性. 及时性. 交互性。</strong></p></li><li><p><strong>同时性：</strong>即若干终端用户联机使用计算机，分时是指多个用户分享同一台计算机的CPU时间；</p></li><li><p><strong>独立性：</strong>即终端用户彼此独立，互不干扰，每个终端用户感觉好像独占整台计算机；</p></li><li><p><strong>及时性：</strong>即终端用户没有大计算量的立即型请求能够在足够短时间内得到响应；</p></li><li><p><strong>交互性：</strong>即人机交互，联机工作时用户直接控制程序运行，便于程序调试和排错。</p></li></ul><h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><blockquote><p>实时操作系统时指外部事件或数据产生时，能够对其予以足够快的速度进行处理，所得结果能够在规定的时间内控制生产过程或对控制对象做出快速响应，并控制所有实时任务协调运行的操作系统。</p></blockquote><ul><li><p>提供<strong>及时响应和高可靠性</strong>是其主要特点。</p></li><li><p><strong>有三种典型实时系统：过程控制系统. 信息查询系统和事务处理系统。</strong></p></li></ul><p><strong>如果某个操作系统兼具批处理. 分时和实时处理的全部或两种功能，则此操作系统称为通用操作系统。</strong></p><hr><h2 id="9-单道程序设计和多道的区别？"><a href="#9-单道程序设计和多道的区别？" class="headerlink" title="9. 单道程序设计和多道的区别？"></a>9. 单道程序设计和多道的区别？</h2><p>在早期<strong>单道批处理系统</strong>中，内存中仅有单个作业在运行，CPU和其他硬件设备串行工作，致使系统中仍有许多资源空闲，设备利用率极低。</p><p><strong>多道程序设计</strong>是指允许多个作业（程序）同时进入计算机系统的内存并启动交替计算的方法。</p><hr><h2 id="10-系统调用与函数调用之间的区别？"><a href="#10-系统调用与函数调用之间的区别？" class="headerlink" title="10. 系统调用与函数调用之间的区别？"></a>10. 系统调用与函数调用之间的区别？</h2><p>两者从调用形式到具体实现都存在很大区别：</p><h3 id="（1）调用形式和实现方式不同："><a href="#（1）调用形式和实现方式不同：" class="headerlink" title="（1）调用形式和实现方式不同："></a>（1）调用形式和实现方式不同：</h3><ul><li><p>函数调用所转向的地址式<strong>固定不变</strong>的，但系统调用中不包含内核服务例程入口地址，仅提供功能号，<strong>按功能号调用</strong>；</p></li><li><p>函数调用是在<strong>用户态执行</strong>，<strong>只能访问用户栈</strong>；</p></li><li><p>系统调用需要通过<strong>陷阱机制</strong>，从用户态转换到内核态，<strong>服务例程在内核态执行并访问核心栈</strong>。</p></li></ul><h3 id="（2）被调用代码的位置不同："><a href="#（2）被调用代码的位置不同：" class="headerlink" title="（2）被调用代码的位置不同："></a>（2）被调用代码的位置不同：</h3><ul><li><p><strong>函数调用是静态调用</strong>，调用程序和被调用代码处于同一程序内，这是用户级程序</p></li><li><p><strong>系统调用是动态调用</strong>，系统调用的服务例程位于操作系统中，这是系统级程序</p></li></ul><h3 id="（3）提供方式不同："><a href="#（3）提供方式不同：" class="headerlink" title="（3）提供方式不同："></a>（3）提供方式不同：</h3><ul><li><p><strong>函数调用通常由编程语言提供</strong>，不同的语言提供的函数功能的类型和数量<strong>可以不同</strong></p></li><li><p><strong>系统调用由操作系统提供</strong>，操作系统一般设计好，系统调用的功能. 类型和数量便<strong>固定不变</strong></p></li></ul><hr><h2 id="11-操作系统结构分类？"><a href="#11-操作系统结构分类？" class="headerlink" title="11. 操作系统结构分类？"></a>11. 操作系统结构分类？</h2><blockquote><p><strong>Linux系统使用的是单体式结构。</strong></p></blockquote><h3 id="单体式结构"><a href="#单体式结构" class="headerlink" title="单体式结构"></a>单体式结构</h3><p>操作系统单体式结构采用模块组合法，是基于结构化程序设计的一种软件结构设计方法。</p><blockquote><p><strong>优点是：</strong>结构紧密. 组合方便，对不同环境和用户的不同需求可以组合不同模块来满足，灵活性大；针对某个功能可用最有效的算法和任意调用其他模块中的过程来实现，因此系统效率高。</p></blockquote><blockquote><p>** 缺点是：**模块独立性差，模块之间牵连甚多，形成复杂的调用关系，甚至有循环调用，造成系统结构不清晰，正确性难以保证，可靠性降低，系统的增. 删. 改困难。</p></blockquote><h3 id="层次式结构"><a href="#层次式结构" class="headerlink" title="层次式结构"></a>层次式结构</h3><p>这种结构把操作系统划分为内核和若干模块（进程），这些模块（进程）按功能的调用次序排列成若干层次，<strong>各层之间只能存在单向依赖或单向调用关系，即低层为高层服务，高层可以调用低层功能，反之则不能。</strong></p><h3 id="虚拟机结构"><a href="#虚拟机结构" class="headerlink" title="虚拟机结构"></a>虚拟机结构</h3><p>它基于如下思想：物理计算机资源通过多重化和共享技术可改造成多个虚拟机。<br>这种技术的基本做法是：通过用一类物理设备来模拟另一类物理设备，或通过分时地使用一类物理设备，把一个物理实体改变成若干个逻辑上的对应物。</p><h3 id="微内核结构"><a href="#微内核结构" class="headerlink" title="微内核结构"></a>微内核结构</h3><p>操作系统仅将所有应用必需的核心功能放入内核，称为微内核，其他功能都在内核之外，由在用户态运行的服务进程实现，通过微内核所提供的消息传递机制完成进程间消息通信。</p><blockquote><p><strong>微内核结构的优点</strong>，一是对进程的请求提供一致性接口，不必区分内核级服务和用户级服务，所有服务均借助消息传递机制提供；二是具有较好的可扩充性和易修改性，三是可移植性好；四是对分布式系统提供有力支撑；</p></blockquote><blockquote><p><strong>微内核结构的缺点</strong>是运行效率较低，这是因为进程间必须通过内核的通信机制才能进行通信。</p></blockquote><hr><h2 id="12-自由软件？"><a href="#12-自由软件？" class="headerlink" title="12. 自由软件？"></a>12. 自由软件？</h2><p>自由软件（free software，又称freeware）是指遵循通用公共许可证（General Public License，GPL）规则，保证使用上的自由，获得源程序的自由，可以自行修改的自由，可以复制和推广的自由，也可以<strong>有收费自由</strong>的一种软件。</p><blockquote><p><strong>注意 ：自由软件不是免费软件，自由软件也有收费的。</strong></p></blockquote><hr><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><hr><h2 id="1-作业生命周期状态？"><a href="#1-作业生命周期状态？" class="headerlink" title="1. 作业生命周期状态？"></a>1. 作业生命周期状态？</h2><ul><li>输入状态</li><li>后备状态</li><li>执行状态</li><li>完成状态</li></ul><hr><h2 id="2-何为低级调度？"><a href="#2-何为低级调度？" class="headerlink" title="2. 何为低级调度？"></a>2. 何为低级调度？</h2><p><strong>低级调度又称进程调度/线程调度. 短程调度，</strong>根据某种原则决定就绪队列中的哪个进程/线程获得处理器，并将处理器出让给它使用。</p><hr><h2 id="3-进程调度方式有哪些？解释这些方式？"><a href="#3-进程调度方式有哪些？解释这些方式？" class="headerlink" title="3. 进程调度方式有哪些？解释这些方式？"></a>3. 进程调度方式有哪些？解释这些方式？</h2><p><strong>低级调度有两类基本调度方式：剥夺式和非剥夺式。</strong></p><h3 id="剥夺式"><a href="#剥夺式" class="headerlink" title="剥夺式"></a>剥夺式</h3><p>剥夺式又称为抢先式。当进程/线程正在处理器上运行时，<strong>系统可根据规定的原则剥夺分配给此进程/线程的处理器，</strong>并将其移入就绪队列，选择其他进程/线程运行。</p><h3 id="非剥夺式"><a href="#非剥夺式" class="headerlink" title="非剥夺式"></a>非剥夺式</h3><p>非剥夺式又称非抢先式。<strong>一旦某个进程/线程开始运行后便不再让出处理器，</strong>除非此进程/线程运行结束或主动放弃处理器，或因发生某个事件而不能继续执行。</p><hr><h2 id="4-进程调度队列模型有何作用？"><a href="#4-进程调度队列模型有何作用？" class="headerlink" title="4. 进程调度队列模型有何作用？"></a>4. 进程调度队列模型有何作用？</h2><p>进程队列调度模型负责<strong>处理器的分配</strong>，作用为以下几点：</p><ol><li><p>将系统中各进程的执行情况和状态特征记录在各进程的PCB表中并将各进程的PCB表排成相应的队列。</p></li><li><p>通过PCB变化来掌握系统中存在的所有进程的执行情况和状态特征，并在适当的时机从就绪队列中选择出一个进程占据CPU。</p></li><li><p>当进程调度为剥夺式时且新就绪进程优先级高于当前进程时能取回CPU并分配给新进程。</p></li></ol><hr><h2 id="5-何为周转时间？平均周转时间？响应时间？"><a href="#5-何为周转时间？平均周转时间？响应时间？" class="headerlink" title="5. 何为周转时间？平均周转时间？响应时间？"></a>5. 何为周转时间？平均周转时间？响应时间？</h2><h3 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h3><p>批处理用户从向系统提交作业开始到作业完成为止的时间间隔称为作业周转时间。</p><h3 id="平均周转时间"><a href="#平均周转时间" class="headerlink" title="平均周转时间"></a>平均周转时间</h3><p>所有进程的周转时间之和除以进程数得到的就是平均周转时间。</p><h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><p>从交互式进程提交一个请求（命令）直到获得响应之间的时间间隔称为响应时间。</p><hr><h2 id="6-进程调度算法的作用是什么？"><a href="#6-进程调度算法的作用是什么？" class="headerlink" title="6. 进程调度算法的作用是什么？"></a>6. 进程调度算法的作用是什么？</h2><p>无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数. 这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。</p><hr><h2 id="7-掌握三种进程调度算法的名字与思想？重点掌握多级反馈队列调度算法。"><a href="#7-掌握三种进程调度算法的名字与思想？重点掌握多级反馈队列调度算法。" class="headerlink" title="7. 掌握三种进程调度算法的名字与思想？重点掌握多级反馈队列调度算法。"></a>7. 掌握三种进程调度算法的名字与思想？重点掌握多级反馈队列调度算法。</h2><h3 id="FCFS-先来先服务算法"><a href="#FCFS-先来先服务算法" class="headerlink" title="FCFS/先来先服务算法"></a>FCFS/先来先服务算法</h3><ul><li><strong>非剥夺式调度算法</strong></li><li>FCFS按照作业进入系统后备作业队列的先后次序来挑选作业，先进入系统的作业将优先被挑选进入内存，创建用户进程，分配所需资源，然后移入就绪队列。</li></ul><h3 id="SJF-最短时间优先算法"><a href="#SJF-最短时间优先算法" class="headerlink" title="SJF/最短时间优先算法"></a>SJF/最短时间优先算法</h3><ul><li><strong>非剥夺式调度算法</strong></li><li>SJF以进入系统作业所要求的CPU运行时间的长短为标准，总是选取预计计算时间最短的作业投入运行。</li></ul><h3 id="SRTF-最短剩余时间优先算法"><a href="#SRTF-最短剩余时间优先算法" class="headerlink" title="SRTF/最短剩余时间优先算法"></a>SRTF/最短剩余时间优先算法</h3><ul><li><strong>剥夺式调度算法</strong></li><li>假设当前某进程/线程正在运行，如果有新进程/线程移入就绪队列，若它所需要的CPU运行时间比当前运行进程/线程所需要的剩余CPU时间还短，抢占式最短作业优先算法强行剥夺当前执行者的控制权，调度新进程/线程执行。</li></ul><h3 id="HRRF-最高响应比优先算法"><a href="#HRRF-最高响应比优先算法" class="headerlink" title="HRRF/最高响应比优先算法"></a>HRRF/最高响应比优先算法</h3><ul><li><strong>非剥夺式调度算法</strong></li><li>响应比 = 作业周转时间 / 作业处理时间 = 1 + 作业等待时间 / 作业处理时间</li><li>作业处理时间由用户给出，是一个常量；作业等待时间开始于时间点0，随着作业在后备队列中等待时间的增加而变长，每当调度作业运行时，计算后备作业队列中每个作业的响应比作为其优先级，选择响应比最高者投入运行。</li></ul><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><ul><li>系统可预先规定为<strong>非剥夺式或剥夺式</strong></li><li>优先级调度算法根据确定的优先级来选取进程/线程，总是选择就绪队列中优先级最高者投入运行。</li></ul><h3 id="RR-轮转调度算法-时间片调度"><a href="#RR-轮转调度算法-时间片调度" class="headerlink" title="RR/轮转调度算法/时间片调度"></a>RR/轮转调度算法/时间片调度</h3><ul><li><strong>剥夺式调度算法</strong></li><li>调度程序每次把CPU分配给就绪队列首进程/线程使用规定的时间间隔，称为时间片，通常为10ms~200ms，就绪队列中的每个进程/线程轮流地运行一个时间片，当时间片耗尽时就强迫当前运行进程/线程让出处理器，转而排列到就绪队列尾部，等候下一轮调度。</li></ul><h3 id="MLFQ-多级反馈队列调度算法"><a href="#MLFQ-多级反馈队列调度算法" class="headerlink" title="MLFQ/多级反馈队列调度算法"></a>MLFQ/多级反馈队列调度算法</h3><ul><li><strong>剥夺式调度算法</strong></li><li>由系统建立多个就绪队列，每个队列对应于一个优先级，第一个队列的优先级最高，第二个队列的优先级次之，其后的优先级逐个降低。</li><li>较高优先级队列的进程/线程分配给较短时间片，较低优先级队列的进程/线程分配给较长时间片，最后一个队列进程/线程按FCFS算法进行调度。</li></ul><hr><h2 id="8-多级反馈调度算法有何性能特点？"><a href="#8-多级反馈调度算法有何性能特点？" class="headerlink" title="8. 多级反馈调度算法有何性能特点？"></a>8. 多级反馈调度算法有何性能特点？</h2><p>MLFQ调度算法具有较好的性能，能满足各类应用需要。</p><ul><li>对于分时交互性短作业，系统通常可在第一队列（最高优先级队列）规定的时间片内完成工作。</li><li>对于短的批处理作业，通常只需在第一队列和第二队列中各执行一个时间片就能完成工作，周转时间仍然很短。</li><li>对于长的批处理作业，它将依次在第一. 第二. 第三等各个队列中获得时间片运行。</li></ul><blockquote><p>假如一个长作业进入MLFQ，最终进入最低优先级队列后，有很多短作业进入队列，使其一直处于等待状态，则会产生饥饿。一种预防措施是对于低优先级队列中等待时间足够长得进程提升其优先级，从而让它获得运行机会。</p></blockquote><hr><h2 id="9-处理器调度分为哪三级？"><a href="#9-处理器调度分为哪三级？" class="headerlink" title="9. 处理器调度分为哪三级？"></a>9. 处理器调度分为哪三级？</h2><ul><li>高级调度：用于决定哪些满足资源需求的后备作业被选中进入内存去多道运行，FCFA. SJF. SRTF. HRRF. 优先级调度算法等是常用的作业调度算法；</li><li>中级调度：起均衡系统负载的作用，根据内存资源情况决定内存中所能容纳的进程数目，并完成外存和内存中的进程对换工作；</li><li>低级调度：用于决定选择哪个进程/线程占有处理器运行，FCFS. RR. 优先数. MLFQ等是常用的进程/线程调度算法。</li></ul><blockquote><p>衡量调度算法优劣的因素包括响应时间. 周转时间. 资源利用率. 作业吞吐率和公平性等。</p></blockquote><hr><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><hr><h2 id="1-何为并发与并行？区别？"><a href="#1-何为并发与并行？区别？" class="headerlink" title="1. 何为并发与并行？区别？"></a>1. 何为并发与并行？区别？</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>在操作系统中，在某一时间段有多个进程或线程同时存在。</p><p>并发的实质是一个处理器在几个进程之间的多路复用，并发是对有限的物理资源强制行使多用户共享，消除计算机部件之间的互等现象，以提高系统资源利用率。</p><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>在操作系统中，在某一时间段有多个进程或线程同时执行</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>并行一定要多个进程或线程同时执行，而并发只要求能允许多个进程或线程同时存在，可以在单个CPU中交替执行，因此，并行是并发的一个子集。</p><hr><h2 id="2-何为并发过程的不确定性？为何会导致不确定性问题？请你举例说明？"><a href="#2-何为并发过程的不确定性？为何会导致不确定性问题？请你举例说明？" class="headerlink" title="2. 何为并发过程的不确定性？为何会导致不确定性问题？请你举例说明？"></a>2. 何为并发过程的不确定性？为何会导致不确定性问题？请你举例说明？</h2><p>并发过程的不确定性指每次执行结果都可能有所不同。导致不确定性的原因是程序外部的顺序特性消失，程序与计算不再一一对应。</p><p>例子：在煮咖啡时，若每次都按说明书上的顺序操作，那每次出来的咖啡都一样。但若采用并发，在某次准备往热水里放咖啡豆时，老板出来中断了你，然后喝了一口热水，之后将咖啡壶还给你，在进行相同操作后咖啡比以前浓。</p><hr><h2 id="3-何为进程？请用你自己的方式给进程下个定义？为何要引入进程？"><a href="#3-何为进程？请用你自己的方式给进程下个定义？为何要引入进程？" class="headerlink" title="3. 何为进程？请用你自己的方式给进程下个定义？为何要引入进程？"></a>3. 何为进程？请用你自己的方式给进程下个定义？为何要引入进程？</h2><ul><li>进程是操作系统中最重要和最基本的概念之一，<strong>引入进程是由系统资源的有限和系统内的并发性所决定的。</strong></li><li><strong>进程具有生命周期，</strong>由创建而产生，由调度而执行， 由撤销而消亡，<strong>操作系统的基本功能是进程的创建. 管理和撤销。</strong></li></ul><hr><h2 id="4-为何程序一当并发执行，结果就可能不再如传统顺序执行时的可再现性？"><a href="#4-为何程序一当并发执行，结果就可能不再如传统顺序执行时的可再现性？" class="headerlink" title="4. 为何程序一当并发执行，结果就可能不再如传统顺序执行时的可再现性？"></a>4. 为何程序一当并发执行，结果就可能不再如传统顺序执行时的可再现性？</h2><p>因为程序外部的顺序特性消失，程序与计算不再一一对应。每次执行都可能被中断或者环境变量被别的进程改变。</p><hr><h2 id="5-进程的特征有那些？如何理解这些特征？"><a href="#5-进程的特征有那些？如何理解这些特征？" class="headerlink" title="5. 进程的特征有那些？如何理解这些特征？"></a>5. 进程的特征有那些？如何理解这些特征？</h2><hr><h2 id="6-进程的状态有哪些？如何理解这些状态？"><a href="#6-进程的状态有哪些？如何理解这些状态？" class="headerlink" title="6. 进程的状态有哪些？如何理解这些状态？"></a>6. 进程的状态有哪些？如何理解这些状态？</h2><p><strong>进程的状态有运行态. 就绪态. 等待态</strong> </p><h3 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h3><p>进程占用处理器正在运行的状态</p><h3 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h3><p>进程具备运行条件，等待系统分配处理器以便运行的状态</p><h3 id="等待态"><a href="#等待态" class="headerlink" title="等待态"></a>等待态</h3><p>又称阻塞态或睡眠态，指进程不具备运行条件，正在等待某个事件完成的状态</p><hr><h2 id="7-请解释P95，118图2-4？"><a href="#7-请解释P95，118图2-4？" class="headerlink" title="7. 请解释P95，118图2-4？"></a>7. 请解释P95，118图2-4？</h2><hr><h2 id="8-进程有哪几部分构成？这些构成存于何处？PCB主要构成？PCB排队靠什么方式实现？"><a href="#8-进程有哪几部分构成？这些构成存于何处？PCB主要构成？PCB排队靠什么方式实现？" class="headerlink" title="8. 进程有哪几部分构成？这些构成存于何处？PCB主要构成？PCB排队靠什么方式实现？"></a>8. 进程有哪几部分构成？这些构成存于何处？PCB主要构成？PCB排队靠什么方式实现？</h2><p><strong>进程由进程控制块(PCB). 进程程序块. 进程核心栈和进程数据块组成</strong></p><h3 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h3><ol><li>进程控制块存于系统内存中的一个连续区域</li><li>进程程序块存于？？</li><li>进程核心栈存于？？</li><li>进程数据块存于？？</li></ol><h3 id="PCB主要构成"><a href="#PCB主要构成" class="headerlink" title="PCB主要构成"></a>PCB主要构成</h3><ol><li>标志信息</li><li>现场信息</li><li>控制信息</li></ol><h3 id="PCB排队"><a href="#PCB排队" class="headerlink" title="PCB排队"></a>PCB排队</h3><ol><li>链接方式</li><li>索引方式</li></ol><hr><h2 id="9-何为内核态与用户态？"><a href="#9-何为内核态与用户态？" class="headerlink" title="9. 何为内核态与用户态？"></a>9. 何为内核态与用户态？</h2><h3 id="内核态"><a href="#内核态" class="headerlink" title="内核态"></a>内核态</h3><p>当处理器处于内核态时，这是操作系统管理程序运行时所在状态，可认为处理器正在运行可信系统软件，此时全部机器指令都被允许在处理器上执行，程序可访问所有内存单元和系统资源并具有改变处理器状态的能力。</p><h3 id="用户态"><a href="#用户态" class="headerlink" title="用户态"></a>用户态</h3><p>当处理器处于用户态时，它正在运行非可信应用程序此时无法执行特权指令，且访问权限仅限于当前处理器上执行程序所在的地址空间。</p><hr><h2 id="10-原语指啥？为何要引入原语？原语不可中断靠啥实现？"><a href="#10-原语指啥？为何要引入原语？原语不可中断靠啥实现？" class="headerlink" title="10. 原语指啥？为何要引入原语？原语不可中断靠啥实现？"></a>10. 原语指啥？为何要引入原语？原语不可中断靠啥实现？</h2><h3 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h3><p>原语原语通常由若干条指令组成，用来实现某个特定的操作。通过一段不可分割的或不可中断的程序实现其功能。</p><h3 id="为何引入原语"><a href="#为何引入原语" class="headerlink" title="为何引入原语"></a>为何引入原语</h3><p>我们希望有若干指令的连续操作不会被打断</p><h3 id="原语不可中断靠啥实现"><a href="#原语不可中断靠啥实现" class="headerlink" title="原语不可中断靠啥实现"></a>原语不可中断靠啥实现</h3><p>通过关中断来实现</p><hr><h2 id="11-何为线程？现代OS为何要引入线程？与进程的区别？"><a href="#11-何为线程？现代OS为何要引入线程？与进程的区别？" class="headerlink" title="11. 何为线程？现代OS为何要引入线程？与进程的区别？"></a>11. 何为线程？现代OS为何要引入线程？与进程的区别？</h2><h3 id="何为线程"><a href="#何为线程" class="headerlink" title="何为线程"></a>何为线程</h3><p>线程是进程中能并发执行的实体，是进程的组成部分，也是系统调度和分派的基本单位，运行在进程的上下文中,并使用进程的资源和环境。</p><h3 id="引入线程的理由"><a href="#引入线程的理由" class="headerlink" title="引入线程的理由"></a>引入线程的理由</h3><p>为了减少程序并发执行时所付出的时空开销，使得并发粒度更细. 并发性更好。</p><h3 id="与进程的区别"><a href="#与进程的区别" class="headerlink" title="与进程的区别"></a>与进程的区别</h3><ol><li>线程是进程的组成部分</li><li>线程切换较快</li><li>线程通信易于实现</li><li>线程并发程度比进程高</li></ol><hr><h2 id="12-单道与多道系统优缺点比较？"><a href="#12-单道与多道系统优缺点比较？" class="headerlink" title="12. 单道与多道系统优缺点比较？"></a>12. 单道与多道系统优缺点比较？</h2><p>多道程序能交替使用CPU，提高了CPU及其他系统资源的利用率，同时也提高了系统的效率。缺点是延长了作业的周转时间，用户不能进行直接干预，缺少交互性，不利于程序的开发与调试。</p><hr><h2 id="13-为何说中断是现代OS的一项必备技术？"><a href="#13-为何说中断是现代OS的一项必备技术？" class="headerlink" title="13. 为何说中断是现代OS的一项必备技术？"></a>13. 为何说中断是现代OS的一项必备技术？</h2><p>因为中断使在程序执行过程中，遇到急需处理的事件时，可以暂时中止CPU上现行程序的运行，转去执行相应的事件处理程序，待处理完成后再返回原程序被中断处或调度其他程序执行。</p><hr><h2 id="14-请你给死锁下个定义？为何有死锁存在？"><a href="#14-请你给死锁下个定义？为何有死锁存在？" class="headerlink" title="14. 请你给死锁下个定义？为何有死锁存在？"></a>14. 请你给死锁下个定义？为何有死锁存在？</h2><h3 id="死锁定义"><a href="#死锁定义" class="headerlink" title="死锁定义"></a>死锁定义</h3><p>操作系统中的死锁指：如果在一个进程集合中的每个进程都在等待只能由该集合中的其他一个进程才能引发的事件，则称一组进程或系统此时发生死锁。</p><h3 id="死锁存在原因"><a href="#死锁存在原因" class="headerlink" title="死锁存在原因"></a>死锁存在原因</h3><p>死锁产生不仅与系统拥有的资源数量有关，而且与资源分配策略，进程对资源的使用要求以及并发进程的推进顺序有关。</p><hr><h2 id="15-产生死锁的原因？"><a href="#15-产生死锁的原因？" class="headerlink" title="15. 产生死锁的原因？"></a>15. 产生死锁的原因？</h2><p>死锁产生不仅与系统拥有的资源数量有关，而且与资源分配策略，进程对资源的使用要求以及并发进程的推进顺序有关。</p><hr><h2 id="16-死锁产生的必要条件？举例说明？"><a href="#16-死锁产生的必要条件？举例说明？" class="headerlink" title="16. 死锁产生的必要条件？举例说明？"></a>16. 死锁产生的必要条件？举例说明？</h2><h3 id="1-互斥条件"><a href="#1-互斥条件" class="headerlink" title="1. 互斥条件"></a>1. 互斥条件</h3><p>进程互斥使用资源</p><p>例如，当只有一袋咖啡粉时，A拿了B就不能拿。</p><h3 id="2-部分分配条件"><a href="#2-部分分配条件" class="headerlink" title="2. 部分分配条件"></a>2. 部分分配条件</h3><p>申请新资源时不释放已占有资源</p><p>例如，当A拿到咖啡粉时，在拿到热水之前A不会将咖啡粉放出来，其他人不能使用咖啡粉。</p><h3 id="3-不剥夺条件"><a href="#3-不剥夺条件" class="headerlink" title="3. 不剥夺条件"></a>3. 不剥夺条件</h3><p>一个进程不能抢夺其他进程占有的资源</p><p>例如，在上面的例子中，B想要咖啡粉但它不能抢A的。</p><h3 id="4-环路条件"><a href="#4-环路条件" class="headerlink" title="4. 环路条件"></a>4. 环路条件</h3><p>存在一组进程循环等待资源</p><p>例如，在上述例子中，B恰好有热水，但他在拿到咖啡粉前不会放出热水给A使用，两者形成一个环路。</p><hr><h2 id="17-解释并分析其不同：预防死锁-避免死锁-检测死锁-解除死锁？"><a href="#17-解释并分析其不同：预防死锁-避免死锁-检测死锁-解除死锁？" class="headerlink" title="17. 解释并分析其不同：预防死锁. 避免死锁. 检测死锁. 解除死锁？"></a>17. 解释并分析其不同：预防死锁. 避免死锁. 检测死锁. 解除死锁？</h2><h3 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h3><p>在资源分配中破坏部分死锁必要条件。</p><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p>如果一个进程当前请求资源会导致死锁，系统将拒绝启动此进程；如果一个资源分配会导致系统下一步死锁，便拒绝本次分配。</p><h3 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h3><p>系统定时地运行一个“死锁检测”程序，判断系统内是否已出现死锁。</p><h3 id="解除死锁"><a href="#解除死锁" class="headerlink" title="解除死锁"></a>解除死锁</h3><p>检测到死锁发生以后，采用各种方法解除死锁状态以恢复到可运行状态。</p><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>预防死锁是通过资源分配策略让死锁不可能发生，避免死锁是每次分配都进行安全性检测来避免进入死锁状态。而死锁检测和解除死锁是不防止或避免死锁，当检测到系统已经进入死锁状态后再处理。</p><hr><h2 id="18-预先分配策略是资源动态还是静态分配法？有何优缺点？"><a href="#18-预先分配策略是资源动态还是静态分配法？有何优缺点？" class="headerlink" title="18. 预先分配策略是资源动态还是静态分配法？有何优缺点？"></a>18. 预先分配策略是资源动态还是静态分配法？有何优缺点？</h2><p><strong>预先分配策略是资源静态分配法。</strong></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>策略实现简单</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>资源利用率低</p><hr><h2 id="19-动态与静态哪个对资源的利用率高？为什么？它们为何可以预防死锁？"><a href="#19-动态与静态哪个对资源的利用率高？为什么？它们为何可以预防死锁？" class="headerlink" title="19. 动态与静态哪个对资源的利用率高？为什么？它们为何可以预防死锁？"></a>19. 动态与静态哪个对资源的利用率高？为什么？它们为何可以预防死锁？</h2><p>动态资源利用率高，因为在每个进程占有的资源中，有些资源在运行后期使用，有些资源在例外情况下才被使用，可能会造成进程占有一些几乎用不到的资源，而使其他想使用这些资源的进程等待。</p><p>静态破坏了部分分配条件，而动态破坏环路条件。</p><hr><h2 id="20-何为安全状态？何为不安全状态？如何避免资源分配时进入不安全状态？"><a href="#20-何为安全状态？何为不安全状态？如何避免资源分配时进入不安全状态？" class="headerlink" title="20. 何为安全状态？何为不安全状态？如何避免资源分配时进入不安全状态？"></a>20. 何为安全状态？何为不安全状态？如何避免资源分配时进入不安全状态？</h2><p>安全状态就是存在一个安全序列使所有进程都能执行完并收回所有资源<br>。不安全状态是不存在这样的安全序列，即有可能进入死锁状态。在资源分配时，应该先对资源进行预分配，若该分配会使系统进入不安全状态，则拒绝此分配。</p><hr><h2 id="21-银行家算法的作用是什么？属于什么策略？"><a href="#21-银行家算法的作用是什么？属于什么策略？" class="headerlink" title="21. 银行家算法的作用是什么？属于什么策略？"></a>21. 银行家算法的作用是什么？属于什么策略？</h2><p>每一次分配之前都进行预分配和安全性评估来决定是否进行此分配</p><p>属于死锁避免策略。</p><hr><h2 id="22-银行家算法与安全检测算法的关系是什么？"><a href="#22-银行家算法与安全检测算法的关系是什么？" class="headerlink" title="22. 银行家算法与安全检测算法的关系是什么？"></a>22. 银行家算法与安全检测算法的关系是什么？</h2><p>安全检测算法是银行家算法的核心。</p><hr><h2 id="23-银行家算法的开销和对资源的利用率如何？"><a href="#23-银行家算法的开销和对资源的利用率如何？" class="headerlink" title="23. 银行家算法的开销和对资源的利用率如何？"></a>23. 银行家算法的开销和对资源的利用率如何？</h2><p>银行家算法的开销较高，因为要不断进行预分配和安全检测，资源利用率较高。</p><hr><h2 id="24-从死锁必要条件的角度解释资源预先分配法-资源暂时释放法-资源有序使用法-银行家算法等是如何预防或避免死锁发生的？"><a href="#24-从死锁必要条件的角度解释资源预先分配法-资源暂时释放法-资源有序使用法-银行家算法等是如何预防或避免死锁发生的？" class="headerlink" title="24. 从死锁必要条件的角度解释资源预先分配法. 资源暂时释放法. 资源有序使用法. 银行家算法等是如何预防或避免死锁发生的？"></a>24. 从死锁必要条件的角度解释资源预先分配法. 资源暂时释放法. 资源有序使用法. 银行家算法等是如何预防或避免死锁发生的？</h2><ol><li>预先分配法破坏了部分分配条件</li><li>资源暂时释放法破坏了不剥夺条件</li><li>资源有序使用法破坏了环路条件</li><li>银行家算法破环了环路条件</li></ol><hr><h2 id="25-简单叙述银行家算法的思想？"><a href="#25-简单叙述银行家算法的思想？" class="headerlink" title="25. 简单叙述银行家算法的思想？"></a>25. 简单叙述银行家算法的思想？</h2><ol><li>系统中的所有进程进入进程集合,</li><li>在安全状态下系统收到进程的资源请求后,先把资源试探性分配给它。</li><li>系统用剩下的可用资源和进程集合中其他进程还要的资源数作比较，在进程集合中找到剩余资源能满足最大需求量的进程,从而,保证这个进程运行完毕并归还全部资源。</li><li>把这个进程从集合中去掉, 系统的剩余资源更多了,反复执行上述步骤。</li><li>最后,检查进程集合,若为空表明本次申请可行,系统处于安全状态,可实施本次分配;否则,有进程执行不完，系统处于不安全状态,本次资源分配暂不实施,让申请进程等待。 </li></ol><hr><h2 id="26-何为资源分配图？"><a href="#26-何为资源分配图？" class="headerlink" title="26. 何为资源分配图？"></a>26. 何为资源分配图？</h2><ol><li>约定Pi→Rj为请求边，表示进程Pi申请资源类Rj中的一个资源得不到满足而处于等待Rj类资源的状态，该有向边从进程开始指到方框的边缘，表示进程Pi申请Rj类中的一个资源。</li><li>Rj→Pi为分配边，表示Rj类中的一个资源已被进程Pi占用，由于已把一个具体的资源分给了进程Pi，故该有向边从方框内的某个黑圆点出发指向进程。 </li></ol><hr><h2 id="27-何为死锁定理？"><a href="#27-何为死锁定理？" class="headerlink" title="27. 何为死锁定理？"></a>27. 何为死锁定理？</h2><ol><li>如果能在进程-资源分配图中消去此进程的所有请求边和分配边，成为孤立结点。经一系列简化，使所有进程成为孤立结点，则该图是可完全简化的；否则则称该图是不可完全简化的。</li><li>系统为死锁状态的充分条件是：当且仅当该状态的进程-资源分配图是不可完全简化的。该充分条件称为死锁定理。</li></ol><hr><h2 id="28-为何从资源分配图能否化简就能判断死锁的情形？图不能化简是否就说明机器存在死锁？"><a href="#28-为何从资源分配图能否化简就能判断死锁的情形？图不能化简是否就说明机器存在死锁？" class="headerlink" title="28. 为何从资源分配图能否化简就能判断死锁的情形？图不能化简是否就说明机器存在死锁？"></a>28. 为何从资源分配图能否化简就能判断死锁的情形？图不能化简是否就说明机器存在死锁？</h2><p>因为对资源分配图进行简化就相当于让一个进程获得足够的资源，在有限时间内执行完并释放资源。若不能完全化简，就意味着没有方法让进程全部执行完并收回资源，系统此时是死锁状态。</p><hr><h2 id="29-死锁检测算法的理论基础是什么？"><a href="#29-死锁检测算法的理论基础是什么？" class="headerlink" title="29. 死锁检测算法的理论基础是什么？"></a>29. 死锁检测算法的理论基础是什么？</h2><p>理论基础就是模拟资源分配图的化简过程，若不能完全化简，则进入死锁状态。</p><hr><h2 id="30-死锁如何解除？谈谈解除死锁的代价？"><a href="#30-死锁如何解除？谈谈解除死锁的代价？" class="headerlink" title="30. 死锁如何解除？谈谈解除死锁的代价？"></a>30. 死锁如何解除？谈谈解除死锁的代价？</h2><ol><li>结束所有进程的执行，重新启动操作系统。方法简单，但以前工作全部作废，损失很大。</li><li>撤销陷于死锁的所有进程，解除死锁继续运行。</li><li>逐个撤销陷于死锁的进程，回收其资源重新分派，直至死锁解除。</li><li>剥夺陷于死锁的进程占用的资源，但并不撤销它，直至死锁解除。可照撤销陷于死锁进程的条件来选择剥夺资源的进程</li><li>根据系统保存的检查点，让所有进程回退，直到足以解除死锁，这种措施要求系统建立保存检查点. 回退及重启机制。</li><li>当检测到死锁时，如果存在某些未卷入死锁的进程，而随着这些进程执行到结束，有可能释放足够的资源来解除死锁。</li></ol><hr><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><hr><h2 id="1-立体（多级）存储体系指啥？为何要进行重定位？为何要进行地址映射"><a href="#1-立体（多级）存储体系指啥？为何要进行重定位？为何要进行地址映射" class="headerlink" title="1. 立体（多级）存储体系指啥？为何要进行重定位？为何要进行地址映射?"></a>1. 立体（多级）存储体系指啥？为何要进行重定位？为何要进行地址映射?</h2><p>立体（多级）存储体系指由寄存器. 高速缓存. 内存储器. 磁盘缓存. 固定磁盘. 可移动存储介质组成的一个存储器层次结构。</p><hr><h2 id="2-从单道到现代OS的虚拟内存管理这一发展线条？你来纵论一下？"><a href="#2-从单道到现代OS的虚拟内存管理这一发展线条？你来纵论一下？" class="headerlink" title="2. 从单道到现代OS的虚拟内存管理这一发展线条？你来纵论一下？"></a>2. 从单道到现代OS的虚拟内存管理这一发展线条？你来纵论一下？</h2><ol><li><div class="hljs code-wrapper"><pre><code> OS最初的单任务系统</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code> OS从单任务处理变为多任务并行处理</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code> MMU的开始使用</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code> 虚拟内存概念的出现</code></pre></div></li></ol><hr><h2 id="3-你能否说清一种内存管理思想的原理及其地址映射过程（如：虚拟分页）？"><a href="#3-你能否说清一种内存管理思想的原理及其地址映射过程（如：虚拟分页）？" class="headerlink" title="3. 你能否说清一种内存管理思想的原理及其地址映射过程（如：虚拟分页）？"></a>3. 你能否说清一种内存管理思想的原理及其地址映射过程（如：虚拟分页）？</h2><h2 id="4-这些概念指啥：快表命中，页内零头，淘汰算法，抖动，碎片，紧凑，页故障率。"><a href="#4-这些概念指啥：快表命中，页内零头，淘汰算法，抖动，碎片，紧凑，页故障率。" class="headerlink" title="4. 这些概念指啥：快表命中，页内零头，淘汰算法，抖动，碎片，紧凑，页故障率。"></a>4. 这些概念指啥：快表命中，页内零头，淘汰算法，抖动，碎片，紧凑，页故障率。</h2><h3 id="快表命中"><a href="#快表命中" class="headerlink" title="快表命中"></a>快表命中</h3><p>当把页号交给快表后，它通过并行匹配同时对所有快表项进行比较，如果找到，则为快表命中。</p><h3 id="页内零头"><a href="#页内零头" class="headerlink" title="页内零头"></a>页内零头</h3><p>在页里面用户没有利用的部分。</p><h3 id="淘汰算法"><a href="#淘汰算法" class="headerlink" title="淘汰算法"></a>淘汰算法</h3><p>一个将快表或页表里将某一页淘汰掉并装入新的页的算法。</p><h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><p>当存储管理方式采用页式存储时，缓存中的页需要可能被替换，下次要使用的页在这回却替换出去了，这样的现象就称为抖动。就会使得刚被替换出去的页又要重新加载。</p><h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><p>指操作系统在内存分配过程中，遗留下来的不能被利用到的内存区域。内存碎片导致部分内存被浪费，大量的内存碎片也会影响到系统的性能。</p><h3 id="紧凑"><a href="#紧凑" class="headerlink" title="紧凑"></a>紧凑</h3><p>将内存空闲区域集中在内存的一端拼接成一个较大的空闲分区，这种方法成为紧凑。</p><h3 id="页故障率"><a href="#页故障率" class="headerlink" title="页故障率"></a>页故障率</h3><p>发生缺页中断的比率。</p><hr><h2 id="5-内存地址映射过程为何要引入硬件寄存器？它与页表-段表-快表-进程表在数量设置上有何关系？内容呢，何时装入？"><a href="#5-内存地址映射过程为何要引入硬件寄存器？它与页表-段表-快表-进程表在数量设置上有何关系？内容呢，何时装入？" class="headerlink" title="5. 内存地址映射过程为何要引入硬件寄存器？它与页表. 段表. 快表. 进程表在数量设置上有何关系？内容呢，何时装入？"></a>5. 内存地址映射过程为何要引入硬件寄存器？它与页表. 段表. 快表. 进程表在数量设置上有何关系？内容呢，何时装入？</h2><p>引入硬件寄存器为了减少内存访问次数，提高访问效率。</p><p>页表只有一个，只有占用CPU的进程才占有它。</p><p>每个用户作业都有自己的段表。</p><p>快表只有一个，存最近访问的页表项。</p><p>进程表只有一个，存进程信息。</p><p>页表中存放的是页框的逻辑地址，在有新页框创建时装入。</p><p>段表中存放的是段的逻辑地址，在有新段创建时装入。</p><p>快表存的是常用页框的逻辑地址，在淘汰页框并更新快表时装入。</p><p>进程表存的是正在运行或就绪的进程信息，在创建进程时装入。</p><hr><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><hr><h2 id="1-设备驱动指什么？是否是OS的一部分？为何使用设备时需要安装驱动？不能事先集成入吗？"><a href="#1-设备驱动指什么？是否是OS的一部分？为何使用设备时需要安装驱动？不能事先集成入吗？" class="headerlink" title="1. 设备驱动指什么？是否是OS的一部分？为何使用设备时需要安装驱动？不能事先集成入吗？"></a>1. 设备驱动指什么？是否是OS的一部分？为何使用设备时需要安装驱动？不能事先集成入吗？</h2><ul><li><p>设备驱动程序包括与设备密切相关的所有代码，其任务是把用户提交的逻辑I/O请求转化为物理I/O操作的启动和执行；同时，监督设备是否正确执行，管理数据缓冲区，进行必要的纠错处理。</p></li><li><p>笼统地说，设备驱动程序的功能是从独立于设备的软件中接收并执行I/O请求。</p></li><li><p>设备驱动是OS的一部分</p></li><li><p>驱动负责沟通对应的硬件和操作系统，是两者之间的桥梁，不安装驱动的话操作系统则无法识别对应的硬件设备</p></li><li><p>可以事先集成设备驱动</p></li></ul><hr><h2 id="2-CPU如何实现对设备的控制？有哪些方式？各种方式的特点与原理？设备（如硬盘）要与内存传数，难道不和CPU冲突吗？"><a href="#2-CPU如何实现对设备的控制？有哪些方式？各种方式的特点与原理？设备（如硬盘）要与内存传数，难道不和CPU冲突吗？" class="headerlink" title="2. CPU如何实现对设备的控制？有哪些方式？各种方式的特点与原理？设备（如硬盘）要与内存传数，难道不和CPU冲突吗？"></a>2. CPU如何实现对设备的控制？有哪些方式？各种方式的特点与原理？设备（如硬盘）要与内存传数，难道不和CPU冲突吗？</h2><ul><li>按照I/O控制器功能的强弱以及它和CPU之间联系方式的不同，可以把设备控制方式分为<strong>轮询. 中断. DMA. 和通道</strong>4类。</li><li><strong>它们之间的差别在于CPU和设备并行工作的方式和程度不同。</strong></li></ul><h3 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a>轮询方式</h3><ul><li><p><strong>轮询方式又称程序直接控制方式，使用查询指令测试设备控制器的忙闲状态位，确定内存和设备是否能交换数据。</strong></p></li><li><p>轮询方式使用三条指令：</p></li><li><p><strong>查询指令：</strong>查询设备是否就绪；</p></li><li><p><strong>读写指令：</strong>当设备就绪时执行数据交换；</p></li><li><p><strong>转移指令：</strong>当设备未就绪时执行转移指令转向查询指令继续查询；</p></li></ul><h3 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h3><p>-中断方式要求CPU与设备控制器及设备之间存在中断请求线，设备控制器的状态寄存器有相应的中断允许位。</p><h3 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h3><ul><li>在DMA方式中，内存和设备之间有一条数据通路成块地传送数据，无须CPU干扰，实际数据传输操作由DMA直接完成。</li></ul><p><strong>DMA方式需以下设施：</strong></p><p>(1)<strong>内存地址寄存器：</strong>存放内存中需要交换数据的地址，DMA传送之前由程序送入首地址；DMA传送过程中，每次交换数据都把地址寄存器的内容加1。</p><p>(2)<strong>字计数器：</strong>记录传送数据的总字数，每次传送一个字就把字计数器减1。</p><p>(3)<strong>数据缓冲寄存器或数据缓冲区：</strong>暂存每次传送的数据。</p><p>(4)<strong>设备地址寄存器：</strong>存放I/O信息的地址，如磁盘的柱面号. 磁头号. 扇区号。</p><p>(5)<strong>中断机制和控制逻辑：</strong>用于向CPU提出I/O中断请求及保存CPU发来的I/O。</p><h3 id="通道方式"><a href="#通道方式" class="headerlink" title="通道方式"></a>通道方式</h3><ul><li>采用通道后的I/O操作过程：CPU在执行主程序时遇到I/O请求，它启动指定通道上选址的外围设备，一旦启动成功，通道开始控制外围设备进行操作。CPU就可执行其他任务并与通道并行工作，直到I/O操作完成。通道发出操作结束中断时，CPU才停止当前工作，转向处理I/O操作结束事件。</li></ul><hr><h2 id="3-OS的设备管理I-O子系统工作机制如何？请以缺页中断为例加以说明？"><a href="#3-OS的设备管理I-O子系统工作机制如何？请以缺页中断为例加以说明？" class="headerlink" title="3. OS的设备管理I/O子系统工作机制如何？请以缺页中断为例加以说明？"></a>3. OS的设备管理I/O子系统工作机制如何？请以缺页中断为例加以说明？</h2><h3 id="I-O操作执行步骤"><a href="#I-O操作执行步骤" class="headerlink" title="I/O操作执行步骤"></a>I/O操作执行步骤</h3><ol><li><p>进程对已打开文件的文件描述符执行读库函数；</p></li><li><p>独立设备I/O软件检查参数正确性。高速缓存中有要读的信息块，从缓冲区直接读到用户区，完成I/O请求；</p></li><li><p>若数据不在缓冲区，执行物理I/O，实现将设备逻辑名转换成物理名，检查对设备操作的权限，将I/O请求排队，阻塞进程且等待I/O完成；</p></li><li><p>内核启动设备驱动程序，分配存放读出块的缓冲区，准备接收数据，且向设备控制寄存器发启动命令，或建立DMA传输，启动I/O；</p></li><li><p>设备控制器操作设备，执行数据传输；</p></li><li><p>DMA控制器控制一块传输完成，硬件产生I/O结束中断；</p></li><li><p>CPU响应中断，转向磁盘中断处理程序。</p></li><li><p>当应用进程被再次调度执行时，从I/O系统调用的断点恢复执行。 </p></li></ol><h3 id="缺页异常处理过程"><a href="#缺页异常处理过程" class="headerlink" title="缺页异常处理过程"></a>缺页异常处理过程</h3><ul><li><strong>缺页异常是由于发现当前访问页面不在内存时由硬件所产生的一种特殊中断信号，是在指令执行期间产生并由系统处理的。</strong></li></ul><p>**缺页本身是一种中断，与一般的中断一样，需要经过4个处理步骤： **</p><ol><li><p>保护CPU现场 </p></li><li><p>分析中断原因 </p></li><li><p>转入缺页中断处理程序进行处理 </p></li><li><p>恢复CPU现场，继续执行 </p></li></ol><p>**但是缺页中断时由于所要访问的页面不存在内存时，有硬件所产生的一种特殊的中断，因此，与一般的中断存在区别： **</p><ol><li><p>在指令执行期间产生和处理缺页中断信号 </p></li><li><p>一条指令在执行期间，可能产生多次缺页中断 </p></li><li><p>缺页中断返回时，执行产生中断的那一条指令，而一般的中断返回时，执行下一条指令</p></li></ol><p><strong>缺页异常的整个过程</strong></p><ol><li><p>首先硬件会陷入内核，在堆栈中保存<strong>程序计数器</strong>。<strong>大多数机器将当前指令的各种状态信息保存在CPU中特殊的寄存器中。</strong></p></li><li><p><strong>启动一个汇编代码例程保存通用寄存器及其它易失性信息，</strong>以免被操作系统破坏。这个例程将操作系统作为一个函数来调用。（在页面换入换出的过程中可能会发生上下文换行，导致破坏当前程序计数器及通用寄存器中本进程的信息）</p></li><li><p>当操作系统发现是一个页面中断时，<strong>查找出来发生页面中断的虚拟页面</strong>（进程地址空间中的页面）。<strong>这个虚拟页面的信息通常会保存在一个硬件寄存器中，</strong>如果没有的话，操作系统必须检索程序计数器，取出这条指令，用软件分析该指令，通过分析找出发生页面中断的虚拟页面。</p></li><li><p><strong>检查虚拟地址的有效性及安全保护位。</strong>如果发生保护错误，则杀死该进程。</p></li><li><p><strong>操作系统查找一个空闲的页框(物理内存中的页面)，</strong>如果没有空闲页框则需要通过页面置换算法找到一个需要换出的页框。</p></li><li><p><strong>如果找的页框中的内容被修改了，则需要将修改的内容保存到磁盘上，</strong>此时会引起一个<strong>写磁盘调用</strong>，发生上下文切换（在等待磁盘写的过程中让其它进程运行）。（注：此时需要将页框置为忙状态，以防页框被其它进程抢占掉）</p></li><li><p>页框干净后，<strong>操作系统根据虚拟地址对应磁盘上的位置，将保持在磁盘上的页面内容复制到“干净”的页框中，</strong>此时会引起一个<strong>读磁盘调用</strong>，发生上下文切换。</p></li><li><p><strong>当磁盘中的页面内容全部装入页框后，向操作系统发送一个中断。</strong>操作系统<strong>更新内存中的页表项，</strong>将虚拟页面映射的页框号更新为写入的页框，并将页框标记为正常状态。</p></li><li><p><strong>恢复缺页中断发生前的状态，</strong>将程序指令器重新指向引起缺页中断的指令。</p></li><li><p><strong>调度引起页面中断的进程，</strong>操作系统返回汇编代码例程。</p></li><li><p><strong>汇编代码例程恢复现场，</strong>将之前保存在通用寄存器中的信息恢复。</p></li></ol><blockquote><p><strong>缺页中断的过程涉及了用户态和内核态之间的切换，虚拟地址和物理之间的转换（这个转换过程需要使用MMU和TLB），同时涉及了内核态到用户态的转换。</strong></p></blockquote><hr><h2 id="4-磁盘驱动这一举例中为何要提到“调度策略”？"><a href="#4-磁盘驱动这一举例中为何要提到“调度策略”？" class="headerlink" title="4. 磁盘驱动这一举例中为何要提到“调度策略”？"></a>4. 磁盘驱动这一举例中为何要提到“调度策略”？</h2><ul><li><p><strong>对于系统性能产生重要影响的是磁盘I/O，</strong>为了提高磁盘I/O性能，广为使用的有两种方法：<strong>磁盘驱动调度和磁盘缓冲区。</strong></p></li><li><p>不同的调度策略算法对于磁盘驱动调度的性能影响很大，从而对磁盘I/O性能再到系统整体性能表现影响也很大。</p></li></ul><hr><h2 id="5-为何要用到缓冲？DMA中的缓冲区作用为何？"><a href="#5-为何要用到缓冲？DMA中的缓冲区作用为何？" class="headerlink" title="5. 为何要用到缓冲？DMA中的缓冲区作用为何？"></a>5. 为何要用到缓冲？DMA中的缓冲区作用为何？</h2><h3 id="为何要用到缓冲？"><a href="#为何要用到缓冲？" class="headerlink" title="为何要用到缓冲？"></a>为何要用到缓冲？</h3><ul><li><p>数据离开设备之后通常不能直接送达目的地，所以必须通过<strong>缓冲区来消除填满速率和清空速率的影响。</strong></p></li><li><p>也就是说缓冲是为了解决高速设备和低速设备之间的速度不匹配问题。</p></li></ul><h3 id="DMA中的缓冲区作用为何？"><a href="#DMA中的缓冲区作用为何？" class="headerlink" title="DMA中的缓冲区作用为何？"></a>DMA中的缓冲区作用为何？</h3><ul><li><p>内存中用于与外设交互数据的一块区域被称作DMA缓冲区。</p></li><li><p>外设的设备读写速度与内存相比非常慢，因此需要使用缓冲区来减少等待时间，提高DMA的运行效率。</p></li></ul><hr><h2 id="6-何为虚拟设备？"><a href="#6-何为虚拟设备？" class="headerlink" title="6. 何为虚拟设备？"></a>6. 何为虚拟设备？</h2><ul><li><p>在<strong>一台共享设备上模拟若干台独享设备</strong>的操作，把独占型设备变成<strong>逻辑上的共享型设备</strong>，这种技术叫做<strong>虚拟设备技术。</strong></p></li><li><p>实现这种技术的软件和硬件被称为<strong>SPOOLING系统</strong>，使用SPOOLING技术所提供的设备就称为<strong>虚拟设备。</strong></p></li></ul><blockquote><p>实现虚拟设备的主要条件是：硬件上需要在磁盘上开辟输入井和输出井用做缓冲的存储区域。软件上需要预输入程序. 缓输出程序和井管理程序。</p></blockquote><hr><h2 id="7-OS中为何要引入逻辑设备？即在驱动中完成“逻辑设备—物理设备”对应？"><a href="#7-OS中为何要引入逻辑设备？即在驱动中完成“逻辑设备—物理设备”对应？" class="headerlink" title="7. OS中为何要引入逻辑设备？即在驱动中完成“逻辑设备—物理设备”对应？"></a>7. OS中为何要引入逻辑设备？即在驱动中完成“逻辑设备—物理设备”对应？</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>为了实现设备独立性而引入了逻辑设备和物理设备两概念。</strong>这使得应用程序独立于具体使用的物理设备。<br>这样的<strong>好处是提高了OS的可适应性和可扩展性</strong>,在应用程序中,使用逻辑设备名称来请求使用某类设备;而系统在实际执行时,还必须使用物理设备名称。</p><h3 id="设备独立性带来的好处"><a href="#设备独立性带来的好处" class="headerlink" title="设备独立性带来的好处"></a>设备独立性带来的好处</h3><ol><li><p>应用程序与具体物理设备无关，系统增减或变更设备时对源程序不必加以任何修改；</p></li><li><p>易于应对I/O设备故障，从而提高系统可靠性，增加设备分配的灵活性，能更有效地利用设备资源，实现多道程序设计；</p></li></ol><hr><h2 id="8-IDE是什么？串口与并口指什么？举例？PCI呢？"><a href="#8-IDE是什么？串口与并口指什么？举例？PCI呢？" class="headerlink" title="8. IDE是什么？串口与并口指什么？举例？PCI呢？"></a>8. IDE是什么？串口与并口指什么？举例？PCI呢？</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li><p>平常所说的IDE接口，也称之为ATA接口。ATA的英文拼写为“Advanced Technology Attachment”，含义是“高级技术附加装置”。</p></li><li><p>早期的IDE接口有两种传输模式，一个是PIO（Programming I/O）模式，另一个是DMA（Direct Memory Access）。</p></li></ul><h3 id="串口与并口"><a href="#串口与并口" class="headerlink" title="串口与并口"></a>串口与并口</h3><ul><li><p><strong>串行接口简称串口</strong>，也称串行通信接口或串行通讯接口<strong>（通常指COM接口）</strong>，是采用串行通信方式的扩展接口。串行接口 (Serial Interface) 是<strong>指数据一位一位地顺序传送，其特点是通信线路简单，只要一对传输线就可以实现双向通信</strong>（可以直接利用电话线作为传输线），从而大大降低了成本，特别适用于远距离通信，但传送速度较慢。</p></li><li><p><strong>并行接口，指采用并行传输方式来传输数据的接口标准。</strong>一个并行接口的接口特性可以从两个方面加以描述：1. 以并行方式传输的数据通道的宽度，也称接口传输的位数；2. 用于协调并行数据传输的额外接口控制线或称交互信号的特性。 数据的宽度可以从1～128位或者更宽</p></li><li><p><strong>SCSI和IDE都是并行接口。</strong></p></li><li><p>串口形容一下就是：一条车道，而并口就是有多个车道同一时刻能传送多位（一个字节）数据。但是并不是并口快。由于多位通道之间的互相干扰，传输时速度就受到了限制。而且当传输出错时，要同时重新传多个位的数据。而串口没有干扰，传输出错后重发一位就可以了，所以要比并口快。</p></li></ul><h3 id="PCI"><a href="#PCI" class="headerlink" title="PCI"></a>PCI</h3><ul><li>PCI是Peripheral Component Interconnect(外设部件互连标准)的缩写，它是目前个人电脑中使用最为广泛的接口，几乎所有的主板产品上都带有这种插槽。<strong>（可惜现在都变成了PCIe接口）</strong></li><li>PCI （Peripheral Component Interconnect）总线是一种高性能局部总线，是为了满足外设间以及外设与主机间高速数据传输而提出来的。在数字图形. 图像和语音处理，以及高速实时数据采集与处理等对数据传输率要求较高的应用中，采用PCI总线来进行数据传输，可以解决原有的标准总线数据传输率低带来的瓶颈问题。</li></ul><hr><h2 id="9-磁盘调度算法"><a href="#9-磁盘调度算法" class="headerlink" title="9. 磁盘调度算法"></a>9. 磁盘调度算法</h2><h3 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务/FCFS"></a>先来先服务/FCFS</h3><ul><li><p>First Come First Serve algorithm</p></li><li><p>顾名思义，先来的先服务，不考虑各I/O请求之间的相对次序和移动臂当前所处位置；</p></li><li><p>进程等待I/O请求的时间会很长，寻道性能较差；</p></li></ul><h3 id="最短查找时间优先算法-SSTF"><a href="#最短查找时间优先算法-SSTF" class="headerlink" title="最短查找时间优先算法/SSTF"></a>最短查找时间优先算法/SSTF</h3><ul><li><p>Shortest Seek Time First algorithm</p></li><li><p>SSTF考虑I/O请求之间的区别，<strong>总是先执行查找时间最短的请求，</strong>与FCS算法相比有较好的寻道性能。</p></li></ul><h3 id="扫描算法-SCAN"><a href="#扫描算法-SCAN" class="headerlink" title="扫描算法/SCAN"></a>扫描算法/SCAN</h3><ul><li><p>SCAN algorithm</p></li><li><p><strong>在SCAN中，移动臂每次沿一个方向移动，扫过所有柱面，遇到最近的I/O请求便进行处理，直至到达最后一个柱面后，再向相反的方向移动回来。</strong></p></li><li><p><strong>SCAN与电梯调度算法不同的是：即使当前移动方向暂时没有I/O请求，移动臂也需要扫描到头。</strong></p></li><li><p>扫描算法偏爱那些最接近里面或靠近外面的请求，对最近扫描所跨越区域的I/O请求的响应速度会较慢。</p></li></ul><h3 id="分步扫描算法-N-steps"><a href="#分步扫描算法-N-steps" class="headerlink" title="分步扫描算法/N-steps"></a>分步扫描算法/N-steps</h3><ul><li><p>N-steps scan algorithm</p></li><li><p><strong>将I/O请求分为长度为N的子队列，按FIFO算法依次处理每个子队列，而每个子队列采用扫描算法，处理完一个后再服务下一个子队列。</strong></p></li><li><p>在一段时间内进程重复请求访问同一柱面会垄断整个设备，造成磁盘臂停留在柱面上不动，<strong>称为“磁臂粘性”，</strong>使所有其他柱面的访问请求可能长时间得不到服务。</p></li><li><p>当N很大的时候 ，接近于扫描算法性能；当N=1的时候，接近于FIFO算法性能。</p></li></ul><h3 id="电梯调度算法-LOOK"><a href="#电梯调度算法-LOOK" class="headerlink" title="电梯调度算法/LOOK"></a>电梯调度算法/LOOK</h3><ul><li><p>elevator algorithm又称LOOK算法</p></li><li><p>SCAN算法的改进，无访问请求时，移动臂停止不动，有访问请求时，移动臂按电梯规律移动。</p></li><li><p><strong>LOOK不需要扫描到磁盘的尽头！</strong></p></li></ul><h3 id="循环扫描算法-Circular-scan"><a href="#循环扫描算法-Circular-scan" class="headerlink" title="循环扫描算法/Circular scan"></a>循环扫描算法/Circular scan</h3><ul><li><p>Circular scan algorithm</p></li><li><p><strong>移动臂总是从0号柱面至最大号柱面顺序扫描，然后直接返回0号柱面重复进行，归途中不再提供服务，</strong>构成一个循环，缩短处理新来请求的最大延迟。</p></li></ul><hr><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><hr><h2 id="1-文件如何分类？为何有这么多种分类？"><a href="#1-文件如何分类？为何有这么多种分类？" class="headerlink" title="1. 文件如何分类？为何有这么多种分类？"></a>1. 文件如何分类？为何有这么多种分类？</h2><p><strong>文件是由文件名字标识的一组信息的集合。可按各种方法进行分类：</strong></p><ul><li><p>按用途分类：</p></li><li><p>按保护级别分类：</p></li><li><p>按信息流向分类：</p></li><li><p>按存放时限分类：</p></li><li><p>按设备类型分类：</p></li><li><p>按文件的结构分类：</p></li></ul><p><strong>有多种分类的原因是文件本身的信息和属性多样，根据不同的用途. 权限. 存储方式等均可进行不同需求的划分。</strong></p><blockquote><p>参考资料：<a href="https://blog.csdn.net/liu_fei_er/article/details/80619625">https://blog.csdn.net/liu_fei_er/article/details/80619625</a></p></blockquote><hr><h2 id="2-系统实现按名存取文件主要依靠什么数据结构？"><a href="#2-系统实现按名存取文件主要依靠什么数据结构？" class="headerlink" title="2. 系统实现按名存取文件主要依靠什么数据结构？"></a>2. 系统实现按名存取文件主要依靠什么数据结构？</h2><ul><li><p>**文件控制块 (FCB)**是OS为每个文件建立的唯一数据结构，其中包含了全部文件属性，其目的是既便于用户的操作和使用，又便于操作系统对文件的管理和控制。</p></li><li><p><strong>一个文件由两部分组成 ：FCB 和文件体（文件信息）。</strong>有了 FCB 就可以实现文件的“按名存取”</p></li></ul><hr><h2 id="3-文件的组织有哪几种形式？文件和存储介质有什么关系？"><a href="#3-文件的组织有哪几种形式？文件和存储介质有什么关系？" class="headerlink" title="3. 文件的组织有哪几种形式？文件和存储介质有什么关系？"></a>3. 文件的组织有哪几种形式？文件和存储介质有什么关系？</h2><p>文件组织是指<strong>文件中信息的配置和构造方式</strong>，应该从<strong>文件的逻辑结构和组织</strong>以及<strong>文件的物理结构和组织</strong>两方面加以考虑。</p><h3 id="文件和存储介质的关系"><a href="#文件和存储介质的关系" class="headerlink" title="文件和存储介质的关系"></a>文件和存储介质的关系</h3><ul><li><p>文件的增删改查操作都与存储介质密切相关。</p></li><li><p>文件系统中的磁盘管理除管理文件空间外，还将文件的逻辑地址转换成磁盘的物理地址，即由逻辑块号找到柱面号. 磁头号和扇区号，设备与内存之间的数据传输操作由文件系统调用设备管理实现。</p></li></ul><hr><h2 id="4-文件的逻辑组织是什么概念？有哪些方式？"><a href="#4-文件的逻辑组织是什么概念？有哪些方式？" class="headerlink" title="4. 文件的逻辑组织是什么概念？有哪些方式？"></a>4. 文件的逻辑组织是什么概念？有哪些方式？</h2><p>文件的逻辑结构和组织指从用户观点出发，研究用户概念中抽象的信息组织方式，这是用户所能观察到的，可加以处理的数据集合。</p><p><strong>文件的逻辑结构分为两种形式：流式文件和记录式文件。</strong></p><h3 id="流式文件"><a href="#流式文件" class="headerlink" title="流式文件"></a>流式文件</h3><p><strong>流式文件是一种无结构的文件，</strong>文件内的数据不再组成记录，只是依次的一串信息集合，<strong>称为字节流文件，</strong>可以看成是只有一个记录的记录式文件。</p><blockquote><p>为了简化系统，大多数现代操作系统如Linux系统只提供流式文件。</p></blockquote><h3 id="记录式文件"><a href="#记录式文件" class="headerlink" title="记录式文件"></a>记录式文件</h3><p><strong>记录式文件是一种有结构的文件，</strong>它包含若干逻辑记录，逻辑记录是文件中按信息在逻辑上的独立含义所划分的信息单位。</p><p>记录式文件中有两种常用的记录组织和使用方法：</p><ul><li><p><strong>记录式顺序文件：</strong>文件的记录顺序生成并被顺序访问。</p></li><li><p><strong>记录式索引顺序文件：</strong>这种文件使用索引表，表项包含记录键和索引指针，记录键由应用程序确定，而索引指针便指向相应记录。</p></li></ul><hr><h2 id="5-文件的物理组织是什么概念？有哪些方式？"><a href="#5-文件的物理组织是什么概念？有哪些方式？" class="headerlink" title="5. 文件的物理组织是什么概念？有哪些方式？"></a>5. 文件的物理组织是什么概念？有哪些方式？</h2><ul><li><p>文件的物理结构和组织是指逻辑文件在物理存储空间中的存放方法和组织关系，这时的文件看做物理文件，即相关物理块的集合。</p></li><li><p>文件的存储结构涉及：块的划分. 记录的排列. 索引的组织. 信息的搜索，其优劣直接影响文件系统的性能。</p></li><li><p><strong>有两类方法可以用来构造文件物理结构：计算法和指针法。</strong></p></li><li><p><strong>常用的文件物理结构和组织方法有：顺序文件. 连接文件. 索引文件. 直接文件。</strong></p></li></ul><hr><h2 id="6-文件目录与目录文件是指什么？"><a href="#6-文件目录与目录文件是指什么？" class="headerlink" title="6. 文件目录与目录文件是指什么？"></a>6. 文件目录与目录文件是指什么？</h2><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p><strong>为了加快文件查找速度，通常把FCB汇集和组织在一起形成文件目录，文件目录包含许多目录项，目录项有两种，分别用于描述子目录和描述文件。</strong></p><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><ul><li><p>目录项的格式按统一标准定义，<strong>全部由目录项所构成的文件称为目录文件。</strong></p></li><li><p>目录文件保存在外存上，查找文件时调入内存工作区。</p></li><li><p>与普通文件不同，目录文件永远不会空，它至少包含两个目录项：<strong>当前目录“.”和父目录项“..”</strong>。</p></li></ul><hr><h2 id="7-文件的访问方式有哪些？请做说明？"><a href="#7-文件的访问方式有哪些？请做说明？" class="headerlink" title="7. 文件的访问方式有哪些？请做说明？"></a>7. 文件的访问方式有哪些？请做说明？</h2><p><strong>常用的文件访问方式有：顺序存取. 直接存取和索引存取</strong></p><h3 id="顺序存取"><a href="#顺序存取" class="headerlink" title="顺序存取"></a>顺序存取</h3><ul><li><p>无论是无结构字节流文件，还是有结构记录式文件，存取操作都在上次操作的基础上进行。系统设置读写两个位置指针，指向要读出或写入的字节位置或记录位置。</p></li><li><p><strong>顺序存取主要用于磁带文件，但也适用于磁盘上的顺序文件。</strong></p></li></ul><h3 id="直接存取"><a href="#直接存取" class="headerlink" title="直接存取"></a>直接存取</h3><ul><li><p>又称随机存取，可以非顺序地从文件中的任何位置存取文件内容。</p></li><li><p><strong>直接存取方法适合于要求快速地以任意次序直接读写某条记录的应用，</strong>如订机票；<strong>它也通常用于磁盘文件。</strong></p></li></ul><h3 id="索引存取"><a href="#索引存取" class="headerlink" title="索引存取"></a>索引存取</h3><ul><li>这是基于索引文件的存取方法，由于文件中的记录不按位置而是按其记录名或记录键来编址，所以用户提供记录名或记录键后，先按名搜索，再查找所需要的记录。</li></ul><hr><h2 id="8-文件控制块（FCB）的作用？"><a href="#8-文件控制块（FCB）的作用？" class="headerlink" title="8. 文件控制块（FCB）的作用？"></a>8. 文件控制块（FCB）的作用？</h2><ul><li><p>文件控制块（File Control Block，FCB）是操作系统为每个文件建立的唯一数据结构，<strong>其中包含了全部文件属性，其目的是为方便操作系统对文件的管理. 控制和存取。</strong></p></li><li><p>有了FCB就可以方便地实现文件的按名存取。</p></li><li><p>每当创建一个文件时，系统就要为其建立一个FCB，用来记录文件的属性信息；每当存取文件时，先找到其FCB，再找到文件信息盘块号. 首块物理位置或索引表就能存取文件信息。</p></li></ul><hr><h2 id="9-目录结构的概念与分级情形？"><a href="#9-目录结构的概念与分级情形？" class="headerlink" title="9. 目录结构的概念与分级情形？"></a>9. 目录结构的概念与分级情形？</h2><ul><li><p>最简单的文件目录时一级目录结构，所有FCB排列在一张线性表中，<strong>其缺点是文件重名和文件共享问题难以解决。</strong></p></li><li><p><strong>实际上，所有文件系统都支持多级层次结构，根目录是唯一的，每一级目录可以是下一级目录的说明，也可以是文件的说明，从而形成树状目录结构。</strong></p></li></ul><p><strong>树状多级目录结构有许多优点：</strong></p><ol><li><p>可以较好地反映现实世界中具有层次关系的数据集合，确切地反映系统内部文件的分支结构；</p></li><li><p>不同文件可以重名，只要它们不位于同一末端子目录中即可；</p></li><li><p>易于规定不同层次或子目录中文件的不同存取权限，便于文件的保护. 保密和共享等；</p></li><li><p>有利于系统的维护和查找。</p></li></ol><hr><h2 id="10-删除文件主要删除哪些内容？为何删除的文件可以被恢复？你认为删除文件应该删除哪些内容？请从安全性与性能两方面来解释各自的影响？"><a href="#10-删除文件主要删除哪些内容？为何删除的文件可以被恢复？你认为删除文件应该删除哪些内容？请从安全性与性能两方面来解释各自的影响？" class="headerlink" title="10. 删除文件主要删除哪些内容？为何删除的文件可以被恢复？你认为删除文件应该删除哪些内容？请从安全性与性能两方面来解释各自的影响？"></a>10. 删除文件主要删除哪些内容？为何删除的文件可以被恢复？你认为删除文件应该删除哪些内容？请从安全性与性能两方面来解释各自的影响？</h2><ul><li><p>一个文件由两部分组成：FCB和文件体（文件信息）；</p></li><li><p>删除文件主要删除其FCB信息，文件信息还保存在磁盘中，因此只要找到磁盘中对应位置的数据就可以恢复被删除的文件。</p></li><li><p>从性能方面来说，只删除FCB是优秀的选择，这样速度更快，系统开销更小；</p></li><li><p>从安全性方面来说，删除文件时应将文件信息也一并删除；</p></li></ul><hr><h2 id="11-就你所了解的文件物理组织中，哪些是你认为不错的组织方式？"><a href="#11-就你所了解的文件物理组织中，哪些是你认为不错的组织方式？" class="headerlink" title="11. 就你所了解的文件物理组织中，哪些是你认为不错的组织方式？"></a>11. 就你所了解的文件物理组织中，哪些是你认为不错的组织方式？</h2><h3 id="顺序文件"><a href="#顺序文件" class="headerlink" title="顺序文件"></a>顺序文件</h3><ul><li><p><strong>将文件中逻辑上连续的信息存放到存储介质的相邻物理块上形成顺序结构，叫做顺序文件，又称连续文件。</strong></p></li><li><p><strong>顺序文件的优点</strong>是顺序存取记录时速度快，在批处理文件. 系统文件中用得很多。</p></li><li><p><strong>顺序文件的缺点</strong>是建立文件之前需要预先确定文件长度，以便分配存储空间；修改. 插入和添加文件记录有一定的难度；对于变长记录的处理很困难；对磁盘作连续分配会造成空闲块的浪费。</p></li></ul><h3 id="连接文件"><a href="#连接文件" class="headerlink" title="连接文件"></a>连接文件</h3><ul><li><p><strong>连接结构的特点是使用连接字，又称指针，来表示文件中各条记录之间的关系。</strong></p></li><li><p>连接结构克服了顺序结构不适应于增. 删. 改的缺点，对某些操作会带来好处，但在其他方面又会失去一些性能。</p></li><li><p>使用连接文件很容易把数据记录组织起来，但是查找某条记录需遍历链接结构，效率很低。</p></li></ul><h3 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h3><ul><li><p><strong>索引结构式实现非连续存储的另一种方法，适用于数据记录保存在磁盘上的文件。</strong></p></li><li><p>索引结构是连接结构的一种扩展，除了具备连接文件的优点外，记录可以散列存储，具有直接读写任意记录的能力，便于信息的增. 删. 改。</p></li><li><p>缺点是索引表的空间开销和查找时间的开销大，大型文件的索引表的信息量甚至可能远远超过文件记录本身的信息量。</p></li></ul><h3 id="直接文件"><a href="#直接文件" class="headerlink" title="直接文件"></a>直接文件</h3><ul><li><p><strong>在直接存取存储设备上，利用哈希法将记录的关键字与其地址之间建立某种对应关系，以便实现快速存取的文件叫做直接文件. 散列文件或哈希文件。</strong></p></li><li><p>这种存储结构用在不能采用顺序组织方法. 次序较乱. 又需在极短时间内进行存取的场合，对于实时处理文件. 目录文件. 存储管理的页表查找. 编译程序变量名表等的管理十分有效。</p></li></ul><hr><h2 id="12-请你把文件操作与上一章的设备管理结合起来，叙述文件读写的整个过程？"><a href="#12-请你把文件操作与上一章的设备管理结合起来，叙述文件读写的整个过程？" class="headerlink" title="12. 请你把文件操作与上一章的设备管理结合起来，叙述文件读写的整个过程？"></a>12. 请你把文件操作与上一章的设备管理结合起来，叙述文件读写的整个过程？</h2><p>心累，不说。</p><hr><h2 id="13-定期紧缩磁盘空间会导致什么好处？"><a href="#13-定期紧缩磁盘空间会导致什么好处？" class="headerlink" title="13. 定期紧缩磁盘空间会导致什么好处？"></a>13. 定期紧缩磁盘空间会导致什么好处？</h2><ul><li><p><strong>因为文件被分散保存到整个磁盘的不同地方，而不是连续地保存在磁盘连续的簇中形成的。</strong>硬盘在使用一段时间后，由于反复写入和删除文件，<strong>磁盘中的空闲扇区会分散到整个磁盘中不连续的物理位置上，</strong>从而使文件不能存在连续的扇区里。这样，再读写文件时就需要到不同的地方去读取，<strong>增加了磁头的来回移动，降低了磁盘的访问速度。</strong></p></li><li><p><strong>定期紧缩磁盘空间可以使原本分散的文件碎片被重新整理到一起，减少磁盘在读取的时候的磁头移动，增高磁盘的读写效率。</strong></p></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;《操作系统》部分重点内容，包括讨论题和部分小七自己整理的概念. 重要知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>Windows上Apache Tomcat的安装配置</title>
    <link href="https://tinychen.com/20181112-win-install-tomcat/"/>
    <id>https://tinychen.com/20181112-win-install-tomcat/</id>
    <published>2018-11-12T07:00:00.000Z</published>
    <updated>2018-11-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> 本文介绍使用JAVA8+Apache Tomcat 9.0.19的安装配置。</p><p>文中部分内容更新于2019年5月10日。</p><span id="more"></span><h1 id="1、Tomcat是什么？"><a href="#1、Tomcat是什么？" class="headerlink" title="1、Tomcat是什么？"></a>1、Tomcat是什么？</h1><blockquote><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>摘自百度百科</p></blockquote><h1 id="2、配置JAVA8"><a href="#2、配置JAVA8" class="headerlink" title="2、配置JAVA8"></a>2、配置JAVA8</h1><p>JAVA8下载地址，下载前记得要先勾选accept，否则无法下载，i586/x86即为32位，x64为64位，大家根据自己的机器配置下载对应的版本。<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p><img src="https://resource.tinychen.com/181109Tomcat%20%281%29.png"></p><blockquote><p><strong>注意，现在在甲骨文官网下载JDK需要先进行注册登录，否则无法正常下载。</strong></p></blockquote><p>JAVA8安装比较简单，这里不再贴过多的图片，需要安装更新的版本的同学可以看看这篇文章：<a href="https://tinychen.com/20180803-jdk-install/">JDK安装与环境变量配置</a></p><ol><li><p>安装下载好的JDK文件，此处为jdk-8u211-windows-x64.exe，安装完成后，配置环境变量，右击【我的电脑】—【属性】—–【高级】—【环境变量】;</p></li><li><p>选择【新建系统变量】–弹出“新建系统变量”对话框，在“变量名”文本框输入<code>JAVA_HOME</code>,在“变量值”文本框输入<strong>JDK的安装路径</strong>，单击“确定”按钮;</p></li><li><p>在“系统变量”选项区域中查看PATH变量，如果不存在，则新建变量 <code>PATH</code>，否则选中该变量，单击“编辑”按钮，在“变量值”文本框的起始位置添加<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code>，或者是直接<code>%JAVA_HOME%\bin</code>，单击确定按钮；</p></li><li><p>在“系统变量”选项区域中查看<code>CLASSPATH</code> 变量，如果不存在，则新建变量<code>CLASSPATH</code>，否则选中该变量，单击“编辑”按钮，在“变量值”文本框的起始位置添加<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p></li></ol><ol start="5"><li>测试环境变量的配置成功与否。在DOS命令行窗口或powershell输入<code>JAVAC</code>，输出帮助信息即为配置正确。</li></ol><p><img src="https://resource.tinychen.com/blog/20190510/poPbblp4gVrs.png"></p><h1 id="3、安装Apache的Tomcat"><a href="#3、安装Apache的Tomcat" class="headerlink" title="3、安装Apache的Tomcat"></a>3、安装Apache的Tomcat</h1><ol><li>用浏览器打开tomcat官网：<div class="hljs code-wrapper"><pre><code> https://tomcat.apache.org/ 点击左侧的导航栏Download下方选择最新的Tomcat 9，出现以下页面，点击页面下方的“64-bit Windows zip (pgp, sha1,sha512)“进行下载。</code></pre></div> <img src="https://resource.tinychen.com/blog/20190510/8n5yCERheDQB.png"></li></ol><ol start="2"><li><p>完成下载后，直接解压，路径自选。（这里以D:\apache-tomcat-9.0.19为例）</p></li><li><p>右键 “此电脑”，点击”属性”，点击”高级系统设置”—&gt;”高级”—&gt;”环境变量”</p></li><li><p>在”系统变量”里新建变量名：<code>CATALINA_BASE</code>，变量值：<code>D:\apache-tomcat-9.0.19</code>（此处为你的解压包路径）</p></li></ol><p><img src="https://resource.tinychen.com/blog/20190510/gQmMGVQXCs4g.png"></p><ol start="5"><li>在”系统变量”里新建变量名：<code>CATALINA_HOME</code>，变量值：<code>D:\apache-tomcat-9.0.19</code></li></ol><p><img src="https://resource.tinychen.com/blog/20190510/Bg6prx7abE8T.png"></p><ol start="6"><li>在”系统变量”里打开<code>Path</code>变量，添加变量值：<code>%CATALINA_HOME%\lib</code>和<code>%CATALINA_HOME%\bin</code>（这一步可有可无，有些电脑无需配置此步骤便可完成，因此可以先跳过）</li></ol><p><img src="https://resource.tinychen.com/blog/20190510/uAOhLOFK1G8o.png"></p><ol start="7"><li>使用DOS或者powershell进入tomcat下的bin目录（本人电脑的路径为D:\apache-tomcat-9.0.19\bin），执行“service.bat install”  。（附：service卸载命令：service.bat remove）</li></ol><p><img src="https://resource.tinychen.com/blog/20190510/yn6LLdYG5PIN.png"></p><ol start="8"><li>启动tomcat，在tomcat解压路径下的bin文件夹内双击打开”tomcat9w.exe”，在打开的软件界面点击“Start”即可</li></ol><p><img src="https://resource.tinychen.com/blog/20190510/GqtfFMdyXryv.png"></p><p>这里的startup type为启动类型，即开机自动启动（Automatic），手动启动（Manual）和禁用（Disabled）</p><p><img src="https://resource.tinychen.com/blog/20190510/0jAzJHYEyrXU.png"></p><p><img src="https://resource.tinychen.com/blog/20190510/TRykrzcLNA2u.png"></p><blockquote><p>注：在cmd中或者powershell直接运行bin目录下的shutdowm.bat文件或startup.bat文件也可以直接关闭或打开tomcat服务</p></blockquote><ol start="9"><li>完成方法操作后，在浏览器地址栏输入<br><a href="http://localhost:8080/">http://localhost:8080/</a><br>出现下图所示信息即为成功配置</li></ol><p><img src="https://resource.tinychen.com/blog/20190510/4l0i1wWW31uP.png"></p><h1 id="4、Eclipse-配置Tomcat"><a href="#4、Eclipse-配置Tomcat" class="headerlink" title="4、Eclipse 配置Tomcat"></a>4、Eclipse 配置Tomcat</h1><h2 id="4-1-下载Eclipse"><a href="#4-1-下载Eclipse" class="headerlink" title="4.1 下载Eclipse"></a>4.1 下载Eclipse</h2><p><strong>注意在安装Eclipse的时候要选择</strong><code>Eclipse IDE for Enterprise Java Developers</code></p><p>Eclipse官网下载地址：</p><p><a href="https://www.eclipse.org/downloads/download.php?file=/oomph/epp/2019-03/R/eclipse-inst-win64.exe">https://www.eclipse.org/downloads/download.php?file=/oomph/epp/2019-03/R/eclipse-inst-win64.exe</a></p><p><img src="https://resource.tinychen.com/blog/20190510/2Uo7p84WTzH5.png"></p><h2 id="4-2-Eclipse中关联Tomcat"><a href="#4-2-Eclipse中关联Tomcat" class="headerlink" title="4.2 Eclipse中关联Tomcat"></a>4.2 Eclipse中关联Tomcat</h2><p>打开Eclipse，点击菜单栏的<code>Window</code>，然后选择<code>Preferences</code>，选择<code>Server</code>，点击<code>Runtime Environments</code> ，点击右侧的<code>Add</code>, 选择<code>Apache Tomcat v9.0</code></p><p><img src="https://resource.tinychen.com/blog/20190510/ioziMyafhlEI.png"></p><p>选择电脑上安装好tomcat的目录，然后选择JRE。</p><p><img src="https://resource.tinychen.com/blog/20190510/iWnGyVoOGi14.png"></p><p>确认之后，点击<code>Apply and Close</code>。</p><p><img src="https://resource.tinychen.com/blog/20190510/AbIKFnW3u3hn.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 本文介绍使用JAVA8+Apache Tomcat 9.0.19的安装配置。&lt;/p&gt;
&lt;p&gt;文中部分内容更新于2019年5月10日。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://tinychen.com/categories/frontend/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
    <category term="tomcat" scheme="https://tinychen.com/tags/tomcat/"/>
    
    <category term="web" scheme="https://tinychen.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04与Win10时间不一致</title>
    <link href="https://tinychen.com/20181109-ubuntu-change-time/"/>
    <id>https://tinychen.com/20181109-ubuntu-change-time/</id>
    <published>2018-11-09T07:00:00.000Z</published>
    <updated>2018-11-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在安装Ubuntu18.04和win10双系统的时候发现两个系统的时间总是相差八个小时，即win10的时间要比Ubuntu早八个小时，这里介绍一个在Ubuntu下的解决方案。</p><span id="more"></span><h1 id="1、为什么时间会不一致"><a href="#1、为什么时间会不一致" class="headerlink" title="1、为什么时间会不一致"></a>1、为什么时间会不一致</h1><p>在我们电脑的BIOS中，有着一个记录的时间，windows系统会将BIOS中的时间视为本地时间，即你windows中设置为中国地区，那么这个BIOS的时间对于windows来说就是中国时间。</p><p>在Ubuntu中，会将BIOS中的时间视为UTC时间，即Universal Time Coordinated(协调世界时)，而中国这边的时间是UTC+8，即正好相差八个小时。</p><blockquote><p>协调世界时是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。中国大陆采用ISO 8601-1988的《数据元和交换格式信息交换日期和时间表示法》（GB/T 7408-1994）称之为国际协调时间，代替原来的GB/T 7408-1994；中国台湾采用CNS 7648的《资料元及交换格式–资讯交换–日期及时间的表示法》，称之为世界统一时间。</p><p>中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。</p></blockquote><h1 id="2、如何修改"><a href="#2、如何修改" class="headerlink" title="2、如何修改"></a>2、如何修改</h1><p>先介绍在Ubuntu下的解决方案。</p><p>首先我们把硬件时间（BIOS时间）将默认的UTC改为CST，然后重启，使得两个系统的时间保持一致。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo timedatectl set-local-rtc 1<br><span class="hljs-comment">#上述代码中的1改为0即可将硬件时间修改为默认的UTC时间</span><br>sudo reboot<br><span class="hljs-comment">#重启系统使改动生效</span><br></code></pre></div></td></tr></table></figure><p>接着我们更新一下系统时间</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install ntpdate<br><span class="hljs-comment">#这里的操作是安装ntpdate工具</span><br>sudo ntpdate time.windows.com<br><span class="hljs-comment">#使用ntpdate工具从time.windows.com上面同步时间</span><br></code></pre></div></td></tr></table></figure><p>最后我们将时间更新到硬件上，以保证重启后改动不会被还原</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo hwclock --localtime --systohc<br><span class="hljs-comment">#这里的代码意思是使用hwclock命令将本地时间localtime从sysclock同步到hwclock</span><br></code></pre></div></td></tr></table></figure><p><strong>到这里双系统的时间就都正常了。</strong></p><p>或者也可以使用windows下的解决方案，使用管理员权限打开powershell，然后输入下面的命令，接着重启就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1<br></code></pre></div></td></tr></table></figure><blockquote><p>原理就是：在注册表项<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code>中添加一个名为<code>RealTimeIsUniversal</code>的值，类型为<code>REG_DWORD</code>，数据为<code>1</code>。此项的作用就是让Windows将硬件时间当作UTC，与Ubuntu的默认设置一致。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在安装Ubuntu18.04和win10双系统的时候发现两个系统的时间总是相差八个小时，即win10的时间要比Ubuntu早八个小时，这里介绍一个在Ubuntu下的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3B+打造多媒体中心</title>
    <link href="https://tinychen.com/20180910-raspi-multi-media-centre/"/>
    <id>https://tinychen.com/20180910-raspi-multi-media-centre/</id>
    <published>2018-09-10T07:00:00.000Z</published>
    <updated>2018-09-10T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>小七比较喜欢在宿舍和室友一起看电影或听音乐，且对画质和音质要求较高，一般都是观看1080P的蓝光REMUX电影（约30G一部）和听无损音质的音乐（30M一首），且观看设备较多（电视盒子、电脑、手机），再加上平时需要下载电影且自己有写博客的习惯，博客和一些其他的重要资料也需要备份，因此决定使用树莓派3B+、一块移动硬盘和一个路由器搭建一个宿舍多媒体中心来满足这些需求。</p><span id="more"></span><hr><h1 id="1、功能简介"><a href="#1、功能简介" class="headerlink" title="1、功能简介"></a>1、功能简介</h1><h2 id="1-1-Samba"><a href="#1-1-Samba" class="headerlink" title="1.1 Samba"></a>1.1 Samba</h2><p><strong>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</strong></p><p>换言之，使用Samba可以在局域网内实现文件的共享操作，有些放在移动硬盘里面的文件需要用的时候就不用再插移动硬盘，在网上邻居处拷贝即可。</p><h2 id="1-2-miniDLNA"><a href="#1-2-miniDLNA" class="headerlink" title="1.2 miniDLNA"></a>1.2 miniDLNA</h2><p><strong>DLNA的全称是DIGITAL LIVING NETWORK ALLIANCE(数字生活网络联盟)，DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。</strong></p><p>所以，其选择的各种技术和协议都是当前所应用很广泛的技术和协议。miniDLNA可以实现音乐视频图片的局域网跨设备共享，且目前大多数智能手机、平板和电视均支持DLNA协议，在树莓派上安装miniDLNA服务后即可让处在同一局域网下的设备能轻松访问到树莓派上的影音资源。</p><h2 id="1-3-下载机"><a href="#1-3-下载机" class="headerlink" title="1.3 下载机"></a>1.3 下载机</h2><p><strong>Transmission全称TransmissionBittorrent，由C开发而成（Mac OS上用的是Objective-C），硬件资源消耗极少，界面极度精简。</strong>支持包括Linux、BSD、Solaris、Mac OS X等多种操作系统，以及Networked Media Tank、WD MyBook、ReadyNAS、D-Link DNS-323 &amp; CH3SNAS、Synology等多种设备。支持GTK+、命令行、Web等多种界面。</p><p><strong>Aria2支持Http、FTP、磁力链接和BT下载，可以和Transimission互补。</strong></p><h2 id="1-4-自动备份"><a href="#1-4-自动备份" class="headerlink" title="1.4 自动备份"></a>1.4 自动备份</h2><p>数据备份是一个好习惯，但是总是会有遗忘或者是疏漏的情况出现，因此我们可以利用树莓派来实现自动备份。<strong>首先可以创建powershell命令实现备份功能，再另存为bat脚本文件，最后利用windows自带的定时任务功能和linux的定时执行命令操作来实现文件自动备份到树莓派上的操作。</strong></p><h2 id="1-5-状态监控"><a href="#1-5-状态监控" class="headerlink" title="1.5 状态监控"></a>1.5 状态监控</h2><p>作为长时间运行的多媒体中心，树莓派的运行状态不能忽视，因此我们可以<strong>使用LCD1602显示屏</strong>连接树莓派，显示一些必要的信息来监控它的运行状态。<strong>（CPU，GPU, RAM, IP, TIME）</strong></p><h1 id="2、安装操作"><a href="#2、安装操作" class="headerlink" title="2、安装操作"></a>2、安装操作</h1><h2 id="2-1-Samba"><a href="#2-1-Samba" class="headerlink" title="2.1 Samba"></a>2.1 Samba</h2><h3 id="2-1-1-安装ntfs-3g"><a href="#2-1-1-安装ntfs-3g" class="headerlink" title="2.1.1 安装ntfs-3g"></a>2.1.1 安装ntfs-3g</h3><p>树莓派接上移动硬盘后，会自动挂载到/media目录下，但是由于我的硬盘是ntfs格式，在树莓系统下只能读不能写，因此我需要安装ntfs-3g服务实现对移动硬盘的写操作，然后再设置开机自动挂载移动硬盘。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install ntfs-3g<br><span class="hljs-comment">#安装ntfs -3g服务</span><br><br>sudo mkdir /home/pi/share<br><span class="hljs-comment">#创建用于挂载移动硬盘的目录</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image001.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo umount /dev/sda1<br><span class="hljs-comment">#有些系统会自动挂载，因此先使用umont命令取消挂载移动硬盘</span><br><span class="hljs-comment">#后面的/dev/sda1是硬盘在此系统中对应的编号，可以使用 df -h命令查看，或者直接使用硬盘名代替</span><br><br>sudo mount -t ntfs-3g /dev/sda1 /home/pi/share<br><span class="hljs-comment">#使用ntfs -3g挂载硬盘到指定目录</span><br><br>sudo chmod 777 /home/pi/share<br><span class="hljs-comment">#使用chmod命令赋予目录读写权限</span><br><br>sudo chmod 777 /home/pi<br><span class="hljs-comment">#目录的上级目录也需要赋予读写权限</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image002.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vim /etc/fstab<br><span class="hljs-comment">#编辑/etc/fstab文件实现开机自动挂载硬盘</span><br><br><span class="hljs-comment">#在文件的最后一行加入下列代码</span><br>/dev/sda1   /home/pi/share  ntfsdefaults0   0<br><span class="hljs-comment">#第一列是挂载的硬盘设备名或者uuid</span><br><span class="hljs-comment">#第二列是挂载的目录</span><br><span class="hljs-comment">#第三列是硬盘的文件系统类型</span><br><span class="hljs-comment">#第四列是文件系统的参数，defaults表示同时具有rw, suid, dev, exec, auto, nouser, async等默认参数的设置</span><br><span class="hljs-comment">#第五列是能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1，0表示不备份</span><br><span class="hljs-comment">#第六列是是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。0表示不要检验</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image003.png"></p><h3 id="2-1-2安装Samba"><a href="#2-1-2安装Samba" class="headerlink" title="2.1.2安装Samba"></a>2.1.2安装Samba</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br><span class="hljs-comment">#首先更新一下系统源</span><br><br>sudo apt-get install samba samba-common-bin<br><span class="hljs-comment">#安装samba-common版本</span><br><span class="hljs-comment">#samba-common：这个套件则主要提供了 SAMBA 的主要设定档(smb.conf) 、 smb.conf 语法检验的测试程序 ( testparm )等等；</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image004.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vim /etc/samba/smb.conf<br><span class="hljs-comment">#编辑配置文件，在文件中加入下列内容</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image005.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">security = share<br><span class="hljs-comment">#开放security权限等级为share</span><br><span class="hljs-comment">#share---不需要提供用户名和密码。</span><br><span class="hljs-comment">#user----需要提供用户名和密码，而且身份验证由 samba server 负责。</span><br><span class="hljs-comment">#server--需要提供用户名和密码，可指定其他机器(winNT/2000/XP)或另一台 samba server作身份验证。</span><br><span class="hljs-comment">#domain--需要提供用户名和密码，指定winNT/2000/XP域服务器作身份验证。</span><br><br>[share] <br><span class="hljs-comment">#share为开启共享后的文件夹名</span><br>comment = samba share   <br><span class="hljs-comment">#comment为备注，帮助理解这个共享文件夹</span><br>path = /home/pi/share   <br><span class="hljs-comment">#path为共享的文件目录路径</span><br>valid user = pi root   <br><span class="hljs-comment">#vaild users-----设定只有此名单内的用户才能访问共享资源(拒绝优先)(用户名/@组名)，这里设置为pi和root两个</span><br>public = yes<br><span class="hljs-comment">#public----------是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用)</span><br>browseable = yes<br><span class="hljs-comment">#browseable------是yes/否no在浏览资源中显示共享目录，若为否则必须指定共享路径才能存取</span><br>writable = yes  <br><span class="hljs-comment">#writable--------是yes/否no不以只读方式共享当与read only发生冲突时，无视read only</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image006.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo smbpasswd -a pi<br><span class="hljs-comment">#新建一个名为pi的用户，然后会提示输入两次密码</span><br><span class="hljs-comment">#smbpasswd命令的一些用法如下</span><br><span class="hljs-comment">#-a：向smbpasswd文件中添加用户；</span><br><span class="hljs-comment">#-c：指定samba的配置文件；</span><br><span class="hljs-comment">#-x：从smbpasswd文件中删除用户；</span><br><span class="hljs-comment">#-d：在smbpasswd文件中禁用指定的用户；</span><br><span class="hljs-comment">#-e：在smbpasswd文件中激活指定的用户；</span><br><span class="hljs-comment">#-n：将指定的用户的密码置空。</span><br><br><span class="hljs-comment">#设置完用户名和密码后输入下列命令激活用户</span><br>sudo smbpasswd -e pi<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image007.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#然后重启samba服务即可生效</span><br>sudo /etc/init.d/samba restart<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image008.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#最后还是要设置开机启动</span><br>sudo vim /etc/rc.local<br><br><span class="hljs-comment">#在下面添加如下代码</span><br>sudo /etc/init.d/samba restart<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image009.png"></p><h3 id="2-1-3添加网络映射"><a href="#2-1-3添加网络映射" class="headerlink" title="2.1.3添加网络映射"></a>2.1.3添加网络映射</h3><p>添加网络映射主要是方便访问，可以将共享的samba文件夹添加到我的电脑中。首先右键我的电脑，点击添加网络映射/Add a network location<br><img src="https://resource.tinychen.com/image010.png"></p><p>输入共享的文件夹路径，然后命名，最后即可完成。<br><img src="https://resource.tinychen.com/image011.png"></p><p><img src="https://resource.tinychen.com/image012.png"></p><p><img src="https://resource.tinychen.com/image013.png"></p><h2 id="2-2-miniDLNA"><a href="#2-2-miniDLNA" class="headerlink" title="2.2 miniDLNA"></a>2.2 miniDLNA</h2><h3 id="2-2-1-安装miniDLNA"><a href="#2-2-1-安装miniDLNA" class="headerlink" title="2.2.1 安装miniDLNA"></a>2.2.1 安装miniDLNA</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br><span class="hljs-comment">#先更新一下安装源</span><br><br>sudo apt-get install minidlna<br><span class="hljs-comment">#安装minidlna</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image014.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#安装完后编辑配置文件</span><br>sudo vim /etc/minidlna.conf<br><br>media_dir=A,/home/pi/share/Music<br><span class="hljs-comment">#A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件 </span><br>media_dir=P,/home/pi/share/Picture  <br><span class="hljs-comment">#P表示图片文件  </span><br>media_dir=V,/home/pi/share/Video<br><span class="hljs-comment">#V表示视频文件</span><br>db_dir=/home/pi/share/dlnadb<br><span class="hljs-comment">#配置minidlna的数库数据的存放目录 </span><br>log_dir=/home/pi/share/dlnalog  <br><span class="hljs-comment">#配置日志目录 </span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image015.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#然后建立对应的文件夹并给予对应的权限</span><br>sudo mkdir /home/pi/share/Music<br>sudo mkdir /home/pi/share/Picture<br>sudo mkdir /home/pi/share/Video<br>sudo mkdir /home/pi/share/dlnadb<br>sudo mkdir /home/pi/share/dlnalog<br><br>sudo chmod 777 /home/pi/share/Music<br>sudo chmod 777 /home/pi/share/Picture<br>sudo chmod 777 /home/pi/share/Video<br>sudo chmod 777 /home/pi/share/dlnadb<br>sudo chmod 777 /home/pi/share/dlnalog<br><br><span class="hljs-comment">#使用下列命令重启dlna服务</span><br>sudo /etc/init.d/minidlna restart<br><br><span class="hljs-comment">#再使用下列命令查看dlna状态</span><br>sudo /etc/init.d/minidlna status<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image016.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#最后修改开机启动文件</span><br>sudo vim /etc/rc.local<br><span class="hljs-comment">#在后面加入以下代码</span><br>sudo /etc/init.d/minidlna restart<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image017.png"></p><h3 id="2-2-2-添加DLNA设备"><a href="#2-2-2-添加DLNA设备" class="headerlink" title="2.2.2 添加DLNA设备"></a>2.2.2 添加DLNA设备</h3><p>点击我的电脑左上方的流媒体</p><p><img src="https://resource.tinychen.com/image018.png"></p><p>系统会自动搜索到局域网中的支持DLNA的设备，点击添加，等待添加完成。</p><p><img src="https://resource.tinychen.com/image019.png"></p><p>打开支持DLNA或者是流媒体播放的软件，就能看到树莓派中的流媒体文件。</p><p><img src="https://resource.tinychen.com/image020.png"></p><h2 id="2-3-下载机"><a href="#2-3-下载机" class="headerlink" title="2.3 下载机"></a>2.3 下载机</h2><h3 id="2-3-1-安装transmission"><a href="#2-3-1-安装transmission" class="headerlink" title="2.3.1 安装transmission"></a>2.3.1 安装transmission</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br><span class="hljs-comment">#先更新一下安装源</span><br>sudo apt-get install transmission-daemon<br><span class="hljs-comment">#然后安装transmission</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image021.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#创建目录用于存放下载文件</span><br>sudo mkdir /home/pi/share/Downloads/Incomplete  <br><span class="hljs-comment">#存放未下载完成的文件</span><br>sudo mkdir /home/pi/share/Downloads/complete<br><span class="hljs-comment">#存放下载完成的文件</span><br><br><span class="hljs-comment">#更改文件所属组别</span><br>sudo chgrp debian-transmission /home/pi/share/Downloads/Incomplete<br>sudo chgrp debian-transmission /home/pi/share/Downloads/complete<br><br><span class="hljs-comment">#赋予文件夹权限</span><br>sudo chmod 777 /home/pi/share/Downloads/Incomplete <br>sudo chmod 777 /home/pi/share/Downloads/complete <br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image022.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#修改配置文件</span><br>sudo vim /etc/transmission-daemon/settings.json<br><br><span class="hljs-comment">#找到以下项进行修改</span><br><span class="hljs-comment">#已完成的下载目录</span><br><span class="hljs-string">&quot;download-dir&quot;</span>: <span class="hljs-string">&quot;/home/pi/share/Downloads/complete&quot;</span>,<br><span class="hljs-comment">#未完成的下载目录</span><br><span class="hljs-string">&quot;incomplete-dir&quot;</span>: <span class="hljs-string">&quot;/home/pi/share/Downloads/Incomplete&quot;</span>,<br><span class="hljs-comment">#允许Web访问的白名单地址,这里要根据自己的路由器实际IP地址进行修改</span><br><span class="hljs-string">&quot;rpc-whitelist&quot;</span>: <span class="hljs-string">&quot;192.168.8.*&quot;</span>,<br><span class="hljs-comment">#登录的用户名</span><br>“rpc-username”: “yourname”,<br><span class="hljs-comment">#登录的密码</span><br>“rpc-password”: “yoursecretcode”,<br><br><span class="hljs-comment">#最后依次执行下面的两条命令完成重启服务</span><br>sudo service transmission-daemon reload<br>sudo service transmission-daemon restart<br></code></pre></div></td></tr></table></figure><p>最后我们访问树莓派的IP再加上9091端口就能登录到下载界面。<br><img src="https://resource.tinychen.com/image023.png"></p><p><img src="https://resource.tinychen.com/image024.png"></p><p><img src="https://resource.tinychen.com/image025.png"></p><h3 id="2-3-2-安装Aria2"><a href="#2-3-2-安装Aria2" class="headerlink" title="2.3.2 安装Aria2"></a>2.3.2 安装Aria2</h3><h4 id="2-3-2-1-安装Aria2"><a href="#2-3-2-1-安装Aria2" class="headerlink" title="2.3.2.1 安装Aria2"></a>2.3.2.1 安装Aria2</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br><span class="hljs-comment">#更新一下安装源</span><br>sudo apt-get install aria2<br><span class="hljs-comment">#安装aria2</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image026.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#在/etc目录下创建aria2目录用来存放配置文件：</span><br>sudo mkdir /etc/aria2<br><br><span class="hljs-comment">#创建空白的aria2.session文件：</span><br>sudo touch /etc/aria2/aria2.session<br><br><span class="hljs-comment">#创建配置文件</span><br>sudo vim /etc/aria2/aria2.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image027.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#在该文件中输入以下内容：</span><br><br>dir=/home/pi/share/Downloads<br><span class="hljs-comment">#设置文件下载的存放目录 </span><br>disable-ipv6=<span class="hljs-literal">true</span> <br><span class="hljs-comment">#打开rpc的目的是为了给web管理端用 </span><br>enable-rpc=<span class="hljs-literal">true</span> <br>rpc-allow-origin-all=<span class="hljs-literal">true</span> <br>rpc-listen-all=<span class="hljs-literal">true</span> <br><span class="hljs-comment">#rpc-listen-port=6800 </span><br><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span> <br>input-file=/etc/aria2/aria2.session <br>save-session=/etc/aria2/aria2.session <br>max-concurrent-downloads=3<br><span class="hljs-comment">#设置最大同时下载的任务数</span><br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image028.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#启动aria2</span><br>sudo aria2c --conf-path=/etc/aria2/aria2.conf<br><br><span class="hljs-comment">#如果没有提示任何错误信息，那就按ctrl+c停止上面的语句，转为后台运行：</span><br><br>sudo aria2c --conf-path=/etc/aria2/aria2.conf －D<br><br><span class="hljs-comment">#同时其此句写到开机启动中，编辑/etc/rc.local</span><br>sudo vim /etc/rc.local<br><br><span class="hljs-comment">#在文件的最后面添加这一行</span><br>sudo aria2c --conf-path=/etc/aria2/aria2.conf －D<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image029.png"></p><h4 id="2-3-2-2-安装appache"><a href="#2-3-2-2-安装appache" class="headerlink" title="2.3.2.2 安装appache"></a>2.3.2.2 安装appache</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#安装appach</span><br>sudo apt-get install apache2<br><br><span class="hljs-comment">#修改/var/www/html的权限</span><br>chmod 777 /var/www/html<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image030.png"></p><p><img src="https://resource.tinychen.com/image031.png"></p><h4 id="2-3-2-3-安装yaaw"><a href="#2-3-2-3-安装yaaw" class="headerlink" title="2.3.2.3 安装yaaw"></a>2.3.2.3 安装yaaw</h4><p>从<a href="https://github.com/binux/yaaw%E4%B8%8B%E8%BD%BDyaaw%EF%BC%8C%E7%82%B9%E5%87%BB%E5%8F%B3%E4%B8%8B%E8%A7%92%E7%9A%84Download">https://github.com/binux/yaaw下载yaaw，点击右下角的Download</a> Zip, 下载后将解压后的文件夹内容拷贝到/var/www/html文件夹下。这时在浏览器内输入树莓派的IP，如果出现以下页面，则表示已经正常工作了。</p><p><strong>点击左上方的add就可以进行下载。</strong></p><p><img src="https://resource.tinychen.com/image032.png"></p><h2 id="2-4-自动备份"><a href="#2-4-自动备份" class="headerlink" title="2.4 自动备份"></a>2.4 自动备份</h2><h3 id="2-4-1-创建自动执行文件"><a href="#2-4-1-创建自动执行文件" class="headerlink" title="2.4.1 创建自动执行文件"></a>2.4.1 创建自动执行文件</h3><p>使用记事本新建一个文件，里面输入下列代码，然后保存并更改文件名后缀为bat执行文件。</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">echo</span> Backuping D:\MyBlog\source\_posts---------&gt;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">8</span>.<span class="hljs-number">106</span>\share\Backup<br><span class="hljs-built_in">xcopy</span> &quot;D:\MyBlog\source\_posts&quot; &quot;\\RASPBERRYPI\share\Backup&quot; /e/I/d/h/r/y<br><span class="hljs-keyword">exit</span><br></code></pre></div></td></tr></table></figure><p>其中xcopy指令后两个路径分别为需要备份的文件夹路径和用于存放备份的文件夹路径，其余参数说明如下：</p><p><strong>/e：拷贝所有子目录，包括空子目录；</strong></p><p><strong>/I： 如果目标文件或目录不存在且拷贝的文件数多于一，则假设目标为目录；</strong></p><p><strong>/d：只拷贝文件日期与在目标文件后的文件（即修改过的源文件）</strong></p><p><strong>/h：同时拷贝隐藏文件和系统文件</strong></p><p><strong>/r：拷贝并覆盖只读文件</strong></p><p><strong>/y： 复制文件审核设置（不显示已有文件覆盖确认）</strong></p><p>以上参数可以根据需要添加，推荐都加上最好。</p><h3 id="2-4-2-设置定时任务"><a href="#2-4-2-设置定时任务" class="headerlink" title="2.4.2 设置定时任务"></a>2.4.2 设置定时任务</h3><p><strong>然后我们打开”控制面板”—“计划任务”添加计划任务，计划任务里的执行目标为该批处理文件，设定在什么时候执行则由个人决定。</strong></p><p>执行效果示例如下：</p><p><img src="https://resource.tinychen.com/image033.png"></p><h2 id="2-5-状态监控"><a href="#2-5-状态监控" class="headerlink" title="2.5 状态监控"></a>2.5 状态监控</h2><p>按照针脚跳线连接好LCD1602和树莓派并调节好LCD1602的对比度，使用python编写代码，控制1602输出相关信息，具体代码如下：</p><p><strong>将下面这个文件保存为lcd1602.py</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br> <br><span class="hljs-comment">#</span><br><span class="hljs-comment"># based on code from lrvick and LiquidCrystal</span><br><span class="hljs-comment"># lrvic - https://github.com/lrvick/raspi-hd44780/blob/master/hd44780.py</span><br><span class="hljs-comment"># LiquidCrystal - https://github.com/arduino/Arduino/blob/master/libraries/LiquidCrystal/LiquidCrystal.cpp</span><br><span class="hljs-comment">#</span><br> <br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lcd1602</span>:</span><br> <br><span class="hljs-comment"># commands</span><br>LCD_CLEARDISPLAY= <span class="hljs-number">0x01</span><br>LCD_RETURNHOME  = <span class="hljs-number">0x02</span><br>LCD_ENTRYMODESET= <span class="hljs-number">0x04</span><br>LCD_DISPLAYCONTROL  = <span class="hljs-number">0x08</span><br>LCD_CURSORSHIFT = <span class="hljs-number">0x10</span><br>LCD_FUNCTIONSET = <span class="hljs-number">0x20</span><br>LCD_SETCGRAMADDR= <span class="hljs-number">0x40</span><br>LCD_SETDDRAMADDR= <span class="hljs-number">0x80</span><br> <br><span class="hljs-comment"># flags for display entry mode</span><br>LCD_ENTRYRIGHT  = <span class="hljs-number">0x00</span><br>LCD_ENTRYLEFT   = <span class="hljs-number">0x02</span><br>LCD_ENTRYSHIFTINCREMENT = <span class="hljs-number">0x01</span><br>LCD_ENTRYSHIFTDECREMENT = <span class="hljs-number">0x00</span><br> <br><span class="hljs-comment"># flags for display on/off control</span><br>LCD_DISPLAYON   = <span class="hljs-number">0x04</span><br>LCD_DISPLAYOFF  = <span class="hljs-number">0x00</span><br>LCD_CURSORON= <span class="hljs-number">0x02</span><br>LCD_CURSOROFF   = <span class="hljs-number">0x00</span><br>LCD_BLINKON = <span class="hljs-number">0x01</span><br>LCD_BLINKOFF= <span class="hljs-number">0x00</span><br> <br><span class="hljs-comment"># flags for display/cursor shift</span><br>LCD_DISPLAYMOVE = <span class="hljs-number">0x08</span><br>LCD_CURSORMOVE  = <span class="hljs-number">0x00</span><br> <br><span class="hljs-comment"># flags for display/cursor shift</span><br>LCD_DISPLAYMOVE = <span class="hljs-number">0x08</span><br>LCD_CURSORMOVE  = <span class="hljs-number">0x00</span><br>LCD_MOVERIGHT   = <span class="hljs-number">0x04</span><br>LCD_MOVELEFT= <span class="hljs-number">0x00</span><br> <br><span class="hljs-comment"># flags for function set</span><br>LCD_8BITMODE= <span class="hljs-number">0x10</span><br>LCD_4BITMODE= <span class="hljs-number">0x00</span><br>LCD_2LINE   = <span class="hljs-number">0x08</span><br>LCD_1LINE   = <span class="hljs-number">0x00</span><br>LCD_5x10DOTS= <span class="hljs-number">0x04</span><br>LCD_5x8DOTS = <span class="hljs-number">0x00</span><br></code></pre></div></td></tr></table></figure><p>​<br>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, pin_rs=<span class="hljs-number">14</span>, pin_e=<span class="hljs-number">15</span>, pins_db=[<span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">27</span>, <span class="hljs-number">22</span>], GPIO = <span class="hljs-literal">None</span></span>):</span><br><span class="hljs-comment"># Emulate the old behavior of using RPi.GPIO if we haven&#x27;t been given</span><br><span class="hljs-comment"># an explicit GPIO interface to use</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> GPIO:<br><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO<br>self.GPIO = GPIO<br>self.pin_rs = pin_rs<br>self.pin_e = pin_e<br>self.pins_db = pins_db<br> <br>self.GPIO.setmode(GPIO.BCM)<br>self.GPIO.setwarnings(<span class="hljs-literal">False</span>)<br>self.GPIO.setup(self.pin_e, GPIO.OUT)<br>self.GPIO.setup(self.pin_rs, GPIO.OUT)<br> <br><span class="hljs-keyword">for</span> pin <span class="hljs-keyword">in</span> self.pins_db:<br>self.GPIO.setup(pin, GPIO.OUT)<br> <br>self.write4bits(<span class="hljs-number">0x33</span>) <span class="hljs-comment"># initialization</span><br>self.write4bits(<span class="hljs-number">0x32</span>) <span class="hljs-comment"># initialization</span><br>self.write4bits(<span class="hljs-number">0x28</span>) <span class="hljs-comment"># 2 line 5x7 matrix</span><br>self.write4bits(<span class="hljs-number">0x0C</span>) <span class="hljs-comment"># turn cursor off 0x0E to enable cursor</span><br>self.write4bits(<span class="hljs-number">0x06</span>) <span class="hljs-comment"># shift cursor right</span><br> <br>self.displaycontrol = self.LCD_DISPLAYON | self.LCD_CURSOROFF | self.LCD_BLINKOFF<br> <br>self.displayfunction = self.LCD_4BITMODE | self.LCD_1LINE | self.LCD_5x8DOTS<br>self.displayfunction |= self.LCD_2LINE<br> <br><span class="hljs-string">&quot;&quot;&quot; Initialize to default text direction (for romance languages) &quot;&quot;&quot;</span><br>self.displaymode =  self.LCD_ENTRYLEFT | self.LCD_ENTRYSHIFTDECREMENT<br>self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) <span class="hljs-comment">#  set the entry mode</span><br> <br>self.clear()<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">begin</span>(<span class="hljs-params">self, cols, lines</span>):</span><br> <br><span class="hljs-keyword">if</span> (lines &gt; <span class="hljs-number">1</span>):<br>self.numlines = lines<br>self.displayfunction |= self.LCD_2LINE<br>self.currline = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span>(<span class="hljs-params">self</span>):</span><br> <br>self.write4bits(self.LCD_RETURNHOME) <span class="hljs-comment"># set cursor position to zero</span><br>self.delayMicroseconds(<span class="hljs-number">3000</span>) <span class="hljs-comment"># this command takes a long time!</span><br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span>(<span class="hljs-params">self</span>):</span><br> <br>self.write4bits(self.LCD_CLEARDISPLAY) <span class="hljs-comment"># command to clear display</span><br>self.delayMicroseconds(<span class="hljs-number">3000</span>)<span class="hljs-comment"># 3000 microsecond sleep, clearing the display takes a long time</span><br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setCursor</span>(<span class="hljs-params">self, col, row</span>):</span><br> <br>self.row_offsets = [ <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x54</span> ]<br> <br><span class="hljs-keyword">if</span> ( row &gt; self.numlines ): <br>row = self.numlines - <span class="hljs-number">1</span> <span class="hljs-comment"># we count rows starting w/0</span><br> <br>self.write4bits(self.LCD_SETDDRAMADDR | (col + self.row_offsets[row]))<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">noDisplay</span>(<span class="hljs-params">self</span>):</span> <br><span class="hljs-string">&quot;&quot;&quot; Turn the display off (quickly) &quot;&quot;&quot;</span><br> <br>self.displaycontrol &amp;= ~self.LCD_DISPLAYON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Turn the display on (quickly) &quot;&quot;&quot;</span><br> <br>self.displaycontrol |= self.LCD_DISPLAYON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">noCursor</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Turns the underline cursor on/off &quot;&quot;&quot;</span><br> <br>self.displaycontrol &amp;= ~self.LCD_CURSORON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cursor</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Cursor On &quot;&quot;&quot;</span><br> <br>self.displaycontrol |= self.LCD_CURSORON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">noBlink</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;</span><br> <br>self.displaycontrol &amp;= ~self.LCD_BLINKON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">noBlink</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;</span><br> <br>self.displaycontrol &amp;= ~self.LCD_BLINKON<br>self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DisplayLeft</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;</span><br> <br>self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVELEFT)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scrollDisplayRight</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;</span><br> <br>self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVERIGHT);<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leftToRight</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; This is for text that flows Left to Right &quot;&quot;&quot;</span><br> <br>self.displaymode |= self.LCD_ENTRYLEFT<br>self.write4bits(self.LCD_ENTRYMODESET | self.displaymode);<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rightToLeft</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; This is for text that flows Right to Left &quot;&quot;&quot;</span><br>self.displaymode &amp;= ~self.LCD_ENTRYLEFT<br>self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">autoscroll</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; This will &#x27;right justify&#x27; text from the cursor &quot;&quot;&quot;</span><br> <br>self.displaymode |= self.LCD_ENTRYSHIFTINCREMENT<br>self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">noAutoscroll</span>(<span class="hljs-params">self</span>):</span> <br><span class="hljs-string">&quot;&quot;&quot; This will &#x27;left justify&#x27; text from the cursor &quot;&quot;&quot;</span><br> <br>self.displaymode &amp;= ~self.LCD_ENTRYSHIFTINCREMENT<br>self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write4bits</span>(<span class="hljs-params">self, bits, char_mode=<span class="hljs-literal">False</span></span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Send command to LCD &quot;&quot;&quot;</span><br> <br>self.delayMicroseconds(<span class="hljs-number">1000</span>) <span class="hljs-comment"># 1000 microsecond sleep</span><br> <br>bits=<span class="hljs-built_in">bin</span>(bits)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br> <br>self.GPIO.output(self.pin_rs, char_mode)<br> <br><span class="hljs-keyword">for</span> pin <span class="hljs-keyword">in</span> self.pins_db:<br>self.GPIO.output(pin, <span class="hljs-literal">False</span>)<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">if</span> bits[i] == <span class="hljs-string">&quot;1&quot;</span>:<br>self.GPIO.output(self.pins_db[::-<span class="hljs-number">1</span>][i], <span class="hljs-literal">True</span>)<br> <br>self.pulseEnable()<br> <br><span class="hljs-keyword">for</span> pin <span class="hljs-keyword">in</span> self.pins_db:<br>self.GPIO.output(pin, <span class="hljs-literal">False</span>)<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>):<br><span class="hljs-keyword">if</span> bits[i] == <span class="hljs-string">&quot;1&quot;</span>:<br>self.GPIO.output(self.pins_db[::-<span class="hljs-number">1</span>][i-<span class="hljs-number">4</span>], <span class="hljs-literal">True</span>)<br> <br>self.pulseEnable()<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delayMicroseconds</span>(<span class="hljs-params">self, microseconds</span>):</span><br>seconds = microseconds / <span class="hljs-built_in">float</span>(<span class="hljs-number">1000000</span>) <span class="hljs-comment"># divide microseconds by 1 million for seconds</span><br>sleep(seconds)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pulseEnable</span>(<span class="hljs-params">self</span>):</span><br>self.GPIO.output(self.pin_e, <span class="hljs-literal">False</span>)<br>self.delayMicroseconds(<span class="hljs-number">1</span>)   <span class="hljs-comment"># 1 microsecond pause - enable pulse must be &gt; 450ns </span><br>self.GPIO.output(self.pin_e, <span class="hljs-literal">True</span>)<br>self.delayMicroseconds(<span class="hljs-number">1</span>)   <span class="hljs-comment"># 1 microsecond pause - enable pulse must be &gt; 450ns </span><br>self.GPIO.output(self.pin_e, <span class="hljs-literal">False</span>)<br>self.delayMicroseconds(<span class="hljs-number">1</span>)   <span class="hljs-comment"># commands need &gt; 37us to settle</span><br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">message</span>(<span class="hljs-params">self, text</span>):</span><br><span class="hljs-string">&quot;&quot;&quot; Send string to LCD、Newline wraps to second line&quot;&quot;&quot;</span><br> <br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br><span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;\n&#x27;</span>:<br>self.write4bits(<span class="hljs-number">0xC0</span>) <span class="hljs-comment"># next line</span><br><span class="hljs-keyword">else</span>:<br>self.write4bits(<span class="hljs-built_in">ord</span>(char),<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><p>​     </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br> <br>lcd = lcd1602()<br>lcd.clear()<br>lcd.message(<span class="hljs-string">&quot;hello world!&quot;</span>)<br></code></pre></div></td></tr></table></figure><p><strong>再将这个文件保存为1602.py</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br> <br><span class="hljs-keyword">from</span> lcd1602 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> commands<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cpu_temp</span>():</span><br>tmp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/sys/class/thermal/thermal_zone0/temp&#x27;</span>)<br>cpu = tmp.read()<br>tmp.close()<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>( <span class="hljs-built_in">float</span>(cpu)/<span class="hljs-number">1000</span> ) + <span class="hljs-string">&#x27; C&#x27;</span><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_gpu_temp</span>():</span><br>tmp = commands.getoutput(<span class="hljs-string">&#x27;vcgencmd measure_temp|awk -F= \&#x27;&#123;print $2&#125;\&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>gpu = <span class="hljs-built_in">float</span>(tmp)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>( gpu ) + <span class="hljs-string">&#x27; C&#x27;</span><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_time_now</span>():</span><br><span class="hljs-keyword">return</span> datetime.now().strftime(<span class="hljs-string">&#x27;%H:%M:%S\n   %Y-%m-%d&#x27;</span>)<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_ip_info</span>():</span><br>ip= commands.getoutput(<span class="hljs-string">&#x27;ifconfig eth0 | grep inet | awk \&#x27;&#123; print $2 &#125;\&#x27; | awk \&#x27;NR==1\&#x27;&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Ethernet IP:\n&#x27;</span> + ip <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_mem_info</span>():</span><br>total= commands.getoutput(<span class="hljs-string">&#x27;free -m|grep Mem:|awk \&#x27;&#123;print $2&#125;\&#x27;&#x27;</span>)  <br>free= commands.getoutput(<span class="hljs-string">&#x27;free -m|grep Mem:|awk \&#x27;&#123;print $4&#125;\&#x27;&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;MEM:\n&#x27;</span> + free +<span class="hljs-string">&#x27;/&#x27;</span>+ total +<span class="hljs-string">&#x27;M&#x27;</span><br> <br>lcd = lcd1602()<br>lcd.clear()<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br> <br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>lcd.clear()<br>lcd.message( get_ip_info() )<br>sleep(<span class="hljs-number">5</span>)<br> <br>lcd.clear()<br>lcd.message( get_time_now() )<br>sleep(<span class="hljs-number">5</span>)<br> <br>lcd.clear()<br>lcd.message( get_mem_info() )<br>sleep(<span class="hljs-number">5</span>)<br> <br>lcd.clear()<br>lcd.message( <span class="hljs-string">&#x27;CPU: &#x27;</span> + get_cpu_temp()+<span class="hljs-string">&#x27;\n&#x27;</span> )<br>lcd.message( <span class="hljs-string">&#x27;GPU: &#x27;</span> + get_gpu_temp() )<br>sleep(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p><strong>最后将两个文件保存到同一个目录下面，然后编辑文件设置开机启动即可让LCD1602循环显示信息。</strong></p><p><strong>我将这两个文件保存到/home/pi/1602目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#编辑配置文件</span><br>sudo vim /etc/rc.local<br><span class="hljs-comment">#将此命令添加到文件最后</span><br>sudo python /home/pi/1602/1602.py<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/image034.png"></p><h1 id="3、爬虫服务器"><a href="#3、爬虫服务器" class="headerlink" title="3、爬虫服务器"></a>3、爬虫服务器</h1><h2 id="3-1-Python源码示例"><a href="#3-1-Python源码示例" class="headerlink" title="3.1 Python源码示例"></a>3.1 Python源码示例</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#encoding=&#x27;UTF-8&#x27;</span><br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 获取数据，根据url获取</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">url</span>):</span><br>headers = &#123;<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36&#x27;</span><br>&#125;<br>req = request.Request(url, headers=headers)<br>response = request.urlopen(req)<br><span class="hljs-keyword">if</span> response.getcode() == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">return</span> response.read()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 处理数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_data</span>(<span class="hljs-params">html</span>):</span><br>data = json.loads(html)[<span class="hljs-string">&#x27;cmts&#x27;</span>]  <span class="hljs-comment"># 将str转换为json</span><br>comments = []<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>comment = &#123;<br><span class="hljs-string">&#x27;id&#x27;</span>: item[<span class="hljs-string">&#x27;id&#x27;</span>],<br><span class="hljs-comment">#&#x27;nickName&#x27;: item[&#x27;nickName&#x27;],</span><br><span class="hljs-string">&#x27;cityName&#x27;</span>: item[<span class="hljs-string">&#x27;cityName&#x27;</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;cityName&#x27;</span> <span class="hljs-keyword">in</span> item <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-comment"># 处理cityName不存在的情况</span><br><span class="hljs-comment"># 处理评论内容换行的情况,并且将逗号替换为空格</span><br><span class="hljs-string">&#x27;content&#x27;</span>: item[<span class="hljs-string">&#x27;content&#x27;</span>].replace(<span class="hljs-string">&#x27;”&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;“&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;，&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>),  <br><span class="hljs-string">&#x27;score&#x27;</span>: item[<span class="hljs-string">&#x27;score&#x27;</span>],<br><span class="hljs-string">&#x27;startTime&#x27;</span>: item[<span class="hljs-string">&#x27;startTime&#x27;</span>]<br>&#125;<br>comments.append(comment)<br><span class="hljs-keyword">return</span> comments<br><br><span class="hljs-comment"># 存储数据，存储到文本文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">savetoCSV</span>():</span><br><span class="hljs-comment">#设置指定时间向前爬取评论数据或者从特定的时间段爬取评论</span><br><span class="hljs-comment">#start_time = &#x27;2015-05-12 02:40:34&#x27;</span><br>start_time = datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)  <span class="hljs-comment"># 获取当前时间，从当前时间向前获取</span><br><span class="hljs-comment">#设置爬取评论数据的截至时间</span><br>end_time = <span class="hljs-string">&#x27;2015-05-01 00:00:00&#x27;</span><br><span class="hljs-keyword">while</span> start_time &gt; end_time:<br>url = <span class="hljs-string">&#x27;http://m.maoyan.com/mmdb/comments/movie/248170.json?_v_=yes&amp;offset=0&amp;startTime=&#x27;</span> + start_time.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;%20&#x27;</span>)<br>html = <span class="hljs-literal">None</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">问题：当请求过于频繁时，服务器会拒绝连接，实际上是服务器的反爬虫策略</span><br><span class="hljs-string">解决：1.在每个请求间增加延时0.1秒，尽量减少请求被拒绝</span><br><span class="hljs-string"> 2.如果被拒绝，则0.5秒后重试</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">try</span>:<br>html = get_data(url)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>time.sleep(<span class="hljs-number">0.5</span>)<br>html = get_data(url)<br><span class="hljs-keyword">else</span>:<br>time.sleep(<span class="hljs-number">0.1</span>)<br><br>comments = parse_data(html)<br><span class="hljs-built_in">print</span>(comments)<br>start_time = comments[<span class="hljs-number">14</span>][<span class="hljs-string">&#x27;startTime&#x27;</span>]  <span class="hljs-comment"># 获得末尾评论的时间</span><br>start_time = datetime.strptime(start_time, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>) + timedelta(seconds=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># 转换为datetime类型，减1秒，避免获取到重复数据</span><br>start_time = datetime.strftime(start_time, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)  <span class="hljs-comment"># 转换为str</span><br></code></pre></div></td></tr></table></figure><p>​    </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> comments:<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test3.csv&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-built_in">str</span>(item[<span class="hljs-string">&#x27;id&#x27;</span>]) + <span class="hljs-string">&#x27;,&#x27;</span> + item[<span class="hljs-string">&#x27;startTime&#x27;</span>].strip(<span class="hljs-string">&#x27;[\&#x27;&#x27;</span>).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(item[<span class="hljs-string">&#x27;score&#x27;</span>]) + <span class="hljs-string">&#x27;,&#x27;</span> + item[<span class="hljs-string">&#x27;cityName&#x27;</span>] + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(item[<span class="hljs-string">&#x27;content&#x27;</span>]) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#f.write(str(item[&#x27;id&#x27;])+&#x27;,&#x27;+item[&#x27;nickName&#x27;] + &#x27;,&#x27; + item[&#x27;cityName&#x27;] + &#x27;,&#x27; + item[&#x27;content&#x27;] + &#x27;,&#x27; + str(item[&#x27;score&#x27;])+ &#x27;,&#x27; + item[&#x27;startTime&#x27;] + &#x27;\n&#x27;)</span><br></code></pre></div></td></tr></table></figure><p>​<br>​    </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>html = get_data(<span class="hljs-string">&#x27;http://m.maoyan.com/mmdb/comments/movie/248170.json?_v_=yes&amp;offset=0&amp;startTime=2018-12-31%2022%3A25%3A03&#x27;</span>)<br>comments = parse_data(html)<br><span class="hljs-built_in">print</span>(comments)<br>savetoCSV()<br></code></pre></div></td></tr></table></figure><h2 id="3-2-效果展示"><a href="#3-2-效果展示" class="headerlink" title="3.2 效果展示"></a>3.2 效果展示</h2><p><img src="https://resource.tinychen.com/raspi%E6%9C%AA%E5%91%BD%E5%90%8D1546430991.png"></p><h1 id="4、写在最后"><a href="#4、写在最后" class="headerlink" title="4、写在最后"></a>4、写在最后</h1><p><strong>重启之后就可以尽情地享用树莓派打造的多媒体中心了，虽然树莓派3B+只有USB2.0接口，但是只要搭配上百兆lan口的路由器，局域网内流畅观看40G左右大小的一部电影还是毫无问题的。</strong></p><p>如果有更高的需求，还是建议上更好的路由器和NAS吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小七比较喜欢在宿舍和室友一起看电影或听音乐，且对画质和音质要求较高，一般都是观看1080P的蓝光REMUX电影（约30G一部）和听无损音质的音乐（30M一首），且观看设备较多（电视盒子、电脑、手机），再加上平时需要下载电影且自己有写博客的习惯，博客和一些其他的重要资料也需要备份，因此决定使用树莓派3B+、一块移动硬盘和一个路由器搭建一个宿舍多媒体中心来满足这些需求。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio配置</title>
    <link href="https://tinychen.com/20180824-androidstudio-install/"/>
    <id>https://tinychen.com/20180824-androidstudio-install/</id>
    <published>2018-08-24T07:00:00.000Z</published>
    <updated>2018-08-24T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>(多图预警！！！)Android Studio作为谷歌官方的安卓开发工具，配置上并不算太难，但是有些地方需要额外注意一下。</p><span id="more"></span><blockquote><p><strong>注意：本文遵循一步一截图的原则，尽量详细（也可能有点冗长），希望各位同学注意耐心、时间和流量。</strong></p></blockquote><hr><h1 id="1、配置JDK"><a href="#1、配置JDK" class="headerlink" title="1、配置JDK"></a>1、配置JDK</h1><p>安装Android Studio（以下简称AS），需要先配置JAVA，还没有配置的同学可以点击下面的链接看小七之前的教程，这里就不再赘述。</p><p><a href="https://tinychen.com/20180803-jdk-install/">JDK安装与环境变量配置</a></p><h1 id="2、下载AS"><a href="#2、下载AS" class="headerlink" title="2、下载AS"></a>2、下载AS</h1><p>由于众所周知的原因，国内无法直接上谷歌的官网，但是对于AS的下载，还是比较简单的。</p><p>我们登录这个网址：    <a href="http://www.android-studio.org/">http://www.android-studio.org/</a>    选择对应的版本进行下载，一般来说对于新手建议下载exe文件进行安装，如果对AS已经有一定的了解则可以下载zip文件直接解压进行使用。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%280%29.png"></p><h1 id="3、安装AS"><a href="#3、安装AS" class="headerlink" title="3、安装AS"></a>3、安装AS</h1><h2 id="3-1-新建安装目录"><a href="#3-1-新建安装目录" class="headerlink" title="3.1 新建安装目录"></a>3.1 新建安装目录</h2><p>为了方便管理，我在D盘根目录下面新建了一个Android的文件夹，里面再新建三个分别名为AndroidStudio、AndroidProject和AndroidSDK的文件夹用于存放AS,Android的项目和AS的SDK。</p><blockquote><p><strong>建议不要在C盘根目录下新建文件夹，容易出现权限问题，也一定不要使用中文名给文件夹命名，包括你现在登录到windows系统的用户名也不要是中文名，否则会出错。</strong></p></blockquote><h2 id="3-2-运行exe安装文件"><a href="#3-2-运行exe安装文件" class="headerlink" title="3.2 运行exe安装文件"></a>3.2 运行exe安装文件</h2><p><img src="https://resource.tinychen.com/AndroidStudio%20%281%29.png"><br>▲双击运行安装文件，点击Next</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%282%29.png"><br>▲<strong>此处勾选Android Virtual Device(AVD)，即安卓虚拟机，</strong>可以在不连接安卓手机的情况下进行项目的调试</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%283%29.png"><br>▲此处即为AS的安装目录，将其更改为我们之前的新建的安装目录，<strong>最好不要使用默认目录！</strong></p><p><img src="https://resource.tinychen.com/AndroidStudio%20%284%29.png"><br>▲这里我们可以看到，即便是更改了安装目录，也会在系统的Users文件夹对应的账户下面新建一个.android文件夹,<strong>因此这个账户名注意不能是中文，否则后面会报错。</strong></p><p><img src="https://resource.tinychen.com/AndroidStudio%20%285%29.png"><br>▲到这里AS就已经算是基本安装完成了，但是AS需要的其他的一些插件都还没有安装，因此我们勾选Start，点击Finish。</p><h1 id="4、安装SDK和AVD"><a href="#4、安装SDK和AVD" class="headerlink" title="4、安装SDK和AVD"></a>4、安装SDK和AVD</h1><p><img src="https://resource.tinychen.com/AndroidStudio%20%286%29.png"><br>▲初次运行AS会提示你是否需要导入之前的配置文件，如果有同学之前使用过AS并且导出了配置文件，这里只需要直接导入就可以了，没有的同学直接点击Do not然后OK。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%287%29.png"><br>▲这时候就会弹出提示说找不到Android SDK，我们不需要设置代理，直接点击右边的Cancel</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%288%29.png"><br>▲点击右边的Cancel之后会开始下载一些配置文件</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%289%29.png"><br>▲下载完成之后就会开始配置SDK</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2810%29.png"><br>▲同样还是为了方便管理，我们在安装选项这里选择Custom（自定义）</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2811%29.png"><br>▲首先进行选择的是界面风格，有明暗两种色调，像小七这种夜猫子果断选暗色调。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2812%29.png"><br>▲这里会自动选择最新的SDK和API，不过我们要更改下面的安装目录为我们之前准备好的新目录，然后把上面的Intel HAXM和Android Virtual Device也勾选上，这样就把AVD也一并安装了。</p><blockquote><p>注意：运行安卓虚拟机需要安装Intel HAXM和在电脑的BIOS中开启Intel Virtualization Technology（Intel VT/英特尔虚拟化技术），二者缺一不可。</p></blockquote><p><img src="https://resource.tinychen.com/AndroidStudio%20%2813%29.png"><br>▲接下来是设置AVD的内存大小，一般我们选择默认的2G推荐值，如果电脑本身内存是4G可以调小一点，同样，如果电脑内存是16G之类的大内存请随意。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2814%29.png"><br>▲接下来会列出各种安装包组件的大小，我们直接点击Finish进行安装</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2816%29.png"><br>▲安装的过程可能会有点慢，请同学们保持耐心和网络畅通，等待全部安装完成之后再点击Finish。</p><p>到这里AS和对应的SDK还有AVD就已经安装完成了啦，下面我们来跑个HelloWorld试试。</p><h1 id="5、HelloWorld"><a href="#5、HelloWorld" class="headerlink" title="5、HelloWorld"></a>5、HelloWorld</h1><h2 id="5-1-新建项目"><a href="#5-1-新建项目" class="headerlink" title="5.1 新建项目"></a>5.1 新建项目</h2><p><img src="https://resource.tinychen.com/AndroidStudio%20%2817%29.png"><br>▲这里来到了AS的启动界面，和JerBrain家出品的其他IDE风格一脉相承，我们点击Start a new Android Studio Project来新建我们的第一个HelloWorld程序。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2818%29.png"><br>▲接下来就是设置项目的名称（一般也是APP的名称），接着将项目目录改成我们之前新建的Android Project文件夹，中间的Company Domain，如果是个人开发者就填自己的邮箱或者名字啥的，公司开发者就填公司。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2819%29.png"><br>▲接下来就是选择你的项目类型，是正常的安卓手机APP还是其他的安卓TV、Wear等等，这里我们以安卓手机APP为例，然后就要选择API版本，<strong>这里的API版本指的是这个项目向下兼容的最低版本，一般来说，API越低，兼容的设备越多，但是新API里面的新功能和特性就越容易出问题，</strong>具体如何选择看同学们的实际需求。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2820%29.png"><br>▲接下来就是选择Activity，AS官方提供了一些常用的Activity，这里我们选择一个空白的Activity（Empty Activity）。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2821%29.png"><br>▲接下来是填写Activity的名字和Layout的名字，我们直接使用默认值。<strong>（Activity和Layout数量多了之后最好根据功能用途进行命名，否则查找的时候很麻烦）</strong></p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2822%29.png"><br>▲第一次新建项目还有一些SDK需要再配置一下。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2823%29.png"><br>▲接着就是下载Gradle，Gradle的版本可以在对应的项目配置文件中修改，修改的时候注意会引发一系列的连锁反应，因此要小心谨慎。</p><blockquote><p>Gradle是AS中很重要的一个部分，以后有机会我们再开新帖研究探讨一下。</p></blockquote><p><img src="https://resource.tinychen.com/AndroidStudio%20%2824%29.png"><br>▲AS到了3.x版本之后就会又这个温馨提示窗口，有兴趣的同学可以看一下，这里我们直接跳过。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2825%29.png"><br>▲接下来我们点击右上方的Sync按钮看一下项目有没有什么问题，如图所示这里是比较正常的。</p><h2 id="5-2-运行AVD"><a href="#5-2-运行AVD" class="headerlink" title="5.2 运行AVD"></a>5.2 运行AVD</h2><p><img src="https://resource.tinychen.com/AndroidStudio%20%2826%29.png"><br>▲接下来我们点击Sync旁边的AVD按钮，打开AVD窗口</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2827%29.png"><br>▲如图所示，我们之前在安装的时候勾选了AVD选项，所以这里已经有了一个配置好的AVD，我们点击<strong>右边的绿色播放按钮（RUN）</strong>就可以直接运行。<strong>为了方便同学们理解，此处我们再新建一个AVD设备，点击左下方的Creat Virtual Devices。</strong></p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2828%29.png"><br>▲这里我们可以看到谷歌自家的一些机型以及对应的分辨率和屏幕尺寸，我们可以直接使用这些设备，也可以点击左下方导入或者新建一个，这里我们选择谷歌家的Pixel2 XL。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2829%29.png"><br>▲接下来就是选择API版本也就是系统版本，我们可以建立同一机型的不同系统版本的AVD方便我们调试。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2830%29.png"><br>▲接下来可以选择AVD是横向还是纵向，我们使用默认设置，直接完成即可。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2831%29.png"><br>▲如图所示AVD虚拟机正在开启。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2832%29.png"><br>▲到这里我们可以看到虚拟机已经开启完毕，里面的系统正在开机，旁边是我们使用手机常用到的一些操作。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2833%29.png"><br>▲接下来我们把界面切回AS。点击右上方的绿色播放按钮，其实是RUN按钮。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2834%29.png"><br>▲然后我们选择在刚刚已经开启的Pixel2 XL虚拟机上运行。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2835%29.png"><br>▲接着我们就可以看到Hello World啦。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2836%29.png"><br>▲我们打开虚拟机里面的应用抽屉，可以看到我们刚刚run的应用已经安装在这上面了。</p><h2 id="5-3-文字内容小改"><a href="#5-3-文字内容小改" class="headerlink" title="5.3 文字内容小改"></a>5.3 文字内容小改</h2><p>接下来我们试试把HelloWorld改成HelloAndroid</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2837%29.png"><br>▲在如图所示的目录中找到HelloWorld对应的控件，直接修改文字内容，保存然后再Sync再Run一次。</p><p><img src="https://resource.tinychen.com/AndroidStudio%20%2838%29.png"><br>▲Hello Android！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;(多图预警！！！)Android Studio作为谷歌官方的安卓开发工具，配置上并不算太难，但是有些地方需要额外注意一下。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Win10下安装Ubuntu双系统</title>
    <link href="https://tinychen.com/20180817-ubuntu-install/"/>
    <id>https://tinychen.com/20180817-ubuntu-install/</id>
    <published>2018-08-17T07:00:00.000Z</published>
    <updated>2018-08-17T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu18.04发布了很长一段时间了，基本上系统本身也趋于稳定，那么我们现在来尝试一下在已经存在win10系统的情况下安装Ubuntu18.04。本文使用的是单硬盘+GPT分区表配置方案，也是目前的主流方案。</p><span id="more"></span><h1 id="1、下载Ubuntu18-04及相关工具"><a href="#1、下载Ubuntu18-04及相关工具" class="headerlink" title="1、下载Ubuntu18.04及相关工具"></a>1、下载Ubuntu18.04及相关工具</h1><h2 id="1-1-下载Ubuntu"><a href="#1-1-下载Ubuntu" class="headerlink" title="1.1 下载Ubuntu"></a>1.1 下载Ubuntu</h2><p>Ubuntu已经有了中文官网，而且在国内也能正常访问，因此下载相对简单。需要注意的是，<strong>Ubuntu18.04只有64位的版本。</strong></p><p>这是下载链接：        <a href="http://releases.ubuntu.com/18.04/">http://releases.ubuntu.com/18.04/</a></p><p>▼我们下载图中的第一个后缀为desktop-amd64的iso镜像文件。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%281%29.png"></p><h2 id="1-2-下载UltraISO"><a href="#1-2-下载UltraISO" class="headerlink" title="1.2 下载UltraISO"></a>1.2 下载UltraISO</h2><p>使用搜索引擎搜索下载UltraISO并安装，关于UltraISO的使用可以参考一下小七之前发过的文章<a href="https://tinychen.com/20180318-dou-boot-udisk/">（双启动U盘）</a>。</p><p><img src="https://resource.tinychen.com/UbuntuInstall%20%282%29.png"></p><h2 id="1-3-准备U盘和硬盘分区"><a href="#1-3-准备U盘和硬盘分区" class="headerlink" title="1.3 准备U盘和硬盘分区"></a>1.3 准备U盘和硬盘分区</h2><p>准备一个8G左右的U盘即可，USB3.0最好，没有的话2.0的U盘也可以。</p><p><strong>硬盘上需要划分出一块空白空间，最少应该要有20G左右，小七这里划分了50G左右的空间。如果只是想尝试一下Ubuntu的话，预留20到30G是比较合适的。</strong></p><p>具体的划分空间操作可以使用windows系统自带的磁盘管理进行压缩操作，也可以使用DiskGenius进行分区，操作十分简单，这里不再赘述。</p><h1 id="2、刻录安装U盘"><a href="#2、刻录安装U盘" class="headerlink" title="2、刻录安装U盘"></a>2、刻录安装U盘</h1><p>▼如图所示，打开UltraISO后，<strong>点击左上角的文件-&gt;打开，选择刚刚下载好的ISO镜像文件。</strong><br><img src="https://resource.tinychen.com/UbuntuInstall%20%283%29.png"></p><p>▼再点击<strong>上方菜单栏的启动-&gt;写入硬盘，</strong>硬盘驱动器要选择对应的U盘，不能选错，然后点击<strong>便捷启动-&gt;写入新的驱动器引导扇区-&gt;Syslinux</strong>。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%284%29.png"></p><p>▼接下来点击写入，就会对U盘进行格式化并将ISO文件刻录到U盘里面。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%285%29.png"></p><h1 id="3、进入安装界面"><a href="#3、进入安装界面" class="headerlink" title="3、进入安装界面"></a>3、进入安装界面</h1><p>刻录完成之后，我们<strong>重启电脑进入BIOS或者是快捷启动菜单选择启动项，</strong>一般来说都是ESC/F1/F2/F8/F9/F11/F12等按键，具体会因笔记本的型号不同或是台式机的主板不同而不同，<strong>进入之后我们选择对应的UEFI启动项，名称应该是对应的U盘型号。</strong><br><img src="https://resource.tinychen.com/UbuntuInstall%20%286%29.png"></p><blockquote><p>小七注：有些电脑可能需要关闭BIOS设置中的Security Boot选项才能顺利使用U盘启动。</p></blockquote><p>▼到这里我们选择Try Ubuntu without install，这样可以先看一下Ubuntu的界面UI和各种操作，当然也可以直接选择下面的Install Ubuntu。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%287%29.png"></p><p>▼接下来就进入到了Ubuntu的界面，这里除了还没有对应的Ubuntu硬盘分区之外，其他的基本没有太大差别，我们点击桌面的Install Ubuntu 18.04.1LTS进行安装。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%288%29.png"></p><h1 id="4、开始安装"><a href="#4、开始安装" class="headerlink" title="4、开始安装"></a>4、开始安装</h1><p><strong>接下来到分区之前都是一些简单的设置，我们根据实际需要选择即可。</strong></p><h2 id="4-1-语言设置"><a href="#4-1-语言设置" class="headerlink" title="4.1 语言设置"></a>4.1 语言设置</h2><p>▼语言选择中文<br><img src="https://resource.tinychen.com/UbuntuInstall%20%289%29.png"></p><h2 id="4-2-键盘设置"><a href="#4-2-键盘设置" class="headerlink" title="4.2 键盘设置"></a>4.2 键盘设置</h2><p>▼键盘布局选择汉语<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2810%29.png"></p><h2 id="4-3-网络设置"><a href="#4-3-网络设置" class="headerlink" title="4.3 网络设置"></a>4.3 网络设置</h2><p>▼WiFi暂时先不要连接<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2811%29.png"></p><h2 id="4-4-系统安装分区"><a href="#4-4-系统安装分区" class="headerlink" title="4.4 系统安装分区"></a>4.4 系统安装分区</h2><p>▼<strong>安装类型选择其他选项</strong><br><img src="https://resource.tinychen.com/UbuntuInstall%20%2812%29.png"></p><p>▼如图所示，硬盘上的分区多数是NTFS分区，这是windows系统使用的分区，而上方的EFI分区则是使用UEFI+GPT分区表模式下产生的用于记录系统引导文件的分区<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2813%29.png"></p><p>一般来说，Ubuntu的安装分区可以分为三种情况：</p><h3 id="4-4-1-第一种"><a href="#4-4-1-第一种" class="headerlink" title="4.4.1 第一种"></a>4.4.1 第一种</h3><p><strong>简单粗暴，只分一个    / （主分区），将所有的空间全部分到这个分区里面。</strong></p><p>这种方案比较适合刚入门Ubuntu的萌新，想先体验上手一下Ubuntu，不需要担心分区的设置合理情况。</p><h3 id="4-4-2-第二种"><a href="#4-4-2-第二种" class="headerlink" title="4.4.2 第二种"></a>4.4.2 第二种</h3><p><strong>分两个，Swap交换分区和/主分区，swap分区一般根据内存大小来分，剩下的全部给/主分区</strong></p><p><strong>Swap交换分区其实就是虚拟内存分区</strong>，如果电脑内存比较小（小于8G）而且平时需要用到较多内存的话可以划分大一点（4G左右），如果平时内存足够用可以划分小一点，几百M到一两G都是没问题的。</p><p>有兴趣的同学可以点击这里跳转到小七之前的博客了解一下。<a href="https://tinychen.com/20170504-pagefiles/">（虚拟内存）</a></p><h3 id="4-4-3-第三种"><a href="#4-4-3-第三种" class="headerlink" title="4.4.3 第三种"></a>4.4.3 第三种</h3><p><strong>分四个，/boot引导分区、/home用户分区、swap交换分区和 / 主分区</strong><br><strong>/boot（引导分区）：</strong>相当于windows的efi分区，大小设置为200M即可，也可以更大一点；</p><p><strong>/（主分区）：</strong>用于存放Ubuntu系统，相当于windows的C盘，一般来说10到15G就够了。</p><p><strong>Swap(交换分区）：</strong>虚拟内存分区，大小参看第二种分法。</p><p><strong>/home（用户分区）：</strong>存储用户的各种数据，剩下的硬盘空间有多大就分多大给这个分区</p><p>这里小七选择第二种分区方案，一来是因为小七这里只划了50G来安装Ubuntu，硬盘本身的空间就不大，分太多区不太好；二来就是小七自己也没有什么分区的习惯（windows下也只是分了两个盘）。<br>▼如图所示，给交换分区（Swap）分2G（这台电脑的内存是16G，不需要分太大的交换空间）<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2814%29.png"></p><p>▼如图所示，剩下的空间全部分给    /    主分区<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2816%29.png"></p><p><img src="https://resource.tinychen.com/UbuntuInstall%20%2817%29.png"></p><p>▼确认无误后点击确认。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2818%29.png"></p><h2 id="4-5-设置区域"><a href="#4-5-设置区域" class="headerlink" title="4.5 设置区域"></a>4.5 设置区域</h2><p>▼设置区域，选择中国，默认城市是上海。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2819%29.png"></p><h2 id="4-6-设置用户名"><a href="#4-6-设置用户名" class="headerlink" title="4.6 设置用户名"></a>4.6 设置用户名</h2><p>▼设置用户名和密码，也可以不设置，但是最好还是设置一下，一些超级用户操作需要输入密码解锁权限，没有密码的话会比较麻烦。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2820%29.png"></p><p>▼接下来就静静地等待安装完成。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2821%29.png"></p><p>▼安装完成后会提示重启进入系统。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2822%29.png"></p><h1 id="5、重启系统"><a href="#5、重启系统" class="headerlink" title="5、重启系统"></a>5、重启系统</h1><p>▼重启后我们再进入启动选项可以看到Ubuntu已经在默认的第一个启动项中，如果平时使用windows比较多的可以把第一个改回windows。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2823%29.png"></p><p>▼如图所示即可进入Ubuntu系统，下面的第三个就是windows系统。<br><img src="https://resource.tinychen.com/UbuntuInstall%20%2824%29.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu18.04发布了很长一段时间了，基本上系统本身也趋于稳定，那么我们现在来尝试一下在已经存在win10系统的情况下安装Ubuntu18.04。本文使用的是单硬盘+GPT分区表配置方案，也是目前的主流方案。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://tinychen.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>硬盘RaidOn模式无损转换为AHCI模式</title>
    <link href="https://tinychen.com/20180814-raidon-2-ahci/"/>
    <id>https://tinychen.com/20180814-raidon-2-ahci/</id>
    <published>2018-08-14T07:00:00.000Z</published>
    <updated>2018-08-14T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些电脑的硬盘出厂模式就是RaidOn,RAID模式对于混合硬盘来说有一定的好处，但是对于单固态来说还是AHCI更为方便一些。今天在装Ubuntu的时候发现安装程序不认RaidOn模式的硬盘，只能改成AHCI模式。</p><span id="more"></span><p><strong>如果直接在BIOS中更改硬盘模式为AHCI，则会出现无法进入系统的情况，因此我们需要使用安全启动模式。</strong></p><h1 id="1、打开安全启动模式"><a href="#1、打开安全启动模式" class="headerlink" title="1、打开安全启动模式"></a>1、打开安全启动模式</h1><p>同时按下win+R按键，输入msconfig：</p><p><img src="https://resource.tinychen.com/RaidOn2AHCI%20%281%29.png"></p><p>打开配置菜单如下图所示，点击boot，勾选safe boot，选择minimal。</p><p><img src="https://resource.tinychen.com/RaidOn2AHCI%20%282%29.png"></p><p>点击OK，然后重新启动系统。</p><p><img src="https://resource.tinychen.com/RaidOn2AHCI%20%283%29.png"></p><h1 id="2、更改BIOS中硬盘模式"><a href="#2、更改BIOS中硬盘模式" class="headerlink" title="2、更改BIOS中硬盘模式"></a>2、更改BIOS中硬盘模式</h1><p>进入BIOS，更改硬盘模式为AHCI，点击确定。</p><p><img src="https://resource.tinychen.com/RaidOn2AHCI%20%284%29.png"></p><h1 id="3、关闭安全启动模式"><a href="#3、关闭安全启动模式" class="headerlink" title="3、关闭安全启动模式"></a>3、关闭安全启动模式</h1><p>此时重启完成进入电脑是安全模式，重复第一步，取消勾选。</p><p><img src="https://resource.tinychen.com/RaidOn2AHCI%20%285%29.png"></p><p>点击OK，再次重启即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有些电脑的硬盘出厂模式就是RaidOn,RAID模式对于混合硬盘来说有一定的好处，但是对于单固态来说还是AHCI更为方便一些。今天在装Ubuntu的时候发现安装程序不认RaidOn模式的硬盘，只能改成AHCI模式。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装与环境变量配置</title>
    <link href="https://tinychen.com/20180803-jdk-install/"/>
    <id>https://tinychen.com/20180803-jdk-install/</id>
    <published>2018-08-03T07:00:00.000Z</published>
    <updated>2018-08-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文以JAVA10为例，JAVA8的安装配置基本大同小异。</p><span id="more"></span><hr><h1 id="1、下载JAVA10"><a href="#1、下载JAVA10" class="headerlink" title="1、下载JAVA10"></a>1、下载JAVA10</h1><p>首先我们要去官网下载JAVA10的安装包。<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">点击这里跳转到官网。</a></p><p>截至到发文为止，最新的版本是10.0.2。<strong>下载之前要记得先点击上面的Accept License Agreement，否则将无法下载。</strong></p><blockquote><p>另外，Windows上JAVA10只提供64位的版本。不过现在大多数电脑都是64位，这个问题应该不大。</p></blockquote><p><img src="https://resource.tinychen.com/JAVA10%20%281%29.png"></p><p>下载完成之后，直接双击安装。</p><h1 id="2、安装JAVA10"><a href="#2、安装JAVA10" class="headerlink" title="2、安装JAVA10"></a>2、安装JAVA10</h1><p>因为小七这里只有10.0.1的版本，且系统的默认显示语言为英语，所以就以这个版本为例。（这里需要额外提一下，各种开发工具和IDE的存放文件夹和路径最好都以英文命名，不容易出现问题）</p><p><img src="https://resource.tinychen.com/JAVA10%20%282%29.png"></p><p>▲我们点击next</p><p><img src="https://resource.tinychen.com/JAVA10%20%283%29.png"></p><p>▲这里我们取消勾选JRE，因为没有必要而且会使后面的环境变量配置变得很复杂。<br>▲为了方便管理和记忆，我将它安装到了D盘，<strong>这个安装路径需要记住，因为后面配置环境变量的时候需要用到。</strong></p><p><img src="https://resource.tinychen.com/JAVA10%20%284%29.png"></p><p>▲到这里JAVA10就已经安装完成了，下面我们进入环境变量的配置阶段。</p><h1 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h1><h2 id="3-1-JAVA10"><a href="#3-1-JAVA10" class="headerlink" title="3.1 JAVA10"></a>3.1 JAVA10</h2><p><img src="https://resource.tinychen.com/JAVA10%20%285%29.png"></p><p><strong>▲我们找到我的电脑，右键选择属性，然后点击左上方列表最下面的高级系统设置，点击下方的环境变量设置，看到最下面的系统变量。</strong></p><p><img src="https://resource.tinychen.com/JAVA10%20%286%29.png"></p><p>▲首先我们添加一个名为JAVA_HOME的变量，变量的值就是刚刚我们安装JAVA10的目录。</p><blockquote><p>需要注意的是，如果你前面安装了JRE，在对应的安装目录下面会有JDK和JRE两个文件夹，此时我们需要选择JDK文件夹。</p></blockquote><p><img src="https://resource.tinychen.com/JAVA10%20%287%29.png"></p><p>▲接着我们修改PATH变量（path不区分大小写）。在path变量的最前面添加如下变量值：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">;%JAVA_HOME%\bin;<br></code></pre></div></td></tr></table></figure><p>注意这个变量值要和上面完全一样。</p><p>依次点击确定并关闭所有窗口。到这里我们就已经安装配置好JAVA10了。</p><h2 id="3-2-JAVA8"><a href="#3-2-JAVA8" class="headerlink" title="3.2 JAVA8"></a>3.2 JAVA8</h2><p>JAVA8的环境变量配置大同小异。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">C:\Java\jdk1.8.0_202<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/java1.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/java2.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/java3.png"></p><h1 id="4、检验安装"><a href="#4、检验安装" class="headerlink" title="4、检验安装"></a>4、检验安装</h1><p><img src="https://resource.tinychen.com/JAVA10%20%288%29.png"></p><p>▲我们打开CMD，输入java或者javac，出现下面的命令行就表示已经配置成功。</p><p>为了进一步确定是全局变量配置成功，我们在其他位置（如D盘）新建一个java文件，写个简单的hello测试一下。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;HelloJAVA10!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/JAVA10%20%289%29.png"></p><p>▲然后我们先使用javac命令编译java文件生成class文件，再使用java命令执行class文件就可以看到实际效果了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文以JAVA10为例，JAVA8的安装配置基本大同小异。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>小程序之app.json</title>
    <link href="https://tinychen.com/20180718-tiny-program-02/"/>
    <id>https://tinychen.com/20180718-tiny-program-02/</id>
    <published>2018-07-18T07:00:00.000Z</published>
    <updated>2018-07-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 和debug模式五方面的配置。</p><span id="more"></span><p>下面我们通过一个Demo来对其进行深入的了解。</p><h1 id="1、Demo"><a href="#1、Demo" class="headerlink" title="1、Demo"></a>1、Demo</h1><p>先看一下微信官方给出的一些说明。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="center">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pages</td><td align="left">String Array</td><td align="center">是</td><td align="left">设置页面路径</td></tr><tr><td align="left">window</td><td align="left">Object</td><td align="center">否</td><td align="left">设置默认页面的窗口表现</td></tr><tr><td align="left">tabBar</td><td align="left">Object</td><td align="center">否</td><td align="left">设置底部 tab 的表现</td></tr><tr><td align="left">networkTimeout</td><td align="left">Object</td><td align="center">否</td><td align="left">设置网络超时时间</td></tr><tr><td align="left">debug</td><td align="left">Boolean</td><td align="center">否</td><td align="left">设置是否开启 debug 模式</td></tr></tbody></table><p>再来看一段包含了上述五个部分的代码。</p><div class="hljs code-wrapper"><pre><code>&#123;  &quot;pages&quot;: [    &quot;pages/index/index&quot;,    &quot;pages/logs/logs&quot;,    &quot;pages/mine/mine&quot;,    &quot;pages/resume/resume&quot;,    &quot;pages/share/share&quot;  ],  &quot;window&quot;: &#123;    &quot;backgroundTextStyle&quot;: &quot;light&quot;,    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,    &quot;navigationBarTitleText&quot;: &quot;SchoolHunting&quot;,    &quot;navigationBarTextStyle&quot;: &quot;black&quot;  &#125;,  &quot;tabBar&quot;: &#123;    &quot;list&quot;: [      &#123;        &quot;pagePath&quot;: &quot;pages/index/index&quot;,        &quot;text&quot;: &quot;首页&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/index.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/index_sel.png&quot;      &#125;,      &#123;        &quot;pagePath&quot;:&quot;pages/share/share&quot;,        &quot;text&quot;: &quot;分享&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/share.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/share_sel.png&quot;      &#125;,      &#123;        &quot;pagePath&quot;:&quot;pages/resume/resume&quot;,        &quot;text&quot;: &quot;简历&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/resume.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/resume_sel.png&quot;      &#125;,      &#123;        &quot;pagePath&quot;: &quot;pages/mine/mine&quot;,        &quot;text&quot;: &quot;我的&quot;,        &quot;iconPath&quot;: &quot;images/tabBar/mine.png&quot;,        &quot;selectedIconPath&quot;: &quot;images/tabBar/mine.png&quot;      &#125;    ]&#125;,&quot;networkTimeout&quot;: &#123;      &quot;request&quot;: 10000,      &quot;downloadFile&quot;: 10000&#125;,&quot;debug&quot;: true&#125;</code></pre></div><h1 id="2、pages：页面文件的路径"><a href="#2、pages：页面文件的路径" class="headerlink" title="2、pages：页面文件的路径"></a>2、pages：页面文件的路径</h1><ul><li><p>接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。</p></li><li><p>每一项代表对应页面的【路径+文件名】信息，数组的第一项代表小程序的初始页面。</p></li><li><p><strong>小程序中新增/减少页面，都需要对 pages 数组进行修改，在IDE的文件目录新建pages的时候IDE会提醒是否自动更新app.json中的pages字段。</strong></p></li><li><p>文件名不需要写文件后缀，因为框架会自动去寻找路径下 .json, .js, .wxml, .wxss 四个文件进行整合。</p></li></ul><h1 id="3、window：窗口表现"><a href="#3、window：窗口表现" class="headerlink" title="3、window：窗口表现"></a>3、window：窗口表现</h1><p>主要会用到的是<strong>navigationBarTitleText</strong>这个变量，变量设置的是小程序界面上方显示的名称，一般设置成小程序的名称，其余变量是对其的样式设置。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">可以点击这里查看官方的详细说明。</a></p><h1 id="4、tabBar：设置多bar"><a href="#4、tabBar：设置多bar" class="headerlink" title="4、tabBar：设置多bar"></a>4、tabBar：设置多bar</h1><ul><li><p>tabBar字段主要是设置小程序的Bar，<strong>最少为两个，最多为五个。</strong></p></li><li><p>position变量可以设置Bar的位置是在下面（bottom）还是在上方（top），需要额外注意的是，当设置为上方（top）时，不会显示图标Icon。</p></li><li><p>list作为数组，其中的变量pagePath和text设置bar对应的页面路径和名称，iconPath和selectediconPath是未选中状态和选中状态的两个图标的路径，不设置则无，只设置其中一个则另一个也相同，<strong>建议要设置两个且最好用相同图标不同颜色（黑灰或黑彩）来进行区分。</strong></p></li></ul><p>这里给出两张对比图。</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%281%29.png"></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%282%29.png"></p><h1 id="5、networkTimeout：设置网络超时时间"><a href="#5、networkTimeout：设置网络超时时间" class="headerlink" title="5、networkTimeout：设置网络超时时间"></a>5、networkTimeout：设置网络超时时间</h1><p><strong>主要是四个网络请求的超时设置（request、connectSocket、uploadFile和downloadFile），</strong>单位是毫秒（ms），一秒等于一千毫秒，<strong>默认的时间是60000ms即一分钟。</strong></p><h1 id="6、debug：debug模式"><a href="#6、debug：debug模式" class="headerlink" title="6、debug：debug模式"></a>6、debug：debug模式</h1><p>这个比较简单，debug这个变量本身是个布尔型，默认值也是true（开启状态）。</p><p>debug模式开启之后，在开发者工具的控制台面板，调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发 。 可以帮助开发者快速定位一些常见的问题。</p><p>这里同样给出两张对比图。</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%283%29.png"></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bapp.json%20%284%29.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 和debug模式五方面的配置。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>小程序之HelloWorld</title>
    <link href="https://tinychen.com/20180717-tiny-program-01/"/>
    <id>https://tinychen.com/20180717-tiny-program-01/</id>
    <published>2018-07-17T02:00:00.000Z</published>
    <updated>2018-07-17T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序也推出了有些时间了，最近因为种种原因终于要正儿八经地开始微信小程序开发了，先记录一下基本的开发者账号注册和开发环境搭建。</p><span id="more"></span><h1 id="1、开发者账号注册"><a href="#1、开发者账号注册" class="headerlink" title="1、开发者账号注册"></a>1、开发者账号注册</h1><p>微信小程序的开发和其他的软件开发不太一样，需要先实名注册账号，而且官方的IDE得先登录才能使用。</p><p>注册的网址在这里： <a href="https://mp.weixin.qq.com/cgi-bin/wx">https://mp.weixin.qq.com/cgi-bin/wx</a></p><p>需要注意的是，一个邮箱只能对应一个小程序开发，如果你想开发多个小程序，那就多拿几个邮箱去注册，邮箱还要绑定已经用银行卡实名认证的微信号绑定，其他的信息如实填写即可，填错了也没关系，反正填了之后还能修改。</p><h1 id="2、开发环境搭建"><a href="#2、开发环境搭建" class="headerlink" title="2、开发环境搭建"></a>2、开发环境搭建</h1><p>微信官方也提供了开发IDE，安装包并不大，只有几十MB，下载之后傻瓜式安装即可。</p><p>这是下载链接：    <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%281%29.png"></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%282%29.png"></p><p>安装之后点击打开，需要使用微信扫描二维码登陆</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%283%29.png"></p><p>然后我们选择小程序</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%284%29.png"></p><p>接下来就要填写小程序项目的目录，AppID以及小程序的名称</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%286%29.png"></p><p><strong>其中，AppID需要登录网页的微信公众平台，    <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a>    在设置→开发设置里面查看。</strong></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%285%29.png"></p><h1 id="3、熟悉基本开发环境"><a href="#3、熟悉基本开发环境" class="headerlink" title="3、熟悉基本开发环境"></a>3、熟悉基本开发环境</h1><h2 id="3-1-基本环境"><a href="#3-1-基本环境" class="headerlink" title="3.1 基本环境"></a>3.1 基本环境</h2><p>接下来我们看一下整个IDE的基本开发环境</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%287%29.png"></p><p>左上方可以选择模拟器，由于小程序和web程序差不多，（IDE本身也叫web开发者工具）所以这个模拟器基本也就是模拟一下分辨率的样子，当然不同的可能还有安卓和IOS平台之间的一些权限。</p><p>左边的这一大个就是模拟器了。</p><p>再过来的就是文件目录，以及主要的工作区。</p><p>上面的部分是工具栏，下面的控制台，和Visual Studio、Android Studio 这类IDE基本大同小异。</p><p>可能不同的地方就是微信的web开发者工具BUG比较多？</p><h2 id="3-2-四类文件"><a href="#3-2-四类文件" class="headerlink" title="3.2 四类文件"></a>3.2 四类文件</h2><p>这里我们再说一下小程序里面的四类主要文件：</p><p><strong>网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。在小程序中，也是如此。</strong></p><h3 id="3-2-1-js"><a href="#3-2-1-js" class="headerlink" title="3.2.1 .js"></a>3.2.1 .js</h3><p><strong>js是典型的脚本文件，</strong>在小程序这里，<strong>还可以在js中调用小程序的API，</strong>实现更丰富的功能。</p><p><em>（官方是这么说的，但是实际上我总觉得微信小程序的有很多功能都无法实现，被限制得太死了）</em></p><h3 id="3-2-2-json"><a href="#3-2-2-json" class="headerlink" title="3.2.2 .json"></a>3.2.2 .json</h3><p>json就是配置文件，这个没什么好说，但是根据文件名，我们可以看到<strong>这里的json文件可以分为三类</strong>，我们以 在根目录下的app.json ， project.config.json，和在 pages/logs 目录下的logs.json为例依次来说明一下他们的用途。</p><p><strong>app.json 是小程序的配置文件。</strong>它是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p><p><strong>project.config.json是整个IDE的配置文件。</strong>它保存着IDE的各类配置，比如代码的字体颜色大小等各类信息，类似于JetBrains家的IDE导出的setting文件，方便迁移IDE环境的时候恢复原来的开发环境配置的。</p><p><strong>page.json是所属页面的配置文件。</strong>和app.json不同，它只对所在目录的页面生效。如果将app.json看作是全局配置，那么page.json就可以看作是局部配置。</p><h3 id="3-2-3-wxss"><a href="#3-2-3-wxss" class="headerlink" title="3.2.3 .wxss"></a>3.2.3 .wxss</h3><p><strong>类比css文件，就是用来配置页面的各种样式。</strong></p><h3 id="3-2-4-wxml"><a href="#3-2-4-wxml" class="headerlink" title="3.2.4 .wxml"></a>3.2.4 .wxml</h3><p><strong>类比html文件，在小程序中 WXML 充当的就是类似 HTML 的角色。</strong></p><h1 id="4、HelloWorld"><a href="#4、HelloWorld" class="headerlink" title="4、HelloWorld"></a>4、HelloWorld</h1><p>回到模拟器这里，我们可以看到……<br>emmm，对的，hello world就在这里。<br><em>（天哪好没成就感，这个helloworld没有一个从无到有的出现过程，太没意思了。）</em></p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%288%29.png"></p><p>我们点击获取头像昵称，然后就可以登录了，用的微信账号就是我们刚刚扫码登录的那个微信账号，也是我们用来绑定这个小程序开发账号的微信账号。</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%289%29.png"></p><p>最后到这里就算是登录成功了，整个第一步也就完成了。</p><p><img src="https://resource.tinychen.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BHelloWorld%20%2810%29.png"></p><p>最后再额外提一下，关于第三方开发者能获取的微信用户的信息其实很少，除了头像昵称和ID基本就没有了。</p><p><strong>但是有些例外：</strong></p><p><strong>腾讯的嫡系（亲儿子）：</strong>QQ音乐、腾讯视频等可以通过小程序实现一些简单的输出到朋友圈的操作。</p><p><strong>腾讯的旁系（干儿子）：</strong>大众点评、美团等等可以退一步，能够获取微信用户的好友以及展示他们的操作。</p><p><strong>和腾讯扯不上啥关系的第三方开发者：</strong>获取昵称头像ID就差不多了。</p><p>所以我们可以看到，微信的小程序并不是对所有开发者平等的，至少在现在来说，对开发者能获取的权限来说是不平等的，它和Facebook的bots虽然看起来很像，但是在开发者层面来说还是有很大差别的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;微信小程序也推出了有些时间了，最近因为种种原因终于要正儿八经地开始微信小程序开发了，先记录一下基本的开发者账号注册和开发环境搭建。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="code" scheme="https://tinychen.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习提纲</title>
    <link href="https://tinychen.com/20180630-data-structure/"/>
    <id>https://tinychen.com/20180630-data-structure/</id>
    <published>2018-06-30T07:00:00.000Z</published>
    <updated>2018-06-30T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>汕头大学于津老师的数据结构复习题，对应教材是清华的严蔚敏老师的《数据结构》。</p><span id="more"></span><hr><ol><li><strong>以Niklus Wirth的观点，程序等于什么?</strong></li></ol><p>程序=数据结构+算法</p><hr><ol start="2"><li><strong>算法的重要特性；好算法的标准。</strong></li></ol><p>算法的重要特性：①有穷性②确定性③可行性④输入⑤输出</p><p>好算法的标准：①正确性②可读性③健壮性④高效率和低存储</p><hr><ol start="3"><li><strong>数据结构主要研究对象：</strong></li></ol><p><strong>逻辑结构</strong>（线性、非线性）、</p><p><strong>存贮结构</strong>（顺序、链式、索引、散列hash）；</p><p><strong>运算/操作</strong>（对数据的最主要的操作：增删改查）；</p><hr><ol start="4"><li><strong>数据的逻辑结构有几大类？</strong></li></ol><p>线性、非线性</p><hr><ol start="5"><li><strong>数据的存贮结构有几类？</strong></li></ol><p>四类：顺序、链式、索引、散列hash</p><hr><ol start="6"><li><strong>线性结构的特点。</strong></li></ol><p>线性结构中的数据元素存在一个对一个的关系，在线性结构中只有一个开始结点和一个终端结点，其他的每一个结点有且仅有一个前驱结点和后继结点。</p><hr><ol start="7"><li><strong>线性结构与非线性结构的区别。</strong></li></ol><p>线性结构中的元素必须是一对一的关系，而非线性结构中的元素可以是一对多或者是多对多。</p><hr><ol start="8"><li><strong>列出所学过的线性结构与非线性结构。</strong></li></ol><p><strong>线性结构：</strong>线性表，栈，队列，串，一维数组；</p><p><strong>非线性结构：</strong>二维数组，多维数组，广义表，树，森林，图；</p><hr><ol start="9"><li><strong>头指针、头结点、首元结点的区别。</strong></li></ol><p><strong>头指针：</strong>指向链表中第一个结点（头结点/首元结点）的指针；</p><p><strong>头结点：</strong>链表的首元结点之前附设的一个结点；</p><p><strong>首元结点：</strong>链表中存储线性表中第一个数据元素a1的结点；</p><hr><ol start="10"><li><strong>带头结点和不带头结点的线性链表(单链表)的区别。</strong></li></ol><p><strong>在结构上，</strong>带头结点的单链表，不管链表是否为空，均含有一个头结点，不带头结点的单链表不含头结点。</p><p><strong>在操作上，</strong>带头结点的单链表的初始化为申请一个头结点。无论插入或删除的位置是首元结点还是其他结点，算法步骤都相同。不带头结点的单链表，则要考虑插入或删除的位置。</p><hr><ol start="11"><li><strong>单链表、双链表、循环链表的区别、各自的优缺点及怎样决定选取何种存贮结构。</strong></li></ol><p><strong>单链表：</strong>每个结点中只包含一个指针域</p><p><strong>优点：</strong>插入和删除时候不需要移动大量的元素</p><p><strong>缺点：</strong>指针只能单方向移动</p><p><strong>双链表：</strong>有两个指针域，其一指向直接后继，其二指向直接前驱</p><p><strong>优点：</strong>查找直接前驱的时候，则从头指针出发，能够克服单链表这种单向性的缺点</p><p><strong>缺点：</strong>插入删除操作时需要修改多个指针域</p><p><strong>循环链表：</strong>最后一个结点的指针域指向头结点</p><p><strong>优点：</strong>使两个表连接起来就很简单，这个操作仅需两个指针即可，插入、删除时，不会断链等。</p><p><strong>缺点：</strong>不容易确定退出循环的条件</p><hr><ol start="12"><li><strong>栈和队列是什么样的线性表?</strong></li></ol><p>栈和队列都是<strong>操作受限的线性表</strong>。</p><p><strong>栈</strong>是一种<strong>后进先出（LIFO）</strong>的线性表，限定仅在表尾进行插入或删除操作的线性表。</p><p><strong>队列</strong>是一种<strong>先进先出（FIFO）</strong>的线性表，只允许在表的一端进行插入，而在另一端删除元素。</p><hr><ol start="13"><li><strong>指出顺序线性表、顺序栈、顺序队列的区别。</strong></li></ol><p><strong>相同：都是线性表，都是一维数组，</strong></p><p><strong>不同：操作不同；（线性表是任意位置操作，栈是栈顶操作，队列是尾进头出）</strong></p><p><strong>顺序线性表</strong>：用<strong>一组地址连续的存储单元</strong>依次存储线性表的数据元素。</p><p><strong>顺序栈</strong>：即栈的顺序存储结构是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时<strong>附设指针top指示栈顶元素在顺序栈中的位置。</strong></p><p><strong>顺序队列</strong>：除了用一组地址连续的存储单元依次存放从队列头到队列尾的元素之外，尚需<strong>附设两个指针front和rear分别指示队列头元素及队列尾元素的位置。</strong></p><hr><ol start="14"><li><strong>例举栈和队列的实例及用栈和队列所能解决的问题。</strong></li></ol><p><strong>栈：后进先出的数据（LIFO），</strong>如：数制转换、括号匹配的校验、行编辑程序、迷宫求解、表达式求值、铁路中转站，餐厅的食物盘, 子弹壳。</p><p><strong>队列：先进先出的数据 (FIFO)，</strong>如：操作系统作业排队，排队买东西</p><hr><ol start="15"><li><strong>指出通常解决队列和栈溢出时所能用到的方法。</strong></li></ol><p><strong>队列：</strong>双向队列，链队列，循环队列</p><p><strong>栈：</strong>双栈共享，多栈共享，链栈</p><hr><ol start="16"><li><strong>循环队列的循环是怎样实现的?</strong></li></ol><p>队头、队尾指针加1，用取模(余数)运算实现循环</p><hr><ol start="17"><li><strong>给出对称矩阵、三角矩阵、对角矩阵节省内存的存贮结构并写出相应的输入、输出算法。</strong></li></ol><p><strong>对称矩阵的存贮结构：</strong></p><p>利用 = 来存储(以按行存储为例)</p><p>K=I(I-1)/2 +J-1 I&gt;=J;</p><p>K=J(J-1)/2 +I-1 I&lt;J;</p><p>k 是对称矩阵位于（i，j）位置的元素在一维数组中的存放位置，从0开始</p><p>a11 a21 a22 a31 …… ann</p><p><strong>三角矩阵的存贮结构：</strong></p><p>以下三角为例，当i&lt;j时,aij=0</p><p>K=0的位置存储0</p><p>0 a11 a21 a22 …… a</p><p><strong>对角矩阵的存贮结构：</strong></p><p>记住loc( aij )=loc( a11 )+( 2i+j-3 ) L i-1&lt;=j&lt;=i+1</p><p><strong>输入输出算法：</strong></p><hr><ol start="18"><li><strong>给出稀疏矩阵的节省内存的存贮结构并写出相应的输入、输出算法。</strong></li></ol><p>为了节省存储单元，可只存储非零元素。由于非零元素的分布一般是没有规律的，因此在存储非零元素的同时，还必须存储非零元素所在的行号、列号，才能迅速确定一个非零元素是矩阵中的哪一个元素。其中每一个非零元素所在的行号、列号和值组成一个三元组，并由此三元组惟一确定。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//三元组表</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 100 <span class="hljs-comment">//非零元个数的最大值</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><br><span class="hljs-keyword">int</span> i,j; <span class="hljs-comment">// 行下标,列下标</span><br><br>ElemType e; <span class="hljs-comment">// 非零元素值</span><br><br>&#125;Triple;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">&#123;</span>Triple data[MAXSIZE+<span class="hljs-number">1</span>]; <span class="hljs-comment">//非零元三元组表,data[0]未用</span><br><br><span class="hljs-keyword">int</span> mu,nu, tu; <span class="hljs-comment">// 矩阵的行数、列数和非零元个数</span><br><br>&#125;TSMatrix;<br><br><span class="hljs-comment">//十字链表</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">OLNode</span> //结点的定义</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> i,j; <span class="hljs-comment">// 非零元的行和列下标</span><br><br>ElemType e; <span class="hljs-comment">// 非零元素值</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">OLNode</span> *<span class="hljs-title">right</span>,*<span class="hljs-title">down</span>;</span> <span class="hljs-comment">// 该非零元所在行表和列表的后继链域</span><br><br>&#125;OLNode, *OLink;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> //链表的定义</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#123;</span> OLink *rhead,*chead; <span class="hljs-comment">// 行和列链表头指针向量基址,由CreatSMatrix_OL()分配</span><br><br><span class="hljs-keyword">int</span> mu,nu,tu; <span class="hljs-comment">// 稀疏矩阵的行、列数和非零元个数</span><br><br>&#125;CrossList;<br></code></pre></div></td></tr></table></figure><p><strong>输入输出算法</strong></p><hr><ol start="19"><li><strong>用十字链表存贮稀疏矩阵时, 矩阵的每个元素同时在几条链上, 分别被称为什么链？</strong></li></ol><p><strong>两条链</strong>：行链和列链</p><hr><ol start="20"><li><strong>给出树的不同的几种表示（图示）形式。</strong></li></ol><p>（一）层次表示法</p><p>（二）广义表表示法</p><p>（三）嵌套表示法</p><p>（四）凹入法表示法</p><hr><ol start="21"><li><strong>在二叉树的第 i层上至多有多少个结点。深度为 K的二叉树至多有多少个结点。</strong></li></ol><p><strong>第i层上至多有2^（i-1）^个结点</strong></p><p><strong>深度为 K的二叉树至多有2^k^-1个结点</strong></p><hr><ol start="22"><li><strong>在一颗二叉树中, 其叶子结点数n<del>0</del>和度为二的结点数n<del>2</del>之间的关系。</strong></li></ol><p><strong>n<del>0</del>=n<del>2</del>+1</strong></p><p>证明过程如下：</p><p>假设二叉树的0度,1度,2度结点为n0,n1,n2,总节点数为T</p><p>则有按照结点求和的：T = n<del>0</del> + n<del>1</del> + n<del>2</del> （1）</p><p>按照边求和得：T = n<del>1</del> + 2 * n<del>2</del> + 1 （2）</p><p>所以 （2） - （1）可得：n<del>2</del> + 1 - n<del>0</del> = 0</p><p>所以n<del>0</del> = n<del>2</del> + 1</p><hr><ol start="23"><li><strong>有 n个结点的完全二叉树的深度。</strong></li></ol><p><strong>(log<del>2</del>n)+1</strong></p><hr><ol start="24"><li><strong>在二叉树的顺序存贮结构中如何求结点的双亲、孩子?</strong></li></ol><p>双亲：i/2； 左孩子：2*i； 右孩子：2*i+1；</p><hr><p><strong>25. 有 n个结点的二叉树用二叉链表存贮时有多少个空链域，用三叉链表存贮时有多少个空链域。</strong></p><p>二叉：n+1个空链域</p><p>三叉：n+2个空链域</p><hr><p><strong>26. 为什么可在不增加指针域的情况下，对二叉树进行线索化，线索化的目的是什么?</strong></p><p>①利用n+1个空链域</p><p>②目的：遍历方便</p><hr><p><strong>27. 对于已线索化二叉树如何识别指针域是指向孩子还是其后继结点?</strong></p><p><strong>增加标志域：</strong>LeftThread和RightThread（0指向孩子指针，1指向前驱/后继指针）</p><hr><p><strong>28. 树的几种存贮结构(双亲表示法、孩子表示法、孩子兄弟表示法)的优缺点，各自适应的运算。</strong></p><p><strong>双亲表示法：</strong>便于查找双亲，缺点：找孩子难</p><p><strong>孩子表示法：</strong>便于涉及到孩子的操作，缺点：找双亲难</p><p><strong>孩子兄弟法：</strong>操作容易，缺点：破坏了树的层次</p><hr><p><strong>29. 哪种存贮结构可将森林转为二叉树。对此种结构的各个域给予注释。说明在这个结构中怎样找到森林的n棵树。</strong></p><p><strong>孩子兄弟表示法，</strong>左指针是第一个孩子，右指针是第一个兄弟，最右的为第n棵树</p><hr><p><strong>30. 树的先根遍历、后根遍历对应其二叉树的哪种遍历，森林的先根遍历、中根遍历对应其二叉树的哪种遍历?</strong></p><p><strong>（先根对应先序，剩下的凑合一下）</strong></p><p>树的先根遍历 → 二叉树的先序遍历；</p><p>树的后根遍历 → 二叉树的中序遍历；</p><p>森林的先根遍历 → 二叉树的先序遍历；</p><p>森林的中根遍历 → 二叉树的中序遍历。</p><hr><p><strong>31. （送命题）写算法求树中结点的度；树的度；树中的叶子结点数；树中的非终端结点数；树中某结点的兄弟、祖先、子孙、层次、堂兄弟；树的高度；森林中树的数目。（默认为树是二叉树）</strong></p><p><strong>求树中结点的度：</strong>（孩子表示法）求树的度只需要指针移动，度数递增就好</p><p><strong>树的度：</strong>先把每个结点的度数求出来，再把所有结点的度数总和求出来就好啦</p><p><strong>求树的叶子结点的个数：</strong>（下面这个只是求二叉树的）</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Leaf_Count</span><span class="hljs-params">(Bitree T)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;*<span class="hljs-comment">//求二叉树中叶子结点的数目*</span><br><br><span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//空树没有叶子</span><br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!T-&gt;lchild&amp;&amp;!T-&gt;rchild) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//叶子结点</span><br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> Leaf_Count(T-lchild)+Leaf_Count(T-rchild);<br><br><span class="hljs-comment">//左子树的叶子数加上右子树的叶子数</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>求森林中树的数目：</strong>就是右孩子循环过去，算出右孩子的数目，再加上本身根节点（即右孩子树+1）</p><hr><p><strong>32. Huffman树能够解决的问题是什么？图示huffman编码过程。</strong></p><p>1）数据通信中的数据压缩编码问题</p><p><strong>2）构造Huffman树步骤：</strong></p><p>图示：</p><p><img src="https://resource.tinychen.com/blog/20190331/zUxzKYKnKS24.png"></p><hr><p><strong>33. 如何设计Huffman编译码器最有效？</strong></p><p><strong>（看不懂就看上面的图）</strong></p><p><strong>①</strong>根据给定的n个权值{w1,w2,……wn}，构造n棵只有根 结点的二叉树，令其权值为wj；</p><p><strong>②</strong>在森林中选取两棵根结点权值最小的树作左右子树，构造一棵新的二叉树，置新二叉树根结点权值为其左右子树根结点权值之和；</p><p><strong>③</strong>在森林中删除这两棵树，同时将新得到的二叉树加入森林中重复上述两步，直到只含一棵树为止，这棵树即哈夫曼树。</p><hr><p><strong>34. 何为完全图、稀疏图、稠密图。</strong></p><p><strong>完全图：</strong>即一个图中的任意一个顶点都与其余所有顶点相邻（有连线）。对有向图来说，边数为n(n-1),对无向图来说,边数为n(n-1)/2<br><strong>稀疏图和稠密图没有明确量化定义</strong></p><p><strong>稀疏图：</strong>有很少条边的图(e&lt;&lt;n ) <br><strong>稠密图：</strong>有很多条边的图</p><hr><p><strong>35. 写算法求无向图中结点的度；有向图中结点的入度和出度。（邻接矩阵存图）</strong></p><p>** 无向图：<strong>邻接矩阵的</strong>一行或一列的数值和代表对应定点的度**。</p><p>** 有向图：<strong>邻接矩阵的对应顶点的</strong>行代表出度，列代表入度**。</p><hr><p><strong>36. 图的邻接矩阵、邻接表存贮结构各自优缺点，适应运算。</strong></p><p><strong>数组表示法（邻接矩阵表示法）：</strong>二维数组存储图</p><p>优点：容易求各个顶点的度</p><p>缺点：当图为稀疏图时浪费空间</p><p><strong>邻接表表示法：</strong></p><p>优点：容易找到第一个邻接点和下一个邻接点</p><p>缺点：不方便找一个结点的入度</p><hr><p><strong>37. 最小代价生成树的实际应用背景。</strong></p><p>要在n个城市间建立通信联络网，顶点表示城市，权表示城市间建立通信线路所需花费代价，希望找到一棵生成树，它的每条边上的权值之和（即建立该通信网所需花费的总代价）最小———最小代价生成树</p><hr><p><strong>38. 什么图适合用Prim算法求最小代价生成树，什么图适合用 Kruskal算法求最小代价生成树。</strong></p><p><strong>Prim算法（稠密图，n&gt;47）Kruskal算法（稀疏图）</strong></p><hr><p><strong>39. 图示用 Prim算法及 Kruskal算法求最小代价生成树过程。</strong></p><p><strong>（看作业题7.5）</strong></p><p><strong>Prim算法——加点法，时间复杂度O(n2)</strong></p><p>从某顶点开始，找其相邻边中权值最小的边所连另一个顶点，再找与这两个顶点相邻边中权值最小的边所连第三个顶点，重复，扩展到所有顶点。</p><p><strong>Kruskal算法——加边法,时间复杂度与边相关</strong></p><p>先将所有顶点都看作无边的非连通图，选择各顶点间最小边做连通分量，直到所有顶点都在同一个连通分量上。</p><hr><p><strong>40. 举例简述”拓扑排序”所解决的实际问题。</strong></p><p>流程图，施工流程图，课程决定的优先权</p><hr><p><strong>41. 请图示”拓扑排序”的过程。</strong></p><p><strong>拓扑排序的方法：</strong></p><p><strong>①在有向图中选一个没有前驱的顶点且输出之</strong></p><p><strong>②从图中删除该顶点和所有以它为尾的弧</strong></p><p><strong>③重复上述两步，直至全部顶点均已输出；或者当图中不存在无前驱的顶点为止</strong></p><p><img src="https://resource.tinychen.com/blog/20190331/tLHU8BFRsILS.png"></p><p><img src="https://resource.tinychen.com/blog/20190331/A8KfA225VqF5.png"></p><p><img src="https://resource.tinychen.com/blog/20190331/sDcBhseLVapf.png"></p><hr><p><strong>42. 举例简述”关键路径”所解决的实际问题。</strong></p><blockquote><p>一个工程的并行的进行过程</p><p>（1） 完成整个工程至少需要多少时间；</p><p>（2） 哪些活动是影响工程的关键。</p></blockquote><hr><p><strong>43. 最短路径的两个算法是什么？</strong></p><blockquote><p><strong>迪杰斯特拉(Dijkstra)算法和弗洛伊德(Floyd)算法</strong></p><p><strong>（看作业7.6和PPT第7章第100-117页）</strong></p></blockquote><p><strong>迪杰斯特拉(Dijkstra)算法</strong></p><p><strong>按路径长度递增次序产生最短路径，</strong>求从某个源点到其余各顶点的最短路径；</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShortestPath_DIJ</span><span class="hljs-params">( MGraph G, <span class="hljs-keyword">int</span> v0, PathMatrix &amp;pre, ShortPathTable &amp;D)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;*<span class="hljs-comment">// 用Dijkstra 算法求有向网G的v0顶点到其余顶点v的最短路径pre[v]及其带权长度D[v]*</span><br><br><span class="hljs-comment">// final[v]为TRUE当且仅当v∈S, 即已经求得v0到v的最短路径</span><br><br><span class="hljs-keyword">for</span> (v=<span class="hljs-number">0</span>;v&lt;G.vexnum;++v) &#123; pre[v] = <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">final</span>[v]=FALSE; D[v]=G.arcs[v0][v];<br><br><span class="hljs-keyword">if</span> (D[v]&lt;INFINITY) pre[v]=V0;<br><br>&#125; <span class="hljs-comment">//for</span><br><br>D[v0]=<span class="hljs-number">0</span>; <span class="hljs-keyword">final</span>[v0]=TRUE; <span class="hljs-comment">//初始化，v0顶点属于S集</span><br><br><span class="hljs-comment">//开始主循环，每次求得v0到某个v顶点的最短路径，并加v到S集</span><br><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;G.vexnum; ++i)&#123; <span class="hljs-comment">// 其余G.vexnum-1个顶点</span><br><br>min=INFINITY; <span class="hljs-comment">// 当前所知离v0顶点的最近距离</span><br><br><span class="hljs-keyword">for</span> (w=<span class="hljs-number">0</span>;w&lt;G.vexnum; ++w)<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">final</span>[w])<br><br><span class="hljs-keyword">if</span>(D[w]&lt;min) &#123;v=w; min=D[w];&#125; <span class="hljs-comment">//w顶点离v0顶点更近</span><br><br><span class="hljs-keyword">final</span>[v]=TRUE; <span class="hljs-comment">//离v0顶点最近的v加入S集</span><br><br><span class="hljs-keyword">for</span> (w=<span class="hljs-number">0</span>; w&lt;G.vexnum; ++w) <span class="hljs-comment">// 更新当前最短路径及距离</span><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">final</span>[w] &amp;&amp;(min+G.arcs[v][w]&lt;D[w])) &#123; <span class="hljs-comment">//修改D[w]和pre[w], w∈V-S</span><br><br>D[w]=min+G.arcs[v][w];<br><br>pre[w]=v;<br><br>&#125; <span class="hljs-comment">//if</span><br><br>&#125; <span class="hljs-comment">//for</span><br><br>&#125; <span class="hljs-comment">//ShortestPath_DIJ</span><br><br>弗洛伊德(Floyd)算法<br><br>逐个顶点试探法，求从某个源点到其余各顶点的最短路径；<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shortestPath_FLOYD</span><span class="hljs-params">(MGrgph G, PathMatrix &amp;path ,DistancMatrix &amp;length)</span> </span>&#123;<br><br><span class="hljs-comment">//用Floyd算法求得有向网G中各对顶点v和w之间的最短路径 Path[v][w]及其带权</span><br><br><span class="hljs-comment">//长度length[v][w]。 path[i][j]是相应路径上顶点 j 的前一顶点的顶点号,</span><br><br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++ ) <span class="hljs-comment">//矩阵length与path初始化</span><br><br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++ ) &#123;<br><br>length[i][j] = G.arcs [i][j];<br><br><span class="hljs-keyword">if</span> ( i &lt;&gt; j &amp;&amp; length [i][j] &lt; INFINITY ) path[i][j] = i; <span class="hljs-comment">// i 到 j 有路径</span><br><br><span class="hljs-keyword">else</span> path[i][j] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// i 到 j 无路径</span><br><br>&#125;<br><br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++ ) <span class="hljs-comment">//产生length(k)及path(k)</span><br><br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; n; i++ )<br><br><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; n; j++ )<br><br><span class="hljs-keyword">if</span> ( length[i][k] + length[k][j] &lt; length[i][j] ) &#123;<br><br>length [i][j] = length [i][k] + length [k][j];<br><br>path[i][j] = k;<br><br>&#125; <span class="hljs-comment">//缩短路径长度, 绕过 k 到 j</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>44. 简述静态查找和动态查找？</strong></p><p><strong>静态查找：</strong>基于线性表的查找 <strong>动态查找：</strong>基于树的查找</p><p><strong>查找表（Search Table）：是一种以集合为逻辑结构、以查找为核心运算的数据结构。</strong></p><p><strong>静态查找表：只对查找表进行查询某个特定的数据元素或某个特定数据元素的各种属性的操作。</strong>如：查询成绩表中是否有某学生或该学生某门课程的成绩。</p><p><strong>动态查找表：对查找表进行查找，找不到就插入某个数据元素的操作。</strong>如：查找某个学生信息，找不到就插入。</p><hr><p><strong>45. 顺序查找、折半查找、分块查找算法适合的关键字结构和存贮结构。</strong></p><p><strong>顺序查找：</strong>对存储结构和关键字排列方式没有特殊要求</p><p><strong>折半查找：</strong>关键字整体有序，只适合顺序存储的有序表</p><p><strong>分块查找：</strong>关键字局部有序，即分块有序，对存储结构为顺序和线性链表的均适用</p><p><img src="https://resource.tinychen.com/blog/20190331/ImMCGcM5Tbit.png"></p><hr><p><strong>46. 怎样从二叉排序树得到有序表。</strong></p><p>中序遍历</p><hr><p><strong>47. 已知长度为n 的表按表中元素顺序构造平衡二叉排序树，图示构造过程。</strong></p><p><a href="https://blog.csdn.net/lemon_tree12138/article/details/50393548">https://blog.csdn.net/lemon_tree12138/article/details/50393548</a></p><p>先看上面的博客搞清楚LL、RR、LR、RL四种骚操作，再看解释</p><p>树的平衡性简单来说就是<strong>左边&lt;中间&lt;右边</strong>,插入新的点可能会破会这个平衡，就要通过上面的四个骚操作来恢复平衡。</p><hr><p><strong>48. 解释构造平衡二叉排序树的过程中做各种旋转后仍能满足二叉排序树的特性。</strong></p><p>因为记录的是导致整棵平衡二叉树失去平衡的那棵子树的根节点，因此只要调节这棵子树便能让整棵平衡二叉树树平衡</p><hr><p><strong>49. 各种查找算法的平均时间复杂度。</strong></p><p><img src="https://resource.tinychen.com/blog/20190331/aRAeNNWDTDki.png"></p><hr><p><strong>50. 简述Hash查找的构建过程；为一组关键字构造哈希函数并建立哈希表。</strong></p><p>1、分析数据；</p><p>2、构建合适的哈希函数及解决冲突的方法；</p><p>3、用哈希函数对数据计算存储位置，存储数据；</p><p>4、对哈希表进行查找；</p><hr><p><strong>51. 指出希尔排序，归并排序，快速排序，堆排序，基数排序中稳定的排序，对不稳定的举出反例。</strong></p><p><img src="https://resource.tinychen.com/blog/20190331/ViolhFUBlvqc.png"></p><hr><p><strong>52. 堆排序算法选用什么样的存贮结构，按此算法得到的有序表是递增还是递减的。图示建堆过程。</strong></p><p><strong>一维数组存储；小顶堆（递增）；大顶堆（递减）</strong></p><hr><p><strong>53. 藉助于”比较”进行排序的算法在最坏情况下能达到的最好的时间复杂度是什么?</strong></p><p><strong>n*log<del>2</del>n</strong></p><hr><p><strong>54. 指出直接插入排序，冒泡排序，快速排序, 堆排序，基数排序算法各适合的关键字结构。</strong></p><blockquote><p><strong>直接插入：</strong> 基本有序</p><p><strong>冒泡排序：</strong> 基本有序</p><p><strong>快速排序：</strong> 关键字混乱，均匀随机分布</p><p><strong>堆排序：</strong> 数据非常大，需要常常获得最大和最小值</p><p><strong>基数排序：</strong> 多关键字排序</p></blockquote><hr><p><strong>55. 指出各种排序算法的平均时间复杂度、最坏情况的时间复杂度。</strong></p><p><img src="https://resource.tinychen.com/blog/20190331/ViolhFUBlvqc.png"></p><p><img src="https://resource.tinychen.com/blog/20190331/ETqvbUtiPxaw.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;汕头大学于津老师的数据结构复习题，对应教材是清华的严蔚敏老师的《数据结构》。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>双启动U盘</title>
    <link href="https://tinychen.com/20180318-dou-boot-udisk/"/>
    <id>https://tinychen.com/20180318-dou-boot-udisk/</id>
    <published>2018-03-18T07:00:00.000Z</published>
    <updated>2018-03-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，修电脑的各位老铁们，在制作PE启动盘的时候，就会需要格式化U盘，然后将PE所需要的文件刻录进U盘里面。</p><p>对于像小七这样喜欢使用U盘刻录安装原生纯净的操作系统的人，就需要准备两个U盘，一个用来制作PE工具盘，一个用来安装操作系统，现在小七给大家介绍一个方法，让一个U盘实现双启动或者三启动。</p><span id="more"></span><p><strong>此处先上一张成品图</strong></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%981.png"></p><p><strong>图中三个盘其实都是一个U盘的，第一个里面的是PE工具箱，第三个是原装win10刻录文件，第二个则可以当作普通U盘使用。</strong></p><p>这样的好处是一个U盘双启动，平时放的文件和工具箱/win10镜像的文件不容易混淆。</p><blockquote><p>有些同学说在刻录win10镜像的盘符里面用文件夹存放文件也可以，这个方法虽然简单，但是作为启动盘一般都是FAT32格式，是无法存放单个文件大小超过4G的文件的。</p></blockquote><p><strong>（PE工具箱也可以安装操作系统，习惯用PE安装系统的朋友可以忽略这篇推文）</strong></p><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><ul><li><p>原装系统镜像（此处使用最新版的64位win10，可在msdn itellyou中下载）</p></li><li><p>PE工具箱的ISO文件（此处使用微PE2.0版本，后台回复PE有惊喜）</p></li><li><p>Ultra ISO软件（试用版即可）</p></li><li><p>一个8G以上的U盘（此处使用一个32G的USB3.0的U盘）</p></li><li><p>一台能用的正常的电脑</p></li></ul><h1 id="2、刻录原版win10镜像"><a href="#2、刻录原版win10镜像" class="headerlink" title="2、刻录原版win10镜像"></a>2、刻录原版win10镜像</h1><p>首先，安装并打开UltraISO，点击上方的菜单栏中的 <strong>文件 —&gt; 打开，然后选择win10镜像文件</strong></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%983.png"></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%984.png"></p><p>然后再点击上方的菜单栏中的** 启动 —&gt; 写入硬盘映像**</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%985.png"></p><p><strong>在弹出的界面中，检查下图红框的两项：</strong></p><ul><li><p><strong>硬盘驱动器要确定是自己用来制作的U盘</strong></p></li><li><p><strong>隐藏启动分区里面要选择高端隐藏</strong></p></li></ul><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%986.png"></p><p><strong>接下来会格式化U盘，请务必要备份U盘中的重要文件</strong></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%987.png"></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%988.png"></p><p>刻录完成之后，打开我的电脑，会发现U盘已经被分成两个分区</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%989.png"></p><p><strong>如果不需要PE工具箱，到这里就可以停了，因为到这里已经制作了一个正常的win10安装盘，需要重装系统的话，用这个U盘就已经OK了。</strong></p><h1 id="3、利用磁盘管理进行二次分区"><a href="#3、利用磁盘管理进行二次分区" class="headerlink" title="3、利用磁盘管理进行二次分区"></a>3、利用磁盘管理进行二次分区</h1><p>右键我的电脑，点击管理，在左边找到磁盘管理，然后在下方找到自己的U盘，删除掉上图中的20多G的磁盘</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9810.png"></p><p>然后新建两个磁盘，<strong>一个大小为800M，文件系统类型记得选择FAT32，否则PE工具箱会无法正常启动</strong></p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9811.png"></p><p>剩下的全部分到另一个盘，文件系统类型随意选择<strong>（建议exFAT）</strong>。</p><p>最后应该和下图类似。</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9812.png"></p><h1 id="4、解压ISO文件制作PE工具箱"><a href="#4、解压ISO文件制作PE工具箱" class="headerlink" title="4、解压ISO文件制作PE工具箱"></a>4、解压ISO文件制作PE工具箱</h1><p>解压PE工具箱的ISO文件，PE工具箱的文件一般都是两三百MB，将解压后的文件全部复制到容量比较小的磁盘中</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9813.png"></p><h1 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h1><p>将U盘插入电脑，按下开机键的时候按ESC或者F1/F2/F9/F12等按键即可进入启动项选择菜单（不同电脑情况不同），如果像下图这样出现了两个一样的启动项，那么就制作成功。</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9814.jpg"></p><p><strong>最后，如何区分哪个才是PE，哪个才是WIN10呢？</strong></p><p>你可能会说，直接点进去试一下不就行了。</p><p>对的，没错这确实可以，但是这样的话就太没有技术含量了。</p><p>我们还是打开我的电脑中的磁盘管理，会发现左边的是PE，右边的是WIN10，所以上图的第一个就是PE，第二个才是win10。</p><p><img src="https://resource.tinychen.com/%E5%8F%8C%E5%90%AF%E5%8A%A8U%E7%9B%9815.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般来说，修电脑的各位老铁们，在制作PE启动盘的时候，就会需要格式化U盘，然后将PE所需要的文件刻录进U盘里面。&lt;/p&gt;
&lt;p&gt;对于像小七这样喜欢使用U盘刻录安装原生纯净的操作系统的人，就需要准备两个U盘，一个用来制作PE工具盘，一个用来安装操作系统，现在小七给大家介绍一个方法，让一个U盘实现双启动或者三启动。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>禁用笔记本内置键盘</title>
    <link href="https://tinychen.com/20180225-disable-keyboard/"/>
    <id>https://tinychen.com/20180225-disable-keyboard/</id>
    <published>2018-02-25T07:00:00.000Z</published>
    <updated>2018-02-25T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有很多同学会有给笔记本电脑外接键盘的需求， 但是如果直接将外接键盘放到内置键盘上面容易误触，小七在这里跟大家分享一个通过CMD命令禁用笔记本内置键盘的方法。</p><span id="more"></span><h1 id="1、禁用"><a href="#1、禁用" class="headerlink" title="1、禁用"></a>1、禁用</h1><p><strong>首先，以管理员身份运行CMD。</strong></p><p>然后输入这条命令：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> config i8042prt <span class="hljs-built_in">start</span>= disabled<br></code></pre></div></td></tr></table></figure><p>重启之后就可以禁用笔记本内置键盘的服务。</p><h1 id="2、恢复"><a href="#2、恢复" class="headerlink" title="2、恢复"></a>2、恢复</h1><p>需要恢复的话也很简单：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> config i8042prt <span class="hljs-built_in">start</span>= auto<br></code></pre></div></td></tr></table></figure><p>重启之后即可启用笔记本内置键盘的服务。</p><p><img src="https://resource.tinychen.com/%E7%A6%81%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%86%85%E7%BD%AE%E9%94%AE%E7%9B%98.png"></p><p>这个方法的好处在于简单快捷稳定。不需要什么拆机拔笔记本键盘排线，卸载键盘驱动/安装错误键盘驱动等等一系列骚操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有很多同学会有给笔记本电脑外接键盘的需求， 但是如果直接将外接键盘放到内置键盘上面容易误触，小七在这里跟大家分享一个通过CMD命令禁用笔记本内置键盘的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>第六代Wi-Fi协议的前世今生</title>
    <link href="https://tinychen.com/20180109-wifi-dev/"/>
    <id>https://tinychen.com/20180109-wifi-dev/</id>
    <published>2018-01-09T07:00:00.000Z</published>
    <updated>2018-01-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本周，英特尔宣布：将从今年（2018）开始添加对802.11ax的支持，包括路由芯片和消费级零售产品。其实早在去年，通信行业巨头博通就发布了三款支持802.11ax的芯片BCM43684/43694/4375，高通也宣布了IPQ8074/QCA6290。至此，三家芯片巨头都表明了对802.11ax协议的支持，802.11ax也终于是坐稳了第六代Wi-Fi协议的位置了。</p><span id="more"></span><p>本文将介绍历代Wi-Fi协议，按照顺序一次为802.11a/b/g/n/ac/ax，本文旨在让不了解Wi-Fi协议的读者对其能有一个粗略的认识，并不涉及过深的专业知识，同时文章本身不短，阅读耗时较长，请各位读者耐心阅读。</p><blockquote><p>小七注：802.11系列协议应用非常广泛，协议本身也非常复杂庞大，本文只设计上述的6种协议和802.11ad协议共计7种。</p></blockquote><h1 id="1、什么是Wi-Fi？"><a href="#1、什么是Wi-Fi？" class="headerlink" title="1、什么是Wi-Fi？"></a>1、什么是Wi-Fi？</h1><p>既然是讲Wi-Fi协议，那么首先讲的必然就应该是Wi-Fi了。Wi-Fi其实说白了就是一种让包括电脑手机平板在内的电子设备能够连接到一个无线网络的技术。但很多人都不知道的是，Wi-Fi其实本身是一个品牌或者说是商标，由Wi-Fi联盟所持有。Wi-Fi联盟的前身是1999年成立的无线以太网兼容性联盟WECA（Wireless Ethernet Compatibility Alliance）。而Wi-Fi联盟一直在使用的这个802.11系列的无线通信协议标准，是由IEEE下属的802.11工作组所制定的。</p><blockquote><p>小七注：电气和电子工程师协会( IEEE，全称是Institute of Electrical and Electronics Engineers)是一个国际性的电子技术与信息科学工程师的协会，是目前全球最大的非营利性专业技术学会，其会员人数超过40万人，遍布160多个国家。IEEE致力于电气、电子、计算机工程和与科学有关的领域的开发和研究，在太空、计算机、电信、生物医学、电力及消费性电子产品等领域已制定了900多个行业标准，现已发展成为具有较大影响力的国际学术组织。</p></blockquote><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE1.jpg"></p><p>看到这里是不是觉得很懵？简单来说就是由IEEE内的802.11工作组制定802.11系列标准，而Wi-Fi联盟对使用802.11系列标准的设备进行认定，符合Wi-Fi联盟的认定标准的设备就可以打上Wi-Fi的这个logo。</p><p><strong>下面进入正文。</strong></p><h1 id="2、802-11——过于平庸的一代"><a href="#2、802-11——过于平庸的一代" class="headerlink" title="2、802.11——过于平庸的一代"></a>2、802.11——过于平庸的一代</h1><p>二战之后，世界科技进入迅猛发展时期，人们对于无线通讯的需要开始爆发性地增长，IEEE在20世纪90年代初成立了专门的802.11工作组，专门研究和定制WLAN(无线局域网)的标准协议，并在1997年6月推出了第一代WLAN协议——IEEE 802.11-1997。</p><blockquote><p>小七注：此处的802.11指的是IEEE制订的第一代协议，并非是整个系列协议，在802.11之后的协议都加入了字母后缀来进行区分。</p></blockquote><p>作为IEEE最初制定的一个无线局域网标准，802.11协议定义了物理层工作在ISM的2.4G频段，数据传输速率设计为2Mbps。很遗憾的是，由于它在传输速度和传输距离上的表现都不尽如人意，因此并未被规模使用。</p><h1 id="3、802-11a——生不逢时的一代"><a href="#3、802-11a——生不逢时的一代" class="headerlink" title="3、802.11a——生不逢时的一代"></a>3、802.11a——生不逢时的一代</h1><p>1999年．IEEE吸取了上一次的教训，这一次就直接下了猛药。在制定802.11a标准的时候，直接将频段定在了5GHz（频率越高最高传输速度越快），物理层的最高速率也随之水涨船高到了54Mbps。相比前一代来说，不可谓不给力。但是，802.11a协议也并没有被市场认可，相对来说表现的更出色的反而是几乎和它同时制订的802.11b协议。</p><p>尽管2003世界无线电通信会议让802.11a在全球的应用变得更容易，不同的国家还是有不同的规定支持。美国和日本甚至都已经出现了相关规定对802.11a进行了认可，但是在其他地区，如欧盟却因为标准的问题被禁止使用。再加上802.11a产品中5GHz的组件研制成功太慢，等其开始大规模推广的时候，市场早已被大批的802.11b产品占领，802.11a没有被广泛的采用。再加上802.11a的一些弱点，和一些地方的规定限制，使得它的使用范围更窄了。</p><h1 id="4、802-11b——奠定基础的一代"><a href="#4、802-11b——奠定基础的一代" class="headerlink" title="4、802.11b——奠定基础的一代"></a>4、802.11b——奠定基础的一代</h1><p>802.11b协议可以说是802.11a是同胞兄弟了。但它本身却是基于2.4GHz频率，同时最大的传输速度相比802.11a来说也只有11Mbps。11Mbps的传输速率在现在看来肯定算不了什么，但在2000年的时候，虽然不是翘楚，但也已经能够满足大部分人的需求了。</p><p>更何况基于2.4GHz的802.11b在传输距离和穿墙能力上本来就比基于5GHz的802.11a协议要有优势（高频率波传输距离和穿墙能力较低频率波差），加上当时802.11a的核心芯片研发进度缓慢，802.11b就此抓住了机会，占领了市场，为日后称霸天下打下了坚实的基础。</p><h1 id="5、802-11g——融合前人的一代"><a href="#5、802-11g——融合前人的一代" class="headerlink" title="5、802.11g——融合前人的一代"></a>5、802.11g——融合前人的一代</h1><p>时间来到了2003年7月，IEEE制订了第三代Wi-Fi标准：802.11g。（为什么不是C呢？因为802.11协议还应用在其他的很多领域，有些字母被用了，就只能排到g了）</p><p>802.11g继承了802.11b的2.4GHz频段和802.11a的最高54Mbps传输速率。同时，它还使用了CCK技术后向兼容802.11b产品。此时开始，IEEE在制订每一代新协议的时候都会将后向兼容考虑进去，毕竟换了新路由器旧手机就因为不支持新协议而连不上Wi-Fi这种情况谁都受不了。</p><p>说到这里，就还要再提一下在802.11a和802.11g上都有使用到的一种技术：<strong>OFDM。</strong></p><p>OFDM(Orthogonal Frequency Division Multiplexing)<br>即正交频分复用技术，是由MCM（Multi-Carrier Modulation，多载波调制）发展而来的一种实现复杂度低、应用最广的一种多载波传输方案。<strong>OFDM主要思想是：将信道分成若干正交子信道，将高速数据信号转换成并行的低速子数据流，调制到在每个子信道上进行传输。</strong>正交信号可以通过在接收端采用相关技术来分开，这样可以减少子信道之间的相互干扰(ISI) 。每个子信道上的信号带宽小于信道的相关带宽，因此每个子信道上可以看成平坦性衰落，从而可以消除码间串扰，而且由于每个子信道的带宽仅仅是原信道带宽的一小部分，信道均衡变得相对容易。</p><p>上面这段很难理解？没关系，看小七打个比喻你们就懂了。</p><p>假设我们现在有很多车要从A地到B地，没有使用OFDM技术之前，路是一条路，所有的车四处乱开，横冲直撞，结果谁都快不了。现在使用了OFDM技术，将一条大路划分为很多个车道，大家都按照车道驾驶，这样既可以提高速度，又能减少车与车之间的干扰。同时这条道的车多了，就匀一点到那条车少的道上去，管理上也方便很多。</p><p><strong>OFDM技术也因此被应用在之后的每一代Wi-Fi协议中。</strong></p><h1 id="6、802-11n——初露锋芒的一代"><a href="#6、802-11n——初露锋芒的一代" class="headerlink" title="6、802.11n——初露锋芒的一代"></a>6、802.11n——初露锋芒的一代</h1><p><strong>如果说802.11b是奠定了整个帝国的基础的一代，那么802.11n一定是给帝国开疆扩土的一代。</strong></p><p>时间继续推进，这时的互联网已经开始出现了在线图片、视频、流媒体等服务，而随着YouTube、无线家庭媒体网关、企业VoIP Over WLAN等应用对WLAN技术提出了越来越高的带宽要求，传统技术802.11a/g已经无法支撑。用户需求呼唤着全新一代WLAN接入技术。</p><p>2009年，IEEE宣布了新的802.11n标准。传输速率最高可达600Mbps。</p><p>但是，802.11n协议还是基于2.4GHz频段，速度怎么突然就快了这么多呢？正所谓事出反常必有妖，而这背后的“妖”，就是MIMO、波束成形和40Mhz绑定。</p><h2 id="6-1-MIMO"><a href="#6-1-MIMO" class="headerlink" title="6.1 MIMO"></a>6.1 MIMO</h2><p>MIMO（Multiple-Input Multiple-Output）的中文名称为多输入多输出技术是指在发射端和接收端分别使用多个发射天线和接收天线，使信号通过发射端与接收端的多个天线传送和接收，从而改善通信质量。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE2.jpg"></p><p>MIMO技术最早是由马可尼于1908年提出的，它利用发射端的多个天线各自独立发送信号，同时在接收端用多个天线接收并恢复原信息，就可以实现以更小的代价达到更高的用户速率。MIMO可大大提高网络传输速率、覆盖范围和性能。当基于MIMO而同时传递多条独立空间流时，系统的吞吐量可成倍地提高。</p><p><strong>简单来说，MIMO技术就是在信号的发射源和接收源都安装了多个天线，通过堆天线的方式来实现更高的传输速率，因此现在的买路由器看天线数量这一个说话虽然不可靠，但也不是没有历史渊源的。</strong></p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE3.jpg"></p><p>▲通过MIMO传递多条空间流（图片来自网络）</p><p>MIMO系统支持空间流的数量取决于发送天线和接收天线的最小值。如发送天线数量为3,而接收天线数量为2，则支持的空间流为2。MIMO/SDM系统一般用“发射天线数量×接收天线数量”表示。如上图为2<em>2 MIMO/SDM系统。显然，增加天线可以提高MIMO支持的空间流数。*<em>但是综合成本、实效等多方面因素，当时业界的WLAN AP都普遍采用3×3的模式。而现在的旗舰级路由器都轻松的堆到8×8或者更高。</em></em></p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE4.jpg"></p><p>▲图为 MIMO利用多径传输数据（图片来自网络）</p><h2 id="6-2-波束成形"><a href="#6-2-波束成形" class="headerlink" title="6.2 波束成形"></a>6.2 波束成形</h2><p>而至于波束成形技术，它本身并不是什么新名词，波束成形是天线技术与数字信号处理技术的结合，目的用于定向信号传输或接收。在20世纪60年代，波束成形技术就已经在军事应用上得到了相当高的重视。</p><p>只不过，由于早年半导体技术还处在微米级，所以它没有在民用通信中发挥到理想的状态。</p><p>而发展到无线通讯阶段，特别是应用在消费级产品中，信号传输距离和信道质量以及无线通信的抗干扰问题便成为瓶颈。提高传输速率是WLAN技术发展历程的关键。802.11n主要是结合物理层和MAC层的优化，来充分提高WLAN技术的吞吐。此时，波束成形又有了用武之地。</p><p>波束成形技术的具体原理很复杂，小七在这里用图片给大家简单展示一下，波束成形就是将原本发散的波聚合，再往指定的方向发送，从而提高传输距离。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE5.jpg"></p><p>▲波束成形技术增加传输距离的示意图（图片来自网络）</p><p>但是波束成形技术固然能改善系统性能，增加接收距离，但同时也会增加设备成本和功耗。在多天线都处于连接的状态下，即使在严重的衰落情况下，它提供的信号增益也可获提高，但要求信号处理能力也要很强。所以，多天线带来的问题是要求数据处理速度高，控制成本，并降低功耗。</p><h2 id="6-3-40Mhz绑定"><a href="#6-3-40Mhz绑定" class="headerlink" title="6.3 40Mhz绑定"></a>6.3 40Mhz绑定</h2><p>事实上，802.11n协议还使用了40Mhz绑定技术。这个技术最容易理解，对于无线技术来说，提高所用频谱的宽度，可以最为直接地提高吞吐。就好比是马路变宽了，车辆的通行能力自然提高。传统802.11a/g使用的频宽是20MHz，而802.11n支持将相邻两个频宽绑定为40MHz来使用，所以可以最直接地提高吞吐。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE6.jpg"></p><p>▲图左为802.11a/g，图右为802.11n</p><h2 id="6-4-MCS"><a href="#6-4-MCS" class="headerlink" title="6.4 MCS"></a>6.4 MCS</h2><p>802.11n引进了如此多的新技术，导致它的速率也会因为配置方法不同而不同。在802.11a/b/g时代，配置AP工作的速率非常简单，只要指定特定radio类型(802.11a/b/g)<br>所使用的速率集，速率范围从1Mbps到54Mbps,一共有12种可能的物理速率。到了802.11n时代，由于物理速率依赖于调制方法、编码率、空间流数量、是否40MHz绑定等多个因素。这些影响吞吐的因素组合在一起，将产生非常多的物理速率供选择使用。</p><p>对此，IEEE直接推出了MCS (Modulation Coding Scheme)，MCS可以理解为将上述影响速率因素的完整组合，每种组合用整数来唯一标示。给每种情况标码，然后直接看对应的MCS码就可以知道准确的速率。</p><h2 id="6-5-802-11n小结"><a href="#6-5-802-11n小结" class="headerlink" title="6.5 802.11n小结"></a>6.5 802.11n小结</h2><p><strong>总的来说，MIMO和40Mhz绑定技术使得传输速率大大提升，而波束成形则增大了传输距离。</strong></p><h1 id="7、802-11ac——锋芒毕露的一代"><a href="#7、802-11ac——锋芒毕露的一代" class="headerlink" title="7、802.11ac——锋芒毕露的一代"></a>7、802.11ac——锋芒毕露的一代</h1><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE7.jpg"></p><p>随着时代的继续发展，人们身边拥有着越来越多的无线设备，<strong>而2.4GHz这个频段，因为本身的优越性，被各种协议使用（常见的蓝牙4.0系列协议，无线键鼠等），已经变得拥挤不堪，</strong>IEEE此时就将新的第五代Wi-Fi协议制订在了5GHz的频段上。现在说的很多双频Wi-Fi，其实就是2.4GHz和5GHz的混合双频Wi-Fi，而这种路由器常见的四天线设计，一般都是两根天线基于2.4GHz，两根基于5GHz。</p><p>802.11ac在提供良好的后向兼容性的同时，把每个通道的工作频宽将由802.11n的40MHz，提升到80MHz甚至是160MHz，再加上大约10%的实际频率调制效率提升，最终理论传输速度将由802.11n最高的600Mbps跃升至1Gbps。当然，实际传输率可能在300Mbps～400Mbps之间，接近目前802.11n实际传输率的3倍(目前802.11n无线路由器的实际传输率为75Mbps～150Mbps之间)，完全足以在一条信道上同时传输多路压缩视频流。</p><h2 id="7-1-MU-MIMO"><a href="#7-1-MU-MIMO" class="headerlink" title="7.1 MU-MIMO"></a>7.1 MU-MIMO</h2><p>实际上，802.11ac协议还分为wave1和wave2两个阶段,两者的主要区别就在于后者提升多用户数据并发处理能力和网络效率。而这背后的功臣，就非MU-MIMO莫属了。</p><p>前面已经跟大家介绍过了，IEEE在802.11n协议时代就引入了MIMO技术，而MU-MIMO技术可以理解为它的升级版或者是多用户版本。</p><p>为什么这么说呢？看下面的图片大家就明白了。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE8.png"></p><p>▲高通官方展示MU-MIMO技术所用的图片</p><p>MU-MIMO是Multi-User Multiple-Input Multiple-Output（多用户-多输入多输出）的英文缩写。顾名思义，MU-MIMO能让路由器同时和多个设备进行沟通，这极大的改善了网络资源利用率。</p><p>通俗来说，以前在802.11n上面的MIMO只能说是SU-MIMO（Single-User），传统的SU-MIMO路由器信号呈现一个圆环，以路由器圆心，呈360度向外发射信号，并依据远近亲疏，依次单独与上网设备进行通讯。当接入的设备过多时，就会出现设备等待通讯的情况，网络卡顿的情况就由此产生；更为严重的是，这种依次单独的通讯，是基于设备对AP（路由器或热点等）总频宽的平均值。也就是说，如果拥有100MHz的频宽，按照“一次只能服务一个”的原理，在有3个设备同时接入网络的情况下，每个设备只能得到约33.3MHz频宽，另外的66.6MHz则处于闲置状态。即在同一个Wi-Fi区域内，连接设备越多宽频被平均得越小，浪费的资源越多，网速也就越慢。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE9.jpg"></p><p>▲图为SU-MIMO（左）和MU-MIMO（右）的对比</p><p><strong>MU-MIMO路由器则不同，MU-MIMO路由的信号在时域、频域、空域三个维度上分成三部分，就像是同时发出三个不同的信号，能够同时与三部设备协同工作；尤其值得一提的是，由于三个信号互不干扰，因此每台设备得到的频宽资源并没有打折扣，资源得到最大化的利用，从路由器角度衡量，数据传输速率提高了3倍，改善了网络资源利用率，从而确保Wi-Fi无间断连接。</strong></p><p><strong>MU-MIMO技术就赋予了路由器并行处理的能力，</strong>让它能够同时为多台设备传输数据，极大地改善了网络拥堵的情况。在今天这种无线联网设备数量爆发式增长的时代，它是比单纯提高速率更有实际意义的。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE10.jpg"></p><p>世界上首台支持MU-MIMO的路由器是Linksys EA8500于2015年发布，采用的是全高通的MU-MIMO解决方案（Qualcomm MU | EFX）。现在MU-MIMO已经是旗舰级路由器的标配了，而那些写着ac双频路由器却不支持MU-MIMO技术的，都只能算是残缺的ac双频路由器或者是ac wave1阶段的路由器。</p><p>这里放一张到ac为止各代协议的主要参数对比图（图片来自网络）：</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE11.jpg"></p><h1 id="8、802-11ad——先天不足的一代"><a href="#8、802-11ad——先天不足的一代" class="headerlink" title="8、802.11ad——先天不足的一代"></a>8、802.11ad——先天不足的一代</h1><p>在确定第六代的Wi-Fi协议标准的时候，有一段时间，大家都认为会是802.11ad协议，说这个名字大家可以不太熟悉，它另一个名字叫WiGig。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE12.jpg"></p><p>相比我们熟知的802.11n(工作在2.4GHz和5GHz频段)和802.11ac(工作在5GHz频段)，**802.11ad则是工作在60GHz频段，且无线传输速率可高达7Gbps!**当然， 802.11ac标准也可以通过堆BUFF（8x8 MIMO、256 QAM调制和信道绑定4个40 MHz信道）达到7Gbps的理论无线传输速率；但是，11ad达到7Gbps的速度，仅需通过一个空间流、64QAM调制和单个信道即可实现。此外，802.11ad还在容量、功耗和延迟方面有着11ac无法比拟的优势，特别是在延迟方面，其延迟通常仅有10微秒，堪比有线!</p><p>但可惜，802.11ad协议有着它的先天不足——60GHz，这么高的频率注定它的传输距离和穿墙能力弱到不堪一击，而在一些知名评测媒体的评测中，人们惊人地发现只需要一个纸皮箱就能隔绝802.11ad协议路由器的信号。真是可谓成也萧何，败也萧何。</p><h1 id="9、802-11ax——肩负使命的一代"><a href="#9、802-11ax——肩负使命的一代" class="headerlink" title="9、802.11ax——肩负使命的一代"></a>9、802.11ax——肩负使命的一代</h1><p>802.11ax协议基于2.4GHz和5GHz两个频段，对，就是两个频段，并非是ac双频路由器那样不同的频段对应不同的协议，ax协议本身就支持两个频段。这显然迎合了当下物联网、智能家居等发展潮流。对于一些对带宽需要不高的智能家居设备，可以使用2.4GHz频段去连接，保证足够的传输距离，而对于需要高速传输的设备，就使用5GHz频段。这看起来和现在的ac双频路由器是一样的，但实际上，ax作为第六代Wi-Fi协议的扛把子，可不只这两把刷子。</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE14.png"></p><p><strong>802.11ax又被称为“高效率无线标准”（High-Efficiency Wireless，HEW），</strong>将大幅度提升用户密集环境中的每位用户的平均传输率，即在高密环境下为更多用户提供一致且稳定的数据流（平均传输率），将有效减少网络拥塞、大幅提升无线速度与覆盖范围。其实，设计802.11ax的首要目的是解决网络容量问题，因为随着公共Wi-Fi的普及，网络容量问题已成为机场、体育赛事和校园等密集环境中的一个大问题。</p><p><strong>此处要介绍两个新技术，上行MU-MIMO和OFDMA。</strong></p><h2 id="9-1-上行MU-MIMO"><a href="#9-1-上行MU-MIMO" class="headerlink" title="9.1 上行MU-MIMO"></a>9.1 上行MU-MIMO</h2><p>MU-MIMO技术在前面已经提到过，802.11ac协议中的MU-MIMO技术只是单纯的下行MU-MIMO，只有在路由器给设备传输数据的时候才可以用，而如今随着智能设备的发展，人们对于上行速率的要求也在提高，传个超清视频图片什么的已经是家常便饭了。<strong>上行MU-MIMO技术就是为此而生，改善了设备在向路由器传输数据时的拥堵情况，提高了网络资源利用率。</strong></p><h2 id="9-2-OFDMA"><a href="#9-2-OFDMA" class="headerlink" title="9.2 OFDMA"></a>9.2 OFDMA</h2><p>802.11ax与以前的无线局域网(WLAN)系统相比最大的变化在于其是采用了“正交频分多址接入”(orthogonal frequency division multiple access, OFDMA)。</p><p><strong>在OFDM系统中，用户占用了整个信道。随着用户数量的增多，用户之间的数据请求会发生冲突，从而造成瓶颈，从而导致当这些用户在请求数据（特别是在流式视频等高带宽应用中）时，服务质量较差。</strong></p><p>而在OFDMA中，用户仅在规定时间内占用子载波的一个子集。OFDMA要求所有用户同时传输，因此每个用户都需要将其数据包缓冲为相同的规定比特数，这样无论数据量有多少所有用户都能在时间上保持一致。此外， OFDMA AP可根据用户对带宽的需求来动态地改变用户所占用频谱的数量。例如，相比较对实时性能要求不高的电子邮件，流媒体视频用户需要更多子载波（频谱）。</p><p>不理解的话我们看下图：</p><p><img src="https://resource.tinychen.com/WiFi%E5%8D%8F%E8%AE%AE15.jpg"></p><p>▲用户在ODFM中占据整个信道，而在“正交频分多址接入”(OFDMA)中不是</p><p>我们还是用回马路开车的例子，假设现在有一条马路有三条车道，现在有甲乙丙三个车队要走这条路（每队都要走一个小时，走前需要半个小时准备），如果按照一次走一个车队的方法，甲乙丙依次走完需要四个半小时，而使用OFDMA技术，给他们一队一条道，则只需要三个半小时，省下了一个小时的准备时间。OFDM和OFDMA在用户数量少的时候差距可能不大，但是一旦用户数量多了起来，差距可就不是一星半点了。</p><p><strong>OFDMA一路走来，其实就是“从无到有，再从有到善用”的演变历程。</strong></p><h2 id="9-3-802-11ax小结"><a href="#9-3-802-11ax小结" class="headerlink" title="9.3 802.11ax小结"></a>9.3 802.11ax小结</h2><p>实际上，802.11ax给我们带来的提升远不止此，其他的如更低的延迟、更精确的功耗控制等等也是不可忽略的一环。现在市面上使用802.11ax协议的产品并不是很多，只是零星的几款，<strong>但是好在它的太子身份已经确定，登基只是早晚的问题。</strong>而按照目前的进度来看，小七预计2019年802.11ax的产品就能实现不错的普及率。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本周，英特尔宣布：将从今年（2018）开始添加对802.11ax的支持，包括路由芯片和消费级零售产品。其实早在去年，通信行业巨头博通就发布了三款支持802.11ax的芯片BCM43684/43694/4375，高通也宣布了IPQ8074/QCA6290。至此，三家芯片巨头都表明了对802.11ax协议的支持，802.11ax也终于是坐稳了第六代Wi-Fi协议的位置了。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>汕大计组复习提纲2017版</title>
    <link href="https://tinychen.com/20171227-computer-arch/"/>
    <id>https://tinychen.com/20171227-computer-arch/</id>
    <published>2017-12-27T07:00:00.000Z</published>
    <updated>2017-12-27T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>汕大计算机系2017年的计组课最后期末的复习提纲，我个人整理各类资料和PPT总结，有部分可能会有错漏或不足，这里分享给有需要的同学。</p><span id="more"></span><h1 id="01讲"><a href="#01讲" class="headerlink" title="01讲"></a>01讲</h1><h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><p>ACM：Association for Computing Machinery，美国计算机协会</p><p>ENIAC：Electronic Numerical Integrator And Computer，电子数字积分计算机</p><p>ALU：算术逻辑部件，Arithmetic and Logical Unit</p><p>CP：时钟，Clock Pulse</p><p>ISA：Instruction Set Architecture，指令集体系结构（指令集架构）</p><p>LSIC：大规模集成电路(Large Scale Integrated circuits</p><p>MOOC：massive open online courses,大型开放式网络课程</p><p>两个PC：Person Computer, Program Counter</p><p>PLC：可编程逻辑控制器,Programmable Logic Controller</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.计算机系统是?</strong></p><p>计算机系统＝硬件/固件＋软件</p><p><strong>2.固件是什么？</strong></p><p>①    固化的程序（firmware），例如计算机主板上的BIOS。<br>②    固件一般存储于设备中的电可擦除只读存储器EEPROM(Electrically Erasable Programmable ROM)或FLASH芯片中，一般可由用户通过特定的刷新程序进行升级的程序。<br>③    固件常见于：手机、数码相机、mp3、mp4、路由器、交换机、U盘、主板的BIOS（BIOS就是一种固件）、显卡的BIOS。</p><p><strong>3.什么是“软件摩尔定律”？</strong></p><p>软件摩尔定律：每18个月，软件体积大一倍，效率差一半。</p><p><strong>4.冯·诺依曼体系和哈佛总线体系的区别？</strong></p><p>程序空间和数据空间是否是一体的。<br>冯·诺依曼结构数据空间和地址空间不分开，哈佛结构数据空间和地址空间是分开的。</p><p><strong>5.冯.诺依曼计算机体系的主要特点 ?</strong></p><p>①    计算机由运算器、控制器、存储器、输入设备和输出设备五部分组成；<br>②    采用存储程序的方式；<br>③    数据以2进制表示。</p><p><strong>6.计算机系统结构概念的实质?</strong></p><p>确定计算机系统中软硬件的界面，界面之上是软件实现的功能，界面之下是硬件和固件实现的功能。</p><hr><h1 id="02讲（数制和编码、整数的表示）"><a href="#02讲（数制和编码、整数的表示）" class="headerlink" title="02讲（数制和编码、整数的表示）"></a>02讲（数制和编码、整数的表示）</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.定点整数的原、反、补码表示?</strong></p><p>小数点位置约定再固定位置的数称为定点数；小数点位置约定为可浮动的数称为浮点数。对于定点整数，其小数点总是固定在数的最右边，因此可用定点整数来表示整数。</p><p><img src="https://resource.tinychen.com/171227ComArch01.png"></p><hr><h1 id="03讲（浮点数-数据的宽度和存储）"><a href="#03讲（浮点数-数据的宽度和存储）" class="headerlink" title="03讲（浮点数-数据的宽度和存储）"></a>03讲（浮点数-数据的宽度和存储）</h1><h2 id="词汇-1"><a href="#词汇-1" class="headerlink" title="词汇"></a>词汇</h2><p>IEEE：Institute of Electrical and Electronics Engineers，电气和电子工程师协会 </p><p>MSB(msb)，Most Significant Bit，最高有效位。或Most Significant Byte，最高有效字节。</p><p>LSB(msb)，least significant bit，最低有效位。或least significant byte，最低有效字节。</p><h2 id="问题-2"><a href="#问题-2" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.IEEE754标准32位浮点数的表示?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch02.png"></p><p><img src="https://resource.tinychen.com/171227ComArch03.png"></p><p><img src="https://resource.tinychen.com/171227ComArch04.png"></p><p><strong>2.大端方式与小端方式?</strong></p><ul><li>大端是高低结合；大端方式将数据的最高有效字节存放在低地址单元中，将最低有效字节存放在高地址单元中，即数据的地址就是MSB所在的地址。</li><li>小端是高高结合；小端方式将数据的最高有效字节存放在高地址单元中，将最低有效字节存放在低地址单元中，即数据的地址就是LSB所在的地址。</li><li>最高有效位指数据最左边的一位数，最低有效位指最右边的那一位数</li><li>高地址是数字大的，低地址是数字小的。</li></ul><hr><h1 id="04讲（数据的基本运算）"><a href="#04讲（数据的基本运算）" class="headerlink" title="04讲（数据的基本运算）"></a>04讲（数据的基本运算）</h1><h2 id="词汇-2"><a href="#词汇-2" class="headerlink" title="词汇"></a>词汇</h2><p>ASCII，ASCII（American Standard Code for Information Interchange，美国信息交换标准代码</p><p>ZF，零标志，Zero Flag</p><p>OF，溢出标志，Overflow Flag</p><p>CF，进/借位标志，Carry Flag</p><p>SF，符号标志，Sign Flag</p><p>FA，全加器，Full Adder</p><p>HA，半加器，Half Adder</p><p>RCA，行波进位加法器，ripple carry adder</p><p>CAS，可控加减单元，Controllable Adder Subtracter</p><p>CLA，先行进位发生器，carry look-ahead</p><h2 id="问题-3"><a href="#问题-3" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.理解并简单解释本讲介绍的典型电路?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch05.png"></p><p><strong>2.补码加减法电路示意图?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch06.png"></p><p><strong>3.对2求补器电路?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch07.png"></p><hr><h1 id="05讲（程序转换概述，初步认识ISA）"><a href="#05讲（程序转换概述，初步认识ISA）" class="headerlink" title="05讲（程序转换概述，初步认识ISA）"></a>05讲（程序转换概述，初步认识ISA）</h1><h2 id="词汇-3"><a href="#词汇-3" class="headerlink" title="词汇"></a>词汇</h2><p>MAR（AR）：Memory Address Register，地址寄存器</p><p>MDR(DR)： Memory Data Register，数据寄存器</p><p>IR：Instruction Register，指令寄存器</p><p>GPRs：General Purpose Registers，通用寄存器</p><p>ACC：Accumulator，累加器</p><p>OP：操作码，Operation Code</p><p>CISC：Complex Instruction Set Computer，复杂指令系统计算机</p><p>RISC：Reduced Instruction Set Computer，精简指令系统计算机</p><p>RTL：Register Transfer Level，寄存器传输级</p><h2 id="问题-4"><a href="#问题-4" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.RR、RM、MM是什么?</strong></p><ul><li>RR结构：寄存器-寄存器结构（Register-Register）</li><li>RM结构：寄存器-存储器结构（Register-Memory）</li><li>MM结构：存储器-存储器结构（Memory-Memory）</li></ul><hr><h1 id="06讲（IA-32指令系统概述）"><a href="#06讲（IA-32指令系统概述）" class="headerlink" title="06讲（IA-32指令系统概述）"></a>06讲（IA-32指令系统概述）</h1><h2 id="词汇-4"><a href="#词汇-4" class="headerlink" title="词汇"></a>词汇</h2><p>IA：Intel Architecture，Intel架构</p><hr><h1 id="07讲（MIPS体系结构1）"><a href="#07讲（MIPS体系结构1）" class="headerlink" title="07讲（MIPS体系结构1）"></a>07讲（MIPS体系结构1）</h1><h2 id="词汇-5"><a href="#词汇-5" class="headerlink" title="词汇"></a>词汇</h2><p>MIPS：Microprocessor without Interlocked Pipeline Stages，无内部互锁流水级的微处理器</p><p>MIPS：Million Instructions Per Second)，每秒处理百万指令数</p><h2 id="问题-5"><a href="#问题-5" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.简单MIPS程序?</strong></p><hr><h1 id="08讲（MIPS体系结构2）"><a href="#08讲（MIPS体系结构2）" class="headerlink" title="08讲（MIPS体系结构2）"></a>08讲（MIPS体系结构2）</h1><h2 id="问题-6"><a href="#问题-6" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.简单MIPS程序?</strong></p><p><strong>2.伪指令和伪操作的区别?</strong></p><ul><li>伪操作(directive)不会被编译器编译为机器指令，</li><li>伪指令(pseudo-instruction)会编译为机器指令。</li></ul><hr><h1 id="09讲（ARM汇编）"><a href="#09讲（ARM汇编）" class="headerlink" title="09讲（ARM汇编）"></a>09讲（ARM汇编）</h1><h2 id="词汇-6"><a href="#词汇-6" class="headerlink" title="词汇"></a>词汇</h2><p>ARM：Advanced RISC Machine，高级RISC处理机</p><p>IP：知识产权，intellectual property</p><p>GNU：通用公共许可证，GNU General Public License</p><hr><h1 id="10讲（程序执行概述，CPU结构和功能）"><a href="#10讲（程序执行概述，CPU结构和功能）" class="headerlink" title="10讲（程序执行概述，CPU结构和功能）"></a>10讲（程序执行概述，CPU结构和功能）</h1><h2 id="词汇-7"><a href="#词汇-7" class="headerlink" title="词汇"></a>词汇</h2><p>PSW：Program Status Word，程序状态字</p><h2 id="问题-7"><a href="#问题-7" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.现代CPU的组成？</strong></p><p>现代CPU一般由运算器、控制器、数据通路（datapath）和高速缓冲存储器（Cache）组成。</p><p>——数据通路是指各部件之间通过数据线的相互连接。</p><p>——选择什么样的数据通路，对于CPU的性能有很大的影响。</p><p><strong>2.CPU控制器的基本组成？</strong></p><ul><li>程序计数器（PC）</li><li>指令寄存器（IR）</li><li>指令译码器（ID）</li><li>时序发生器</li><li>操作控制器</li></ul><p><strong>3.运算器的基本组成？</strong></p><ul><li>算术逻辑单元（ALU）</li><li>累加寄存器（AC）或通用寄存器</li><li>数据寄存器（DR）</li><li>程序状态字寄存器（PSW）</li></ul><p><strong>4.    CPU中的主要寄存器？</strong></p><ul><li>指令寄存器（IR）</li><li>程序计数器（PC）</li><li>地址寄存器（AR）</li><li>数据寄存器（DR）</li><li>累加寄存器（ACC）或GPRs</li><li>程序状态字寄存器（PSW）</li></ul><p><strong>5.CPU的具体功能?</strong></p><ul><li>指令控制：控制程序的顺序执行</li><li>操作控制：产生完成每条指令所需的控制命令</li><li>时间控制：对各种操作加以时间上的控制</li><li>数据加工：对数据进行算术运算和逻辑运算</li><li>中断处理：处理运行过程中出现的异常情况和特殊请求</li></ul><hr><h1 id="11讲（datapath）"><a href="#11讲（datapath）" class="headerlink" title="11讲（datapath）"></a>11讲（datapath）</h1><h2 id="问题-8"><a href="#问题-8" class="headerlink" title="问题:"></a>问题:</h2><p><strong>指令周期、机器周期、时钟周期?</strong></p><p><strong>1.指令周期</strong></p><p>指令周期是取出一条指令并执行这条指令的时间。一般由若干个机器周期组成，是从取指令、译码到执行完所需的全部时间。</p><p>**一条指令的执行过程包括3个基本步骤： **</p><ol><li><p>取指令：从存储器取出一条指令，该指令的地址由程序计数器PC给出。</p></li><li><p>译码：对该指令的操作码进行译码分析，确定是哪一种指令，并转到这种指令对应的执行阶段。</p></li><li><p>执行：按指令操作码的要求执行该指令。执行过程可能需要多步操作，控制器将为之形成完成该指令功能所需要的操作控制信号。执行完毕后，回到取指令阶段，去取下一条指令。如此反复，直到整个程序执行完。</p></li></ol><p><strong>2.机器周期</strong></p><ul><li>通常把一条指令周期划分为若干个机器周期，每个机器周期完成一个基本操作。</li><li>可以用主存的工作周期(存取周期)为基础来规定机器周期，比如，可以用CPU读取一个指令字的最短时间来规定机器周期</li><li>不同的指令，可能包含不同数目的机器周期。</li><li>一个机器周期中，包含若干个节拍脉冲或T脉冲。</li><li>机器周期的定义和规定，不同的计算机中规定不同</li></ul><p><strong>3.时钟周期</strong></p><ul><li>在一个机器周期内，要完成若干个微操作。这些微操作有的可以同时执行，有的需要按先后次序串行执行。因而需要把一个机器周期分为若干个相等的时间段，每一个时间段称为一个节拍脉冲或T周期。</li><li>时钟周期通常定义为机器主频的倒数。</li></ul><hr><h1 id="12讲（单周期及多周期CPU构造）"><a href="#12讲（单周期及多周期CPU构造）" class="headerlink" title="12讲（单周期及多周期CPU构造）"></a>12讲（单周期及多周期CPU构造）</h1><hr><h1 id="13讲（流水线技术1）"><a href="#13讲（流水线技术1）" class="headerlink" title="13讲（流水线技术1）"></a>13讲（流水线技术1）</h1><h2 id="问题-9"><a href="#问题-9" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.给出五段流水线示意图（段里面给出名称）?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch08.png"></p><p><strong>2.流水线冲突有哪几种情况（结构,数据,控制）?</strong></p><p>结构冲突：因硬件资源满足不了指令重叠执行的要求而发生的冲突。</p><p>数据冲突：当指令在流水线中重叠执行时，因需要用到前面指令的执行结果而发生的冲突。</p><p>控制冲突：流水线遇到分支指令和其他会改变PC值的指令所引起的冲突。</p><p><strong>3.流水线时空图（吞吐率、加速比和效率）?</strong></p><p>吞吐率（throughput）：在单位时间内流水线所完成的任务数量或输出结果的数量。</p><p>加速比：完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比。</p><p>流水线的效率：流水线中的设备实际使用时间与整个运行时间的比值，即流水线设备的利用率。</p><hr><h1 id="14讲（流水线技术2）"><a href="#14讲（流水线技术2）" class="headerlink" title="14讲（流水线技术2）"></a>14讲（流水线技术2）</h1><h2 id="词汇-8"><a href="#词汇-8" class="headerlink" title="词汇"></a>词汇</h2><p>ILP：Instruction-Level-Parallelism，指令级并行</p><h2 id="问题-10"><a href="#问题-10" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.超标量处理机（时空图）?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch09.png"></p><p><strong>2.超流水线处理机（时空图）?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch10.png"></p><p><strong>3.超标量超流水线处理机（时空图）?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch11.png"></p><hr><h1 id="15讲（总线技术）"><a href="#15讲（总线技术）" class="headerlink" title="15讲（总线技术）"></a>15讲（总线技术）</h1><h2 id="词汇-9"><a href="#词汇-9" class="headerlink" title="词汇"></a>词汇</h2><p>ISA：工业标准总线，Industry Standard Architecture</p><p>PCI：外部设备部件互连，Peripheral Component Interconnect</p><h2 id="问题-11"><a href="#问题-11" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.总线分类?</strong></p><p><strong>总线分类1</strong><br>①    内部总线：CPU内部连接各寄存器及运算器部件之间的总线</p><p>②    系统总线：CPU和计算机系统中其他高速功能部件相互连接的总线</p><p>③    I/O总线：CPU和中低速I/O设备相互连接的总线</p><p>④    通信总线</p><p><strong>总线分类2</strong></p><p>①    数据总线</p><p>②    地址总线</p><p>③    控制总线</p><p>④    电源总线</p><p><strong>总线分类3</strong></p><p>①    并行总线</p><p>②    串行总线</p><p><strong>2.总线的一次信息传送过程，大致分为哪几个阶段? 若采用同步定时协议，请画出读数据的时序图来说明。</strong></p><p>分五个阶段：请求总线，总线仲裁，寻址（目的地址），信息传送，状态返回（错误报告）</p><p><img src="https://resource.tinychen.com/171227ComArch12.png"></p><p><strong>3.总线带宽计算?</strong></p><p><strong>总线带宽</strong><br>总线带宽定义为总线本身所能达到的最高传输速率，它是衡量总线性能的重要指标</p><p><strong>总线宽度</strong><br>又称位宽，指的是总线同时传送数据的位数</p><p><strong>总线频率</strong></p><p><img src="https://resource.tinychen.com/171227ComArch13.png"></p><p><strong>4.链式查询电路单元的逻辑图?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch14.png"></p><ul><li>BG(Bus Granted)</li><li>BB(Bus Busy)</li><li>BR(Bus Request)</li></ul><p><strong>5.并行判优电路图</strong></p><p><img src="https://resource.tinychen.com/171227ComArch15.png"></p><hr><h1 id="16讲（微程序与硬布线）"><a href="#16讲（微程序与硬布线）" class="headerlink" title="16讲（微程序与硬布线）"></a>16讲（微程序与硬布线）</h1><h2 id="问题-12"><a href="#问题-12" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.微程序控制器组成部分?</strong></p><p>微程序控制器主要由<strong>控制存储器、微指令寄存器和地址转移逻辑</strong>三大部分组成。</p><hr><h1 id="17讲（半导体存储器）"><a href="#17讲（半导体存储器）" class="headerlink" title="17讲（半导体存储器）"></a>17讲（半导体存储器）</h1><h2 id="词汇-10"><a href="#词汇-10" class="headerlink" title="词汇"></a>词汇</h2><p>ROM（Read-Only Memory，只读存储器）</p><p>RAM（Random-Access Memory，随机存取存储器）</p><p>EPROM（Erasable Programmable Read－Only Memory，可擦可编程只读存储器）</p><p>EEPROM（Electrically Erasable Programmable read only memory，电可擦可编程只读存储器）</p><p>SRAM（Static Random Access Memory，静态随机存取存储器）</p><p>DRAM（Dynamic Random Access Memory，动态随机存取存储器）</p><h2 id="问题-13"><a href="#问题-13" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.存储器的片位扩展?</strong></p><p>复杂而且重要，看PPT吧，实在不行问老师。</p><hr><h1 id="18讲（磁存储与光存储）"><a href="#18讲（磁存储与光存储）" class="headerlink" title="18讲（磁存储与光存储）"></a>18讲（磁存储与光存储）</h1><h2 id="词汇-11"><a href="#词汇-11" class="headerlink" title="词汇"></a>词汇</h2><p>CAV，constant angular velocity，恒定角速度</p><p>CLV，constant linear velocity，恒定线速度</p><p>CRC：循环冗余校验码</p><p>ECC：Error Checking and Correcting</p><h2 id="问题-14"><a href="#问题-14" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.磁记录的几种方式（列出即可）?</strong></p><p>①    不归零制(NRZ0)</p><p>②    见“1”就翻不归零制(NRZ1)</p><p>③    调相制(PM)</p><p>④    调频制(FM)</p><p>⑤    改进调频制(MFM)</p><hr><h1 id="19讲（高速缓冲存储器1）"><a href="#19讲（高速缓冲存储器1）" class="headerlink" title="19讲（高速缓冲存储器1）"></a>19讲（高速缓冲存储器1）</h1><h2 id="问题-15"><a href="#问题-15" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.三种映射方式分析?</strong></p><p>①    直接（direct）：每个主存块映射到cache的固定行中</p><p>②    全相联（full associate）：每个主存块映射到cache的任意行中</p><p>③    组相联（set associate）：每个主存块映射到cache的固定组的任意行中</p><hr><h1 id="20讲（高速缓冲存储器2）"><a href="#20讲（高速缓冲存储器2）" class="headerlink" title="20讲（高速缓冲存储器2）"></a>20讲（高速缓冲存储器2）</h1><h2 id="问题-16"><a href="#问题-16" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.cache命中率、平均访问时间、效率的分析?</strong></p><p><strong>2.写回、写直达的区别?</strong></p><hr><h1 id="21讲（虚拟存储器）"><a href="#21讲（虚拟存储器）" class="headerlink" title="21讲（虚拟存储器）"></a>21讲（虚拟存储器）</h1><h2 id="词汇-12"><a href="#词汇-12" class="headerlink" title="词汇"></a>词汇</h2><p>VM，虚拟存储器，Virtual Memory</p><p>VA，虚拟地址，Virtual Address</p><p>LA，逻辑地址，Logical Address</p><p>PA，物理地址，Physical Address</p><p>TLB，快表，translation lookaside buffer</p><h2 id="问题-17"><a href="#问题-17" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.TLB的作用？</strong></p><p>（又称为快表技术。由于“页表”存储在主存储器中，查询页表所付出的代价很大，由此产生了TLB。TLB是一个小的，虚拟寻址的缓存，其中每一行都保存着一个由单个页表项组成的块。如果没有TLB，则每次取数据都需要两次访问内存，即查页表获得物理地址和取数据。TLB和CPU里cache之间不存在本质的区别，都是半导体硬件，只不过前者缓存页表数据，而后两个缓存实际数据。）</p><hr><h1 id="22讲（RAID及其它）"><a href="#22讲（RAID及其它）" class="headerlink" title="22讲（RAID及其它）"></a>22讲（RAID及其它）</h1><h2 id="词汇-13"><a href="#词汇-13" class="headerlink" title="词汇"></a>词汇</h2><p>RAID：廉价磁盘冗余阵列，Redundant Array of Inexpensive Disks；或Redundant Arrays of Independent Disks，独立磁盘冗余阵列</p><p>SCSI：Small Computer System Interface，小型计算机系统接口）</p><hr><h1 id="23讲（中断）"><a href="#23讲（中断）" class="headerlink" title="23讲（中断）"></a>23讲（中断）</h1><h2 id="问题-18"><a href="#问题-18" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.CPU管理外围设备有几种方式?</strong></p><p>①    程序查询方式：好处是硬件结构简单，不足是太浪费CPU时间，目前除单片机外，很少使用查询方式。</p><p>②    程序中断方式：是管理I/O操作的一个比较有效的方法。</p><p>③    直接内存访问(DMA)方式：是一种完全由硬件执行I/O交换，DMA控制器接管总线的控制，数据交换不经过CPU，适用于内存和高速外围设备之间大批数据交换的场合。</p><p>④    通道方式：通道是一个具有特殊功能的处理器。</p><p>⑤    外围处理机（PPU，Peripheral processing unit）方式：PPU基本上独立于主机工作，是通道方式的进一步发展。</p><p><strong>2.程序内部异常的原因?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch16.png"></p><p><strong>3.程序外部中断的原因?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch17.png"></p><p><strong>4.简述中断服务程序的流程?</strong></p><p><img src="https://resource.tinychen.com/171227ComArch18.png"></p><p><strong>5.中断屏蔽码的应用?</strong></p><p>在CPU的中断管理部件中必须有一个中断屏蔽触发器，它可以在程序的控制下<strong>置“1”(设置屏蔽)，或置“0”(取掉屏蔽)。只有在中断屏蔽标志为“0”时，CPU才可以受理中断。</strong></p><hr><h1 id="24讲（DMA）"><a href="#24讲（DMA）" class="headerlink" title="24讲（DMA）"></a>24讲（DMA）</h1><h2 id="词汇-14"><a href="#词汇-14" class="headerlink" title="词汇"></a>词汇</h2><p>DMA：Direct Memory Access，直接存储器访问</p><h2 id="问题-19"><a href="#问题-19" class="headerlink" title="问题:"></a>问题:</h2><p>1.DMA功能示意图?</p><p><img src="https://resource.tinychen.com/171227ComArch19.png"></p><p>2.DMA传送的三种方式?</p><p><img src="https://resource.tinychen.com/171227ComArch20.png"></p><p><img src="https://resource.tinychen.com/171227ComArch21.png"></p><p><img src="https://resource.tinychen.com/171227ComArch22.png"></p><hr><h1 id="25讲（通用IO接口标准，芯片组，外部设备）"><a href="#25讲（通用IO接口标准，芯片组，外部设备）" class="headerlink" title="25讲（通用IO接口标准，芯片组，外部设备）"></a>25讲（通用IO接口标准，芯片组，外部设备）</h1><h2 id="词汇-15"><a href="#词汇-15" class="headerlink" title="词汇"></a>词汇</h2><p>ATA：AT Attachment，AT计算机附加设备</p><p>PATA（并行ATA，Parallel ATA）</p><p>SATA（串行ATA，Serial ATA）</p><p>VGA：Video Graphics Array，视频图形阵列</p><p>DVI：Digital Visual Interface，数字视频接口</p><p>HDMI：High Definition Multimedia Interface，高清晰度多媒体接口</p><p>LCD：Liquid Crystal Display，液晶显示器</p><p>LED：Light Emitting Diode，发光二极管</p><hr><h1 id="26讲（并行计算，计算机系统性能评价）"><a href="#26讲（并行计算，计算机系统性能评价）" class="headerlink" title="26讲（并行计算，计算机系统性能评价）"></a>26讲（并行计算，计算机系统性能评价）</h1><h2 id="词汇-16"><a href="#词汇-16" class="headerlink" title="词汇"></a>词汇</h2><p>SISD：单指令流单数据流</p><p>SIMD：单指令流多数据流</p><p>MIMD：多指令流多数据流</p><p>HPC：高性能计算，High Performance  Computing</p><p>SC：超级计算，Super Computing</p><p>COW：工作站机群，Cluster of Workstation</p><p>PVP：并行向量机，Parallel Vector Processor</p><p>UMA：Uniform  Memory Access，共享存储器架构</p><p>SMP：Symmetrical Multi-Processing，对称多处理器结构</p><p>NUMA：Non Uniform Memory Access Architecture，非一致内存架构</p><p>MPP：Massive Parallel Processing，海量并行处理结构</p><p>UMA：均匀存储器存取，Uniform Memory Access</p><p>NUMA：非均匀存储器存取，Non-uniform Memory Access</p><p>COMA：只用高速缓存的存储器结构（Cache-Only Memory Architecture），是NUMA的特例</p><h2 id="问题-20"><a href="#问题-20" class="headerlink" title="问题:"></a>问题:</h2><p><strong>1.从系统架构来看，目前的商用服务器大体可以分为三类</strong></p><p>①    对称多处理器结构(SMP：Symmetric Multi-Processor)</p><p>②    非一致存储访问结构(NUMA：Non-Uniform Memory Access)</p><p>③    海量并行处理结构(MPP：Massive Parallel Processing)</p><p><strong>2.共享存储型多处理机有两种模型</strong></p><ul><li>均匀存储器存取（Uniform Memory Access，简称UMA）模型</li><li>非均匀存储器存取（Nonuniform Memory Access，简称NUMA）模型</li></ul><hr><h1 id="27讲（GPU，树莓电脑硬件探密）"><a href="#27讲（GPU，树莓电脑硬件探密）" class="headerlink" title="27讲（GPU，树莓电脑硬件探密）"></a>27讲（GPU，树莓电脑硬件探密）</h1><h2 id="词汇-17"><a href="#词汇-17" class="headerlink" title="词汇"></a>词汇</h2><p>GPU：图形处理器，Graphics Processing Unit</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;汕大计算机系2017年的计组课最后期末的复习提纲，我个人整理各类资料和PPT总结，有部分可能会有错漏或不足，这里分享给有需要的同学。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="stu" scheme="https://tinychen.com/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>BIOS与UEFI</title>
    <link href="https://tinychen.com/20171007-bios-n-uefi/"/>
    <id>https://tinychen.com/20171007-bios-n-uefi/</id>
    <published>2017-10-07T07:00:00.000Z</published>
    <updated>2017-10-07T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>BIOS和UEFI这两个概念对于刚接触计算机硬件的朋友来说可能有些难以区分，最近正好有空，就稍微整理了一下有关知识和大家分享交流一下，如文中有任何错误不足，还望不吝赐教。</p><span id="more"></span><h1 id="1、BIOS"><a href="#1、BIOS" class="headerlink" title="1、BIOS"></a>1、BIOS</h1><p><img src="https://resource.tinychen.com/BIOS%E4%B8%8EUEFI%20%281%29.png"></p><p>▲图为经典BIOS操作界面</p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><strong>BIOS，读作/‘baious/，全称Basic Input Outpout System（基本输入输出系统），本质上是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。</strong>BIOS和手机的Bootloader有些相似，实际上，不止是电脑和手机，基本所有电子产品都有与BIOS/Bootloader功能相似的部分，它们往往体积很小（最大的也才几MB），功能看似简单但是非常重要。</p><p>存储上，在主板中有着专门的芯片（BIOS芯片/CMOS RAM）用于存储BIOS，因此它并不存储在内存或者硬盘中，稳定性和可靠性有较好的保证。</p><h2 id="1-2-BIOS的存储介质"><a href="#1-2-BIOS的存储介质" class="headerlink" title="1.2 BIOS的存储介质"></a>1.2 BIOS的存储介质</h2><p>早期的BIOS是存储在ROM（Read-Only-Memory，只读存储器）芯片中，在主板出厂前，需要通过特殊的手段将BIOS烧录进BIOS芯片中。而且由于ROM的只读特性，一方面保证了BIOS不会受到轻易更改而保证硬件的正常稳定运行，另一方面也限制了BIOS的升级（ROM不能被写入数据）。</p><p>不能被升级的BIOS显然不能迎合科技发展的需要，于是EPROM芯片开始替代ROM成为BIOS的存储芯片。</p><p><strong>EPROM全程是Erasable Programmable ROM，名为可擦除可编程ROM，这种芯片可重复擦除和写入，解决了ROM芯片只能写入一次的弊端。</strong>EPROM内资料的写入要用专用的编程器，并且往芯片中写内容时必须要加一定的编程电压，写入资料后，还要以不透光的贴纸或胶布把窗口封住，以免受到周围的紫外线照射而使资料受损。</p><p>尽管EPROM可以重复擦除和写入，但是操作方式和条件都过于苛刻，后来就使用了EEPROM芯片。<strong>EEPROM（Electrically Erasable Programmable ROM，电可擦除可编程ROM）。</strong>通过跳线开关和系统配带的驱动程序盘，可以对EEPROM进行重写，方便地实现BIOS升级。</p><p>到了现在，我们可以用软件轻易地升级BIOS，是因为现在的BIOS大多是使用了NOR Flash。NOR Flash 的特点是芯片内执行（XIP ，eXecute In Place），这样应用程序可以直接在Flash闪存内运行，不必再把代码读到系统RAM中。</p><p><strong>NOR 的传输效率很高，在1~4MB的小容量时具有很高的成本效益，但是很低的写入和擦除速度大大影响到它的性能。</strong>尽管如此，对于BIOS来说，小容量足以满足需求，而BIOS的升级并非常事，偶尔一次升级，由写入擦除速度慢导致的升级时间延长也没有太大的影响。</p><h2 id="1-3-BIOS里面有什么"><a href="#1-3-BIOS里面有什么" class="headerlink" title="1.3 BIOS里面有什么"></a>1.3 BIOS里面有什么</h2><p>一般来说，人们普遍认为BIOS是沟通软件与硬件的桥梁。讲完存储介质，我们再来了解一下这个存储芯片（BIOS芯片）里面都储存着什么东西。</p><p><strong>●自诊断程序：</strong>通过读取CMOSRAM中的内容识别硬件配置，并对其进行自检和初始化；</p><p>这就是电脑开机最开始的自检步骤，一般出现错误主板会报警，发出响声，一般可以根据响声的长短和数量来判断出现问题的部分，当然也有一些主板在上面加了一块小型的LED显示屏，通过上面的数字来直接反馈错误信息。</p><p><strong>● CMOS设置程序：</strong>这个部分就是大家通常见到的BIOS（蓝色背景界面）， 引导过程中，用特殊热键启动（一般是Del、esc、F9、F12等），进行设置后，存入CMOS RAM中；</p><p>大多数的电脑停留在这个部分的时间并不长，因此想要进入BIOS的CMOS设置程序，需要在一开机就不停地按对应的特殊热键，错过了这个时间段就只能重启再来。</p><p>● 系统自举装载程序：在自检成功后将磁盘相对0道0扇区上的引导程序（即MBR分区表）装入内存，让其运行以装入操作系统。</p><p>● 主要I/O设备的驱动程序和中断服务：由于BIOS直接和系统硬件资源打交道，因此总是针对某一类型的硬件系统，而各种硬件系统又各有不同，所以存在各种不同种类的BIOS，随着硬件技术的发展，同一种BIOS也先后出现了不同的版本。</p><h1 id="2、UEFI"><a href="#2、UEFI" class="headerlink" title="2、UEFI"></a>2、UEFI</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>由于BIOS是使用汇编语言进行编写，因此在操作界面上相对比较简陋（没有做出太多的图形化界面），对于技术人员来说维护升级也比较麻烦，不可能使用鼠标操作，更加别说截图之类的功能了。</p><p>更致命的是，BIOS已经存在了二十多年，可是其发展却是极度缓慢，已经阻碍到了与其相关的硬件的发展，首当其冲的就是CPU。至此，个人PC行业消费市场的龙头老大英特尔坐不住了，由它主导，开始推广一种名为EFI的技术，旨在用其取代传统的BIOS。</p><p><em>小七注：在x86系列处理器进入32位的时代，由于兼容性的原因，新的处理器(i80386)保留了16位的运行方式(实模式)，此后多次处理器的升级换代都保留了这种运行方式。甚至在含64位扩展技术的至强系列处理器中，处理器加电启动时仍然会切换到16位的实模式下运行。英特尔将这种情况归咎于BIOS技术的发展缓慢。自从PC兼容机厂商通过净室的方式复制出第一套BIOS源程序，BIOS就以16位汇编代码，寄存器参数调用方式，静态链接，以及1MB以下内存固定编址的形式存在了十几年。虽然由于各大BIOS厂商的努力，有许多新元素添加到产品中，如PnP BIOS，ACPI，传统USB设备支持等等，但BIOS的根本性质没有得到任何改变。这迫使英特尔在开发更新的处理器时，都必须考虑加进使效能大大降低的兼容模式。有人曾打了一个比喻：这就像保时捷新一代的全自动档跑车被人生套上去一个蹩脚的挂档器。<br>——摘自百度百科</em></p><p><strong>EFI（Extensible Firmware Interface）的中文名一般叫做可扩展固件接口，是一种由英特尔主导的用于替代BIOS的方案。</strong>有人称EFI是“未来的类PC的电脑系统中替代BIOS的升级方案”，但实际上，这种说法有一些不太严谨，因为EFI已经被弃用，如今使用的是基于EFI标准1.10版本发展而来的UEFI标准。</p><p>如今UEFI早已经普及开来，近些年发售的主板（包括笔记本）基本都支持UEFI和BIOS两种解决方案，前者一般被称为UEFI，后者则称为Legacy。</p><p>那么为什么EFI的前面会多了一个U，变成UEFI了呢？<strong>实际上，EFI可以被理解为是在BIOS和UEFI过渡时期的产物。</strong></p><p>当传统的BIOS（Legacy BIOS）阻碍了计算机硬件发展的时候，英特尔主导推行EFI标准，但是其他企业自然不会那么傻，让英特尔一人主导了整个EFI标准，正所谓“一流企业卖标准”，由Intel, AMD, American Megatrends, Apple, Dell, Hewlett Packard Enterprise, HP，IBM, Insyde Software, Lenovo, Microsoft 和Phoenix Technologies<strong>这12家计算机软硬件和零售的巨头在2005年联合成立了一个名为Unified Extensible Firmware Interface Forum（简称Uefi Forum）的非营利性组织，专门负责制定和管理新一代的EFI标准，随后就基于最后一版的EFI标准（1.10）发布了全新的UEFI标准，EFI也就“变”成了UEFI（全称“统一的可扩展固件接口”，Unified Extensible Firmware Interface）。</strong></p><p><img src="https://resource.tinychen.com/BIOS%E4%B8%8EUEFI%20%282%29.jpg"></p><p>▲图为UEFI协会的Logo</p><h2 id="2-2-UEFI的优势"><a href="#2-2-UEFI的优势" class="headerlink" title="2.2 UEFI的优势"></a>2.2 UEFI的优势</h2><p>那么相对于传统的BIOS，UEFI的优势在哪里呢？</p><p>首先，与使用汇编语言编写的传统BIOS不同，UEFI使用C语言编写，因此整体风格上也就延续了C语言风格的参数堆栈传递和动态链接，模块化特征显著。使用C语言开发和维护对于技术人员来说也方便了很多，更容易实现更强的健壮性和容错性。</p><p>UEFI内置图形驱动功能，可以提供一个高分辨率的图形化界面，用户进入后完全可以像在Windows系统下那样使用鼠标进行设置和调整，操作上更为简单快捷。<strong>同时由于UEFI在逻辑上可分为硬件控制与软件管理两部分，前者属于标准化的通用设置，而后者则是可编程的开放接口，</strong>因此主板厂商可以借助后者的开放接口在自家产品上实现各种丰富的功能，包括<strong>截图、数据备份 、硬件故障诊断、脱离操作系统进行UEFI在线升级等，</strong>功能上也要比传统BIOS更多、更强。</p><p><em>小七注：UEFI可以识别FAT/FAT32文件系统格式的U盘，因此可以通过特殊热键将截图存储在U盘中或者是将UEFI的设置导出到U盘中进行备份，还可以将升级文件放入U盘中进行UEFI系统的升级，部分高端的主板甚至可以直接在UEFI环境下联网升级。</em></p><h2 id="2-3-UEFI的组成"><a href="#2-3-UEFI的组成" class="headerlink" title="2.3 UEFI的组成"></a>2.3 UEFI的组成</h2><p><img src="https://resource.tinychen.com/BIOS%E4%B8%8EUEFI%20%283%29.jpg"></p><p>▲UEFI在逻辑上可分为软件和硬件两个部分</p><p>UEFI在概念上可以分为<strong>平台初始化框架和UEFI Image</strong>两大部分，细分下来则由初始化模块（Pre EFI，简称PEI）、驱动执行环境（DXE）、驱动程序（UEFI Drivers）、兼容性支持模块（CSM）、UEFI应用（UEFI Applications）和GUID磁盘分区（GPT分区）/ OS Loaders组成。</p><p>初始化模块和驱动执行环境是UEFI的运行基础，通常被整合在主板的闪存芯片中，这点与传统BIOS是比较类似的。而这两者也被归属在UEFI的平台初始化框架中。</p><p><strong>驱动程序、兼容性支持模块、UEFI应用和GUID磁盘分区则归属于UEFI Image。</strong></p><p><img src="https://resource.tinychen.com/BIOS%E4%B8%8EUEFI%20%284%29.jpg"></p><p>▲图为UEFI各部分组件之间的交互逻辑</p><p><strong>●初始化模块：</strong>开机的时候初始化模块首先得到执行，负责CPU、主板芯片及存储设备的初始化工作。</p><p><strong>●驱动执行环境：</strong>初始化完成后则载入驱动执行环境，即Driver Execution Environment，简称DXE，DXE是硬件的UEFI驱动程序加载和运行的必要基础环境。</p><p><strong>●驱动程序：</strong>DXE通过枚举的方式加载各种总线及设备的驱动，而这些驱动程序则可以放置在系统的任意位置，只要确保其可以按顺序被正确枚举即可。硬件的UEFI驱动一般是放置在硬盘的UEFI专用分区中，只需要系统正确加载这个硬盘，对应的驱动就可以正常读取并应用</p><p><strong>●兼容性支持模块：</strong>兼容性支持模块（CSM）是有点特殊的过渡时期的产物，是为了让不具备UEFI引导功能的操作系统也能在UEFI环境下顺利完成引导开机，这个兼容性支持模块将为UEFI提供类似于传统BIOS的系统服务，以此保证UEFI在技术上能有良好的过渡。</p><p><em>小七注：Windows操作系统在vista之后均已支持UEFI启动，而需要实现UEFI启动，还需要主板支持，且硬盘分区表要是GPT分区表，此三者缺一不可，缺一都要使用CSM才可以正常开机进入操作系统。</em></p><p><strong>●UEFI应用：</strong>硬件初始化完，操作系统启动之前的核心应用，比如：启动管理（多硬盘多系统的启动顺序）、BIOS设置、UEFI Shell、诊断程式、调度和供应程式、调试应用、包括CPU的超频，主板散热风扇的转速等等都可以在这里控制。</p><p><img src="https://resource.tinychen.com/BIOS%E4%B8%8EUEFI%20%285%29.jpg"></p><p>▲图为UEFI Shell</p><p><strong>●GUID磁盘分区/ OS Loaders：</strong>GPT分区表作为UEFI标准中不可或缺的重要一环，突破了老旧的MBR分区表最大仅支持2TB硬盘，四个主分区、分区表容易丢失等不足，补足了UEFI启动三要素（主板、硬盘分区表、操作系统）中硬盘分区表这关键的一环。</p><h2 id="2-4-UEFI的未来"><a href="#2-4-UEFI的未来" class="headerlink" title="2.4 UEFI的未来"></a>2.4 UEFI的未来</h2><p>UEFI有着如此多的好处，不仅收到了广大电脑用户的喜爱，同时也受到了……额……一些居心叵测的人的喜爱。由于UEFI使用C语言编写，在难度上较汇编语言降低了很多，因此容易遭到黑客的破解或者是恶意软件的植入，加上UEFI强大的应用能力（相对BIOS而言），在UEFI搞一个恶意软件什么的不是美滋滋？</p><p>尽管如此，UEFI依然是目前的主流趋势。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;BIOS和UEFI这两个概念对于刚接触计算机硬件的朋友来说可能有些难以区分，最近正好有空，就稍微整理了一下有关知识和大家分享交流一下，如文中有任何错误不足，还望不吝赐教。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>手机充电技术发展史</title>
    <link href="https://tinychen.com/20170814-phone-charging-dev/"/>
    <id>https://tinychen.com/20170814-phone-charging-dev/</id>
    <published>2017-08-14T07:00:00.000Z</published>
    <updated>2017-08-14T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着科技的发展，智能手机的性能愈发强大，普及度也是越来越高，而它在我们的日常生活中的地位更是水涨船高。但是在电池技术没有什么突破性发展的今天，续航成了所有手机不得不提的一项参数，而充电作为其中不可或缺的一环，也是被各大手机厂商不遗余力地进行宣传。今天小七就带大家来简单了解一下手机充电技术的发展史。</p><span id="more"></span><h1 id="1、充电知识"><a href="#1、充电知识" class="headerlink" title="1、充电知识"></a>1、充电知识</h1><p>在继续后面的故事之前，我们需要先补充一点基础的充电方面的知识。</p><h2 id="1-1-知识点一：充电的电压以及发热"><a href="#1-1-知识点一：充电的电压以及发热" class="headerlink" title="1.1 知识点一：充电的电压以及发热"></a>1.1 知识点一：充电的电压以及发热</h2><p>目前大多数手机使用的电芯都是单锂或者多并锂组成，电芯工作电压在3.0V<del>4.4V之间，均压平台3.6V-3.8V。当进行充电行为时，电能进入手机后通过手机内的降压电路处理后再输出3.3</del>4.5V左右的电压给电池充电。而这个电压转换压降过程，就是由手机内的充电管理IC模块负责。<br><strong>这个电压转换压降过程会产生发热，电压差距越大产生的热量会越多。</strong></p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2802%29.jpg"></p><p>▲图为充电器工作原理示意图</p><h2 id="1-2-知识点二：充电的电流以及功率"><a href="#1-2-知识点二：充电的电流以及功率" class="headerlink" title="1.2 知识点二：充电的电流以及功率"></a>1.2 知识点二：充电的电流以及功率</h2><p>手机充电时的电流并不是一直不变的。优秀的充电方案应该是手机需要多大的功率，充电器就给多大的功率，而不是手机只能被动地接受充电器一成不变的功率。<br>当手机处于低电量的时候，手机会要求充电器火力全开，这就是所谓的充电峰值。在这个时候充电速度非常快，但是损耗和发热也很大。<br>充电时，随着手机电量的上升，充电的功率往往是逐渐下降的。当手机的电量充到60%~80%的时候（具体看手机厂商的设定），充电电流会减小，以达到减少电池损耗和手机发热量等目的。<br>在后面这个阶段，电流往往只有几百毫安甚至更小，充电的功率也很小，也就是我们常说的涓流充电。<br>需要注意的是，涓流充电是大功率充电时代的产物，对于5V/500mA的充电器是没有涓流充电这么一说的。（电流本来就很小）</p><p><strong>下面开始正文，本文分为“史前”时期、初露锋芒、快充现世、高低之争和一统天下五个部分。</strong></p><h1 id="2、“史前”时期"><a href="#2、“史前”时期" class="headerlink" title="2、“史前”时期"></a>2、“史前”时期</h1><p>我们先来说一下当年功能机还统治着地球的时期，比较早期的充电器和现在的充电器主要有三个比较明显的区别：</p><ul><li>①    以前的充电器并不像现在这样数据线和适配器（充电头）分开，而是一体的，也就是充电头连着数据线；</li><li>②    以前的充电器功率其实很小，一般都是5V/500mA,也就是2.5W（瓦）的功率；</li><li>③    以前的充电器单纯只能充电，而现在负责的充电器把数据线拔下来接到电脑上还可以进行数据传输（同时也能充电）</li></ul><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2803%29.jpg"></p><p>▲图左为老式一体充电器（黑），右为新式分体式充电器（白）</p><blockquote><p>注：此处并非指分体的充电器要优于一体的充电器，实际上两者各有优劣</p></blockquote><p>为什么当时的充电器功率这么小呢？主要原因有两个：</p><ul><li>①    手机相对功能少，耗电少，因此电池也小（大多数是几百毫安时/mAh），不需要太大功率的充电器；</li><li>②    大功率的充电器制造难度大，成本高，在当时的环境下显然不划算；</li></ul><p>但是随着手机的发展，尤其是安卓手机的崛起，手机功能也开始增多，耗电量也开始增大，电池容量也开始突飞猛进，到了动则上千毫安时的时代。这个时候如果还是继续使用着5V/500mA的充电器，那么就会出现充电非常慢，而且会出现边充电边玩手机，电量还是越来越少的这种”入不敷出”的情况。</p><p>在智能手机萌芽的时候，USB接口在手机上也随之普及开来。而手机充电技术的变革，就从这里开始了。</p><h1 id="3、初露锋芒"><a href="#3、初露锋芒" class="headerlink" title="3、初露锋芒"></a>3、初露锋芒</h1><p><strong>比较早开始出现的充电标准是USB BC 1.2（BC是Battery Charge的简称）。</strong></p><p>USB规格第一次是于1995年，由Intel（英特尔）、NEC（日本电气株式会社）、Compaq（康柏）、DEC（美国数字设备公司）、IBM（国际商业机器公司）、Microsoft（微软）、Northern Telecom（北方电信公司）等七家公司组成的USB IF（USB Implement Forum）共同提出。</p><p><strong>BC 1.2的出现，让同时进行充电和数据传输成为了主流。</strong></p><p>USB BC1.2标准由USB IF协会于2010年颁布，指的是可直接为关闭的便携式设备电池充电，成为建立通过USB端口为电池充电的正确方式的关键标准。</p><p>说白了，BC1.2就是可以给包括手机在内的便携式设备使用USB接口充电（包括关机充电）的一套官方标准。</p><p>BC 1.2出来之前，除了日渐强大的只能手机，诸如数码相机、DV等便携式设备也开始逐渐受到人们的青睐。这些便携式设备与电脑之间的数据交换也变得频繁了许多，因此，USB接口在这些设备上开始普遍起来。</p><p>尽管USB接口出现的目的是为了传输数据和连接诸如键盘鼠标的设备而并不是充电，但是在这时候，如果能使用USB接口给这些设备充电，那么就会方便很多，USB BC 1.2也就应运而生了。</p><p>目前市面上主流的USB接口可以分为USB 2.0和USB 3.0两种，其中两者的电压都是5V，而电流方面USB 2.0为500mA，USB 3.0为900mA。</p><blockquote><p>注：</p><ul><li>①    USB 3.1 gen1其实就是USB 3.0（最大传输速率仍然是5Gb/s），而USB 3.1 gen2才是升级版，最大传输速率可达10Gb/s，最大输出电压/电流可达20V/5A）；</li><li>②    传输数据的USB 2.0的线缆中只有四根线，充电的MicroUSB 2.0线缆中有五根线，而USB 3.0中升级为了九根线；</li><li>③    常见的USB分线器/集线器/HUB等可以将一个USB接口分出多个USB接口的设备，在没有独立外接电源的情况下，很有可能因为给每个USB接口提供的电流不足而导致连接在该USB接口上的设备无法正常使用甚至是损坏，因此大家在使用这类产品的时候一定要小心。</li></ul></blockquote><p>USB BC 1.2最大的功劳就是使得USB充电的最大电流能够达到1500mA也就是1.5A，尽管它没有提升电压（因为要适配其他便携设备），但是将电流提升到1.5A之后，USB接口充电的最大功率就能够达到7.5瓦（W），这个时候的USB BC 1.2已经足够应付当时的手机充电了。</p><p>USB BC 1.2的出现不仅使得当时的USB充电规范混乱的场面得到了规范，而且它对于集线器/分线器/HUB也有着很好的支持，特别需要注意的是，为了保证每个接口能有足够的电流，支持BC 1.2的集线器/分线器/HUB往往都需要外接电源。 </p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2804%29.jpg"></p><p>▲图为USB BC 1.2工作方案</p><p><strong>前排提示：千万不要小看USB IF协会哦</strong></p><h1 id="4、快充现世"><a href="#4、快充现世" class="headerlink" title="4、快充现世"></a>4、快充现世</h1><p>尽管USB BC 1.2标准已经能满足当时的充电需求，但是科技的发展是无止境的。随着智能手机的发展，对充电的速度再次提出了更高的要求。而就在这个时候，发布USB BC 1.2标准的USB IF协会居然没有给出一套可行的解决方案，而这就为后来的快充标准大混战埋下了伏笔。</p><p>到了2013，高通大佬就出场了。当时高通一拍桌子，振臂一呼：同志们，跟着我有肉吃！它率先突破了USB IF协会关于USB BC 1.2标准中的1.5A的最大电流限制，将其提升到了2A也就是10W的功率（5V/2A），充电速度大幅提升。</p><p><strong>这就是高通的QuickCharge快充1.0版本，也就是QC 1.0快充。</strong></p><p>了解高通的同学应该都知道，高通在手机芯片和通信专利方面可谓是一方巨擘，而凭借着这个霸主级别的地位优势，高通可以迅速推广自己的QC快充标准。然后，就可以坐着收QC标准的授权费。</p><p>而到了2014年，情况就有些不一样了，这个时候虽然Type-C的数据线已经面世，但却还没有普及，手机上依旧还使用着MicroUSB 2.0接口的数据线（也就是大家常说的安卓线）。前面我们已经提到了，由于MicroUSB 2.0的数据线内部只有四根线，对电流的承载能力非常有限，2A基本就是极限了，而Type-C接口优于设计的优越性，接口的触点非常多，因此内部可以增加的线比MicroUSB 2.0要多得多,最大可支持5A的电流。所以Type-C接口与生俱来就对大电流有着极大的友好。</p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2805%29.jpg"></p><p>▲图左为Type-C型接口，图右为MicroUSB 2.0接口</p><blockquote><p>注：</p><ul><li>①    Type-C接口只是一种接口类型，由于体积小，正反可插，以及可以兼容诸多协议，因此有着“数据接口的终极形态”之称，但也因为其兼容了诸多协议，可以集成视频、音频、数据、供电等各种接口和协议（如雷电三），导致目前市面上的Type-C接口功能不一，对新手来说比较不友好。</li><li>②    常见的MicroUSB除了2.0，还有MicroUSB 3.0，手机上有三星的note3和s5采用了这种接口。但是由于MicroUSB 3.0体积太大，因此后来就没有手机采用这种接口了，反倒是移动硬盘现在用的比较多。</li></ul></blockquote><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2806%29.jpg"></p><p>▲图为MicroUSB 3.0数据接口</p><blockquote><p>注：以下提及的MicroUSB如无标注则均为MicroUSB 2.0</p></blockquote><h1 id="5、高低之争"><a href="#5、高低之争" class="headerlink" title="5、高低之争"></a>5、高低之争</h1><p>我们继续回到快充发展史的2014年。</p><p>而这个时候，如果还要继续通过增大电流的方法来提升充电功率，MicroUSB那孱弱的身躯可承受不了这巨大的电流。于是乎，以高通QC为首的高压快充方案和以OPPO VOOC为首的低压大电流快充方案就此分道扬镳，而快充协议的混战也从此展开。</p><p><strong>先来说说高通这边的高压快充方案。</strong></p><p>我们都知道P（功率）=U（电压）*I（电流），而既然当时增大电流不行，那就增大电压呗，同样是18W功率的快充，如果要用5V电压的话，电流已经超过了3A，正常的MicroUSB是绝对受不了的。而使用12V的电压，电流就只需要1.5A，一下子电流就降下来了。这种方案的一大好处就是成本比较低，而坏处就是将充电器的电压升到这么高，在二次降压过程中手机的充电管理IC产生的热量也是极大的，所以高压快充的一大特点就是手机发热严重。</p><blockquote><p>注意，1.5A是QC标准比较推荐的电流，因为2A是Micro USB的极限，业界的普遍共识是，不要把器件用到极限值，而是要预留余量。</p></blockquote><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2807%29.jpg"></p><p>▲图为高压快充方案示意图</p><p><strong>接下来我们再来说说OPPO的VOOC低压大电流快充。</strong></p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2808%29.jpg"></p><p>▲图为低压大电流快充原理示意图<br>和高通不同，OPPO这边采用的是另外一种解决方案。不是说正常的MicroUSB数据线承载不了这么大的电流嘛，那就把充电器从头到尾彻底改造一番。OPPO采用在当时来说相当另类的解决方案，在普通的MicroUSB数据线中增加了两个个触电，使得内部从五根线变成了七根线，充电头也因为整合了IC电路而变得奇大无比。</p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2809%29.jpg"></p><p>▲图片来自充电头网</p><p>不仅如此，因为从头改造电路，所以数据线只能用官方的特制数据线，一般的数据线无法达到快充的效果，而且这样做的成本也很高，大电流充电对于电池的损耗也更为明显，很多使用初期的VOOC快充的手机在使用大约一年之后，电池续航严重下降。</p><p>但是，付出了如此巨大的代价，OPPO也不是没有收获的。</p><p>初代的VOOC快充就凭借着5V/5A的25W超大功率，<strong>在充电速度上一骑绝尘，</strong>使得其余手机都难以望其项背。而由于它将发热源外置到充电器中，手机在充电时发热量明显小于高压快充方案。既然VOOC快充如此优秀，OPPO自然也不能藏着掖着，于是乎……</p><p><strong>充电五分钟，通话两小时的广告词响彻大江南北。</strong></p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2810%29.jpg"></p><p>▲图为OPPO R11官方宣传文案</p><p><strong>低压大电流方案虽然成本高，且对充电设备有比较高的要求（尤其是线材），但是手机上的发热量小，充电速度更快。</strong></p><h1 id="6、一统天下"><a href="#6、一统天下" class="headerlink" title="6、一统天下"></a>6、一统天下</h1><p>随后联发科也推出自己的Pump Express（PE）和后来的Pump Express Plus（PEP）快充，而魅族的mCharge快充就是基于此，华为早期推出了Fast Charge Protocol（fsp）快充，国际巨头三星也有自己的AFC（Adaptive Fast Charging）快充，而小米和努比亚等一众使用高通SoC作为自己旗舰手机SoC的厂商也是使用的高通的QC快充。以上提到的这些都是使用的高压快充方案。</p><p>当然低压大电流方案这边也不是没有援军，比如说一加。一加CEO刘作虎作为OPPO前高管，尽管一加使用的是高通的SoC，但是在一加推出自己的快充方案时，还是选择了低压大电流方案，也就是一加Dash闪充。</p><p>看到这里是不是觉得高压快充方案已经赢得了胜利，低压方案只能在一旁苟延残喘？</p><p>当然不是！事情在2016年发生了转变。</p><p>2016年，Type-C接口已经普及得七七八八了，安卓旗舰手机基本都是使用这种接口，这就为低压方案的翻身提供了有利条件。（尽管Type-C接口支持大电流，但是其线材依旧比较粗）</p><p>这一年，华为改变了快充方案，推出了自家的另一类快充（scp），全称Super Charge Protocol，搭载的机型有荣耀Magic、Mate9和P10/plus，使用的是4.5V/5A的低压大电流方案。</p><p>而联发科这边的PEP快充，也转投了低压方案，魅族最新发布的旗舰Pro7 Plus搭载的mCharge4.0也是使用了低压方案，早前的mCharge3.0属于高压快充方案（24W），充电器输出电压最高可达12V；而mCharge4.0（25W）属于低压大电流方案，充电器输出电压5V，电流可达5A。</p><p>努比亚也推出了自家的快充方案，名为NeoCharge，使用的是5V/5.2A的26W低压大电流快充方案，搭载在努比亚2017年发布的M2上。</p><p>至于小米……额……好像没有低压快充方案，目前已有的澎湃S1上搭载有9V/2A的18W的澎湃快充，是典型的高压快充方案。不知道澎湃S2会不会给我们带来惊喜呢？</p><p>再说说高通，高通似乎也发现了低压方案的优势，在最新的QC4快充上，也使用了低压大电流方案，不过于此同时也还支持着高压快充方案。</p><p>尽管目前低压大电流方案已经基本统治了快充，但是各家的快充协议互不兼容，可以说给消费者带来了很大的苦恼。</p><p>这个时候，又到USB IF协会出场了。</p><p><strong>USB IF协会之前当然也没有闲着，发布了基于USB 3.1中Type-C接口的USB Power Delivery（简称USB PD）的充电标准，最高可以提供100W（20V/5A）的充电功率，旨在统一便携移动设备的充电标准。</strong>USB IF的梦想是美好的，只是现实往往比较残酷。各家厂商自己做手机，再做快充标准，当然都是首选自家的快充协议，USB PD标准也就被晾到了一边。</p><p>但是梦想还是要有的，万一实现了呢？</p><p>要知道，USB IF协会的背景可不弱（都是行业巨头联合成立的），而谷歌官方也是表示安卓一定要支持USB PD协议，不要乱搞些有的没的快充协议。加上USB IF协会积极与各国以及各个高端实验室沟通，其最新发布的USB PD3.0已经成功收编高通的QC4快充协议，至此，高通QC、联发科PEP、华为fcp、scp，OPPO的VOOC等快充协议基本被USB PD3.0收纳。而厂商日后研发自己的快充技术，只要基于USB PD的协议即可。USB PD协议有望一统江湖。</p><p><img src="https://resource.tinychen.com/%E6%89%8B%E6%9C%BA%E5%85%85%E7%94%B5%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2%2811%29.jpg"></p><p>▲图为USB PD3.0协议</p><p><strong>但是，尽管前途一片光明，道路还是一片崎岖，快充大一统，还是有不短的路要走。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着科技的发展，智能手机的性能愈发强大，普及度也是越来越高，而它在我们的日常生活中的地位更是水涨船高。但是在电池技术没有什么突破性发展的今天，续航成了所有手机不得不提的一项参数，而充电作为其中不可或缺的一环，也是被各大手机厂商不遗余力地进行宣传。今天小七就带大家来简单了解一下手机充电技术的发展史。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>王志东和新浪</title>
    <link href="https://tinychen.com/20170810-wzd-n-sina/"/>
    <id>https://tinychen.com/20170810-wzd-n-sina/</id>
    <published>2017-08-10T07:00:00.000Z</published>
    <updated>2017-08-10T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起新浪，大家第一反应可能就是微博。没错，微博如今在国内确实有着举足轻重的影响，但是谁又能想到，在17年前，这家公司还因为互联网危机而解雇了身为CEO的创始人，并免去其董事身份。而这个遭遇了乔布斯老爷子那般被扫地出门的厄运之后，再也没能回到自己创办的公司。</p><span id="more"></span><p><strong>这个人，就是王志东。</strong></p><h1 id="1、莞中学霸，北大才子"><a href="#1、莞中学霸，北大才子" class="headerlink" title="1、莞中学霸，北大才子"></a>1、莞中学霸，北大才子</h1><p>让我们把时间的指针拨回五十年前。</p><p>1967年，那时，文革才刚刚开始，国家的经济还是一片荒芜。在广东虎门的一个小农村里，随着婴儿的啼哭声响起，这个世界又迎来了一个新生命。</p><p>王志东的少年时期，可以说是非常困难了。不过好在父母两人都是教师，家里住的是单位的房，虽然不可能每顿都有肉吃，但是赶上运气好的时候，杀只鸭子，全家人可以吃两星期。至于那些高档的生活用品，就更加不可想象了。</p><p>捡块砖头，拾个木块，这就是王志东小时候的玩具。家里只能给他一个放瓶瓶罐罐的小柜子，毕竟除了他，还有三个孩子。</p><p>幼年的艰苦并没有影响到他的学业，小学时就因为连跳两级升入初中，而获得学校的特许，能自由进入学校的图书馆。父亲也因此奖励了他一个他梦寐以求的电烙铁，这在王志东的无线电生涯中，可谓是浓墨重彩的一笔。</p><p>在就读东莞中学（高中）时，他不仅参加了学校的无线电兴趣班，后来还因设计了一种教学演示用的高阻电压表而获得了一个教学仪器比赛的第一名。</p><p>1984年，王志东考入了北大无线电系。这在当时，可以说是非常厉害了。</p><p><strong>而王志东第一次接触计算机，就有点意思了。</strong></p><p>当时刚入校，学校组织新生参观机房，老师一边演示一边问有谁学过。在当时的中国计算机可还是稀罕物件儿，出身贫困的王志东身处在东莞这样的小城市（当时），自然是没有见过的。但身边好几个北京上海的同学都说学过，王志东不知咋滴就跟着说学过。而他又正好站在前面，老师就让他上去操作一下。之后就是脸红脖子粗，什么都不知道了。</p><p>这件事不但没有打压王志东的斗志，反而激起了他不服输的精神。自学一个月后，王志东以不错的成绩提前考试并通过这门课程。在让老师惊讶之余，也得到了老师的重视。</p><p>1987年，王志东还没毕业，但是却已经利用课余时间到中关村搞些小买卖。</p><p>踏上中关村这片孕育了中国互联网雏形的土地，本以为在学校学得差不多的王志东感觉找到了第二个大学。他进入了一家小公司，一个人从头拼到尾，拉客户、谈判、讲价、签合同、装货、调试、配软件、培训、收费都要自己来。而正是这些在他的同学眼里看来“不搞学问、赚点小钱、特俗”的经历，给他在客户、同行和技术等方面夯实了基础。</p><p>毕业之后，王志东在方正和新天地公司待了一段时候，最后进入了四通集团，成为了四通利方公司的总经理。</p><p><strong>而四通利方，正是新浪的前身之一。</strong></p><h1 id="2、网景上市，泡沫初显"><a href="#2、网景上市，泡沫初显" class="headerlink" title="2、网景上市，泡沫初显"></a>2、网景上市，泡沫初显</h1><p>1995年8月9日，硅谷一家创始资金只有四百万美元的小公司——网景，在华尔街上市的几个小时后，瞬间成为了二十亿美元的巨人。网景的上市，瞬间引爆了美国大众和华尔街。<strong>通用动力公司花了四十三年才使市值达到二十七亿美元，而网景，只用了一分钟。</strong></p><p><img src="https://resource.tinychen.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2802%29.jpg"></p><p>美国计算机历史博物馆策展人马克·韦伯如是说道。 </p><blockquote><p><strong>“网景公司的上市证明，一个基于万维网的公司，可以引起商界的重视，这是互联网繁荣的开始。”</strong></p></blockquote><p>网景一夜崛起的神话，再加上当时雅虎的成功，杨致远成为新美国梦的象征，互联网技术第一次向世人展现出惊人速度与庞大规模，整个硅谷都为互联网而疯狂。</p><p><img src="https://resource.tinychen.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2803%29.jpg"></p><p>在互联网的飓风中，整个硅谷都忙得人仰马翻，脑子也没办法再理性地思考了，很多人都失去了方向。果敢与理性著称的风险投资家们，在这股前所未有的气氛中，变得盲目而疯狂。</p><blockquote><p>“我想上市，像苹果的乔布斯一样。“王志东说。</p></blockquote><blockquote><p>“你现在没办法上市，要经过几个步骤：调整业务方向、管理架构、融资等等。”摩根斯坦利银行的一位董事总经理回应。</p></blockquote><blockquote><p>“那你们能帮我吗？”王志东问。</p></blockquote><blockquote><p>“你的公司请不起我们！”对方答道。</p></blockquote><p>这是1995年7月发生的一幕，当时王志东正赴美寻求风险投资。而摩根斯坦利银行就是帮助网景成功上市的那家投行。</p><p><strong>1995年底，王志东应IBM邀请，第三次访美。</strong></p><p>前两次访美，每次他都要带一大箱子的科技杂志，他甚至还想在硅谷设立一个办事处，这样便能有一个能够了解世界的通道。但是互联网改变了他的想法。</p><p>第三次访美时，王志东用一个存贮在一个附在科技杂志封底的软盘中的上网账号，在美国酒店的房间里利用电话线第一次连上了网络。<strong>王志东当时就意识到：这样的技术一旦被推广开来，人们猎取信息的速度、数量和便捷性，都会呈现爆炸性的增长。就像相对论里提到的‘虫洞’一样，时间与空间的距离可以被瞬间穿透，而这一浩大的工程一旦展开，自然会带来无限商机！</strong></p><p>英特尔创始人之一的安迪·格罗夫曾说：</p><blockquote><p>“能够识别风向的转变，并及时采取正确的行动以避免沉船，对于一个企业的未来是至关重要的。”</p></blockquote><p>在接触了互联网之后，从在方正做程序员开始就在做中文平台的王志东对于软件技术的想法发生了裂变。<strong>他认为，如果把软件和互联网结合起来，将在一个新的平台上产生一系列新的应用，这就是下一个风口。</strong></p><p>事实证明了王志东的预判是正确的。今天，那怕只是你手机上的一个计算器APP，都可能需要联网获取汇率信息来帮助你完成货币转换。</p><p><strong>而当时的王志东认为：互联网会给他们带来一个全新的游戏规则——他们有可能去打破旧的体系。中国IT业怎么做都是在微软的阴影下，就是把微软拿走还有其他公司，作为一个后来者，最好的办法就是等新的游戏规则出来的时候，自己和竞争对手都站在同一起跑线上，各自的优势也就发挥出来了。</strong></p><p>1996年4月29日，四通利方的 <a href="http://www.srsnet.com/">www.srsnet.com</a> 中文网站正式开通。</p><p><strong>四通利方想成为华人首选资讯网站的构想渐渐浮现出来。</strong></p><h1 id="3、四通华渊，新浪面世"><a href="#3、四通华渊，新浪面世" class="headerlink" title="3、四通华渊，新浪面世"></a>3、四通华渊，新浪面世</h1><p>“当时特别担心，这要是吵翻了，人家一生气不开车送我，恐怕就要一个人客死在美利坚新大陆了。”</p><p>在回忆当时自己赴美和华渊网谈判合并事项时，王志东调侃道。</p><p>当时，四通利方想成为华人首选资讯网站，华渊网（Sinanet）是一个不得不面对的强劲对手。但是，有意思的是，四通和华渊尽管都看对方不过眼，想要消灭掉对方，但却谁都没有这个能力把对方吃下。</p><p>98年9月，王志东和华渊网CEO姜丰年在北京会面，30分钟后，姜丰年迫不及待地提出了合并的想法，而王志东也表示不排除任何形式的合作。</p><p>实际上，当时占有中国大陆市场的四通想要进军美国和台湾市场，而占有美国市场的华渊网想要进军中国大陆市场，狭路相逢，两者必有一战。更何况旁边还有着虎视眈眈，随时可能杀入局的雅虎。</p><p>尽管在合并谈判过程中波折重重，但是王志东还是凭借着中国大陆市场巨大的潜力，使得合并方案按照他的设想进行。</p><p><strong>广告大师克劳德·霍普金曾说：恰当的名称本身就是广告。</strong></p><p>而新浪，正是如此。</p><p><img src="https://resource.tinychen.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2804%29.jpg"></p><p><strong>合并后的网站英文名确定为Sina，而当时的员工则根据音译确定中文名为“赛诺王“。当时印刷品即将交付印刷，而王志东却对姜丰年说：“等一下，明天我给你回音。”第二天，他告诉对方一个名称：新浪。</strong></p><h1 id="4、新浪模式，赴美上市"><a href="#4、新浪模式，赴美上市" class="headerlink" title="4、新浪模式，赴美上市"></a>4、新浪模式，赴美上市</h1><p>1999年，新浪、搜狐、网易等中国第一批互联网企业已经在红红火火地运营着，没有人提出它们的生存有法律上的问题。但在它们酝酿出境上市时，需要得到包括信息产业部、证监会等部门的审批，而这些犹如潜藏的定时炸弹一般的合规问题突然爆发，首当其冲的就是新浪。</p><p><strong>在当时的中国，有着这么一条规定：放开经营的电信业务，一律不允许境外各类团体、企业、个人以及在中国境内已兴办的外商独资、中外合资和合作企业经营或者参与经营，也不得以任何形式吸引外资参股经营。</strong> </p><p>尽管在2001年12月11日，为了适应中国加入世贸的要求，信息产业部决定废止上述的规定。不过这些都是后话了。</p><p>在新浪筹划赴美上市的那段时间里，王志东白天要去信息产业部的办公室给主管领导们解释互联网和新浪的情况，晚上还要回到公司和律师一起研究新浪的股权结构、资本、现金、人流、架构等等。</p><p><strong>最后王志东想出来一个模式：一个公司没法上市，那就分为三个，其中做互联网内容服务的留在国内，不上市；上市的是美国公司，不在中国做互联网业务。</strong></p><p><strong>这就是后来被包括搜狐、网易在内的很多互联网公司使用的新浪模式。</strong></p><p>当时的具体情况是这样的，被初步认可的方案是：一是要把提供互联网内容服务的运营权交到国内公司手里；二是提供互联网内容服务的必须是个全中资公司，上市公司在国内公司里不占任何股份；三是合约本身必须遵守国内的法律法规。</p><p>而根据新浪最后文本的招股说明书中，上市的是一家在开曼群岛注册的控股公司，拥有四个全资子公司：香港注册的利方投资有限责任公司、运行香港网站的香港新浪有限责任公司、美国加州注册的新浪在线（Online，包括北美和台湾两个网站）、以及在英属维尔京群岛注册的新浪有限公司。</p><p>其中上市主体的全资子公司之一利方投资有限责任公司成立于1993年3月，由它控股97.3%和四通集团下属的北京四通电子技术有限责任公司合资建立了北京四通利方信息技术有限责任公司。北京四通利方信息技术有限责任公司为一个技术服务公司，和国内的ICP公司仅发生商业协议关系。同时，另在国内注册成立一家北京新浪互动广告有限责任公司。四通利方向国内ICP提供技术服务，而国内ICP以双方商定的价格购买服务。</p><p><img src="https://resource.tinychen.com/%E7%8E%8B%E5%BF%97%E4%B8%9C%E5%92%8C%E6%96%B0%E6%B5%AA%2805%29.jpg"></p><p>（有兴趣的童鞋可以搜索一下新浪模式，这在商业上是非常著名的一个上市模式，在这里碍于篇幅，小七只能简述一下）</p><p>实际上，新浪当时的情况要更复杂一些，新浪赴美上市时，已经将关键业务剥离。虽然还是和拆分出来的公司有着千丝万缕的关系，但对于崇尚简单的投资者来说还是过于复杂。这必然会导致其上市筹措资金的能力被削弱。但王志东表示：尽管对投资者来说有遗憾，但这是当时他们可以拿出的最好的解决方案了。</p><p><strong>2000年4月13日11点，新浪开始挂牌交易，每股定价为17美元。当日以20.875美元收盘。当天交易额共达684.79万股，大约筹得资金6600万美元。</strong></p><p>新浪总算是赶上了赴美上市的末班车，而迎接他们的，是更大的危难。</p><h1 id="5、泡沫破灭，扫地出门"><a href="#5、泡沫破灭，扫地出门" class="headerlink" title="5、泡沫破灭，扫地出门"></a>5、泡沫破灭，扫地出门</h1><p>2000年，全世界都在兴奋地庆祝着新千年的到来，而一场意想不到的危机却悄无声息地降临了。从3月10日开始，纳斯达克指数在长达两年时间里，狂跌百分之七十八。七千五百亿美元的资产和六十万个工作岗位蒸发，只有不到一半的网络公司活过了2004年。</p><p>进入2001年，新浪股票价格一路下滑，跌破2美元。董事局的董事们纷纷抱怨新浪的财经状况，称王志东应该为这一状况负责。但其实当时整个互联网泥沙俱下，大家的日子都不好过，许多公司的股票价格与企业CEO的经营能力并没有太大的关系。但总有肤浅无知的董事会幻想着能够通过换帅之举来扭转乾坤。</p><p>据芝加哥当时一家统计机构统计，进2001年2月一个月，各大科技公司离职的CEO高达119人，比去年同期增长了37%。曾经高高在上的CEO也变得朝不保夕。</p><p>而王志东，也没有例外。</p><p><strong>2001年6月1日，新浪董事们决定免去王志东的CEO及董事身份。</strong></p><p><strong>王志东事后回忆：得到自己被解职的消息，有三个强烈的感觉。一是震惊，二是感觉被出卖了，三是想回家，想回到中国。</strong></p><blockquote><p>“互联网用如此短的时间内就创造了一场人类历史上影响全球的波澜，史无前例。辉煌的泡沫盒破碎，是互联网这个新生命能量的另一种表达。”</p></blockquote><p>——摘自央视纪录片《互联网时代》</p><p>后来的新浪还是挺过了危机，而王志东再也没有回到新浪，而是创办了点击科技。</p><p>王志东认为点击科技是他的另一个孩子，他说：以前攀登过几个高峰，现在终于你有机会去攀登一次新的高峰，这样人反而有一种很兴奋的感觉。到了春天更重要的是你要更努力地去耕作，你不把握好现在这个机会，错过这个机会的话，到了收获的季节，你有可能就一无所有。</p><p>不论如何，作为如今互联网的受益者，我们都应该向曾经的互联网元老们献上最崇高的敬意。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;说起新浪，大家第一反应可能就是微博。没错，微博如今在国内确实有着举足轻重的影响，但是谁又能想到，在17年前，这家公司还因为互联网危机而解雇了身为CEO的创始人，并免去其董事身份。而这个遭遇了乔布斯老爷子那般被扫地出门的厄运之后，再也没能回到自己创办的公司。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>MBR分区表</title>
    <link href="https://tinychen.com/20170808-mbr/"/>
    <id>https://tinychen.com/20170808-mbr/</id>
    <published>2017-08-08T07:00:00.000Z</published>
    <updated>2017-08-08T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前来说，比较主流的两种硬盘的分区表是MBR和GPT（GUID）。今天小七带大家了解一下比较旧一点的MBR分区表（相对于GPT）。</p><span id="more"></span><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p><strong>MBR这个概念首次出现，是在1983年的IBM PC DOS 2.0操作系统当中，因此也被称为DOS分区结构。</strong>实际上，MBR分区结构是一种应用非常广泛的硬盘分区结构，不仅仅是DOS，包括windows系列操作系统、Linux以及基于X86架构的UNIX操作系统等平台均有使用。</p><p><strong>MBR的英文全称是Main Boot Record（一说Master Boot Record）</strong>，翻译过来的中文名称是主引导记录。</p><p><strong>它主要有以下几个特点：</strong></p><p>1、在我们常见的电脑中，一般是BIOS+MBR、(U)efi+GPT的组合；</p><p>2、MBR分区表中单个分区最大仅支持2TB，而整个分区表最大也是仅支持2TB的硬盘；</p><p>3、MBR分区表最大只支持四个主分区（可少不可多），如果觉得四个不够用，可以使用三个主分区+一个扩展分区的组合（扩展分区仅能存在一个，但扩展分区下可以分出无数个逻辑分区）；</p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2801%29.jpg"></p><p>▲图为MBR分区常见的两种组成</p><h1 id="2、结构"><a href="#2、结构" class="headerlink" title="2、结构"></a>2、结构</h1><p>MBR分区表占用一个扇区，位于硬盘的0磁头、0柱面、1扇区。</p><p>这里需要引用一下度娘百科对于磁头柱面扇区这三个概念的解释。</p><p>**磁头(Heads)**：每张磁片的正反两面各有一个磁头，一个磁头对应一张磁片的一个面。因此，用第几磁 头就可以表示数据在哪个磁面。</p><p>**柱面(Cylinder)**：所有磁片中半径相同的同心磁道构成“柱面”，意思是这一系列的磁道垂直叠在一起，就形成一个柱面的形状。简单地理解，柱面数=磁道数。</p><p>**扇区(Sector)**：将磁道划分为若干个小的区段，就是扇区。虽然很小，但实际是一个扇子的形状，故称为扇区。</p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2802%29.jpg"></p><p>▲图为磁头、柱面、扇区示意图</p><p>①不管是CHS寻址还是LBA寻址，都需要知道磁头柱面和扇区来对数据进行定位；</p><p>②通常来说，一个扇区的大小为512字节（Byte）；</p><p>③该扇区为隐藏扇区，实际上，0磁头0柱面的扇区均为隐藏扇区，一般的硬盘访问命令无法访问，因此MBR分区表放在此处比较安全，不容易遭到破坏，同理，许多病毒也会隐藏在这里，不容易被查杀。</p><p>由于MBR扇区中大部分都被MBR所占领，因此这个扇区就被称为MBR扇区。而MBR扇区主要是由MBR、DPT和结束标识三个部分组成。</p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2803%29.jpg"></p><p>▲图为标准MBR结构</p><h1 id="3、工作原理"><a href="#3、工作原理" class="headerlink" title="3、工作原理"></a>3、工作原理</h1><p>MBR的产生并不依赖于任何一个操作系统，在电脑开机通电后，BIOS进行自检，自检完成后就开始执行MBR中的启动代码（Bootloader），通过读取启动代码来确定需要引导的系统。因此，双系统或者是多系统安装完成之后，需要修改引导启动项，即为修改此处的启动代码（Bootloader）。</p><p>执行完启动代码之后，系统下一步就会读取MBR扇区中的最后两个字节，如果是55AA，则继续读取磁盘分区表DPT来确定是否有活动分区，从而启动系统；如果不是55AA，系统会认为该MBR为非法MBR，系统将停止操作并报错。</p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2804%29.jpg"></p><p>▲图为MBR分区表的硬盘开机过程</p><p>这里再额外提一下。</p><p>MBR中的选用磁盘标识，这个在MBR分区中比较重要。如果安装的是windows操作系统的话，系统在启动时需要依赖该磁盘签名来识别硬盘并确定该磁盘是否初始化。</p><p><strong>而DPT的作用其实非常简单，就是管理磁盘的分区信息。如果DPT被破坏，那么系统将无法识别该磁盘上的所有分区，并且有可能会提示需要格式化磁盘。</strong></p><p>一般小白遇到这种情况会比较无奈，只能格式化，对磁盘中宝贵的数据说拜拜，<strong>但是，其实只要修复DPT，就可以读取分区，找回数据，实际上，硬盘的数据一直都在那里。那怕是对硬盘进行一般的格式化操作，也只是将DPT中对应的分区的数据清空，并没有影响到原来的在其他扇区的数据，此时只要不进行数据的读写操作（防止覆盖原有数据），还是有可能找回丢失的数据的。</strong></p><h1 id="4、DPT"><a href="#4、DPT" class="headerlink" title="4、DPT"></a>4、DPT</h1><p>DPT其实有挺多可以讲的地方，这里拿一个分区（16Byte）为例，<strong>讲解一下MBR分区最大只能识别2TB硬盘的原因。</strong></p><h1 id="5、分区项表内容及含义"><a href="#5、分区项表内容及含义" class="headerlink" title="5、分区项表内容及含义"></a>5、分区项表内容及含义</h1><p><strong>注：1 Byte=8 bit</strong></p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2805%29.jpg"></p><p>▲图为MBR中的DPT的分区项表的内容及含义</p><p>再对其作进一步的解释：</p><p>第1字节的引导标识：如果该分区内安装了操作系统，则该分区必须为活动分区，方可成功引导该分区内的操作系统（即为80H）；</p><p>第5字节的分区类型符：记录该分区的类型，每一种类型都有一个对应的值，如00H——表示该分区未用（即没有指定，DOS和win不识别该类型分区）、06H——FAT16分区；0BH——FAT32分区、 07H——NTFS分区等；</p><p>第2、3、4、6、7、8字节：记录了这个分区的起始和结束磁头、扇区、柱面，即可确定该分区在硬盘中的位置以及该分区的容量；</p><p><strong>最后的8个字节就是MBR分区为何最大只能识别2TB容量的原因了。</strong></p><p><strong>前提知识背景：</strong></p><p>①    计算机中采用2进制，bit是最小的大小计量单位；</p><p>②    1 Byte=8 bit；</p><p>③    一个扇区的大小是512Byte；</p><p>④    Byte、KB、MB、GB、TB、PB这六者按照从小到大的顺序排列，且相邻两者间差1024倍（即2^10）；</p><p>⑤    在上面的缩写中，大写的B表示Byte，小写的b表示bit，两者相差8倍；</p><p>由于只有4 Byte来记录本分区的总扇区数，4 Byte=32 bit，在2进制即有2^32种状态，假设全部为1，则最多有2^32个扇区。即</p><p><img src="https://resource.tinychen.com/MBR%E5%88%86%E5%8C%BA%E8%A1%A8%2806%29.jpg"></p><p>所以MBR分区中单个分区最多只能识别2TB容量，而由于记录已使用的扇区的字节数也是4，所以整个分区最多也只能识别2TB容量。</p><h1 id="6、扩展分区"><a href="#6、扩展分区" class="headerlink" title="6、扩展分区"></a>6、扩展分区</h1><p>前面我们已经提到了当四个主分区无法满足需求的时候，可以使用三个主分区+一个扩展分区的方法，在扩展分区下，理论上可以分出无数个分区（实际还要看操作系统的限制等其他因素）。</p><p>这里还要介绍一个概念——<strong>EBR（Extended Boot Record），即扩展分区引导记录。其原理和工作模式与MBR非常相似，但它是链式的，</strong>也就是说一个EBR不够用，可以再增加一个，新增加的EBR链接在旧的EBR之后，一个链接着一个，就像链条一样。理论上就可以实现无数个分区。</p><p>MBR分区表的内容介绍到这里就结束了，如果对它还有兴趣的话，或者觉得这里的介绍太过简单的话，可以去查询一些相关书籍和论坛。另外，如果文中有任何错误，还望不吝赐教。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前来说，比较主流的两种硬盘的分区表是MBR和GPT（GUID）。今天小七带大家了解一下比较旧一点的MBR分区表（相对于GPT）。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://tinychen.com/categories/linux/"/>
    
    
    <category term="harddisk" scheme="https://tinychen.com/tags/harddisk/"/>
    
  </entry>
  
  <entry>
    <title>Filqlo时钟屏保</title>
    <link href="https://tinychen.com/20170703-filqlo/"/>
    <id>https://tinychen.com/20170703-filqlo/</id>
    <published>2017-07-03T07:00:00.000Z</published>
    <updated>2017-07-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家现在还有没有使用屏保的习惯，反正小七是有的。毕竟在挂机下载，或者是写作业需要开着电脑的时候，开着屏保还是相当不错的。</p><p>今天小七就给大家安利一款在Windows平台上免费的屏保软件吧。（苹果系貌似现在也免费了）</p><span id="more"></span><p>话不多说，咱们进入正文。</p><h1 id="1、Filqlo简介"><a href="#1、Filqlo简介" class="headerlink" title="1、Filqlo简介"></a>1、<strong>Filqlo简介</strong></h1><p><img src="https://resource.tinychen.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2801%29.jpg"></p><p>Fliqlo原本是一款在iOS应用商店里面的付费时钟屏保软件，但是由于其复古简单的设计，迅速吸引了一大波粉丝，现在也有了Windows版本和Mac版本。</p><p>他们的官网是fliqlo.com，需要科学上网才能正常访问。有兴趣的童鞋可以去他们的官网看看。</p><p>下面搬运一小部分他们官网的介绍。</p><p>Fliqlo for iOS is a clock app that allows you to make your mobile/tablet device screen look like a flip clock、Thanks to its visibility, you can read the time even from a distance.</p><h2 id="1-1-Features"><a href="#1-1-Features" class="headerlink" title="1.1 Features"></a>1.1 Features</h2><p>Enlarge/reduce to any size</p><p>Switch between 12/24 hour clock (* without a leading zero)</p><p>Switch between portrait and landscape mode</p><h2 id="1-2-Price"><a href="#1-2-Price" class="headerlink" title="1.2 Price"></a>1.2 Price</h2><p>$0.00 Free for charge</p><p>小七注：windows平台的版本并不需要收费，因此大家可以放心下载，如果想支持开发者的话，可以通过它们网站下方的paypal来进行捐赠。</p><h1 id="2、设置教程"><a href="#2、设置教程" class="headerlink" title="2、设置教程"></a>2、设置教程</h1><h2 id="2-1-Mac-amp-IOS"><a href="#2-1-Mac-amp-IOS" class="headerlink" title="2.1 Mac &amp; IOS"></a>2.1 Mac &amp; IOS</h2><p>对于iOS和Mac平台的用户，直接打开AppStore输入关键字Fliqlo下载安装即可使用。Mac用户也可以去官网下载。</p><h2 id="2-2-Windows"><a href="#2-2-Windows" class="headerlink" title="2.2 Windows"></a>2.2 Windows</h2><p>至于Windows的用户就稍稍麻烦一些，需要科学上网到他们的官网进行下载。</p><p>为了方便大家使用，小七已经将windows版本从官网搬运过来，点击这里即可下载。</p><p>链接：<a href="https://pan.baidu.com/s/1eROCql0">https://pan.baidu.com/s/1eROCql0</a> 密码：7w2w</p><p>下载完成之后，我们直接双击打开。就会弹出windows中的屏幕保护程序的设置界面。</p><p><img src="https://resource.tinychen.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2805%29.jpg"></p><p>我们点击设置，可以看到有几个简单的参数可以进行修改。</p><p>它们分别是调节12/24小时制，放大和缩小（最大125%）和恢复默认设置。</p><p><img src="https://resource.tinychen.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2801%29.jpg"></p><p>▲默认设置</p><p><img src="https://resource.tinychen.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2802%29.jpg"></p><p>▲放大到125%（最大）</p><p><img src="https://resource.tinychen.com/Filqlo%E6%97%B6%E9%92%9F%E5%B1%8F%E4%BF%9D%2803%29.jpg"></p><p>▲切换为24小时制</p><p>小七注：由于windows平台是免费的，所以BUG的存在也是不可避免的，初次设置的时候可能会出现崩溃的情况，但是只要重启一下电脑就可以解决。（只是初次设置时可能需要重启，不是每次都要重启）</p><p>虽然Fliqlo在功能上没有之前很火的Wallpaper Engine那么强大，但是它几乎不占用系统资源且在安装上要简单不少。</p><p>玩腻了Wallpaper Engine的同学，确定不来一个Fliqlo试试吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不知道大家现在还有没有使用屏保的习惯，反正小七是有的。毕竟在挂机下载，或者是写作业需要开着电脑的时候，开着屏保还是相当不错的。&lt;/p&gt;
&lt;p&gt;今天小七就给大家安利一款在Windows平台上免费的屏保软件吧。（苹果系貌似现在也免费了）&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>电脑的AB盘去哪了？</title>
    <link href="https://tinychen.com/20170512-disk-a-b-introduction/"/>
    <id>https://tinychen.com/20170512-disk-a-b-introduction/</id>
    <published>2017-05-12T07:00:00.000Z</published>
    <updated>2017-05-12T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天聊一个很怀旧的话题。</p><p>相信很多人都知道我们的电脑是从C盘开始的，C盘也就是我们平时说的系统盘。</p><p>很多人可能会好奇，为什么要从C盘开始，而不是从A盘开始？A盘和B盘去哪了？</p><span id="more"></span><p>其实要解释的话，一句话就够了。<br>AB这两个盘符是预留给软驱的。<br>换句话说， AB盘是计算机发展初期给软驱留的位置。</p><p><strong>下面是讲故事时间。</strong> </p><h1 id="1、System-370"><a href="#1、System-370" class="headerlink" title="1、System 370"></a>1、System 370</h1><p>大概是在20世纪70年代初，准确来说是1970年6月30日的样子，IBM推出了System360的继任者——System 370。</p><p>![](<a href="https://resource.tinychen.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F">https://resource.tinychen.com/电脑的AB盘去哪了？</a> (1).jpg)</p><p>▲System/370 Model 145（图片来源于IBM官网）</p><p>关于System370的功能进步小七就不在这里赘述，有兴趣的童鞋可以打开IBM官网输入System370进行搜索既可查看相关信息。</p><p>但是IBM的System370计算机面临这样一个问题，就是这种计算机的操作指令存储在半导体内存中，一旦计算机关机，指令便会被抹去。</p><p>这句话是什么意思呢？</p><p><strong>说白了就是这种电脑并没有我们现在意义上的硬盘（ROM），它只有半导体内存（RAM），</strong>因此只能将数据都存储到半导体内存中。而我们都知道，<strong>RAM是断电不保存数据的</strong>，也就是说，万一一个不小心重启一下电脑或者是断电了，你辛辛苦苦写了几天几夜的代码就没了……</p><p><em>想象一下你在办公室奋战几天几夜，赶在DDL之前把代码写了出来，然后累到在办公室睡着了，结果那晚就断电了，第二天PM找你要代码，好家伙，你要怎么办？</em></p><h1 id="2、8英寸软盘"><a href="#2、8英寸软盘" class="headerlink" title="2、8英寸软盘"></a>2、8英寸软盘</h1><p>IBM当然也意识到了这个问题，所以早在1967年，IBM的SanJose实验室的存储小组受命开发一种廉价的设备，为大型机处理器和控制单元保存和传送微代码。这种设备成本必须在5美元以下，以便易于更换，而且必须携带方便，于是软盘的研制之路开始了。</p><p><em>研发组：又要便宜又要便携，你咋不上天呢？</em></p><p>这个其实可以算是现代的软盘驱动器的鼻祖，但是在携带形式上又有点像U盘等移动存储介质。事实上，在当时计算机的体积没有达到足够小以至于能满足人们便携的时候，这种方式确实是最靠谱也是最保险的。<br>想象一下：一个程序猿把自己花高价买来的DOS系统装到软驱里面，然后再把自己花了毕生精力写的代码放到软驱里面，然后这很可能就是这个程序猿最大的财富了。</p><p><em>乍一想，怎么有点武功秘诀的感觉？</em></p><p>1971年，还在IBM推出了第一款8英寸的软盘，这是一种直径8英寸的表面涂有金属氧化物的塑料质磁盘，这个就是真正意义上的现代软盘驱动器的鼻祖了。</p><p><img src="https://resource.tinychen.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%282%29.jpg"></p><p>▲图为8英寸软盘（图片来源见水印）</p><h1 id="3、磁盘之父——Alan-Shugart"><a href="#3、磁盘之父——Alan-Shugart" class="headerlink" title="3、磁盘之父——Alan Shugart"></a>3、磁盘之父——Alan Shugart</h1><p>事实上，软盘的成功推出并没有我们字面上理解的这么简单，其实早在20世纪50年代时，IBM公司董事长小托马斯·沃森迅速把事业扩展到美国西海岸，下令在加利福尼亚圣何塞市附近新建实验室和工厂。约翰逊带领着30多名青年工程师，在不到三年时间，就为IBM创造了引人注目的技术成果——磁盘存储器。在约翰逊领导IBM圣何塞实验室研制硬盘的过程中，一位名叫Alan Shugart的青年工程师发挥了关键作用。</p><p>实际上，Alan Shugart也是一个硅谷的传奇人物，年幼家贫的他曾经三度创业，并且两度被自己公司的董事会扫地出门，其中就包括了著名的希捷公司（全球最大的PC硬盘制造商之一）。尽管如此，这位令人敬佩的前辈还是保持着对生活的热爱，实在是值得我们学习。</p><p><strong>后来因为Alan Shugart对于磁盘的杰出贡献，人们亲切地称呼他为磁盘之父。</strong></p><p><img src="https://resource.tinychen.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%283%29.jpg"></p><p>▲Alan Shugart</p><h1 id="4、5-25英寸软盘"><a href="#4、5-25英寸软盘" class="headerlink" title="4、5.25英寸软盘"></a>4、5.25英寸软盘</h1><p>上面说到的Alan Shugart，不久后就离开了IBM，并且创办了一家名为Shugart Associates的公司。没错，就是用他自己的名字命名的公司。</p><p>当时Alan Shugart和其他几位联合创始人的目标就是打造一家出色的八英寸软盘驱动器制造公司。因为，当时软盘驱动器制造工业刚刚起步，而且这项技术是IBM公司的薄弱环节。于是，他们就决定以此为契机大干一场。</p><p>但是，8英寸软盘虽然便携，始终还是大了些。后来他们就推出了5.25英寸的软盘。</p><p><img src="https://resource.tinychen.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%284%29.jpg"></p><p>▲如图从左往右以此为3.5/5.25/8英寸软盘（图片来源见水印）</p><h1 id="5、3-5英寸软盘"><a href="#5、3-5英寸软盘" class="headerlink" title="5、3.5英寸软盘"></a>5、3.5英寸软盘</h1><p>5.25英寸的软盘虽然从体积到容量上都有了一定的进步，但它还是有很多缺点，比如软盘采用的外包装比较脆弱，容易损坏，体积也比较大。因此很多厂家并没有满足于这种软盘，他们都在不断地进行探索，以寻求更为先进的软盘。</p><p><strong>新一代软盘的开发终于被日本的索尼公司拔得头筹。</strong></p><p>1980年，索尼公司率先推出体积更小、容量更大的3.5英寸软驱和软盘，不过刚推出的时候在当时并没有被一些主要PC厂家所接受，市面上流行的依旧是5.25英寸的软盘。</p><p><strong>1982年，微软基于索尼的3.5英寸软盘标准制定了统一的行业标准。</strong></p><p>但是标准制定了是一回事儿，人家用不用就是另外一回事儿了。关于3.5英寸软盘的普及，这里我们还要提一下苹果公司。</p><p>1984年，苹果推出的麦金塔（Macintosh）电脑，根本就不存在5.25英寸软盘接口这种东西，直接就上了3.5英寸的软盘接口。这个能不能算是帮忙普及小七还真的说不准，但是至少可以说明苹果在换接口这件事上还是不遗余力的。</p><p><em>2016款MacBookPro：喵喵喵？</em></p><p><strong>为什么要占用AB两个盘符而不是A一个？</strong></p><p>这个说起来就有点扎心了。当年的软盘容量普遍不大，一般都是几十KB。后来大的有几MB。</p><p>那么我们说回一开始软盘容量还是几十KB的时候。假设只有一个软盘接口，然后你需要从一张软盘复制数据到另一张软盘上，你只能先将数据复制到半导体内存（RAM）中，然后拔出第一张软盘再插入另一张软盘完成复制。</p><p>那么现在问题来了：</p><p>假设我要一次复制60KB的数据，而RAM只有32KB那怎么办？</p><p>额……好吧，那就给你两个软盘接口吧。</p><p>还有一说是随着操作系统的发展，一些指令不能像以前那样将其从软盘中存放到RAM中操作，因此需要额外读取操作数据的时候只能再多加一个软盘接口。</p><p>不管怎么说，两个软盘接口在某些时候总是比一个要方便很多的。</p><h1 id="6、硬盘驱动器"><a href="#6、硬盘驱动器" class="headerlink" title="6、硬盘驱动器"></a>6、硬盘驱动器</h1><p>人的野心是永远没有办法满足的，不然就不会有科技的进步这一回事儿了。硬盘当然是越大越好，很快人们就发明了存储容量更大的硬盘驱动器（即为我们现在用的机械硬盘），硬盘驱动器也很快凭借其容量大，速度快的优势获得了广大人民群众的喜爱和支持。</p><p>但是，早期的硬盘驱动器只能作为软盘的“从属”。</p><p>这是什么意思呢？就是说硬盘驱动器刚出来的时候，操作系统还是装在软盘上面的，开机还是得要像之前那样，先插入软盘，然后开机，电脑从软盘中读取数据进行操作，硬盘还是不能当作启动盘的。所以硬盘驱动器的盘符就是从C开始的。</p><p>然而随着技术的发展，到了MS-DOS 5.0时代，微软官方钦定了C盘作为系统的启动盘/主硬盘。</p><p>随后，软盘渐渐地被淘汰，但是AB这两个盘符还是为他们空出来了。</p><p><img src="https://resource.tinychen.com/%E7%94%B5%E8%84%91%E7%9A%84AB%E7%9B%98%E5%8E%BB%E5%93%AA%E4%BA%86%EF%BC%9F%20%285%29.jpg"></p><p>2006年，Alan Shugart因心脏病手术失败而永远离开了我们。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天聊一个很怀旧的话题。&lt;/p&gt;
&lt;p&gt;相信很多人都知道我们的电脑是从C盘开始的，C盘也就是我们平时说的系统盘。&lt;/p&gt;
&lt;p&gt;很多人可能会好奇，为什么要从C盘开始，而不是从A盘开始？A盘和B盘去哪了？&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>驱动备份(免第三方)</title>
    <link href="https://tinychen.com/20170509-backup-drivers/"/>
    <id>https://tinychen.com/20170509-backup-drivers/</id>
    <published>2017-05-09T07:00:00.000Z</published>
    <updated>2017-05-09T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>给大家分享一个用win10自带命令完成驱动备份的方法。</p><span id="more"></span><h1 id="1、什么是驱动？"><a href="#1、什么是驱动？" class="headerlink" title="1、什么是驱动？"></a>1、什么是驱动？</h1><p>驱动的英文名称叫做driver，一说到driver，大家就懂了，司机嘛。</p><p>没错，驱动就是司机，只不是驱动是驾驭硬件的司机，而驱动是听从于系统和软件的调配的。</p><p><strong>也就是说，驱动是沟通硬件和软件的桥梁。</strong></p><p>那么在装系统之后，一定要干的一件事就是装驱动。一般来说，装驱动有三种方法：</p><ul><li>一是打开系统更新，让系统自动搜索安装；</li><li>二是自己手动下载，去官网等比较可靠的网站下载然后手动安装；</li><li>三是用第三方软件，下个驱动精灵驱动人生什么的一键安装。</li></ul><p>这三种方法都各有优劣，<strong>但是，有一点它们是一样的，那就是都需要联网下载。</strong>一些小的驱动还好，几MB或者几十MB，大的轻松达到四五百MB，下载起来费时费力，因此最好的方法当然是事先备份。</p><p>而对于大多数人来说，备份就是下载一个驱动精灵/驱动人生什么的软件，然后再一键备份，恢复的时候再安装这个软件来恢复。</p><p><strong>小七个人还是比较喜欢用系统自带的命令来完成备份这个操作。</strong></p><h1 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h1><h2 id="2-1-新建备份目录"><a href="#2-1-新建备份目录" class="headerlink" title="2.1 新建备份目录"></a>2.1 新建备份目录</h2><p>我们首先在非C盘的磁盘驱动器里面新建一个文件夹，命名的话随意，自己能记住就行，建议直接新建在根目录，这样后面会比较方便操作（这里小七在X盘根目录下新建了一个名为drivers的文件夹）；</p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2801%29.jpg"></p><h2 id="2-2-找到CMD-Powershell"><a href="#2-2-找到CMD-Powershell" class="headerlink" title="2.2 找到CMD/Powershell"></a>2.2 找到CMD/Powershell</h2><p>由于接下来的操作需要系统管理员的权限，而一般在运行菜单中运行CMD是没有系统管理员权限的，因此我们需要在这个目录下找到CMD，并且将他发送到桌面快捷方式以便于以后操作，目录：C:\Windows\System32</p><blockquote><p>小七注：温馨提示：微软在Win10创意者版本之后已经使用了功能更加强大的Powershell来替代CMD成为系统的默认命令执行工具，但是CMD依旧可用（就是相当于你的默认音乐播放器从酷狗音乐变成了网易云音乐），因此并不影响本次操作。</p></blockquote><p>因此所有能够用CMD完成的操作，用POWERSHELL也能够完成，具体使用哪个看童鞋们自己的爱好。<br>不嫌麻烦的同学可以直接忽略上一步，找到CMD后，右键选择以系统管理员身份运行；</p><h2 id="2-3-开始备份"><a href="#2-3-开始备份" class="headerlink" title="2.3 开始备份"></a>2.3 开始备份</h2><p>然后我们在CMD窗口中输入下列命令：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">dism /online /<span class="hljs-built_in">export-driver</span> /destination:X:\drivers<br></code></pre></div></td></tr></table></figure><p><strong>注意：X：drivers部分为驱动的备份目录，根据情况不同此处也有所不同。</strong></p><p>然后稍等片刻，系统会自动备份所有的驱动；</p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2803%29.jpg"></p><p>驱动的具体数量因电脑而异，驱动的数量多少与电脑的质量并没有必然联系。</p><p>操作完成之后我们再打开刚刚选择的备份文件夹看看，会发现多了很多文件夹。</p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2806%29.jpg"></p><p>每个文件夹都对应着一个驱动。看到这里可能有些童鞋就懵了，这命名，我怎么知道哪个文件夹是哪个驱动呢？</p><p><strong>答案是：不需要知道。</strong></p><h2 id="2-4-恢复驱动"><a href="#2-4-恢复驱动" class="headerlink" title="2.4 恢复驱动"></a>2.4 恢复驱动</h2><p>当我们需要安装驱动的时候，直接打开设备管理器</p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2804%29.jpg"></p><p>点击左上角的设备管理器</p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2805%29.jpg"></p><p><strong>①找到需要安装的驱动（一般驱动程序有问题的硬件设备都会有一个黄色的感叹号）</strong></p><p><strong>②右键点击我们需要安装驱动程序的硬件，选择更新驱动程序软件</strong></p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2807%29.jpg"></p><p><strong>③选择下面的浏览计算机以查找驱动程序软件</strong></p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2808%29.jpg"></p><p><strong>④然后选择刚刚备份的目录，并默认勾选下面的包括子文件夹，然后系统会自动帮你搜索安装驱动程序</strong></p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2809%29.jpg"></p><p><strong>⑤最后安装完成</strong></p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2810%29.jpg"></p><p><img src="https://resource.tinychen.com/%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%EF%BC%88%E5%85%8D%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%2811%29.jpg"></p><p>这个操作难度不大，只要记住一条命令即可。适用于那些不喜欢使用第三方软件安装备份驱动的人群。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;给大家分享一个用win10自带命令完成驱动备份的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>安卓刷机基础</title>
    <link href="https://tinychen.com/20170507-android/"/>
    <id>https://tinychen.com/20170507-android/</id>
    <published>2017-05-07T07:00:00.000Z</published>
    <updated>2017-05-07T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因此小七整理了一些常见的安卓刷机相关的基础概念，希望能给大家一些帮助。</p><span id="more"></span><h1 id="1、什么是安卓刷机？"><a href="#1、什么是安卓刷机？" class="headerlink" title="1、什么是安卓刷机？"></a>1、什么是安卓刷机？</h1><p>刷机，就是通过一定的技术手段向安卓手机中刷入ROM的过程。那么随着刷机的不断发展，刷入的东西类型也在逐渐增多，包括REC、ROM、内核甚至是基带固件等等。</p><h1 id="2、刷机方式都有哪些？"><a href="#2、刷机方式都有哪些？" class="headerlink" title="2、刷机方式都有哪些？"></a>2、刷机方式都有哪些？</h1><p>目前来说，主流的刷机方式基本可以分为两种：<strong>线刷和卡刷</strong>。<br>线刷和卡刷最大的区别就是：线刷刷机时需要通过USB数据线操作,而卡刷是通过内存卡进行操作。</p><h2 id="2-1-关于卡刷"><a href="#2-1-关于卡刷" class="headerlink" title="2.1 关于卡刷"></a>2.1 关于卡刷</h2><p>因为在早期，安卓手机的内存普遍偏小，因此一般会通过支持内存卡的方式来让用户获得更大的存储空间。而刷机包相对于早期的手机来说，算是比较大的了，一般来说是将刷机包复制进入内存卡中，再通过REC将刷机包刷入，最终完成整个刷机操作。<br>这里提一下，我们平时的正常情况下的手机系统升级，其实就是卡刷的一种。系统将系统更新文件下载到手机存储空间中，然后重启通过REC刷入更新的增量包或者是完整的刷机包。</p><p><strong>温馨提示：</strong></p><p> 1、增量包指的是在某个特定的系统版本上更新加入某些功能的更新包，它是不带有完整的整个手机操作系统的，因此在刷机的时候是不能当作刷机包使用的。<br> 2、有些手机尽管不支持内存卡，但是会将手机自带的存储空间划分一部分出来当作内存卡，这部分的空间在地位上跟内存卡是一样的，只是不能像内存卡那样取出手机进行读写操作。这种情况前两年还比较常见，现在这么操作的手机好像比较少了。</p><h2 id="2-2-关于线刷"><a href="#2-2-关于线刷" class="headerlink" title="2.2 关于线刷"></a>2.2 <strong>关于线刷</strong></h2><p><strong>线刷最明显的特点就是需要通过数据线来操作，因此在线刷的过程中，需要非常注意数据线和手机的连接情况，千万不能断开数据线或者是关闭计算机或者是关闭手机等。</strong></p><p>同样地，由于线刷需要使用数据线的特点，它所能够进行的操作也就比卡刷更多，同时也更危险，比如说我们之前的刷入REC，就是通过线刷操作的。而很多情况下，手机不小心刷成砖了，救砖操作也是需要通过线刷进行的。</p><p>而现在很多手机厂商提供的官方刷机助手，都是需要连接数据线来进行操作，因此也是属于线刷。</p><p>由于现在手机已经有取消支持SD卡拓展的这个趋势，因此线刷的重要性也就凸现出来了。但是未来线刷和卡刷应该是会并存的，原因很简单：卡刷可以进行简单的刷机和系统更新等操作，线刷则可以进行更深度更敏感的操作。</p><h1 id="3、什么是ROM-image？"><a href="#3、什么是ROM-image？" class="headerlink" title="3、什么是ROM image？"></a>3、什么是ROM image？</h1><p><strong>对于安卓刷机来说，这个ROM image跟我们一般说的ROM是两个东西。</strong><br>这里我们简单地讲一下ROM和RAM这对双子星。</p><h2 id="3-1-RAM"><a href="#3-1-RAM" class="headerlink" title="3.1 RAM"></a>3.1 <strong>RAM</strong></h2><p><strong>RAM的全称是Random Access Memory，中文名是随机存取存储器，我们日常称之为运行内存。</strong>也就是说，它是<strong>不能够断电保存数据</strong>的，主要是在我们的电子产品工作的时候，将需要调用的文件预先从ROM中读取出来，放入到RAM中（因为一般来说RAM的读写速度要比ROM快），以便于我们的CPU/GPU或者是SoC等调用。</p><h2 id="3-2-ROM"><a href="#3-2-ROM" class="headerlink" title="3.2 ROM"></a>3.2 <strong>ROM</strong></h2><p><strong>ROM的全称是Read-Only Memory，中文名是只读内存，就是我们平时说的手机存储空间</strong>（用来放音乐图片视频等等的那个）。也就是说，它是可以断电保存数据，主要是用来长期存储数据的。</p><h2 id="3-3-ROM-image"><a href="#3-3-ROM-image" class="headerlink" title="3.3 ROM image"></a>3.3 <strong>ROM image</strong></h2><p><strong>ROM image的全称是Read-Only Memory image，简称是ROM，</strong>中文名称叫只读内存镜像，因此会有些容易跟上面的ROM混淆。这里注意，<strong>ROM image的存在形式是一个文件，相当于我们电脑平时装系统的镜像文件。</strong></p><p><strong>那么在安卓刷机中，我们常常用ROM来指代自己要刷入的操作系统。</strong></p><h1 id="4、什么是OS和UI？"><a href="#4、什么是OS和UI？" class="headerlink" title="4、什么是OS和UI？"></a>4、什么是OS和UI？</h1><p><strong>OS就是Operating System，中文名叫做操作系统。</strong>比如说我们的Windows操作系统，安卓（Android，基于Linux）操作系统，苹果操作系统（iOS，全称叫iPhone Operating System）都可以叫做OS。</p><p>而对于移动端来说，除了比较常见的Android和 iOS，还有比较小众的WindowsMobile，Sailfish（旗鱼），Ubuntu（乌班图），BlackBerry OS（黑莓）等等。</p><p><strong>UI就是User Interface，中文名叫做用户界面。</strong>比如说我们常见的MIUI（小米），EMUI（华为，全称Emotion UI），Flyme（魅族）等等都是UI。</p><p>而一般来说，国内的安卓厂商为了做出自己的特色，都会有属于自己的UI，由于他们这些UI都是基于安卓，因此称不上是OS，只能算作UI。如果你见到名字当中有OS的（没错说的就是锤子的Smartisan OS），尽管名字里面有OS，但是还是属于UI。</p><p>由于手机厂商在UI的发力程度越来越高，修改的东西也越来越多，所以就有一种很尴尬的情况出现了，说它们是UI吧，好像又不止，说是OS吧，好像又不够格，然后就搞出了一些名词，比如说深度定制UI等等。</p><p><strong>刷机的时候，为了方便，我们一般来说是统一使用ROM或者是刷机包来指代这些东西。</strong></p><h1 id="5、什么是砖？"><a href="#5、什么是砖？" class="headerlink" title="5、什么是砖？"></a>5、什么是砖？</h1><p>这里的砖跟我们平时说的搬砖的砖不是一个概念。<strong>这里的砖指的是在刷机过程中因为操作不当而无法正常使用的手机，</strong>用不了的手机跟砖头没什么区别，因此人们很形象地称之为砖。一般来说，砖也会根据手机“受内伤”的程度进行划分，一些受伤较轻的砖还是可以救回来的，而那些受伤较重的……</p><h1 id="6、什么是BL？"><a href="#6、什么是BL？" class="headerlink" title="6、什么是BL？"></a>6、什么是BL？</h1><h2 id="6-1-BL简介"><a href="#6-1-BL简介" class="headerlink" title="6.1 BL简介"></a>6.1 <strong>BL简介</strong></h2><p><strong>BL的全称叫做Bootloader，中文名字叫做（小七也不知道叫什么）。</strong>一般来说，大家都认为Bootloader是嵌入式系统在通电后执行的第一段代码。</p><p><strong>在这里用人话来说就是：手机开机要干的第一件事。</strong></p><p>BL在功能上有些类似于我们电脑的BIOS，但是实际上两者并不完全一样，手机中是不存在BIOS这一个说法的。</p><h2 id="6-2-BL能干什么"><a href="#6-2-BL能干什么" class="headerlink" title="6.2 BL能干什么"></a>6.2 <strong>BL能干什么</strong></h2><p>那么要手机在通电之后（也就是我们按下开机键之后），需要干的第一件事是什么呢？打个比方来说，将军跟士兵们说要出征了，那么士兵们要干的第一件事当然是检查一下自己的装备、身体状况和精神状态有没有问题。</p><p>而对于手机来说，这里要干的事情就是初始化各个组件（屏幕、闪存、SoC、各个传感器等等），检查即将运行的固件、系统等等是否正常。</p><h3 id="6-2-1-什么叫锁BL"><a href="#6-2-1-什么叫锁BL" class="headerlink" title="6.2.1 什么叫锁BL"></a>6.2.1 <strong>什么叫锁BL</strong></h3><p>既然BL能够检查即将运行的固件和系统，那么手机厂商就能在BL上动手，直接锁死BL，使得它只能识别官方的固件和系统，从而确定手机的稳定性和安全性。但是，这也就意味着不能刷机了，因为很多官方的REC只支持官方的ROM，因此刷机很多时候第一步要做的事情就是解锁BL，<strong>而对于很多厂商来说，解锁BL意味着放弃保修，</strong>因此刷机的童鞋一定要注意。</p><h3 id="6-2-2-怎么解锁BL？"><a href="#6-2-2-怎么解锁BL？" class="headerlink" title="6.2.2 怎么解锁BL？"></a>6.2.2 <strong>怎么解锁BL？</strong></h3><p><strong>解锁BL的方法我们可以分为两种，官方解锁和暴力解锁。</strong></p><p>官方解锁的意思就是通过官方渠道解锁，一般是去官网或者是官方论坛，提供手机的IMEI码等进行申请，然后就可以获得解锁BL的解锁码。</p><p>暴力解锁的意思就是非官方渠道解锁，对于一些厂商来说，它们是不会提供BL的解锁方式的，因此需要一些民间的大神破解BL，破解的途径一般是利用各种漏洞，因此这种暴力破解的方法难度要更大一些。</p><p>由于安卓机型众多，小七难免会有疏漏，小七建议童鞋们可以去自己手机对应的论坛或者是贴吧了解详细情况。</p><h1 id="7、什么是REC？"><a href="#7、什么是REC？" class="headerlink" title="7、什么是REC？"></a>7、什么是REC？</h1><p><strong>REC的全称叫做Recovery，直译中文名叫做恢复</strong>，百度百科有个很奇怪的翻译叫做：Android手机备份功能。</p><p>实际上，REC的功能远不止备份这么简单。进入REC模式后，我们可以通过卡刷来升级操作系统，也可以擦除（wipe）手机数据，还可以恢复出厂设置，备份当前数据等等。</p><p>由于安卓系统的复杂原理，REC所处于的分区和我们手机系统所处的分区不同，因此，如果你不小心把系统搞崩了，可以进入REC对其进行一定的修复。也就是说，因为REC和手机的ROM处于不同分区，而不同分区之间是不会互相影响的，用REC可以进行一定程度的刷机。</p><p><strong>有些人会将REC比作我们修电脑时常用到的PE，实际上两者在地位上有些相似，但是在功能上还是有一定的差距的。</strong></p><p>官方的REC一般限制较多（只能刷入官方的固件、补丁、更新等等），而第三方的REC则在功能上要更加丰富一些，除了能够任意刷入第三方的ROM之外，有些甚至能够支持调整分区大小、在手机上实现双系统（早期的小米手机有这个功能，现在的不太清楚）。</p><p>以前比较旧的版本的REC在刷机的时候只能通过音量键和电源键操作，并且在卡刷的时候只支持将刷机包以update的文件名，zip的文件格式放入SD卡的根目录下进行操作，现在的REC则要好很多，除了能够支持触控操作，还能刷入任意命名的刷机包。</p><h1 id="8、什么是fastboot？"><a href="#8、什么是fastboot？" class="headerlink" title="8、什么是fastboot？"></a>8、什么是fastboot？</h1><p><strong>Fastboot的功能与REC相似，但是要更为高级，更为接近系统的底层。</strong></p><p>这句话可能比较难理解，这里简单地解释一下。更为高级的意思就是Fastboot能够执行的操作要比REC更多，比如我们之前的使用ADB刷入REC就是进入了fastboot模式执行的操作。</p><p>而更为接近系统的底层则意味着优劣共存。比如说，当你折腾手机的时候，不小心把REC搞崩了，没关系，我们还能够进入fastboot模式进行刷机，重新刷入REC，然后继续愉快地刷机。因此，几乎所有的救砖操作都是在fastboot模式下进行，但是，如果你连fastboot都进不去，那就意味着你的手机很有可能真的变砖了。</p><p>注意，我们如果使用第三方刷机软件（刷机精灵、刷机大师这些）进行一键刷机操作的时候，是属于线刷，它们会让你的手机进入fastboot模式，然后刷入这些刷机软件自己的REC，再进行刷入ROM的操作。</p><h1 id="9、什么是恢复出厂设置-双清-三清？"><a href="#9、什么是恢复出厂设置-双清-三清？" class="headerlink" title="9、什么是恢复出厂设置/双清/三清？"></a>9、什么是恢复出厂设置/双清/三清？</h1><h3 id="9-1-恢复出厂设置"><a href="#9-1-恢复出厂设置" class="headerlink" title="9.1 恢复出厂设置"></a>9.1 <strong>恢复出厂设置</strong></h3><p><strong>顾名思义，恢复出厂设置就是将你的手机恢复到出厂状态</strong>，也就是手机刚从工厂里面加工组装完成，包装到包装盒里面的状态。需要注意的是如果你的手机升级了系统（安卓版本更新或者是UI的大版本更新），那么恢复出厂设置之后一般是不会回退你已经更新的版本的。<br>同时，恢复出厂设置默认不清除储存卡上的文件，且你先前做的关于设置的更改都不会保存。</p><h3 id="9-2-双清"><a href="#9-2-双清" class="headerlink" title="9.2 双清"></a>9.2 <strong>双清</strong></h3><p>双清和三清往往需要进入REC或者是fastboot或者是使用ADB进行操作。在REC中，一般都是wipe data和wipe cache。</p><p><code>wipe data/factory reset:    清除用户数据并恢复出厂设置(刷机前必须执行的选项)</code><br><code>wipe cache partition:        清除系统缓存(刷机前执行，系统出问题也可尝试此选项,一般能够解决)</code></p><h3 id="9-3-三清"><a href="#9-3-三清" class="headerlink" title="9.3 三清"></a>9.3 <strong>三清</strong></h3><p><strong>三清比双清多了一个清除虚拟机缓存，基本上三清已经是最彻底的清除手机数据的操作了。</strong></p><p><code>wipe data/factory reset:    清除用户数据并恢复出厂设置(刷机前必须执行的选项)</code><br><code>wipe cache partition:        清除系统缓存(刷机前执行，系统出问题也可尝试此选项,一般能够解决)</code><br><code>wipe dalvik cache:            清空虚拟机缓存(可以解决一些程序fc的问题)</code></p><p>很多人在刷机前都会有双清或者是三清的习惯，这样一来可以使手机刷机更加纯净，二来也可以避免之前残留的缓存文件对新刷入的ROM产生各种莫名其妙的影响，导致出现一些奇奇怪怪的问题（比如耗电量暴增，经常卡顿等等）。<br>现在一般三清用的不多，双清要更加多一些，原因就是三清会比较复杂，风险也比较大。</p><h1 id="10、什么是OTA升级？"><a href="#10、什么是OTA升级？" class="headerlink" title="10、什么是OTA升级？"></a>10、什么是OTA升级？</h1><p><strong>OTA，全称为On-The-Air，中文名不详。</strong>OTA更新的原理是通过网络下载更新包，存储在手机的存储空间中，然后再重启进行升级。OTA升级在原理上是属于卡刷的。</p><p>那么我们在日常生活中哪里会接触到OTA升级呢？实际上，我们所有的官方推送的手机更新，都是属于OTA更新。而能进行OTA升级的前提条件一般都是使用的官方REC+官方ROM+没有ROOT。是否解锁BL并不影响。</p><h1 id="11、什么是底包？"><a href="#11、什么是底包？" class="headerlink" title="11、什么是底包？"></a>11、什么是底包？</h1><p>之前我们说过，厂商可以通过锁BL的形式，使得手机只能识别官方的固件、ROM等等。那么这是不是意味着我们就不能刷机了呢？当然不是，要相信高手在民间，既然它要，我们就给它。</p><p>底包就是在这种情况下诞生的产物，它的主要目的就是使得手机能够先识别这个官方的ROM，然后我们再在这个ROM上面刷入我们自己制作的第三方ROM。</p><p>此处最典型的例子就是华为的EMUI，因为华为手机的特点，很多基于EMUI的第三方刷机包都需要基于某个特定的EMUI版本才能刷入。因此有一部分大神在制作第三方的ROM的时候，会基于官方的ROM进行修改和精简，并且加入一定的新功能。而这些制作出来的刷机包，就是需要先刷入底包的。由于华为对于刷机的支持并不友好，而且华为的主要用户群体并非是这一类的刷机发烧友，因此很多华为的机型的刷机包都是属于上述类型。</p><p>这里再额外补充一下。如果你的华为手机原来就是官方的ROM，在刷入这一类的刷机包的时候，只要你的EMUI版本符合这个第三方的刷机包的要求，是不需要刷入底包的。但是，如果你的手机已经刷入了第三方的ROM，再需要刷回这一类的ROM的时候，就需要事先刷入底包了。</p><h1 id="12、什么是ADB？"><a href="#12、什么是ADB？" class="headerlink" title="12、什么是ADB？"></a>12、什么是ADB？</h1><p><strong>ADB的全称是Android Debug Bridge，中文名就是“安卓调试桥”，</strong>也就是起到了一个连接安卓手机和电脑的桥梁的作用，可以实现许多安卓手机的调试功能（此处不一一列举），因此很形象地被称呼为Android Debug Bridge。</p><p>ADB其实并非是第三方工具，它是谷歌官方出品的工具，因此最纯净的下载方式就是去谷歌官网下载（需要科学上网）。</p><p>如果你嫌去官网麻烦，可以直接打开搜索引擎下载，小心一些不要下到流氓软件则问题不大。</p><h1 id="13、什么是内核？"><a href="#13、什么是内核？" class="headerlink" title="13、什么是内核？"></a>13、什么是内核？</h1><p><strong>内核，顾名思义就是我们手机的核心，准确的来说是我们手机的操作系统的核心。</strong>事实上不仅是手机的操作系统，每个操作系统都有对应的核心。</p><p>那么核心主要负责什么呢？<strong>基本上，所有沟通硬件和底层驱动的任务都是由核心来负责的。</strong>而不同的核心会有不同的特性。比如说：如果你的手机耗电量比较严重，那么你就可以刷入一个第三方优化过的内核，来达到省电的效果。</p><h1 id="14、什么是ROOT？"><a href="#14、什么是ROOT？" class="headerlink" title="14、什么是ROOT？"></a>14、什么是ROOT？</h1><p>ROOT在英语里面有根源的意思，<strong>而在安卓手机中，ROOT则意味着获取手机系统的最高权限，</strong>也就是相当于手机系统的超级管理员，能够执行一切操作，包括但不限于修改系统底层文件，后台安装应用程序，自动发送扣费短信等等，因此对于不知道如何使用ROOT权限的小白来说风险还是相当大的。</p><p>但是ROOT作为一把双刃剑，有坏也有好。修改系统文件虽然有可能导致系统损坏，但是也可以解锁一些手机在出厂时因为各种原因被手机厂商锁死的功能，又或者是卸载一些没用的系统软件，让手机从臃肿变得清爽。</p><p>因此关键还是看你怎么使用它。</p><h1 id="15、什么是Xposed？"><a href="#15、什么是Xposed？" class="headerlink" title="15、什么是Xposed？"></a>15、什么是Xposed？</h1><p><strong>Xposed是一个框架，它本身是不具备具体的功能的</strong>。但是有很多模块可以通过在Xposed框架上运行，实现一些很有意思的功能如各种个性化的手机定制。</p><p>因此，打个比方来说就是：Xposed本身相当于是一个容器，是用来装东西的，放米就成了米缸，放水就成了水缸，放木炭硫磺硝酸钾就成了炸弹。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因此小七整理了一些常见的安卓刷机相关的基础概念，希望能给大家一些帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存</title>
    <link href="https://tinychen.com/20170504-pagefiles/"/>
    <id>https://tinychen.com/20170504-pagefiles/</id>
    <published>2017-05-04T07:00:00.000Z</published>
    <updated>2017-05-04T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟内存，分页文件，交换空间等等，它们本质上都是一个东西。</p><span id="more"></span><h1 id="1、硬盘内存基本概念"><a href="#1、硬盘内存基本概念" class="headerlink" title="1、硬盘内存基本概念"></a>1、硬盘内存基本概念</h1><h2 id="1-1-什么是虚拟内存"><a href="#1-1-什么是虚拟内存" class="headerlink" title="1.1 什么是虚拟内存"></a>1.1 什么是虚拟内存</h2><blockquote><p>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。目前，大多数操作系统都使用了虚拟内存，如Windows家族的“虚拟内存”；Linux的“交换空间”等。</p></blockquote><p>这么专业的解释对于大家来说估计是有点难理解的，那么小七简单地来说一下：</p><p><strong>小七注：虚拟内存就是在硬盘中“割了一块地”当作内存用。是很典型的内存不够，硬盘来凑的行为。</strong></p><p>再来简单地解释一下内存和硬盘：</p><p>出于成本和技术的考虑，电脑的存储空间其实是分为两种的，也就是我们常说的内存（RAM）和硬盘（ROM）。<strong>两者有一个很重要的区别就是，内存是断电不保存数据，而硬盘是断电可以保存数据。</strong>因此，我们的需要长期保存的数据，比如各种照片视频游戏，都是存储在硬盘当中。</p><p>那么我们的电脑和手机在处理任务的时候，数据的是怎么流通的呢？前面我们说过了，数据是存储在硬盘里面，但是处理数据的是处理器，因此这里就有一个过渡的介质，也就是内存。</p><p><strong>原理大概是这样：硬盘→内存→CPU</strong></p><p>再来看一下更深一点的解释。</p><h2 id="1-2-内存（RAM）"><a href="#1-2-内存（RAM）" class="headerlink" title="1.2 内存（RAM）"></a>1.2 内存（RAM）</h2><p><strong>RAM的全称是Random Access Memory，中文名是随机存取存储器，我们日常称之为运行内存。</strong>也就是说，它是不能够断电保存数据的，主要是在我们的电子产品工作的时候，将需要调用的文件预先从ROM中读取出来，放入到RAM中（因为一般来说RAM的读写速度要比ROM快），以便于我们的CPU/GPU或者是SoC等调用。</p><h2 id="1-3-硬盘（ROM）"><a href="#1-3-硬盘（ROM）" class="headerlink" title="1.3 硬盘（ROM）"></a>1.3 硬盘（ROM）</h2><p><strong>ROM的全称是Read-Only Memory，中文名是只读内存，就是我们平时说的手机存储空间（用来放音乐图片视频等等的那个），电脑硬盘等等。</strong>也就是说，它是可以断电保存数据，主要是用来长期存储数据的。</p><h1 id="2、虚拟内存为何而生"><a href="#2、虚拟内存为何而生" class="headerlink" title="2、虚拟内存为何而生"></a>2、虚拟内存为何而生</h1><p>在电脑刚刚开始普及的时候，内存还没有我们现在那么大（稍微旧一点的电脑会是2G，现在的新电脑基本4G/8G起步，一些高端点的游戏本则是16G/32G/64G，土豪一般都是128G起步），内存如果不够，在运行一些对内存需求很“旺盛”的程序的时候，电脑就会吃不消，于是机智的程序猿就想到了用硬盘来当“替补“，<strong>也就是说：内存不够，硬盘来凑。</strong></p><p>这样一来，虽然解决了内存大小不够用的问题，但是却没有解决另外一个问题，就是速度。<strong>众所周知，内存的读写速度要远高于硬盘（即便是现在已经普及的SSD也是如此），那么在设置电脑的虚拟内存的时候，如果设置过小，可能会不够用，如果设置过大，则会拖低电脑的运行速度。</strong></p><blockquote><p>所以合理设置虚拟内存，也是一门“艺术”。</p></blockquote><h1 id="3、合理设置虚拟内存"><a href="#3、合理设置虚拟内存" class="headerlink" title="3、合理设置虚拟内存"></a>3、合理设置虚拟内存</h1><h2 id="3-1-找到虚拟内存设置页面"><a href="#3-1-找到虚拟内存设置页面" class="headerlink" title="3.1 找到虚拟内存设置页面"></a>3.1 找到虚拟内存设置页面</h2><p>①右键此电脑，点击属性；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2801%29.jpg"></p><p>②点击左边的高级系统设置；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2802%29.jpg"></p><p>③点击高级，找到性能，点击设置；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2803%29.jpg"></p><p>④继续找到高级，找到虚拟内存，点击更改；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2804%29.jpg"></p><blockquote><p>小七注：虚拟内存会以一个或者多个隐藏文件pagefile.sys的形式存在于硬盘中，因此也叫做分页文件。</p></blockquote><h2 id="3-2-设置虚拟内存的三种情况"><a href="#3-2-设置虚拟内存的三种情况" class="headerlink" title="3.2 设置虚拟内存的三种情况"></a>3.2 设置虚拟内存的三种情况</h2><p>第一种：系统自动设置，如下图中的自动管理所有驱动器的分页文件大小；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2805%29.jpg"></p><p>第二种：手动设置最大值和最小值，如下图中的自定义大小；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2806%29.jpg"></p><p>第三种：关闭虚拟内存，如下图的无分页文件；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2807%29.jpg"></p><h2 id="3-3-手动设置虚拟内存大小"><a href="#3-3-手动设置虚拟内存大小" class="headerlink" title="3.3 手动设置虚拟内存大小"></a>3.3 手动设置虚拟内存大小</h2><p>①如果我们需要手动设置虚拟内存的大小，则取消勾选自动管理所有驱动器的分页文件大小，然后点击自定义大小；</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.jpg"></p><p><strong>填写好数值之后，我们要点击下方的设置，这一点很重要，不点击设置是不会保存你的更改的。</strong></p><blockquote><p>小七注：<br>在驱动器这一栏里面，我们可以选择设置虚拟内存所占用的硬盘空间位于哪一个分区。由于小七的电脑只有C盘一个盘，因此无法给大家做示范。有需要的同学可以将虚拟内存设置在C盘之外的其他盘。</p></blockquote><p><strong>一般来说，本身内存够用的情况下虚拟内存不宜设置过大。</strong></p><p>②然后我们点击确定，接着重启计算机即可。</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2808%29.jpg"></p><h2 id="3-4-设置前后对比"><a href="#3-4-设置前后对比" class="headerlink" title="3.4 设置前后对比"></a>3.4 设置前后对比</h2><p>最后小七附上两张禁用虚拟内存和设置虚拟内存的硬盘空间差距的对比的图片。</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2809%29.jpg"></p><p>▲禁用虚拟内存时的可用硬盘空间为44.8G</p><p><img src="https://resource.tinychen.com/%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%2810%29.jpg"></p><p>▲启用后变为40.7G（差距可忽略）</p><p><strong>最后小七不得不提一下，尽管现在内存的价格飞涨，但是想要解决内存不够用的问题，靠虚拟内存是不实际的，最好的办法还是直接买一根内存加上。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虚拟内存，分页文件，交换空间等等，它们本质上都是一个东西。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>CHKDSK使用方法</title>
    <link href="https://tinychen.com/20170503-chkdsk/"/>
    <id>https://tinychen.com/20170503-chkdsk/</id>
    <published>2017-05-03T07:00:00.000Z</published>
    <updated>2017-05-03T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面小七给童鞋们介绍了关闭硬盘开机自检的方法，那么遇到一些特殊情况，需要手动检查硬盘的健康状况，有没有一些简单的方法呢？</p><p>那么在这里小七给童鞋们介绍一下Windows自带的硬盘检测和修复工具CHKDSK。</p><span id="more"></span><h1 id="1、CHKDSK是什么？"><a href="#1、CHKDSK是什么？" class="headerlink" title="1、CHKDSK是什么？"></a>1、CHKDSK是什么？</h1><p><strong>CHKDSK，就是CHECK DISK的缩写，中文名就是磁盘检查。</strong></p><p>这个工具是Windows系统中自带的一个简单实用的硬盘检错和修复工具，用于验证文件系统的逻辑完整性。</p><p>如果 CHKDSK 在文件系统数据中发现存在逻辑不一致性，CHKDSK 将执行可修复该文件系统数据的操作（前提是这些数据未处于只读模式）。</p><p><strong>小七注：</strong>只读模式即只能对文件进行读取操作而无法对其进行修改。</p><h1 id="2、如何使用CHKDSK检测磁盘？"><a href="#2、如何使用CHKDSK检测磁盘？" class="headerlink" title="2、如何使用CHKDSK检测磁盘？"></a>2、如何使用CHKDSK检测磁盘？</h1><p><strong>注意事项</strong></p><p><strong>①不要中断CHKDSK的运行</strong></p><p>原因很简单：医生在给病人做手术的时候不能被中断。CHKDSK在运行过程中，视磁盘的情况不同，所需时间长短也可能会有很大的差异，因此请保持耐心。</p><p><strong>②如果需要修复磁盘错误，确保被修复的磁盘没有文件被打开</strong></p><p>如果有文件被打开了，在修复之前CHKDSK会报错。因此如果不能确定是什么文件被打开，最好进入DOS环境操作。</p><h1 id="3、步骤如下"><a href="#3、步骤如下" class="headerlink" title="3、步骤如下"></a>3、步骤如下</h1><h2 id="3-1-以系统管理员身份运行CMD"><a href="#3-1-以系统管理员身份运行CMD" class="headerlink" title="3.1 以系统管理员身份运行CMD"></a>3.1 以系统管理员身份运行CMD</h2><p>由于对硬盘的检测操作需要系统管理员的权限，而一般在运行窗口中运行CMD是没有系统管理员权限的。<br>因此我们需要在这个目录下找到CMD，并且将他发送到桌面快捷方式以便于操作，<strong>目录：C:\Windows\System32</strong>。</p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2801%29.jpg"></p><p><strong>运行的时候，不要直接双击运行，右键菜单点击以管理员身份运行。</strong></p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2802%29.jpg"></p><h2 id="3-2-输入命令"><a href="#3-2-输入命令" class="headerlink" title="3.2 输入命令"></a>3.2 输入命令</h2><p><strong>①直接输入</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">chkdsk X：/f<br></code></pre></div></td></tr></table></figure><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2803%29.jpg"></p><p><strong>小七注：</strong><br>X为所需要检测修复的硬盘盘符，chkdsk和盘符X之间有一个空格，其余均无空格，所有符号请在英文半角下输入，也就是使用英文键盘，不要使用中文输入法。</p><p><strong>②直接按下回车，即会自动开始检测</strong><br>如果检测出磁盘错误，会自动修复(一般修复分为三个阶段），如果没有检测出问题，则如下图：（图中的D盘是小七的一个U盘）</p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2804%29.jpg"></p><h2 id="3-3-如何检测系统盘？"><a href="#3-3-如何检测系统盘？" class="headerlink" title="3.3 如何检测系统盘？"></a>3.3 如何检测系统盘？</h2><p>特别的，当你检测的是系统盘C盘时，由于此时正处于操作系统界面下，无法进行检测操作，所以询问你是否在下次启动系统时进行检测。</p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2805%29.jpg"></p><p>输入Y后回车，然后重启即可。</p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2806%29.jpg"></p><h1 id="4、什么情况下需要用到CHKDSK？"><a href="#4、什么情况下需要用到CHKDSK？" class="headerlink" title="4、什么情况下需要用到CHKDSK？"></a>4、什么情况下需要用到CHKDSK？</h1><p>由于情况较多，下面只列举三种比较常见的情况。</p><h2 id="4-1-系统直接提醒"><a href="#4-1-系统直接提醒" class="headerlink" title="4.1 系统直接提醒"></a>4.1 系统直接提醒</h2><p>系统直接提醒你的时候，这种情况会比较严重，如果你的系统某个或者某些文件出现了问题，系统弹出提示框让你运行chkdsk工具进行检测，那么就可以照着上面的教程进行操作</p><h2 id="4-2-移动设备提示有错误"><a href="#4-2-移动设备提示有错误" class="headerlink" title="4.2 移动设备提示有错误"></a>4.2 移动设备提示有错误</h2><p>移动设备（U盘，移动硬盘等）插入电脑时提示有出现错误，系统询问你是否需要扫描并修复时，也可以使用这个，当然你也可以直接让系统来执行；</p><h2 id="4-3-非法操作之后"><a href="#4-3-非法操作之后" class="headerlink" title="4.3 非法操作之后"></a>4.3 非法操作之后</h2><p>你的硬盘关闭了开机自检而且你对系统进行了非法操作（强制关机等）的时候，系统盘既有可能会出现错误或者是冗余文件。<br>这个时候运行chkdsk工具，则会帮你处理掉这些冗余文件，所以有些童鞋在有时候在运行完chkdsk工具后会发现自己的硬盘的可用空间增多了，就是这个原因</p><h1 id="5、CHKDSK全部指令"><a href="#5、CHKDSK全部指令" class="headerlink" title="5、CHKDSK全部指令"></a>5、CHKDSK全部指令</h1><p>最后放出CHKDSK的全部命令，有兴趣的童鞋可以研究研究。</p><p><img src="https://resource.tinychen.com/CHKDSK%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2807%29.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面小七给童鞋们介绍了关闭硬盘开机自检的方法，那么遇到一些特殊情况，需要手动检查硬盘的健康状况，有没有一些简单的方法呢？&lt;/p&gt;
&lt;p&gt;那么在这里小七给童鞋们介绍一下Windows自带的硬盘检测和修复工具CHKDSK。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>关闭硬盘开机自检</title>
    <link href="https://tinychen.com/20170502-disable-disk-onboot-check/"/>
    <id>https://tinychen.com/20170502-disable-disk-onboot-check/</id>
    <published>2017-05-02T07:00:00.000Z</published>
    <updated>2017-05-02T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信有很多电脑都可能会出现开机硬盘自检的情况，那么其实对于大部分同学来说，开机自检有没有必要呢？</p><span id="more"></span><h1 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h1><p>其实，开机硬盘自检的存在是有一定的道理的，因为很多电脑的硬盘（尤其是机械硬盘）可能由于使用者的一些不当操作，而产生各种各样奇奇怪怪的问题。</p><p>这个时候，硬盘的开机自检就能够发挥作用，在一定程度上缓解这些问题，或者说是，预防这些问题。</p><p><strong>因此小七的建议是：硬盘自检，能不关就不关。</strong></p><p>小七注：奇奇怪怪的问题包括但不限于：系统文件丢失、引导文件丢失、硬盘产生坏道等等。硬盘坏道是物理级别的损伤，只能屏蔽坏道或者是更换硬盘，无法修复。</p><p>但是总会因为各种需要而要关闭硬盘自检，<strong>小七在这里给大家分享一个通过修改注册表来关闭硬盘开机自检的方法。</strong></p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2801%29.jpg"></p><p>▲如图所示为戴尔笔记本的开机硬盘自检</p><h1 id="2、打开注册表编辑器"><a href="#2、打开注册表编辑器" class="headerlink" title="2、打开注册表编辑器"></a>2、打开注册表编辑器</h1><p>①在任意情况下，我们直接<strong>同时按下windows键（开始菜单键）和字母键R</strong>，此时会出现一个运行窗口</p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2802%29.jpg"></p><p>②然后我们在里面输入regedit（如上图所示），回车即可打开注册表编辑器（如下图所示）</p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2803%29.jpg"></p><p><strong>小七注：</strong></p><p>注册表编辑器中包含有全部系统设置及软件的有关信息，在不确定的情况下，请不要随意进行更改，注册表一旦损坏且如无事先备份，后果不堪设想</p><p><strong>Win+R是系统级别的快捷键，</strong>可以直接打开运行窗口，因此无论你处于任何应用窗口都可以直接使用此快捷键。</p><h1 id="3、定位到-BootExecute"><a href="#3、定位到-BootExecute" class="headerlink" title="3、定位到 BootExecute"></a>3、定位到 BootExecute</h1><p>①根据这个地址，找到Session Manager中的BootExecute</p><p><strong>HKEY_LOCAL_MACHINE → SYSTEM → ControlSet001 → Control → Session Manager</strong></p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2804%29.jpg"></p><p>②如下图所示，右键BootExecute，点击修改</p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2805%29.jpg"></p><h1 id="4、清空数值"><a href="#4、清空数值" class="headerlink" title="4、清空数值"></a>4、清空数值</h1><p>①清空里面的数值autocheck autochk *</p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2806%29.jpg"></p><p>②点击确定</p><p><img src="https://resource.tinychen.com/%E5%85%B3%E9%97%AD%E7%A1%AC%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E6%A3%80%2807%29.jpg"></p><p>*<em>到这里，硬盘自检就已经被关闭了，如果想要重新开启，只需要将数值重新修改为autocheck autochk <em>即可。</em></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相信有很多电脑都可能会出现开机硬盘自检的情况，那么其实对于大部分同学来说，开机自检有没有必要呢？&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>FAT32无损转换为NTFS</title>
    <link href="https://tinychen.com/20170418-fat32-to-ntfs/"/>
    <id>https://tinychen.com/20170418-fat32-to-ntfs/</id>
    <published>2017-04-18T07:00:00.000Z</published>
    <updated>2017-04-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家分享一个现在可能不太会用到的小技巧，将FAT32的磁盘无损转换为NTFS格式。</p><p>为什么说不太会用到呢，因为fat32格式现在已经很少有人在用，基本要被淘汰了。当然，不排除会有这种情况出现，因此小七还是决定分享一下解决方法。</p><span id="more"></span><p><strong>下面进入正文。</strong></p><h1 id="1、示范"><a href="#1、示范" class="headerlink" title="1、示范"></a>1、示范</h1><p>下图是小七自己的一个64G的U盘，由于小七自己的粗心，格式化的时候选用了FAT32格式，这种格式是比较旧的一种文件系统格式，最明显的缺点就是：<br><strong>即使你的磁盘有大于4G的空余空间，也无法向里面复制大于4G的文件。</strong></p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2801%29.jpg"></p><p>▲如图，小七的U盘有将近20G的空余空间。</p><p>下面复制一个4.02G的文件。</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2802%29.jpg"></p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2803%29.jpg"></p><p>这是为什么呢？原理其实有点复杂，但是罪魁祸首就是这个FAT32的文件系统。</p><p><strong>小七的建议是，如果你的磁盘是U盘，那么先把里面的数据备份出来，然后格式化，选择文件系统为exFAT格式，就可以解决问题。</strong></p><blockquote><p>温馨提示：NTFS格式的文件系统由于其原理的特殊性，会对U盘产生一定的损伤，因此不建议对U盘使用NTFS格式。</p></blockquote><h1 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h1><h2 id="2-1-U盘"><a href="#2-1-U盘" class="headerlink" title="2.1 U盘"></a>2.1 U盘</h2><p>** 方法如下： **<br>①    右键点击U盘，选择格式化；</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2804%29.jpg"></p><p>②    在文件系统中选择exFAT，然后选中快速格式化，接着点击确定即可。</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2805%29.jpg"></p><h2 id="2-2-硬盘"><a href="#2-2-硬盘" class="headerlink" title="2.2 硬盘"></a>2.2 硬盘</h2><p>如果你的磁盘是固态硬盘或者是机械硬盘，那么小七建议可以使用下面这种方法，无损转换为NTFS，方便快捷。<br>** 方法如下： **<br>①    同时按下win+R键，输入CMD（不区分大小写）；</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2806%29.jpg"></p><p>②    我们在CMD窗口中输入下列命令：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">convert X:/FS:NTFS <br></code></pre></div></td></tr></table></figure><p>（其中X为所需转换的磁盘盘符，符号需要在英文半角下输入，不区分大小写）<br>然后系统会自动检测磁盘是否存在问题并且开始转换文件系统格式</p><p>③    当然，如果你像小七这样出了错误，不要急，可能是磁盘有些小问题，我们再次使用chkdsk工具对磁盘进行检测和修复（<a href="https://tinychen.com/20170503-chkdsk/">chkdsk工具的使用方法可以点这里</a>）</p><p>④    最后我们再次输入下面的命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">convert X:/FS:NTFS <br></code></pre></div></td></tr></table></figure><p>就成功地转换文件系统格式为NTFS了。</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2807%29.jpg"></p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2808%29.jpg"></p><p><strong>▲注意！小七此处将U盘转换为NTFS是会损伤U盘的，在这里仅仅是作为示范。</strong></p><p>当然，最后我们再来试一下能不能复制大于4G的单个文件。</p><p><img src="https://resource.tinychen.com/FAT32%E6%97%A0%E6%8D%9F%E8%BD%AC%E4%B8%BANTFS%2809%29.jpg"></p><p>▲成了！</p><p>最后小七说一下，很多时候电子设备出了问题，单一的教程或方法可能并不适用，这就很可能会用到多种方法或者是稍微复杂一点的知识，这个时候小七希望童鞋们不要气馁，多尝试。毕竟吃一堑长一智嘛。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天给大家分享一个现在可能不太会用到的小技巧，将FAT32的磁盘无损转换为NTFS格式。&lt;/p&gt;
&lt;p&gt;为什么说不太会用到呢，因为fat32格式现在已经很少有人在用，基本要被淘汰了。当然，不排除会有这种情况出现，因此小七还是决定分享一下解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
    <category term="hardware" scheme="https://tinychen.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>win10时间栏显示秒</title>
    <link href="https://tinychen.com/20170414-win10-show-seconds/"/>
    <id>https://tinychen.com/20170414-win10-show-seconds/</id>
    <published>2017-04-14T07:00:00.000Z</published>
    <updated>2017-04-14T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于Win10来说，直接点开任务栏的时间就可以看到具体的秒，但是有没有什么办法让秒这一个选项常驻在任务栏的时间里面，不用点开就能查看呢？</p><p>答案是肯定的，我们只需要在注册表中进行简单地操作就可以实现这个功能啦。</p><span id="more"></span><h1 id="1、BAT文件"><a href="#1、BAT文件" class="headerlink" title="1、BAT文件"></a>1、BAT文件</h1><p>开始之前，我们先简单地说明一下这个bat文件。</p><p>bat文件是DOS下的批处理文件，是一种文本文件（可以使用记事本编辑）。它能够将你写好的命令并存储在里面的命令直接调用cmd.exe这个程序帮你操作，省去了你重复操作的麻烦。</p><p><strong>方法如下：</strong></p><p>我们打开windows里面的记事本（也可以使用notepad++这款软件，如果已经安装了的话），在里面输入下列代码，然后右键另存为bat文件，运行的时候要以管理员身份运行，否则可能不起作用。</p><h1 id="2、显示秒"><a href="#2、显示秒" class="headerlink" title="2、显示秒"></a>2、显示秒</h1><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>reg add &quot;HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced&quot; /v ShowSecondsInSystemClock /t REG_DWORD /d <span class="hljs-number">1</span> /f<br><span class="hljs-built_in">TASKKILL</span> /F /IM explorer.exe<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span> 重启explorer.exe<br><span class="hljs-built_in">START</span> <span class="hljs-variable">%windir%</span>\explorer.exe<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">pause</span><br></code></pre></div></td></tr></table></figure><h1 id="3、删除秒"><a href="#3、删除秒" class="headerlink" title="3、删除秒"></a>3、删除秒</h1><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>reg delete &quot;HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced&quot; /v ShowSecondsInSystemClock /t REG_DWORD /d <span class="hljs-number">1</span> /f<br><span class="hljs-built_in">TASKKILL</span> /F /IM explorer.exe<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span> 重启explorer.exe<br><span class="hljs-built_in">START</span> <span class="hljs-variable">%windir%</span>\explorer.exe<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">pause</span><br></code></pre></div></td></tr></table></figure><h1 id="4、展示"><a href="#4、展示" class="headerlink" title="4、展示"></a>4、展示</h1><p>最后上一张效果图</p><p><img src="https://resource.tinychen.com/Win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E6%98%BE%E7%A4%BA%E7%A7%92%2809%29.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于Win10来说，直接点开任务栏的时间就可以看到具体的秒，但是有没有什么办法让秒这一个选项常驻在任务栏的时间里面，不用点开就能查看呢？&lt;/p&gt;
&lt;p&gt;答案是肯定的，我们只需要在注册表中进行简单地操作就可以实现这个功能啦。&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://tinychen.com/categories/others/"/>
    
    
    <category term="windows" scheme="https://tinychen.com/tags/windows/"/>
    
  </entry>
  
</feed>
